   1              		.cpu arm7tdmi
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 18, 4
  11              		.file	"adc.c"
  21              	.Ltext0:
  22              		.file 1 "../src/adc.c"
 1923              	state:
 1924 0000 00       		.space	1
 1925              		.text
 1926              		.align	2
 1927              		.global	adc_init
 1929              	adc_init:
 1930              	.LFB0:
   1:../src/adc.c  **** #include <s3c44b0x.h>
   2:../src/adc.c  **** #include <s3cev40.h>
   3:../src/adc.c  **** #include <timers.h>
   4:../src/adc.c  **** #include <adc.h>
   5:../src/adc.c  **** 
   6:../src/adc.c  **** static uint8 state;
   7:../src/adc.c  **** 
   8:../src/adc.c  **** extern void isr_ADC_dummy( void );
   9:../src/adc.c  **** 
  10:../src/adc.c  **** void adc_init( void )
  11:../src/adc.c  **** {
 1931              		.loc 1 11 0
 1932              		.cfi_startproc
 1933              		@ Function supports interworking.
 1934              		@ args = 0, pretend = 0, frame = 0
 1935              		@ frame_needed = 1, uses_anonymous_args = 0
 1936 0000 0DC0A0E1 		mov	ip, sp
 1937              	.LCFI0:
 1938              		.cfi_def_cfa_register 12
 1939 0004 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 1940 0008 04B04CE2 		sub	fp, ip, #4
 1941              		.cfi_offset 14, -8
 1942              		.cfi_offset 13, -12
 1943              		.cfi_offset 11, -16
 1944              	.LCFI1:
 1945              		.cfi_def_cfa 11, 4
  12:../src/adc.c  ****     ADCPSR = 19;
 1946              		.loc 1 12 0
 1947 000c 14309FE5 		ldr	r3, .L2
 1948 0010 1320A0E3 		mov	r2, #19
 1949 0014 002083E5 		str	r2, [r3, #0]
  13:../src/adc.c  ****     adc_off();
 1950              		.loc 1 13 0
 1951 0018 FEFFFFEB 		bl	adc_off
  14:../src/adc.c  **** }
 1952              		.loc 1 14 0
 1953 001c 0CD04BE2 		sub	sp, fp, #12
 1954 0020 00689DE8 		ldmfd	sp, {fp, sp, lr}
 1955 0024 1EFF2FE1 		bx	lr
 1956              	.L3:
 1957              		.align	2
 1958              	.L2:
 1959 0028 0400D401 		.word	30670852
 1960              		.cfi_endproc
 1961              	.LFE0:
 1963              		.align	2
 1964              		.global	adc_on
 1966              	adc_on:
 1967              	.LFB1:
  15:../src/adc.c  **** 
  16:../src/adc.c  **** void adc_on( void )
  17:../src/adc.c  **** {
 1968              		.loc 1 17 0
 1969              		.cfi_startproc
 1970              		@ Function supports interworking.
 1971              		@ args = 0, pretend = 0, frame = 0
 1972              		@ frame_needed = 1, uses_anonymous_args = 0
 1973 002c 0DC0A0E1 		mov	ip, sp
 1974              	.LCFI2:
 1975              		.cfi_def_cfa_register 12
 1976 0030 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 1977 0034 04B04CE2 		sub	fp, ip, #4
 1978              		.cfi_offset 14, -8
 1979              		.cfi_offset 13, -12
 1980              		.cfi_offset 11, -16
 1981              	.LCFI3:
 1982              		.cfi_def_cfa 11, 4
  18:../src/adc.c  ****     ADCCON &= (ADCCON & ~(1 << 5));
 1983              		.loc 1 18 0
 1984 0038 7537A0E3 		mov	r3, #30670848
 1985 003c 7527A0E3 		mov	r2, #30670848
 1986 0040 001092E5 		ldr	r1, [r2, #0]
 1987 0044 7527A0E3 		mov	r2, #30670848
 1988 0048 002092E5 		ldr	r2, [r2, #0]
 1989 004c 022001E0 		and	r2, r1, r2
 1990 0050 2020C2E3 		bic	r2, r2, #32
 1991 0054 002083E5 		str	r2, [r3, #0]
  19:../src/adc.c  ****     sw_delay_ms( 10 );
 1992              		.loc 1 19 0
 1993 0058 0A00A0E3 		mov	r0, #10
 1994 005c FEFFFFEB 		bl	sw_delay_ms
  20:../src/adc.c  ****     state = ON;
 1995              		.loc 1 20 0
 1996 0060 10309FE5 		ldr	r3, .L5
 1997 0064 0120A0E3 		mov	r2, #1
 1998 0068 0020C3E5 		strb	r2, [r3, #0]
  21:../src/adc.c  **** }
 1999              		.loc 1 21 0
 2000 006c 0CD04BE2 		sub	sp, fp, #12
 2001 0070 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2002 0074 1EFF2FE1 		bx	lr
 2003              	.L6:
 2004              		.align	2
 2005              	.L5:
 2006 0078 00000000 		.word	state
 2007              		.cfi_endproc
 2008              	.LFE1:
 2010              		.align	2
 2011              		.global	adc_off
 2013              	adc_off:
 2014              	.LFB2:
  22:../src/adc.c  **** 
  23:../src/adc.c  **** void adc_off( void )
  24:../src/adc.c  **** {
 2015              		.loc 1 24 0
 2016              		.cfi_startproc
 2017              		@ Function supports interworking.
 2018              		@ args = 0, pretend = 0, frame = 0
 2019              		@ frame_needed = 1, uses_anonymous_args = 0
 2020 007c 0DC0A0E1 		mov	ip, sp
 2021              	.LCFI4:
 2022              		.cfi_def_cfa_register 12
 2023 0080 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2024 0084 04B04CE2 		sub	fp, ip, #4
 2025              		.cfi_offset 14, -8
 2026              		.cfi_offset 13, -12
 2027              		.cfi_offset 11, -16
 2028              	.LCFI5:
 2029              		.cfi_def_cfa 11, 4
  25:../src/adc.c  **** 	ADCCON |= (1 << 5);
 2030              		.loc 1 25 0
 2031 0088 7537A0E3 		mov	r3, #30670848
 2032 008c 7527A0E3 		mov	r2, #30670848
 2033 0090 002092E5 		ldr	r2, [r2, #0]
 2034 0094 202082E3 		orr	r2, r2, #32
 2035 0098 002083E5 		str	r2, [r3, #0]
  26:../src/adc.c  **** 	sw_delay_ms( 10 );
 2036              		.loc 1 26 0
 2037 009c 0A00A0E3 		mov	r0, #10
 2038 00a0 FEFFFFEB 		bl	sw_delay_ms
  27:../src/adc.c  **** 	state = OFF;
 2039              		.loc 1 27 0
 2040 00a4 10309FE5 		ldr	r3, .L8
 2041 00a8 0020A0E3 		mov	r2, #0
 2042 00ac 0020C3E5 		strb	r2, [r3, #0]
  28:../src/adc.c  **** }
 2043              		.loc 1 28 0
 2044 00b0 0CD04BE2 		sub	sp, fp, #12
 2045 00b4 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2046 00b8 1EFF2FE1 		bx	lr
 2047              	.L9:
 2048              		.align	2
 2049              	.L8:
 2050 00bc 00000000 		.word	state
 2051              		.cfi_endproc
 2052              	.LFE2:
 2054              		.align	2
 2055              		.global	adc_status
 2057              	adc_status:
 2058              	.LFB3:
  29:../src/adc.c  **** 
  30:../src/adc.c  **** uint8 adc_status( void )
  31:../src/adc.c  **** {
 2059              		.loc 1 31 0
 2060              		.cfi_startproc
 2061              		@ Function supports interworking.
 2062              		@ args = 0, pretend = 0, frame = 0
 2063              		@ frame_needed = 1, uses_anonymous_args = 0
 2064 00c0 0DC0A0E1 		mov	ip, sp
 2065              	.LCFI6:
 2066              		.cfi_def_cfa_register 12
 2067 00c4 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2068 00c8 04B04CE2 		sub	fp, ip, #4
 2069              		.cfi_offset 14, -8
 2070              		.cfi_offset 13, -12
 2071              		.cfi_offset 11, -16
 2072              	.LCFI7:
 2073              		.cfi_def_cfa 11, 4
  32:../src/adc.c  ****     return state;
 2074              		.loc 1 32 0
 2075 00cc 10309FE5 		ldr	r3, .L11
 2076 00d0 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
  33:../src/adc.c  **** }
 2077              		.loc 1 33 0
 2078 00d4 0300A0E1 		mov	r0, r3
 2079 00d8 0CD04BE2 		sub	sp, fp, #12
 2080 00dc 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2081 00e0 1EFF2FE1 		bx	lr
 2082              	.L12:
 2083              		.align	2
 2084              	.L11:
 2085 00e4 00000000 		.word	state
 2086              		.cfi_endproc
 2087              	.LFE3:
 2089              		.align	2
 2090              		.global	adc_getSample
 2092              	adc_getSample:
 2093              	.LFB4:
  34:../src/adc.c  **** 
  35:../src/adc.c  **** uint16 adc_getSample( uint8 ch )
  36:../src/adc.c  **** {
 2094              		.loc 1 36 0
 2095              		.cfi_startproc
 2096              		@ Function supports interworking.
 2097              		@ args = 0, pretend = 0, frame = 16
 2098              		@ frame_needed = 1, uses_anonymous_args = 0
 2099 00e8 0DC0A0E1 		mov	ip, sp
 2100              	.LCFI8:
 2101              		.cfi_def_cfa_register 12
 2102 00ec 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2103 00f0 04B04CE2 		sub	fp, ip, #4
 2104              		.cfi_offset 14, -8
 2105              		.cfi_offset 13, -12
 2106              		.cfi_offset 11, -16
 2107              	.LCFI9:
 2108              		.cfi_def_cfa 11, 4
 2109 00f4 10D04DE2 		sub	sp, sp, #16
 2110 00f8 0030A0E1 		mov	r3, r0
 2111 00fc 15304BE5 		strb	r3, [fp, #-21]
  37:../src/adc.c  ****     uint32 sample;
  38:../src/adc.c  ****     uint8 i;
  39:../src/adc.c  ****     
  40:../src/adc.c  ****     ADCCON = (ch << 2);
 2112              		.loc 1 40 0
 2113 0100 7537A0E3 		mov	r3, #30670848
 2114 0104 15205BE5 		ldrb	r2, [fp, #-21]	@ zero_extendqisi2
 2115 0108 0221A0E1 		mov	r2, r2, asl #2
 2116 010c 002083E5 		str	r2, [r3, #0]
  41:../src/adc.c  ****     sw_delay_ms( 10 );
 2117              		.loc 1 41 0
 2118 0110 0A00A0E3 		mov	r0, #10
 2119 0114 FEFFFFEB 		bl	sw_delay_ms
  42:../src/adc.c  ****     for( i=0, sample=0; i<5; i++ )
 2120              		.loc 1 42 0
 2121 0118 0030A0E3 		mov	r3, #0
 2122 011c 11304BE5 		strb	r3, [fp, #-17]
 2123 0120 0030A0E3 		mov	r3, #0
 2124 0124 10300BE5 		str	r3, [fp, #-16]
 2125 0128 1B0000EA 		b	.L14
 2126              	.L17:
  43:../src/adc.c  ****     {
  44:../src/adc.c  ****         ADCCON |= (1 << 0);
 2127              		.loc 1 44 0
 2128 012c 7537A0E3 		mov	r3, #30670848
 2129 0130 7527A0E3 		mov	r2, #30670848
 2130 0134 002092E5 		ldr	r2, [r2, #0]
 2131 0138 012082E3 		orr	r2, r2, #1
 2132 013c 002083E5 		str	r2, [r3, #0]
  45:../src/adc.c  ****         while( (ADCCON & 0x1) == 0x1 );
 2133              		.loc 1 45 0
 2134 0140 0000A0E1 		mov	r0, r0	@ nop
 2135              	.L15:
 2136              		.loc 1 45 0 is_stmt 0 discriminator 1
 2137 0144 7537A0E3 		mov	r3, #30670848
 2138 0148 003093E5 		ldr	r3, [r3, #0]
 2139 014c 013003E2 		and	r3, r3, #1
 2140 0150 FF3003E2 		and	r3, r3, #255
 2141 0154 000053E3 		cmp	r3, #0
 2142 0158 F9FFFF1A 		bne	.L15
  46:../src/adc.c  ****         while( (ADCCON & (1 << 6)) == 0x0 );
 2143              		.loc 1 46 0 is_stmt 1
 2144 015c 0000A0E1 		mov	r0, r0	@ nop
 2145              	.L16:
 2146              		.loc 1 46 0 is_stmt 0 discriminator 1
 2147 0160 7537A0E3 		mov	r3, #30670848
 2148 0164 003093E5 		ldr	r3, [r3, #0]
 2149 0168 403003E2 		and	r3, r3, #64
 2150 016c 000053E3 		cmp	r3, #0
 2151 0170 FAFFFF0A 		beq	.L16
  47:../src/adc.c  ****         sample += ADCDAT & 0x3ff;
 2152              		.loc 1 47 0 is_stmt 1
 2153 0174 54309FE5 		ldr	r3, .L18
 2154 0178 003093E5 		ldr	r3, [r3, #0]
 2155 017c 033BA0E1 		mov	r3, r3, asl #22
 2156 0180 233BA0E1 		mov	r3, r3, lsr #22
 2157 0184 10201BE5 		ldr	r2, [fp, #-16]
 2158 0188 033082E0 		add	r3, r2, r3
 2159 018c 10300BE5 		str	r3, [fp, #-16]
  42:../src/adc.c  ****     for( i=0, sample=0; i<5; i++ )
 2160              		.loc 1 42 0
 2161 0190 11305BE5 		ldrb	r3, [fp, #-17]
 2162 0194 013083E2 		add	r3, r3, #1
 2163 0198 11304BE5 		strb	r3, [fp, #-17]
 2164              	.L14:
  42:../src/adc.c  ****     for( i=0, sample=0; i<5; i++ )
 2165              		.loc 1 42 0 is_stmt 0 discriminator 1
 2166 019c 11305BE5 		ldrb	r3, [fp, #-17]	@ zero_extendqisi2
 2167 01a0 040053E3 		cmp	r3, #4
 2168 01a4 E0FFFF9A 		bls	.L17
  48:../src/adc.c  ****     }
  49:../src/adc.c  ****     return sample / 5;
 2169              		.loc 1 49 0 is_stmt 1
 2170 01a8 10201BE5 		ldr	r2, [fp, #-16]
 2171 01ac 20309FE5 		ldr	r3, .L18+4
 2172 01b0 921383E0 		umull	r1, r3, r2, r3
 2173 01b4 2331A0E1 		mov	r3, r3, lsr #2
 2174 01b8 0338A0E1 		mov	r3, r3, asl #16
 2175 01bc 2338A0E1 		mov	r3, r3, lsr #16
  50:../src/adc.c  **** }
 2176              		.loc 1 50 0
 2177 01c0 0300A0E1 		mov	r0, r3
 2178 01c4 0CD04BE2 		sub	sp, fp, #12
 2179 01c8 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2180 01cc 1EFF2FE1 		bx	lr
 2181              	.L19:
 2182              		.align	2
 2183              	.L18:
 2184 01d0 0800D401 		.word	30670856
 2185 01d4 CDCCCCCC 		.word	-858993459
 2186              		.cfi_endproc
 2187              	.LFE4:
 2189              		.align	2
 2190              		.global	adc_open
 2192              	adc_open:
 2193              	.LFB5:
  51:../src/adc.c  **** 
  52:../src/adc.c  **** void adc_open( void (*isr)(void) )
  53:../src/adc.c  **** {
 2194              		.loc 1 53 0
 2195              		.cfi_startproc
 2196              		@ Function supports interworking.
 2197              		@ args = 0, pretend = 0, frame = 8
 2198              		@ frame_needed = 1, uses_anonymous_args = 0
 2199 01d8 0DC0A0E1 		mov	ip, sp
 2200              	.LCFI10:
 2201              		.cfi_def_cfa_register 12
 2202 01dc 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2203 01e0 04B04CE2 		sub	fp, ip, #4
 2204              		.cfi_offset 14, -8
 2205              		.cfi_offset 13, -12
 2206              		.cfi_offset 11, -16
 2207              	.LCFI11:
 2208              		.cfi_def_cfa 11, 4
 2209 01e4 08D04DE2 		sub	sp, sp, #8
 2210 01e8 10000BE5 		str	r0, [fp, #-16]
  54:../src/adc.c  **** 	pISR_ADC = (uint32) isr;
 2211              		.loc 1 54 0
 2212 01ec 30309FE5 		ldr	r3, .L21
 2213 01f0 10201BE5 		ldr	r2, [fp, #-16]
 2214 01f4 002083E5 		str	r2, [r3, #0]
  55:../src/adc.c  **** 	I_ISPC = BIT_ADC;
 2215              		.loc 1 55 0
 2216 01f8 28309FE5 		ldr	r3, .L21+4
 2217 01fc 0120A0E3 		mov	r2, #1
 2218 0200 002083E5 		str	r2, [r3, #0]
  56:../src/adc.c  **** 	INTMSK &= ~(BIT_GLOBAL | BIT_ADC);
 2219              		.loc 1 56 0
 2220 0204 20309FE5 		ldr	r3, .L21+8
 2221 0208 1C209FE5 		ldr	r2, .L21+8
 2222 020c 002092E5 		ldr	r2, [r2, #0]
 2223 0210 4123C2E3 		bic	r2, r2, #67108865
 2224 0214 002083E5 		str	r2, [r3, #0]
  57:../src/adc.c  **** }
 2225              		.loc 1 57 0
 2226 0218 0CD04BE2 		sub	sp, fp, #12
 2227 021c 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2228 0220 1EFF2FE1 		bx	lr
 2229              	.L22:
 2230              		.align	2
 2231              	.L21:
 2232 0224 20FF7F0C 		.word	209714976
 2233 0228 2400E001 		.word	31457316
 2234 022c 0C00E001 		.word	31457292
 2235              		.cfi_endproc
 2236              	.LFE5:
 2238              		.align	2
 2239              		.global	adc_close
 2241              	adc_close:
 2242              	.LFB6:
  58:../src/adc.c  **** 
  59:../src/adc.c  **** void adc_close( void )
  60:../src/adc.c  **** {
 2243              		.loc 1 60 0
 2244              		.cfi_startproc
 2245              		@ Function supports interworking.
 2246              		@ args = 0, pretend = 0, frame = 0
 2247              		@ frame_needed = 1, uses_anonymous_args = 0
 2248 0230 0DC0A0E1 		mov	ip, sp
 2249              	.LCFI12:
 2250              		.cfi_def_cfa_register 12
 2251 0234 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2252 0238 04B04CE2 		sub	fp, ip, #4
 2253              		.cfi_offset 14, -8
 2254              		.cfi_offset 13, -12
 2255              		.cfi_offset 11, -16
 2256              	.LCFI13:
 2257              		.cfi_def_cfa 11, 4
  61:../src/adc.c  **** 	INTMSK   |= (BIT_GLOBAL | BIT_ADC);
 2258              		.loc 1 61 0
 2259 023c 24309FE5 		ldr	r3, .L24
 2260 0240 20209FE5 		ldr	r2, .L24
 2261 0244 002092E5 		ldr	r2, [r2, #0]
 2262 0248 412382E3 		orr	r2, r2, #67108865
 2263 024c 002083E5 		str	r2, [r3, #0]
  62:../src/adc.c  **** 	pISR_ADC = (uint32)isr_ADC_dummy;
 2264              		.loc 1 62 0
 2265 0250 14309FE5 		ldr	r3, .L24+4
 2266 0254 14209FE5 		ldr	r2, .L24+8
 2267 0258 002083E5 		str	r2, [r3, #0]
  63:../src/adc.c  **** }
 2268              		.loc 1 63 0
 2269 025c 0CD04BE2 		sub	sp, fp, #12
 2270 0260 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2271 0264 1EFF2FE1 		bx	lr
 2272              	.L25:
 2273              		.align	2
 2274              	.L24:
 2275 0268 0C00E001 		.word	31457292
 2276 026c 20FF7F0C 		.word	209714976
 2277 0270 00000000 		.word	isr_ADC_dummy
 2278              		.cfi_endproc
 2279              	.LFE6:
 2281              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 adc.c
C:\Users\Muadi\AppData\Local\Temp\ccukaQeI.s:1923   .bss:00000000 state
C:\Users\Muadi\AppData\Local\Temp\ccukaQeI.s:1924   .bss:00000000 $d
C:\Users\Muadi\AppData\Local\Temp\ccukaQeI.s:1926   .text:00000000 $a
C:\Users\Muadi\AppData\Local\Temp\ccukaQeI.s:1929   .text:00000000 adc_init
C:\Users\Muadi\AppData\Local\Temp\ccukaQeI.s:2013   .text:0000007c adc_off
C:\Users\Muadi\AppData\Local\Temp\ccukaQeI.s:1959   .text:00000028 $d
C:\Users\Muadi\AppData\Local\Temp\ccukaQeI.s:1963   .text:0000002c $a
C:\Users\Muadi\AppData\Local\Temp\ccukaQeI.s:1966   .text:0000002c adc_on
C:\Users\Muadi\AppData\Local\Temp\ccukaQeI.s:2006   .text:00000078 $d
C:\Users\Muadi\AppData\Local\Temp\ccukaQeI.s:2010   .text:0000007c $a
C:\Users\Muadi\AppData\Local\Temp\ccukaQeI.s:2050   .text:000000bc $d
C:\Users\Muadi\AppData\Local\Temp\ccukaQeI.s:2054   .text:000000c0 $a
C:\Users\Muadi\AppData\Local\Temp\ccukaQeI.s:2057   .text:000000c0 adc_status
C:\Users\Muadi\AppData\Local\Temp\ccukaQeI.s:2085   .text:000000e4 $d
C:\Users\Muadi\AppData\Local\Temp\ccukaQeI.s:2089   .text:000000e8 $a
C:\Users\Muadi\AppData\Local\Temp\ccukaQeI.s:2092   .text:000000e8 adc_getSample
C:\Users\Muadi\AppData\Local\Temp\ccukaQeI.s:2184   .text:000001d0 $d
C:\Users\Muadi\AppData\Local\Temp\ccukaQeI.s:2189   .text:000001d8 $a
C:\Users\Muadi\AppData\Local\Temp\ccukaQeI.s:2192   .text:000001d8 adc_open
C:\Users\Muadi\AppData\Local\Temp\ccukaQeI.s:2232   .text:00000224 $d
C:\Users\Muadi\AppData\Local\Temp\ccukaQeI.s:2238   .text:00000230 $a
C:\Users\Muadi\AppData\Local\Temp\ccukaQeI.s:2241   .text:00000230 adc_close
C:\Users\Muadi\AppData\Local\Temp\ccukaQeI.s:2275   .text:00000268 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
sw_delay_ms
isr_ADC_dummy
