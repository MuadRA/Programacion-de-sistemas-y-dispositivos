   1              		.cpu arm7tdmi
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 18, 4
  11              		.file	"lcd.c"
  21              	.Ltext0:
  22              		.file 1 "../src/lcd.c"
 1703              		.align	2
 1704              	lcd_buffer:
 1705 0000 00000000 		.space	38400
 1705      00000000 
 1705      00000000 
 1705      00000000 
 1705      00000000 
 1706              		.text
 1707              		.align	2
 1708              		.global	lcd_init
 1710              	lcd_init:
 1711              	.LFB0:
   1:../src/lcd.c  **** 
   2:../src/lcd.c  **** #include <s3c44b0x.h>
   3:../src/lcd.c  **** #include <lcd.h>
   4:../src/lcd.c  **** 
   5:../src/lcd.c  **** extern uint8 font[];
   6:../src/lcd.c  **** static uint8 lcd_buffer[LCD_BUFFER_SIZE];
   7:../src/lcd.c  **** 
   8:../src/lcd.c  **** //static uint8 state;
   9:../src/lcd.c  **** 
  10:../src/lcd.c  **** void lcd_init( void )
  11:../src/lcd.c  **** {      
 1712              		.loc 1 11 0
 1713              		.cfi_startproc
 1714              		@ Function supports interworking.
 1715              		@ args = 0, pretend = 0, frame = 0
 1716              		@ frame_needed = 1, uses_anonymous_args = 0
 1717 0000 0DC0A0E1 		mov	ip, sp
 1718              	.LCFI0:
 1719              		.cfi_def_cfa_register 12
 1720 0004 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 1721 0008 04B04CE2 		sub	fp, ip, #4
 1722              		.cfi_offset 14, -8
 1723              		.cfi_offset 13, -12
 1724              		.cfi_offset 11, -16
 1725              	.LCFI1:
 1726              		.cfi_def_cfa 11, 4
  12:../src/lcd.c  ****     DITHMODE = 0x12210;
 1727              		.loc 1 12 0
 1728 000c FC309FE5 		ldr	r3, .L2
 1729 0010 FC209FE5 		ldr	r2, .L2+4
 1730 0014 002083E5 		str	r2, [r3, #0]
  13:../src/lcd.c  ****     DP1_2    = 0xA5A5;
 1731              		.loc 1 13 0
 1732 0018 F8309FE5 		ldr	r3, .L2+8
 1733 001c F8209FE5 		ldr	r2, .L2+12
 1734 0020 002083E5 		str	r2, [r3, #0]
  14:../src/lcd.c  ****     DP4_7    = 0xBA5DA65;
 1735              		.loc 1 14 0
 1736 0024 F4309FE5 		ldr	r3, .L2+16
 1737 0028 F4209FE5 		ldr	r2, .L2+20
 1738 002c 002083E5 		str	r2, [r3, #0]
  15:../src/lcd.c  ****     DP3_5    = 0xA5A5F;
 1739              		.loc 1 15 0
 1740 0030 F0309FE5 		ldr	r3, .L2+24
 1741 0034 F0209FE5 		ldr	r2, .L2+28
 1742 0038 002083E5 		str	r2, [r3, #0]
  16:../src/lcd.c  ****     DP2_3    = 0xD6B;
 1743              		.loc 1 16 0
 1744 003c EC309FE5 		ldr	r3, .L2+32
 1745 0040 EC209FE5 		ldr	r2, .L2+36
 1746 0044 002083E5 		str	r2, [r3, #0]
  17:../src/lcd.c  ****     DP5_7    = 0xEB7B5ED;
 1747              		.loc 1 17 0
 1748 0048 E8309FE5 		ldr	r3, .L2+40
 1749 004c E8209FE5 		ldr	r2, .L2+44
 1750 0050 002083E5 		str	r2, [r3, #0]
  18:../src/lcd.c  ****     DP3_4    = 0x7DBE;
 1751              		.loc 1 18 0
 1752 0054 E4309FE5 		ldr	r3, .L2+48
 1753 0058 E4209FE5 		ldr	r2, .L2+52
 1754 005c 002083E5 		str	r2, [r3, #0]
  19:../src/lcd.c  ****     DP4_5    = 0x7EBDF ;
 1755              		.loc 1 19 0
 1756 0060 E0309FE5 		ldr	r3, .L2+56
 1757 0064 E0209FE5 		ldr	r2, .L2+60
 1758 0068 002083E5 		str	r2, [r3, #0]
  20:../src/lcd.c  ****     DP6_7    = 0x7FDFBFE;
 1759              		.loc 1 20 0
 1760 006c DC309FE5 		ldr	r3, .L2+64
 1761 0070 DC209FE5 		ldr	r2, .L2+68
 1762 0074 002083E5 		str	r2, [r3, #0]
  21:../src/lcd.c  ****     
  22:../src/lcd.c  ****     REDLUT   = 0x0;
 1763              		.loc 1 22 0
 1764 0078 D8309FE5 		ldr	r3, .L2+72
 1765 007c 0020A0E3 		mov	r2, #0
 1766 0080 002083E5 		str	r2, [r3, #0]
  23:../src/lcd.c  ****     GREENLUT = 0x0;
 1767              		.loc 1 23 0
 1768 0084 D0309FE5 		ldr	r3, .L2+76
 1769 0088 0020A0E3 		mov	r2, #0
 1770 008c 002083E5 		str	r2, [r3, #0]
  24:../src/lcd.c  ****     BLUELUT  = 0x0;
 1771              		.loc 1 24 0
 1772 0090 C8309FE5 		ldr	r3, .L2+80
 1773 0094 0020A0E3 		mov	r2, #0
 1774 0098 002083E5 		str	r2, [r3, #0]
  25:../src/lcd.c  **** 
  26:../src/lcd.c  ****     LCDCON1  = 0x1C020;
 1775              		.loc 1 26 0
 1776 009c 1F36A0E3 		mov	r3, #32505856
 1777 00a0 BC209FE5 		ldr	r2, .L2+84
 1778 00a4 002083E5 		str	r2, [r3, #0]
  27:../src/lcd.c  ****     LCDCON2  = 0x13CEF;
 1779              		.loc 1 27 0
 1780 00a8 B8309FE5 		ldr	r3, .L2+88
 1781 00ac B8209FE5 		ldr	r2, .L2+92
 1782 00b0 002083E5 		str	r2, [r3, #0]
  28:../src/lcd.c  ****     LCDCON3  = 0x0;
 1783              		.loc 1 28 0
 1784 00b4 B4309FE5 		ldr	r3, .L2+96
 1785 00b8 0020A0E3 		mov	r2, #0
 1786 00bc 002083E5 		str	r2, [r3, #0]
  29:../src/lcd.c  **** 
  30:../src/lcd.c  ****     LCDSADDR1 = (2 << 27) | ((uint32)lcd_buffer >> 1);
 1787              		.loc 1 30 0
 1788 00c0 AC309FE5 		ldr	r3, .L2+100
 1789 00c4 AC209FE5 		ldr	r2, .L2+104
 1790 00c8 A220A0E1 		mov	r2, r2, lsr #1
 1791 00cc 012282E3 		orr	r2, r2, #268435456
 1792 00d0 002083E5 		str	r2, [r3, #0]
  31:../src/lcd.c  ****     LCDSADDR2 = (1 << 29) | (((uint32)lcd_buffer + LCD_BUFFER_SIZE) & 0x3FFFFF) >> 1;
 1793              		.loc 1 31 0
 1794 00d4 A0209FE5 		ldr	r2, .L2+108
 1795 00d8 98309FE5 		ldr	r3, .L2+104
 1796 00dc 963C83E2 		add	r3, r3, #38400
 1797 00e0 FF34C3E3 		bic	r3, r3, #-16777216
 1798 00e4 0335C3E3 		bic	r3, r3, #12582912
 1799 00e8 A330A0E1 		mov	r3, r3, lsr #1
 1800 00ec 023283E3 		orr	r3, r3, #536870912
 1801 00f0 003082E5 		str	r3, [r2, #0]
  32:../src/lcd.c  ****     LCDSADDR3 = 0x50;
 1802              		.loc 1 32 0
 1803 00f4 84309FE5 		ldr	r3, .L2+112
 1804 00f8 5020A0E3 		mov	r2, #80
 1805 00fc 002083E5 		str	r2, [r3, #0]
  33:../src/lcd.c  ****     
  34:../src/lcd.c  ****     lcd_off();
 1806              		.loc 1 34 0
 1807 0100 FEFFFFEB 		bl	lcd_off
  35:../src/lcd.c  **** }
 1808              		.loc 1 35 0
 1809 0104 0CD04BE2 		sub	sp, fp, #12
 1810 0108 00689DE8 		ldmfd	sp, {fp, sp, lr}
 1811 010c 1EFF2FE1 		bx	lr
 1812              	.L3:
 1813              		.align	2
 1814              	.L2:
 1815 0110 4400F001 		.word	32505924
 1816 0114 10220100 		.word	74256
 1817 0118 2000F001 		.word	32505888
 1818 011c A5A50000 		.word	42405
 1819 0120 2400F001 		.word	32505892
 1820 0124 65DAA50B 		.word	195418725
 1821 0128 2800F001 		.word	32505896
 1822 012c 5F5A0A00 		.word	678495
 1823 0130 2C00F001 		.word	32505900
 1824 0134 6B0D0000 		.word	3435
 1825 0138 3000F001 		.word	32505904
 1826 013c EDB5B70E 		.word	246920685
 1827 0140 3400F001 		.word	32505908
 1828 0144 BE7D0000 		.word	32190
 1829 0148 3800F001 		.word	32505912
 1830 014c DFEB0700 		.word	519135
 1831 0150 3C00F001 		.word	32505916
 1832 0154 FEFBFD07 		.word	134085630
 1833 0158 1400F001 		.word	32505876
 1834 015c 1800F001 		.word	32505880
 1835 0160 1C00F001 		.word	32505884
 1836 0164 20C00100 		.word	114720
 1837 0168 0400F001 		.word	32505860
 1838 016c EF3C0100 		.word	81135
 1839 0170 4000F001 		.word	32505920
 1840 0174 0800F001 		.word	32505864
 1841 0178 00000000 		.word	lcd_buffer
 1842 017c 0C00F001 		.word	32505868
 1843 0180 1000F001 		.word	32505872
 1844              		.cfi_endproc
 1845              	.LFE0:
 1847              		.align	2
 1848              		.global	lcd_on
 1850              	lcd_on:
 1851              	.LFB1:
  36:../src/lcd.c  **** 
  37:../src/lcd.c  **** void lcd_on( void )
  38:../src/lcd.c  **** {
 1852              		.loc 1 38 0
 1853              		.cfi_startproc
 1854              		@ Function supports interworking.
 1855              		@ args = 0, pretend = 0, frame = 0
 1856              		@ frame_needed = 1, uses_anonymous_args = 0
 1857 0184 0DC0A0E1 		mov	ip, sp
 1858              	.LCFI2:
 1859              		.cfi_def_cfa_register 12
 1860 0188 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 1861 018c 04B04CE2 		sub	fp, ip, #4
 1862              		.cfi_offset 14, -8
 1863              		.cfi_offset 13, -12
 1864              		.cfi_offset 11, -16
 1865              	.LCFI3:
 1866              		.cfi_def_cfa 11, 4
  39:../src/lcd.c  ****     LCDCON1 |= (1 << 0);
 1867              		.loc 1 39 0
 1868 0190 1F36A0E3 		mov	r3, #32505856
 1869 0194 1F26A0E3 		mov	r2, #32505856
 1870 0198 002092E5 		ldr	r2, [r2, #0]
 1871 019c 012082E3 		orr	r2, r2, #1
 1872 01a0 002083E5 		str	r2, [r3, #0]
  40:../src/lcd.c  **** }
 1873              		.loc 1 40 0
 1874 01a4 0CD04BE2 		sub	sp, fp, #12
 1875 01a8 00689DE8 		ldmfd	sp, {fp, sp, lr}
 1876 01ac 1EFF2FE1 		bx	lr
 1877              		.cfi_endproc
 1878              	.LFE1:
 1880              		.align	2
 1881              		.global	lcd_off
 1883              	lcd_off:
 1884              	.LFB2:
  41:../src/lcd.c  **** 
  42:../src/lcd.c  **** void lcd_off( void )
  43:../src/lcd.c  **** {
 1885              		.loc 1 43 0
 1886              		.cfi_startproc
 1887              		@ Function supports interworking.
 1888              		@ args = 0, pretend = 0, frame = 0
 1889              		@ frame_needed = 1, uses_anonymous_args = 0
 1890 01b0 0DC0A0E1 		mov	ip, sp
 1891              	.LCFI4:
 1892              		.cfi_def_cfa_register 12
 1893 01b4 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 1894 01b8 04B04CE2 		sub	fp, ip, #4
 1895              		.cfi_offset 14, -8
 1896              		.cfi_offset 13, -12
 1897              		.cfi_offset 11, -16
 1898              	.LCFI5:
 1899              		.cfi_def_cfa 11, 4
  44:../src/lcd.c  **** 	LCDCON1 &= ~(1 << 0);
 1900              		.loc 1 44 0
 1901 01bc 1F36A0E3 		mov	r3, #32505856
 1902 01c0 1F26A0E3 		mov	r2, #32505856
 1903 01c4 002092E5 		ldr	r2, [r2, #0]
 1904 01c8 0120C2E3 		bic	r2, r2, #1
 1905 01cc 002083E5 		str	r2, [r3, #0]
  45:../src/lcd.c  **** }
 1906              		.loc 1 45 0
 1907 01d0 0CD04BE2 		sub	sp, fp, #12
 1908 01d4 00689DE8 		ldmfd	sp, {fp, sp, lr}
 1909 01d8 1EFF2FE1 		bx	lr
 1910              		.cfi_endproc
 1911              	.LFE2:
 1913              		.align	2
 1914              		.global	lcd_status
 1916              	lcd_status:
 1917              	.LFB3:
  46:../src/lcd.c  **** 
  47:../src/lcd.c  **** uint8 lcd_status( void )
  48:../src/lcd.c  **** {
 1918              		.loc 1 48 0
 1919              		.cfi_startproc
 1920              		@ Function supports interworking.
 1921              		@ args = 0, pretend = 0, frame = 0
 1922              		@ frame_needed = 1, uses_anonymous_args = 0
 1923 01dc 0DC0A0E1 		mov	ip, sp
 1924              	.LCFI6:
 1925              		.cfi_def_cfa_register 12
 1926 01e0 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 1927 01e4 04B04CE2 		sub	fp, ip, #4
 1928              		.cfi_offset 14, -8
 1929              		.cfi_offset 13, -12
 1930              		.cfi_offset 11, -16
 1931              	.LCFI7:
 1932              		.cfi_def_cfa 11, 4
  49:../src/lcd.c  ****     if(LCDCON1 & (1 << 0)){
 1933              		.loc 1 49 0
 1934 01e8 1F36A0E3 		mov	r3, #32505856
 1935 01ec 003093E5 		ldr	r3, [r3, #0]
 1936 01f0 013003E2 		and	r3, r3, #1
 1937 01f4 FF3003E2 		and	r3, r3, #255
 1938 01f8 000053E3 		cmp	r3, #0
 1939 01fc 0100000A 		beq	.L7
  50:../src/lcd.c  ****     	return ON;
 1940              		.loc 1 50 0
 1941 0200 0130A0E3 		mov	r3, #1
 1942 0204 000000EA 		b	.L8
 1943              	.L7:
  51:../src/lcd.c  ****     }
  52:../src/lcd.c  ****     else{
  53:../src/lcd.c  ****     	return OFF;
 1944              		.loc 1 53 0
 1945 0208 0030A0E3 		mov	r3, #0
 1946              	.L8:
  54:../src/lcd.c  ****     }
  55:../src/lcd.c  **** }
 1947              		.loc 1 55 0
 1948 020c 0300A0E1 		mov	r0, r3
 1949 0210 0CD04BE2 		sub	sp, fp, #12
 1950 0214 00689DE8 		ldmfd	sp, {fp, sp, lr}
 1951 0218 1EFF2FE1 		bx	lr
 1952              		.cfi_endproc
 1953              	.LFE3:
 1955              		.align	2
 1956              		.global	lcd_clear
 1958              	lcd_clear:
 1959              	.LFB4:
  56:../src/lcd.c  **** 
  57:../src/lcd.c  **** void lcd_clear( void )
  58:../src/lcd.c  **** {
 1960              		.loc 1 58 0
 1961              		.cfi_startproc
 1962              		@ Function supports interworking.
 1963              		@ args = 0, pretend = 0, frame = 8
 1964              		@ frame_needed = 1, uses_anonymous_args = 0
 1965 021c 0DC0A0E1 		mov	ip, sp
 1966              	.LCFI8:
 1967              		.cfi_def_cfa_register 12
 1968 0220 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 1969 0224 04B04CE2 		sub	fp, ip, #4
 1970              		.cfi_offset 14, -8
 1971              		.cfi_offset 13, -12
 1972              		.cfi_offset 11, -16
 1973              	.LCFI9:
 1974              		.cfi_def_cfa 11, 4
 1975 0228 08D04DE2 		sub	sp, sp, #8
  59:../src/lcd.c  **** 	//fila 1: (0,0) (1,0) ... (319,0)etc.
  60:../src/lcd.c  **** 	//fila 239(ultima): (0,239) (1,239) ... (319,239)
  61:../src/lcd.c  **** 	int i,j;
  62:../src/lcd.c  ****     for(i = 0; i < LCD_HEIGHT;i++){
 1976              		.loc 1 62 0
 1977 022c 0030A0E3 		mov	r3, #0
 1978 0230 10300BE5 		str	r3, [fp, #-16]
 1979 0234 160000EA 		b	.L10
 1980              	.L13:
  63:../src/lcd.c  ****     	for(j = 0; j < LCD_WIDTH; j++){
 1981              		.loc 1 63 0
 1982 0238 0030A0E3 		mov	r3, #0
 1983 023c 14300BE5 		str	r3, [fp, #-20]
 1984 0240 0C0000EA 		b	.L11
 1985              	.L12:
  64:../src/lcd.c  ****     		lcd_putpixel(j,i,WHITE); // relleno en blanco todo
 1986              		.loc 1 64 0 discriminator 2
 1987 0244 14301BE5 		ldr	r3, [fp, #-20]
 1988 0248 0338A0E1 		mov	r3, r3, asl #16
 1989 024c 2328A0E1 		mov	r2, r3, lsr #16
 1990 0250 10301BE5 		ldr	r3, [fp, #-16]
 1991 0254 0338A0E1 		mov	r3, r3, asl #16
 1992 0258 2338A0E1 		mov	r3, r3, lsr #16
 1993 025c 0200A0E1 		mov	r0, r2
 1994 0260 0310A0E1 		mov	r1, r3
 1995 0264 0020A0E3 		mov	r2, #0
 1996 0268 FEFFFFEB 		bl	lcd_putpixel
  63:../src/lcd.c  ****     	for(j = 0; j < LCD_WIDTH; j++){
 1997              		.loc 1 63 0 discriminator 2
 1998 026c 14301BE5 		ldr	r3, [fp, #-20]
 1999 0270 013083E2 		add	r3, r3, #1
 2000 0274 14300BE5 		str	r3, [fp, #-20]
 2001              	.L11:
  63:../src/lcd.c  ****     	for(j = 0; j < LCD_WIDTH; j++){
 2002              		.loc 1 63 0 is_stmt 0 discriminator 1
 2003 0278 14201BE5 		ldr	r2, [fp, #-20]
 2004 027c 28309FE5 		ldr	r3, .L14
 2005 0280 030052E1 		cmp	r2, r3
 2006 0284 EEFFFFDA 		ble	.L12
  62:../src/lcd.c  ****     for(i = 0; i < LCD_HEIGHT;i++){
 2007              		.loc 1 62 0 is_stmt 1
 2008 0288 10301BE5 		ldr	r3, [fp, #-16]
 2009 028c 013083E2 		add	r3, r3, #1
 2010 0290 10300BE5 		str	r3, [fp, #-16]
 2011              	.L10:
  62:../src/lcd.c  ****     for(i = 0; i < LCD_HEIGHT;i++){
 2012              		.loc 1 62 0 is_stmt 0 discriminator 1
 2013 0294 10301BE5 		ldr	r3, [fp, #-16]
 2014 0298 EF0053E3 		cmp	r3, #239
 2015 029c E5FFFFDA 		ble	.L13
  65:../src/lcd.c  ****     	}
  66:../src/lcd.c  ****     }
  67:../src/lcd.c  **** }
 2016              		.loc 1 67 0 is_stmt 1
 2017 02a0 0CD04BE2 		sub	sp, fp, #12
 2018 02a4 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2019 02a8 1EFF2FE1 		bx	lr
 2020              	.L15:
 2021              		.align	2
 2022              	.L14:
 2023 02ac 3F010000 		.word	319
 2024              		.cfi_endproc
 2025              	.LFE4:
 2027              		.align	2
 2028              		.global	lcd_putpixel
 2030              	lcd_putpixel:
 2031              	.LFB5:
  68:../src/lcd.c  **** 
  69:../src/lcd.c  **** void lcd_putpixel( uint16 x, uint16 y, uint8 c)
  70:../src/lcd.c  **** {
 2032              		.loc 1 70 0
 2033              		.cfi_startproc
 2034              		@ Function supports interworking.
 2035              		@ args = 0, pretend = 0, frame = 16
 2036              		@ frame_needed = 1, uses_anonymous_args = 0
 2037 02b0 0DC0A0E1 		mov	ip, sp
 2038              	.LCFI10:
 2039              		.cfi_def_cfa_register 12
 2040 02b4 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2041 02b8 04B04CE2 		sub	fp, ip, #4
 2042              		.cfi_offset 14, -8
 2043              		.cfi_offset 13, -12
 2044              		.cfi_offset 11, -16
 2045              	.LCFI11:
 2046              		.cfi_def_cfa 11, 4
 2047 02bc 10D04DE2 		sub	sp, sp, #16
 2048 02c0 0230A0E1 		mov	r3, r2
 2049 02c4 B6014BE1 		strh	r0, [fp, #-22]	@ movhi
 2050 02c8 B8114BE1 		strh	r1, [fp, #-24]	@ movhi
 2051 02cc 19304BE5 		strb	r3, [fp, #-25]
  71:../src/lcd.c  ****     uint8 byte, bit;
  72:../src/lcd.c  ****     uint16 i;
  73:../src/lcd.c  **** 
  74:../src/lcd.c  ****     i = x/2 + y*(LCD_WIDTH/2);
 2052              		.loc 1 74 0
 2053 02d0 B6315BE1 		ldrh	r3, [fp, #-22]
 2054 02d4 A330A0E1 		mov	r3, r3, lsr #1
 2055 02d8 0338A0E1 		mov	r3, r3, asl #16
 2056 02dc 2328A0E1 		mov	r2, r3, lsr #16
 2057 02e0 B8315BE1 		ldrh	r3, [fp, #-24]	@ movhi
 2058 02e4 0310A0E1 		mov	r1, r3	@ movhi
 2059 02e8 0111A0E1 		mov	r1, r1, asl #2
 2060 02ec 033081E0 		add	r3, r1, r3
 2061 02f0 8332A0E1 		mov	r3, r3, asl #5
 2062 02f4 0338A0E1 		mov	r3, r3, asl #16
 2063 02f8 2338A0E1 		mov	r3, r3, lsr #16
 2064 02fc 033082E0 		add	r3, r2, r3
 2065 0300 BE304BE1 		strh	r3, [fp, #-14]	@ movhi
  75:../src/lcd.c  ****     bit = (1-x%2)*4;
 2066              		.loc 1 75 0
 2067 0304 B6315BE1 		ldrh	r3, [fp, #-22]
 2068 0308 013003E2 		and	r3, r3, #1
 2069 030c 000053E3 		cmp	r3, #0
 2070 0310 0100001A 		bne	.L17
 2071              		.loc 1 75 0 is_stmt 0 discriminator 1
 2072 0314 0430A0E3 		mov	r3, #4
 2073 0318 000000EA 		b	.L18
 2074              	.L17:
 2075              		.loc 1 75 0 discriminator 2
 2076 031c 0030A0E3 		mov	r3, #0
 2077              	.L18:
 2078              		.loc 1 75 0 discriminator 3
 2079 0320 0F304BE5 		strb	r3, [fp, #-15]
  76:../src/lcd.c  ****     
  77:../src/lcd.c  ****     byte = lcd_buffer[i];
 2080              		.loc 1 77 0 is_stmt 1 discriminator 3
 2081 0324 BE305BE1 		ldrh	r3, [fp, #-14]
 2082 0328 68209FE5 		ldr	r2, .L19
 2083 032c 0330D2E7 		ldrb	r3, [r2, r3]
 2084 0330 10304BE5 		strb	r3, [fp, #-16]
  78:../src/lcd.c  ****     byte &= ~(0xF << bit);
 2085              		.loc 1 78 0 discriminator 3
 2086 0334 0F305BE5 		ldrb	r3, [fp, #-15]	@ zero_extendqisi2
 2087 0338 0F20A0E3 		mov	r2, #15
 2088 033c 1233A0E1 		mov	r3, r2, asl r3
 2089 0340 FF3003E2 		and	r3, r3, #255
 2090 0344 0330E0E1 		mvn	r3, r3
 2091 0348 FF2003E2 		and	r2, r3, #255
 2092 034c 10305BE5 		ldrb	r3, [fp, #-16]	@ zero_extendqisi2
 2093 0350 033002E0 		and	r3, r2, r3
 2094 0354 FF3003E2 		and	r3, r3, #255
 2095 0358 10304BE5 		strb	r3, [fp, #-16]
  79:../src/lcd.c  ****     byte |= c << bit;
 2096              		.loc 1 79 0 discriminator 3
 2097 035c 19205BE5 		ldrb	r2, [fp, #-25]	@ zero_extendqisi2
 2098 0360 0F305BE5 		ldrb	r3, [fp, #-15]	@ zero_extendqisi2
 2099 0364 1233A0E1 		mov	r3, r2, asl r3
 2100 0368 FF2003E2 		and	r2, r3, #255
 2101 036c 10305BE5 		ldrb	r3, [fp, #-16]	@ zero_extendqisi2
 2102 0370 033082E1 		orr	r3, r2, r3
 2103 0374 FF3003E2 		and	r3, r3, #255
 2104 0378 10304BE5 		strb	r3, [fp, #-16]
  80:../src/lcd.c  ****     lcd_buffer[i] = byte;
 2105              		.loc 1 80 0 discriminator 3
 2106 037c BE305BE1 		ldrh	r3, [fp, #-14]
 2107 0380 10209FE5 		ldr	r2, .L19
 2108 0384 10105BE5 		ldrb	r1, [fp, #-16]
 2109 0388 0310C2E7 		strb	r1, [r2, r3]
  81:../src/lcd.c  **** }
 2110              		.loc 1 81 0 discriminator 3
 2111 038c 0CD04BE2 		sub	sp, fp, #12
 2112 0390 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2113 0394 1EFF2FE1 		bx	lr
 2114              	.L20:
 2115              		.align	2
 2116              	.L19:
 2117 0398 00000000 		.word	lcd_buffer
 2118              		.cfi_endproc
 2119              	.LFE5:
 2121              		.align	2
 2122              		.global	lcd_getpixel
 2124              	lcd_getpixel:
 2125              	.LFB6:
  82:../src/lcd.c  **** 
  83:../src/lcd.c  **** uint8 lcd_getpixel( uint16 x, uint16 y )
  84:../src/lcd.c  **** {
 2126              		.loc 1 84 0
 2127              		.cfi_startproc
 2128              		@ Function supports interworking.
 2129              		@ args = 0, pretend = 0, frame = 16
 2130              		@ frame_needed = 1, uses_anonymous_args = 0
 2131 039c 0DC0A0E1 		mov	ip, sp
 2132              	.LCFI12:
 2133              		.cfi_def_cfa_register 12
 2134 03a0 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2135 03a4 04B04CE2 		sub	fp, ip, #4
 2136              		.cfi_offset 14, -8
 2137              		.cfi_offset 13, -12
 2138              		.cfi_offset 11, -16
 2139              	.LCFI13:
 2140              		.cfi_def_cfa 11, 4
 2141 03a8 10D04DE2 		sub	sp, sp, #16
 2142 03ac 0020A0E1 		mov	r2, r0
 2143 03b0 0130A0E1 		mov	r3, r1
 2144 03b4 B6214BE1 		strh	r2, [fp, #-22]	@ movhi
 2145 03b8 B8314BE1 		strh	r3, [fp, #-24]	@ movhi
  85:../src/lcd.c  ****     uint8 byte, bit, ret;
  86:../src/lcd.c  ****     uint16 i;
  87:../src/lcd.c  **** 
  88:../src/lcd.c  ****     i = x/2 + y*(LCD_WIDTH/2);
 2146              		.loc 1 88 0
 2147 03bc B6315BE1 		ldrh	r3, [fp, #-22]
 2148 03c0 A330A0E1 		mov	r3, r3, lsr #1
 2149 03c4 0338A0E1 		mov	r3, r3, asl #16
 2150 03c8 2328A0E1 		mov	r2, r3, lsr #16
 2151 03cc B8315BE1 		ldrh	r3, [fp, #-24]	@ movhi
 2152 03d0 0310A0E1 		mov	r1, r3	@ movhi
 2153 03d4 0111A0E1 		mov	r1, r1, asl #2
 2154 03d8 033081E0 		add	r3, r1, r3
 2155 03dc 8332A0E1 		mov	r3, r3, asl #5
 2156 03e0 0338A0E1 		mov	r3, r3, asl #16
 2157 03e4 2338A0E1 		mov	r3, r3, lsr #16
 2158 03e8 033082E0 		add	r3, r2, r3
 2159 03ec B0314BE1 		strh	r3, [fp, #-16]	@ movhi
  89:../src/lcd.c  ****     bit = (1-x%2)*4;
 2160              		.loc 1 89 0
 2161 03f0 B6315BE1 		ldrh	r3, [fp, #-22]
 2162 03f4 013003E2 		and	r3, r3, #1
 2163 03f8 000053E3 		cmp	r3, #0
 2164 03fc 0100001A 		bne	.L22
 2165              		.loc 1 89 0 is_stmt 0 discriminator 1
 2166 0400 0430A0E3 		mov	r3, #4
 2167 0404 000000EA 		b	.L23
 2168              	.L22:
 2169              		.loc 1 89 0 discriminator 2
 2170 0408 0030A0E3 		mov	r3, #0
 2171              	.L23:
 2172              		.loc 1 89 0 discriminator 3
 2173 040c 11304BE5 		strb	r3, [fp, #-17]
  90:../src/lcd.c  **** 
  91:../src/lcd.c  ****     byte = lcd_buffer[i];
 2174              		.loc 1 91 0 is_stmt 1 discriminator 3
 2175 0410 B0315BE1 		ldrh	r3, [fp, #-16]
 2176 0414 58209FE5 		ldr	r2, .L26
 2177 0418 0330D2E7 		ldrb	r3, [r2, r3]
 2178 041c 12304BE5 		strb	r3, [fp, #-18]
  92:../src/lcd.c  **** 
  93:../src/lcd.c  ****     if(bit == 0){
 2179              		.loc 1 93 0 discriminator 3
 2180 0420 11305BE5 		ldrb	r3, [fp, #-17]	@ zero_extendqisi2
 2181 0424 000053E3 		cmp	r3, #0
 2182 0428 0500001A 		bne	.L24
  94:../src/lcd.c  ****     	byte &= ~(0xF << 4);
 2183              		.loc 1 94 0
 2184 042c 12305BE5 		ldrb	r3, [fp, #-18]
 2185 0430 0F3003E2 		and	r3, r3, #15
 2186 0434 12304BE5 		strb	r3, [fp, #-18]
  95:../src/lcd.c  ****     	ret = byte;
 2187              		.loc 1 95 0
 2188 0438 12305BE5 		ldrb	r3, [fp, #-18]
 2189 043c 0D304BE5 		strb	r3, [fp, #-13]
 2190 0440 060000EA 		b	.L25
 2191              	.L24:
  96:../src/lcd.c  ****     }
  97:../src/lcd.c  ****     else{
  98:../src/lcd.c  ****     	byte &= ~(0xF << 0);
 2192              		.loc 1 98 0
 2193 0444 12305BE5 		ldrb	r3, [fp, #-18]
 2194 0448 0F30C3E3 		bic	r3, r3, #15
 2195 044c 12304BE5 		strb	r3, [fp, #-18]
  99:../src/lcd.c  ****     	ret = byte >> bit;
 2196              		.loc 1 99 0
 2197 0450 12205BE5 		ldrb	r2, [fp, #-18]	@ zero_extendqisi2
 2198 0454 11305BE5 		ldrb	r3, [fp, #-17]	@ zero_extendqisi2
 2199 0458 5233A0E1 		mov	r3, r2, asr r3
 2200 045c 0D304BE5 		strb	r3, [fp, #-13]
 2201              	.L25:
 100:../src/lcd.c  ****     }
 101:../src/lcd.c  **** 
 102:../src/lcd.c  ****     return ret;
 2202              		.loc 1 102 0
 2203 0460 0D305BE5 		ldrb	r3, [fp, #-13]	@ zero_extendqisi2
 103:../src/lcd.c  **** }
 2204              		.loc 1 103 0
 2205 0464 0300A0E1 		mov	r0, r3
 2206 0468 0CD04BE2 		sub	sp, fp, #12
 2207 046c 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2208 0470 1EFF2FE1 		bx	lr
 2209              	.L27:
 2210              		.align	2
 2211              	.L26:
 2212 0474 00000000 		.word	lcd_buffer
 2213              		.cfi_endproc
 2214              	.LFE6:
 2216              		.align	2
 2217              		.global	lcd_draw_hline
 2219              	lcd_draw_hline:
 2220              	.LFB7:
 104:../src/lcd.c  **** 
 105:../src/lcd.c  **** void lcd_draw_hline( uint16 xleft, uint16 xright, uint16 y, uint8 color, uint16 width )
 106:../src/lcd.c  **** {
 2221              		.loc 1 106 0
 2222              		.cfi_startproc
 2223              		@ Function supports interworking.
 2224              		@ args = 4, pretend = 0, frame = 16
 2225              		@ frame_needed = 1, uses_anonymous_args = 0
 2226 0478 0DC0A0E1 		mov	ip, sp
 2227              	.LCFI14:
 2228              		.cfi_def_cfa_register 12
 2229 047c 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2230 0480 04B04CE2 		sub	fp, ip, #4
 2231              		.cfi_offset 14, -8
 2232              		.cfi_offset 13, -12
 2233              		.cfi_offset 11, -16
 2234              	.LCFI15:
 2235              		.cfi_def_cfa 11, 4
 2236 0484 10D04DE2 		sub	sp, sp, #16
 2237 0488 B6014BE1 		strh	r0, [fp, #-22]	@ movhi
 2238 048c B8114BE1 		strh	r1, [fp, #-24]	@ movhi
 2239 0490 BA214BE1 		strh	r2, [fp, #-26]	@ movhi
 2240 0494 1B304BE5 		strb	r3, [fp, #-27]
 107:../src/lcd.c  **** 	int i,j;
 108:../src/lcd.c  **** 	for(i = y; i < (y+width); i++ ){
 2241              		.loc 1 108 0
 2242 0498 BA315BE1 		ldrh	r3, [fp, #-26]
 2243 049c 10300BE5 		str	r3, [fp, #-16]
 2244 04a0 170000EA 		b	.L29
 2245              	.L32:
 109:../src/lcd.c  **** 		for(j = xleft; j < xright; j++){
 2246              		.loc 1 109 0
 2247 04a4 B6315BE1 		ldrh	r3, [fp, #-22]
 2248 04a8 14300BE5 		str	r3, [fp, #-20]
 2249 04ac 0D0000EA 		b	.L30
 2250              	.L31:
 110:../src/lcd.c  **** 			lcd_putpixel(j,i,color);
 2251              		.loc 1 110 0 discriminator 2
 2252 04b0 14301BE5 		ldr	r3, [fp, #-20]
 2253 04b4 0338A0E1 		mov	r3, r3, asl #16
 2254 04b8 2318A0E1 		mov	r1, r3, lsr #16
 2255 04bc 10301BE5 		ldr	r3, [fp, #-16]
 2256 04c0 0338A0E1 		mov	r3, r3, asl #16
 2257 04c4 2328A0E1 		mov	r2, r3, lsr #16
 2258 04c8 1B305BE5 		ldrb	r3, [fp, #-27]	@ zero_extendqisi2
 2259 04cc 0100A0E1 		mov	r0, r1
 2260 04d0 0210A0E1 		mov	r1, r2
 2261 04d4 0320A0E1 		mov	r2, r3
 2262 04d8 FEFFFFEB 		bl	lcd_putpixel
 109:../src/lcd.c  **** 		for(j = xleft; j < xright; j++){
 2263              		.loc 1 109 0 discriminator 2
 2264 04dc 14301BE5 		ldr	r3, [fp, #-20]
 2265 04e0 013083E2 		add	r3, r3, #1
 2266 04e4 14300BE5 		str	r3, [fp, #-20]
 2267              	.L30:
 109:../src/lcd.c  **** 		for(j = xleft; j < xright; j++){
 2268              		.loc 1 109 0 is_stmt 0 discriminator 1
 2269 04e8 B8215BE1 		ldrh	r2, [fp, #-24]
 2270 04ec 14301BE5 		ldr	r3, [fp, #-20]
 2271 04f0 030052E1 		cmp	r2, r3
 2272 04f4 EDFFFFCA 		bgt	.L31
 108:../src/lcd.c  **** 	for(i = y; i < (y+width); i++ ){
 2273              		.loc 1 108 0 is_stmt 1
 2274 04f8 10301BE5 		ldr	r3, [fp, #-16]
 2275 04fc 013083E2 		add	r3, r3, #1
 2276 0500 10300BE5 		str	r3, [fp, #-16]
 2277              	.L29:
 108:../src/lcd.c  **** 	for(i = y; i < (y+width); i++ ){
 2278              		.loc 1 108 0 is_stmt 0 discriminator 1
 2279 0504 BA215BE1 		ldrh	r2, [fp, #-26]
 2280 0508 B430DBE1 		ldrh	r3, [fp, #4]
 2281 050c 032082E0 		add	r2, r2, r3
 2282 0510 10301BE5 		ldr	r3, [fp, #-16]
 2283 0514 030052E1 		cmp	r2, r3
 2284 0518 E1FFFFCA 		bgt	.L32
 111:../src/lcd.c  **** 		}
 112:../src/lcd.c  **** 	}
 113:../src/lcd.c  **** }
 2285              		.loc 1 113 0 is_stmt 1
 2286 051c 0CD04BE2 		sub	sp, fp, #12
 2287 0520 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2288 0524 1EFF2FE1 		bx	lr
 2289              		.cfi_endproc
 2290              	.LFE7:
 2292              		.align	2
 2293              		.global	lcd_draw_vline
 2295              	lcd_draw_vline:
 2296              	.LFB8:
 114:../src/lcd.c  **** 
 115:../src/lcd.c  **** void lcd_draw_vline( uint16 yup, uint16 ydown, uint16 x, uint8 color, uint16 width )
 116:../src/lcd.c  **** {
 2297              		.loc 1 116 0
 2298              		.cfi_startproc
 2299              		@ Function supports interworking.
 2300              		@ args = 4, pretend = 0, frame = 16
 2301              		@ frame_needed = 1, uses_anonymous_args = 0
 2302 0528 0DC0A0E1 		mov	ip, sp
 2303              	.LCFI16:
 2304              		.cfi_def_cfa_register 12
 2305 052c 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2306 0530 04B04CE2 		sub	fp, ip, #4
 2307              		.cfi_offset 14, -8
 2308              		.cfi_offset 13, -12
 2309              		.cfi_offset 11, -16
 2310              	.LCFI17:
 2311              		.cfi_def_cfa 11, 4
 2312 0534 10D04DE2 		sub	sp, sp, #16
 2313 0538 B6014BE1 		strh	r0, [fp, #-22]	@ movhi
 2314 053c B8114BE1 		strh	r1, [fp, #-24]	@ movhi
 2315 0540 BA214BE1 		strh	r2, [fp, #-26]	@ movhi
 2316 0544 1B304BE5 		strb	r3, [fp, #-27]
 117:../src/lcd.c  **** 	int i,j;
 118:../src/lcd.c  **** 	for (i = yup; i < ydown; i++) {
 2317              		.loc 1 118 0
 2318 0548 B6315BE1 		ldrh	r3, [fp, #-22]
 2319 054c 10300BE5 		str	r3, [fp, #-16]
 2320 0550 190000EA 		b	.L34
 2321              	.L37:
 119:../src/lcd.c  **** 		for (j = x; j < (x + width); j++) {
 2322              		.loc 1 119 0
 2323 0554 BA315BE1 		ldrh	r3, [fp, #-26]
 2324 0558 14300BE5 		str	r3, [fp, #-20]
 2325 055c 0D0000EA 		b	.L35
 2326              	.L36:
 120:../src/lcd.c  **** 			lcd_putpixel(j, i, color);
 2327              		.loc 1 120 0 discriminator 2
 2328 0560 14301BE5 		ldr	r3, [fp, #-20]
 2329 0564 0338A0E1 		mov	r3, r3, asl #16
 2330 0568 2318A0E1 		mov	r1, r3, lsr #16
 2331 056c 10301BE5 		ldr	r3, [fp, #-16]
 2332 0570 0338A0E1 		mov	r3, r3, asl #16
 2333 0574 2328A0E1 		mov	r2, r3, lsr #16
 2334 0578 1B305BE5 		ldrb	r3, [fp, #-27]	@ zero_extendqisi2
 2335 057c 0100A0E1 		mov	r0, r1
 2336 0580 0210A0E1 		mov	r1, r2
 2337 0584 0320A0E1 		mov	r2, r3
 2338 0588 FEFFFFEB 		bl	lcd_putpixel
 119:../src/lcd.c  **** 		for (j = x; j < (x + width); j++) {
 2339              		.loc 1 119 0 discriminator 2
 2340 058c 14301BE5 		ldr	r3, [fp, #-20]
 2341 0590 013083E2 		add	r3, r3, #1
 2342 0594 14300BE5 		str	r3, [fp, #-20]
 2343              	.L35:
 119:../src/lcd.c  **** 		for (j = x; j < (x + width); j++) {
 2344              		.loc 1 119 0 is_stmt 0 discriminator 1
 2345 0598 BA215BE1 		ldrh	r2, [fp, #-26]
 2346 059c B430DBE1 		ldrh	r3, [fp, #4]
 2347 05a0 032082E0 		add	r2, r2, r3
 2348 05a4 14301BE5 		ldr	r3, [fp, #-20]
 2349 05a8 030052E1 		cmp	r2, r3
 2350 05ac EBFFFFCA 		bgt	.L36
 118:../src/lcd.c  **** 	for (i = yup; i < ydown; i++) {
 2351              		.loc 1 118 0 is_stmt 1
 2352 05b0 10301BE5 		ldr	r3, [fp, #-16]
 2353 05b4 013083E2 		add	r3, r3, #1
 2354 05b8 10300BE5 		str	r3, [fp, #-16]
 2355              	.L34:
 118:../src/lcd.c  **** 	for (i = yup; i < ydown; i++) {
 2356              		.loc 1 118 0 is_stmt 0 discriminator 1
 2357 05bc B8215BE1 		ldrh	r2, [fp, #-24]
 2358 05c0 10301BE5 		ldr	r3, [fp, #-16]
 2359 05c4 030052E1 		cmp	r2, r3
 2360 05c8 E1FFFFCA 		bgt	.L37
 121:../src/lcd.c  **** 		}
 122:../src/lcd.c  **** 	}
 123:../src/lcd.c  **** }
 2361              		.loc 1 123 0 is_stmt 1
 2362 05cc 0CD04BE2 		sub	sp, fp, #12
 2363 05d0 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2364 05d4 1EFF2FE1 		bx	lr
 2365              		.cfi_endproc
 2366              	.LFE8:
 2368              		.align	2
 2369              		.global	lcd_draw_box
 2371              	lcd_draw_box:
 2372              	.LFB9:
 124:../src/lcd.c  **** 
 125:../src/lcd.c  **** void lcd_draw_box( uint16 xleft, uint16 yup, uint16 xright, uint16 ydown, uint8 color, uint16 width
 126:../src/lcd.c  **** {
 2373              		.loc 1 126 0
 2374              		.cfi_startproc
 2375              		@ Function supports interworking.
 2376              		@ args = 8, pretend = 0, frame = 8
 2377              		@ frame_needed = 1, uses_anonymous_args = 0
 2378 05d8 0DC0A0E1 		mov	ip, sp
 2379              	.LCFI18:
 2380              		.cfi_def_cfa_register 12
 2381 05dc 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2382 05e0 04B04CE2 		sub	fp, ip, #4
 2383              		.cfi_offset 14, -8
 2384              		.cfi_offset 13, -12
 2385              		.cfi_offset 11, -16
 2386              	.LCFI19:
 2387              		.cfi_def_cfa 11, 4
 2388 05e4 10D04DE2 		sub	sp, sp, #16
 2389 05e8 BE004BE1 		strh	r0, [fp, #-14]	@ movhi
 2390 05ec B0114BE1 		strh	r1, [fp, #-16]	@ movhi
 2391 05f0 B2214BE1 		strh	r2, [fp, #-18]	@ movhi
 2392 05f4 B4314BE1 		strh	r3, [fp, #-20]	@ movhi
 127:../src/lcd.c  **** 	lcd_draw_hline(xleft, xright, yup, color, width);
 2393              		.loc 1 127 0
 2394 05f8 BE005BE1 		ldrh	r0, [fp, #-14]
 2395 05fc B2115BE1 		ldrh	r1, [fp, #-18]
 2396 0600 B0215BE1 		ldrh	r2, [fp, #-16]
 2397 0604 0430DBE5 		ldrb	r3, [fp, #4]	@ zero_extendqisi2
 2398 0608 B8C0DBE1 		ldrh	ip, [fp, #8]
 2399 060c 00C08DE5 		str	ip, [sp, #0]
 2400 0610 FEFFFFEB 		bl	lcd_draw_hline
 128:../src/lcd.c  **** 	lcd_draw_vline(yup, ydown, xleft, color, width);
 2401              		.loc 1 128 0
 2402 0614 B0015BE1 		ldrh	r0, [fp, #-16]
 2403 0618 B4115BE1 		ldrh	r1, [fp, #-20]
 2404 061c BE205BE1 		ldrh	r2, [fp, #-14]
 2405 0620 0430DBE5 		ldrb	r3, [fp, #4]	@ zero_extendqisi2
 2406 0624 B8C0DBE1 		ldrh	ip, [fp, #8]
 2407 0628 00C08DE5 		str	ip, [sp, #0]
 2408 062c FEFFFFEB 		bl	lcd_draw_vline
 129:../src/lcd.c  **** 	lcd_draw_hline(xleft, xright, ydown, color, width);
 2409              		.loc 1 129 0
 2410 0630 BE005BE1 		ldrh	r0, [fp, #-14]
 2411 0634 B2115BE1 		ldrh	r1, [fp, #-18]
 2412 0638 B4215BE1 		ldrh	r2, [fp, #-20]
 2413 063c 0430DBE5 		ldrb	r3, [fp, #4]	@ zero_extendqisi2
 2414 0640 B8C0DBE1 		ldrh	ip, [fp, #8]
 2415 0644 00C08DE5 		str	ip, [sp, #0]
 2416 0648 FEFFFFEB 		bl	lcd_draw_hline
 130:../src/lcd.c  **** 	lcd_draw_vline(yup, ydown + width + 1, xright, color, width);
 2417              		.loc 1 130 0
 2418 064c B4215BE1 		ldrh	r2, [fp, #-20]	@ movhi
 2419 0650 B830DBE1 		ldrh	r3, [fp, #8]	@ movhi
 2420 0654 033082E0 		add	r3, r2, r3
 2421 0658 0338A0E1 		mov	r3, r3, asl #16
 2422 065c 2338A0E1 		mov	r3, r3, lsr #16
 2423 0660 013083E2 		add	r3, r3, #1
 2424 0664 0338A0E1 		mov	r3, r3, asl #16
 2425 0668 2318A0E1 		mov	r1, r3, lsr #16
 2426 066c B0015BE1 		ldrh	r0, [fp, #-16]
 2427 0670 B2215BE1 		ldrh	r2, [fp, #-18]
 2428 0674 0430DBE5 		ldrb	r3, [fp, #4]	@ zero_extendqisi2
 2429 0678 B8C0DBE1 		ldrh	ip, [fp, #8]
 2430 067c 00C08DE5 		str	ip, [sp, #0]
 2431 0680 FEFFFFEB 		bl	lcd_draw_vline
 131:../src/lcd.c  **** }
 2432              		.loc 1 131 0
 2433 0684 0CD04BE2 		sub	sp, fp, #12
 2434 0688 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2435 068c 1EFF2FE1 		bx	lr
 2436              		.cfi_endproc
 2437              	.LFE9:
 2439              		.align	2
 2440              		.global	lcd_putchar
 2442              	lcd_putchar:
 2443              	.LFB10:
 132:../src/lcd.c  **** 
 133:../src/lcd.c  **** void lcd_putchar( uint16 x, uint16 y, uint8 color, char ch )
 134:../src/lcd.c  **** {
 2444              		.loc 1 134 0
 2445              		.cfi_startproc
 2446              		@ Function supports interworking.
 2447              		@ args = 0, pretend = 0, frame = 16
 2448              		@ frame_needed = 1, uses_anonymous_args = 0
 2449 0690 0DC0A0E1 		mov	ip, sp
 2450              	.LCFI20:
 2451              		.cfi_def_cfa_register 12
 2452 0694 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2453 0698 04B04CE2 		sub	fp, ip, #4
 2454              		.cfi_offset 14, -8
 2455              		.cfi_offset 13, -12
 2456              		.cfi_offset 11, -16
 2457              	.LCFI21:
 2458              		.cfi_def_cfa 11, 4
 2459 069c 10D04DE2 		sub	sp, sp, #16
 2460 06a0 B6014BE1 		strh	r0, [fp, #-22]	@ movhi
 2461 06a4 B8114BE1 		strh	r1, [fp, #-24]	@ movhi
 2462 06a8 19204BE5 		strb	r2, [fp, #-25]
 2463 06ac 1A304BE5 		strb	r3, [fp, #-26]
 135:../src/lcd.c  ****     uint8 line, row;
 136:../src/lcd.c  ****     uint8 *bitmap;
 137:../src/lcd.c  **** 
 138:../src/lcd.c  ****     bitmap = font + ch*16;
 2464              		.loc 1 138 0
 2465 06b0 1A305BE5 		ldrb	r3, [fp, #-26]	@ zero_extendqisi2
 2466 06b4 0332A0E1 		mov	r3, r3, asl #4
 2467 06b8 0320A0E1 		mov	r2, r3
 2468 06bc 1C319FE5 		ldr	r3, .L46
 2469 06c0 033082E0 		add	r3, r2, r3
 2470 06c4 14300BE5 		str	r3, [fp, #-20]
 139:../src/lcd.c  ****     for( line=0; line<16; line++ )
 2471              		.loc 1 139 0
 2472 06c8 0030A0E3 		mov	r3, #0
 2473 06cc 0D304BE5 		strb	r3, [fp, #-13]
 2474 06d0 3C0000EA 		b	.L40
 2475              	.L45:
 140:../src/lcd.c  ****         for( row=0; row<8; row++ )                    
 2476              		.loc 1 140 0
 2477 06d4 0030A0E3 		mov	r3, #0
 2478 06d8 0E304BE5 		strb	r3, [fp, #-14]
 2479 06dc 330000EA 		b	.L41
 2480              	.L44:
 141:../src/lcd.c  ****             if( bitmap[line] & (0x80 >> row) )
 2481              		.loc 1 141 0
 2482 06e0 0D305BE5 		ldrb	r3, [fp, #-13]	@ zero_extendqisi2
 2483 06e4 14201BE5 		ldr	r2, [fp, #-20]
 2484 06e8 033082E0 		add	r3, r2, r3
 2485 06ec 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2486 06f0 0320A0E1 		mov	r2, r3
 2487 06f4 0E305BE5 		ldrb	r3, [fp, #-14]	@ zero_extendqisi2
 2488 06f8 8010A0E3 		mov	r1, #128
 2489 06fc 5133A0E1 		mov	r3, r1, asr r3
 2490 0700 033002E0 		and	r3, r2, r3
 2491 0704 000053E3 		cmp	r3, #0
 2492 0708 1300000A 		beq	.L42
 142:../src/lcd.c  ****                 lcd_putpixel( x+row, y+line, color );
 2493              		.loc 1 142 0
 2494 070c 0E305BE5 		ldrb	r3, [fp, #-14]	@ zero_extendqisi2
 2495 0710 0338A0E1 		mov	r3, r3, asl #16
 2496 0714 2328A0E1 		mov	r2, r3, lsr #16
 2497 0718 B6315BE1 		ldrh	r3, [fp, #-22]	@ movhi
 2498 071c 033082E0 		add	r3, r2, r3
 2499 0720 0338A0E1 		mov	r3, r3, asl #16
 2500 0724 2318A0E1 		mov	r1, r3, lsr #16
 2501 0728 0D305BE5 		ldrb	r3, [fp, #-13]	@ zero_extendqisi2
 2502 072c 0338A0E1 		mov	r3, r3, asl #16
 2503 0730 2328A0E1 		mov	r2, r3, lsr #16
 2504 0734 B8315BE1 		ldrh	r3, [fp, #-24]	@ movhi
 2505 0738 033082E0 		add	r3, r2, r3
 2506 073c 0338A0E1 		mov	r3, r3, asl #16
 2507 0740 2328A0E1 		mov	r2, r3, lsr #16
 2508 0744 19305BE5 		ldrb	r3, [fp, #-25]	@ zero_extendqisi2
 2509 0748 0100A0E1 		mov	r0, r1
 2510 074c 0210A0E1 		mov	r1, r2
 2511 0750 0320A0E1 		mov	r2, r3
 2512 0754 FEFFFFEB 		bl	lcd_putpixel
 2513 0758 110000EA 		b	.L43
 2514              	.L42:
 143:../src/lcd.c  ****             else
 144:../src/lcd.c  ****                 lcd_putpixel( x+row, y+line, WHITE );
 2515              		.loc 1 144 0
 2516 075c 0E305BE5 		ldrb	r3, [fp, #-14]	@ zero_extendqisi2
 2517 0760 0338A0E1 		mov	r3, r3, asl #16
 2518 0764 2328A0E1 		mov	r2, r3, lsr #16
 2519 0768 B6315BE1 		ldrh	r3, [fp, #-22]	@ movhi
 2520 076c 033082E0 		add	r3, r2, r3
 2521 0770 0338A0E1 		mov	r3, r3, asl #16
 2522 0774 2328A0E1 		mov	r2, r3, lsr #16
 2523 0778 0D305BE5 		ldrb	r3, [fp, #-13]	@ zero_extendqisi2
 2524 077c 0338A0E1 		mov	r3, r3, asl #16
 2525 0780 2318A0E1 		mov	r1, r3, lsr #16
 2526 0784 B8315BE1 		ldrh	r3, [fp, #-24]	@ movhi
 2527 0788 033081E0 		add	r3, r1, r3
 2528 078c 0338A0E1 		mov	r3, r3, asl #16
 2529 0790 2338A0E1 		mov	r3, r3, lsr #16
 2530 0794 0200A0E1 		mov	r0, r2
 2531 0798 0310A0E1 		mov	r1, r3
 2532 079c 0020A0E3 		mov	r2, #0
 2533 07a0 FEFFFFEB 		bl	lcd_putpixel
 2534              	.L43:
 140:../src/lcd.c  ****         for( row=0; row<8; row++ )                    
 2535              		.loc 1 140 0
 2536 07a4 0E305BE5 		ldrb	r3, [fp, #-14]
 2537 07a8 013083E2 		add	r3, r3, #1
 2538 07ac 0E304BE5 		strb	r3, [fp, #-14]
 2539              	.L41:
 140:../src/lcd.c  ****         for( row=0; row<8; row++ )                    
 2540              		.loc 1 140 0 is_stmt 0 discriminator 1
 2541 07b0 0E305BE5 		ldrb	r3, [fp, #-14]	@ zero_extendqisi2
 2542 07b4 070053E3 		cmp	r3, #7
 2543 07b8 C8FFFF9A 		bls	.L44
 139:../src/lcd.c  ****     for( line=0; line<16; line++ )
 2544              		.loc 1 139 0 is_stmt 1
 2545 07bc 0D305BE5 		ldrb	r3, [fp, #-13]
 2546 07c0 013083E2 		add	r3, r3, #1
 2547 07c4 0D304BE5 		strb	r3, [fp, #-13]
 2548              	.L40:
 139:../src/lcd.c  ****     for( line=0; line<16; line++ )
 2549              		.loc 1 139 0 is_stmt 0 discriminator 1
 2550 07c8 0D305BE5 		ldrb	r3, [fp, #-13]	@ zero_extendqisi2
 2551 07cc 0F0053E3 		cmp	r3, #15
 2552 07d0 BFFFFF9A 		bls	.L45
 145:../src/lcd.c  **** }
 2553              		.loc 1 145 0 is_stmt 1
 2554 07d4 0CD04BE2 		sub	sp, fp, #12
 2555 07d8 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2556 07dc 1EFF2FE1 		bx	lr
 2557              	.L47:
 2558              		.align	2
 2559              	.L46:
 2560 07e0 00000000 		.word	font
 2561              		.cfi_endproc
 2562              	.LFE10:
 2564              		.align	2
 2565              		.global	lcd_puts
 2567              	lcd_puts:
 2568              	.LFB11:
 146:../src/lcd.c  **** 
 147:../src/lcd.c  **** void lcd_puts( uint16 x, uint16 y, uint8 color, char *s )
 148:../src/lcd.c  **** {
 2569              		.loc 1 148 0
 2570              		.cfi_startproc
 2571              		@ Function supports interworking.
 2572              		@ args = 0, pretend = 0, frame = 24
 2573              		@ frame_needed = 1, uses_anonymous_args = 0
 2574 07e4 0DC0A0E1 		mov	ip, sp
 2575              	.LCFI22:
 2576              		.cfi_def_cfa_register 12
 2577 07e8 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2578 07ec 04B04CE2 		sub	fp, ip, #4
 2579              		.cfi_offset 14, -8
 2580              		.cfi_offset 13, -12
 2581              		.cfi_offset 11, -16
 2582              	.LCFI23:
 2583              		.cfi_def_cfa 11, 4
 2584 07f0 18D04DE2 		sub	sp, sp, #24
 2585 07f4 20300BE5 		str	r3, [fp, #-32]
 2586 07f8 B6014BE1 		strh	r0, [fp, #-22]	@ movhi
 2587 07fc B8114BE1 		strh	r1, [fp, #-24]	@ movhi
 2588 0800 0230A0E1 		mov	r3, r2
 2589 0804 19304BE5 		strb	r3, [fp, #-25]
 149:../src/lcd.c  **** 	uint16 i = y, j;
 2590              		.loc 1 149 0
 2591 0808 B8315BE1 		ldrh	r3, [fp, #-24]	@ movhi
 2592 080c BE304BE1 		strh	r3, [fp, #-14]	@ movhi
 150:../src/lcd.c  **** 
 151:../src/lcd.c  **** 	while((*s != '\0')&&(i < LCD_HEIGHT)){
 2593              		.loc 1 151 0
 2594 0810 190000EA 		b	.L49
 2595              	.L54:
 152:../src/lcd.c  **** 		j = x;
 2596              		.loc 1 152 0
 2597 0814 B6315BE1 		ldrh	r3, [fp, #-22]	@ movhi
 2598 0818 B0314BE1 		strh	r3, [fp, #-16]	@ movhi
 153:../src/lcd.c  **** 		while((*s != '\0')&&(j < LCD_WIDTH)){
 2599              		.loc 1 153 0
 2600 081c 0B0000EA 		b	.L50
 2601              	.L52:
 154:../src/lcd.c  **** 			lcd_putchar(j,i,color,*s);
 2602              		.loc 1 154 0
 2603 0820 20301BE5 		ldr	r3, [fp, #-32]
 2604 0824 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2605 0828 B0015BE1 		ldrh	r0, [fp, #-16]
 2606 082c BE105BE1 		ldrh	r1, [fp, #-14]
 2607 0830 19205BE5 		ldrb	r2, [fp, #-25]	@ zero_extendqisi2
 2608 0834 FEFFFFEB 		bl	lcd_putchar
 155:../src/lcd.c  **** 			s++;
 2609              		.loc 1 155 0
 2610 0838 20301BE5 		ldr	r3, [fp, #-32]
 2611 083c 013083E2 		add	r3, r3, #1
 2612 0840 20300BE5 		str	r3, [fp, #-32]
 156:../src/lcd.c  **** 			j+=8;
 2613              		.loc 1 156 0
 2614 0844 B0315BE1 		ldrh	r3, [fp, #-16]	@ movhi
 2615 0848 083083E2 		add	r3, r3, #8
 2616 084c B0314BE1 		strh	r3, [fp, #-16]	@ movhi
 2617              	.L50:
 153:../src/lcd.c  **** 		while((*s != '\0')&&(j < LCD_WIDTH)){
 2618              		.loc 1 153 0 discriminator 1
 2619 0850 20301BE5 		ldr	r3, [fp, #-32]
 2620 0854 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2621 0858 000053E3 		cmp	r3, #0
 2622 085c 0300000A 		beq	.L51
 153:../src/lcd.c  **** 		while((*s != '\0')&&(j < LCD_WIDTH)){
 2623              		.loc 1 153 0 is_stmt 0 discriminator 2
 2624 0860 B0215BE1 		ldrh	r2, [fp, #-16]
 2625 0864 38309FE5 		ldr	r3, .L55
 2626 0868 030052E1 		cmp	r2, r3
 2627 086c EBFFFF9A 		bls	.L52
 2628              	.L51:
 157:../src/lcd.c  **** 		}
 158:../src/lcd.c  **** 		i+=16;
 2629              		.loc 1 158 0 is_stmt 1
 2630 0870 BE305BE1 		ldrh	r3, [fp, #-14]	@ movhi
 2631 0874 103083E2 		add	r3, r3, #16
 2632 0878 BE304BE1 		strh	r3, [fp, #-14]	@ movhi
 2633              	.L49:
 151:../src/lcd.c  **** 	while((*s != '\0')&&(i < LCD_HEIGHT)){
 2634              		.loc 1 151 0 discriminator 1
 2635 087c 20301BE5 		ldr	r3, [fp, #-32]
 2636 0880 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2637 0884 000053E3 		cmp	r3, #0
 2638 0888 0200000A 		beq	.L48
 151:../src/lcd.c  **** 	while((*s != '\0')&&(i < LCD_HEIGHT)){
 2639              		.loc 1 151 0 is_stmt 0 discriminator 2
 2640 088c BE305BE1 		ldrh	r3, [fp, #-14]
 2641 0890 EF0053E3 		cmp	r3, #239
 2642 0894 DEFFFF9A 		bls	.L54
 2643              	.L48:
 159:../src/lcd.c  **** 	}
 160:../src/lcd.c  **** }
 2644              		.loc 1 160 0 is_stmt 1
 2645 0898 0CD04BE2 		sub	sp, fp, #12
 2646 089c 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2647 08a0 1EFF2FE1 		bx	lr
 2648              	.L56:
 2649              		.align	2
 2650              	.L55:
 2651 08a4 3F010000 		.word	319
 2652              		.cfi_endproc
 2653              	.LFE11:
 2655              		.align	2
 2656              		.global	lcd_putint
 2658              	lcd_putint:
 2659              	.LFB12:
 161:../src/lcd.c  **** 
 162:../src/lcd.c  **** void lcd_putint( uint16 x, uint16 y, uint8 color, int32 i )
 163:../src/lcd.c  **** {
 2660              		.loc 1 163 0
 2661              		.cfi_startproc
 2662              		@ Function supports interworking.
 2663              		@ args = 0, pretend = 0, frame = 40
 2664              		@ frame_needed = 1, uses_anonymous_args = 0
 2665 08a8 0DC0A0E1 		mov	ip, sp
 2666              	.LCFI24:
 2667              		.cfi_def_cfa_register 12
 2668 08ac 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2669 08b0 04B04CE2 		sub	fp, ip, #4
 2670              		.cfi_offset 14, -8
 2671              		.cfi_offset 13, -12
 2672              		.cfi_offset 11, -16
 2673              	.LCFI25:
 2674              		.cfi_def_cfa 11, 4
 2675 08b4 28D04DE2 		sub	sp, sp, #40
 2676 08b8 30300BE5 		str	r3, [fp, #-48]
 2677 08bc B6024BE1 		strh	r0, [fp, #-38]	@ movhi
 2678 08c0 B8124BE1 		strh	r1, [fp, #-40]	@ movhi
 2679 08c4 0230A0E1 		mov	r3, r2
 2680 08c8 29304BE5 		strb	r3, [fp, #-41]
 164:../src/lcd.c  **** 	uint16 x2 = x, y2 = y;
 2681              		.loc 1 164 0
 2682 08cc B6325BE1 		ldrh	r3, [fp, #-38]	@ movhi
 2683 08d0 B4314BE1 		strh	r3, [fp, #-20]	@ movhi
 2684 08d4 B8325BE1 		ldrh	r3, [fp, #-40]	@ movhi
 2685 08d8 B6314BE1 		strh	r3, [fp, #-22]	@ movhi
 165:../src/lcd.c  **** 	char buf[8 + 1];
 166:../src/lcd.c  **** 	char *p = buf + 8;
 2686              		.loc 1 166 0
 2687 08dc 20304BE2 		sub	r3, fp, #32
 2688 08e0 083083E2 		add	r3, r3, #8
 2689 08e4 10300BE5 		str	r3, [fp, #-16]
 167:../src/lcd.c  **** 	uint8 c = 0;
 2690              		.loc 1 167 0
 2691 08e8 0030A0E3 		mov	r3, #0
 2692 08ec 17304BE5 		strb	r3, [fp, #-23]
 168:../src/lcd.c  **** 	uint8 neg = 0;
 2693              		.loc 1 168 0
 2694 08f0 0030A0E3 		mov	r3, #0
 2695 08f4 11304BE5 		strb	r3, [fp, #-17]
 169:../src/lcd.c  **** 
 170:../src/lcd.c  **** 	if(i < 0){
 2696              		.loc 1 170 0
 2697 08f8 30301BE5 		ldr	r3, [fp, #-48]
 2698 08fc 000053E3 		cmp	r3, #0
 2699 0900 040000AA 		bge	.L58
 171:../src/lcd.c  **** 		neg = 1;
 2700              		.loc 1 171 0
 2701 0904 0130A0E3 		mov	r3, #1
 2702 0908 11304BE5 		strb	r3, [fp, #-17]
 172:../src/lcd.c  **** 		i = -i;
 2703              		.loc 1 172 0
 2704 090c 30301BE5 		ldr	r3, [fp, #-48]
 2705 0910 003063E2 		rsb	r3, r3, #0
 2706 0914 30300BE5 		str	r3, [fp, #-48]
 2707              	.L58:
 173:../src/lcd.c  **** 	}
 174:../src/lcd.c  **** 
 175:../src/lcd.c  **** 	*p = '\0';
 2708              		.loc 1 175 0
 2709 0918 10301BE5 		ldr	r3, [fp, #-16]
 2710 091c 0020A0E3 		mov	r2, #0
 2711 0920 0020C3E5 		strb	r2, [r3, #0]
 2712              	.L59:
 176:../src/lcd.c  **** 	do {
 177:../src/lcd.c  **** 		c = i % 10;
 2713              		.loc 1 177 0 discriminator 1
 2714 0924 30101BE5 		ldr	r1, [fp, #-48]
 2715 0928 C0309FE5 		ldr	r3, .L61
 2716 092c 9123C3E0 		smull	r2, r3, r1, r3
 2717 0930 4321A0E1 		mov	r2, r3, asr #2
 2718 0934 C13FA0E1 		mov	r3, r1, asr #31
 2719 0938 022063E0 		rsb	r2, r3, r2
 2720 093c 0230A0E1 		mov	r3, r2
 2721 0940 0331A0E1 		mov	r3, r3, asl #2
 2722 0944 023083E0 		add	r3, r3, r2
 2723 0948 8330A0E1 		mov	r3, r3, asl #1
 2724 094c 012063E0 		rsb	r2, r3, r1
 2725 0950 0230A0E1 		mov	r3, r2
 2726 0954 17304BE5 		strb	r3, [fp, #-23]
 178:../src/lcd.c  **** 		*--p = '0' + c;
 2727              		.loc 1 178 0 discriminator 1
 2728 0958 10301BE5 		ldr	r3, [fp, #-16]
 2729 095c 013043E2 		sub	r3, r3, #1
 2730 0960 10300BE5 		str	r3, [fp, #-16]
 2731 0964 17305BE5 		ldrb	r3, [fp, #-23]
 2732 0968 303083E2 		add	r3, r3, #48
 2733 096c FF2003E2 		and	r2, r3, #255
 2734 0970 10301BE5 		ldr	r3, [fp, #-16]
 2735 0974 0020C3E5 		strb	r2, [r3, #0]
 179:../src/lcd.c  **** 		i = i / 10;
 2736              		.loc 1 179 0 discriminator 1
 2737 0978 30301BE5 		ldr	r3, [fp, #-48]
 2738 097c 6C209FE5 		ldr	r2, .L61
 2739 0980 9312C2E0 		smull	r1, r2, r3, r2
 2740 0984 4221A0E1 		mov	r2, r2, asr #2
 2741 0988 C33FA0E1 		mov	r3, r3, asr #31
 2742 098c 023063E0 		rsb	r3, r3, r2
 2743 0990 30300BE5 		str	r3, [fp, #-48]
 180:../src/lcd.c  **** 	} while (i);
 2744              		.loc 1 180 0 discriminator 1
 2745 0994 30301BE5 		ldr	r3, [fp, #-48]
 2746 0998 000053E3 		cmp	r3, #0
 2747 099c E0FFFF1A 		bne	.L59
 181:../src/lcd.c  **** 
 182:../src/lcd.c  **** 	if(neg == 1){
 2748              		.loc 1 182 0
 2749 09a0 11305BE5 		ldrb	r3, [fp, #-17]	@ zero_extendqisi2
 2750 09a4 010053E3 		cmp	r3, #1
 2751 09a8 0500001A 		bne	.L60
 183:../src/lcd.c  **** 		*--p = '-';
 2752              		.loc 1 183 0
 2753 09ac 10301BE5 		ldr	r3, [fp, #-16]
 2754 09b0 013043E2 		sub	r3, r3, #1
 2755 09b4 10300BE5 		str	r3, [fp, #-16]
 2756 09b8 10301BE5 		ldr	r3, [fp, #-16]
 2757 09bc 2D20A0E3 		mov	r2, #45
 2758 09c0 0020C3E5 		strb	r2, [r3, #0]
 2759              	.L60:
 184:../src/lcd.c  **** 	}
 185:../src/lcd.c  **** 
 186:../src/lcd.c  **** 	lcd_puts(x2,y2,color,p);
 2760              		.loc 1 186 0
 2761 09c4 B4115BE1 		ldrh	r1, [fp, #-20]
 2762 09c8 B6215BE1 		ldrh	r2, [fp, #-22]
 2763 09cc 29305BE5 		ldrb	r3, [fp, #-41]	@ zero_extendqisi2
 2764 09d0 0100A0E1 		mov	r0, r1
 2765 09d4 0210A0E1 		mov	r1, r2
 2766 09d8 0320A0E1 		mov	r2, r3
 2767 09dc 10301BE5 		ldr	r3, [fp, #-16]
 2768 09e0 FEFFFFEB 		bl	lcd_puts
 187:../src/lcd.c  **** }
 2769              		.loc 1 187 0
 2770 09e4 0CD04BE2 		sub	sp, fp, #12
 2771 09e8 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2772 09ec 1EFF2FE1 		bx	lr
 2773              	.L62:
 2774              		.align	2
 2775              	.L61:
 2776 09f0 67666666 		.word	1717986919
 2777              		.cfi_endproc
 2778              	.LFE12:
 2780              		.align	2
 2781              		.global	lcd_puthex
 2783              	lcd_puthex:
 2784              	.LFB13:
 188:../src/lcd.c  **** 
 189:../src/lcd.c  **** void lcd_puthex( uint16 x, uint16 y, uint8 color, uint32 i )
 190:../src/lcd.c  **** {
 2785              		.loc 1 190 0
 2786              		.cfi_startproc
 2787              		@ Function supports interworking.
 2788              		@ args = 0, pretend = 0, frame = 32
 2789              		@ frame_needed = 1, uses_anonymous_args = 0
 2790 09f4 0DC0A0E1 		mov	ip, sp
 2791              	.LCFI26:
 2792              		.cfi_def_cfa_register 12
 2793 09f8 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2794 09fc 04B04CE2 		sub	fp, ip, #4
 2795              		.cfi_offset 14, -8
 2796              		.cfi_offset 13, -12
 2797              		.cfi_offset 11, -16
 2798              	.LCFI27:
 2799              		.cfi_def_cfa 11, 4
 2800 0a00 20D04DE2 		sub	sp, sp, #32
 2801 0a04 28300BE5 		str	r3, [fp, #-40]
 2802 0a08 BE014BE1 		strh	r0, [fp, #-30]	@ movhi
 2803 0a0c B0124BE1 		strh	r1, [fp, #-32]	@ movhi
 2804 0a10 0230A0E1 		mov	r3, r2
 2805 0a14 21304BE5 		strb	r3, [fp, #-33]
 191:../src/lcd.c  ****     char buf[8 + 1];
 192:../src/lcd.c  ****     char *p = buf + 8;
 2806              		.loc 1 192 0
 2807 0a18 1C304BE2 		sub	r3, fp, #28
 2808 0a1c 083083E2 		add	r3, r3, #8
 2809 0a20 10300BE5 		str	r3, [fp, #-16]
 193:../src/lcd.c  ****     uint8 c;
 194:../src/lcd.c  **** 
 195:../src/lcd.c  ****     *p = '\0';
 2810              		.loc 1 195 0
 2811 0a24 10301BE5 		ldr	r3, [fp, #-16]
 2812 0a28 0020A0E3 		mov	r2, #0
 2813 0a2c 0020C3E5 		strb	r2, [r3, #0]
 2814              	.L66:
 196:../src/lcd.c  **** 
 197:../src/lcd.c  ****     do {
 198:../src/lcd.c  ****         c = i & 0xf;
 2815              		.loc 1 198 0
 2816 0a30 28301BE5 		ldr	r3, [fp, #-40]
 2817 0a34 FF3003E2 		and	r3, r3, #255
 2818 0a38 0F3003E2 		and	r3, r3, #15
 2819 0a3c 11304BE5 		strb	r3, [fp, #-17]
 199:../src/lcd.c  ****         if( c < 10 )
 2820              		.loc 1 199 0
 2821 0a40 11305BE5 		ldrb	r3, [fp, #-17]	@ zero_extendqisi2
 2822 0a44 090053E3 		cmp	r3, #9
 2823 0a48 0800008A 		bhi	.L64
 200:../src/lcd.c  ****             *--p = '0' + c;
 2824              		.loc 1 200 0
 2825 0a4c 10301BE5 		ldr	r3, [fp, #-16]
 2826 0a50 013043E2 		sub	r3, r3, #1
 2827 0a54 10300BE5 		str	r3, [fp, #-16]
 2828 0a58 11305BE5 		ldrb	r3, [fp, #-17]
 2829 0a5c 303083E2 		add	r3, r3, #48
 2830 0a60 FF2003E2 		and	r2, r3, #255
 2831 0a64 10301BE5 		ldr	r3, [fp, #-16]
 2832 0a68 0020C3E5 		strb	r2, [r3, #0]
 2833 0a6c 070000EA 		b	.L65
 2834              	.L64:
 201:../src/lcd.c  ****         else
 202:../src/lcd.c  ****             *--p = 'a' + c - 10;
 2835              		.loc 1 202 0
 2836 0a70 10301BE5 		ldr	r3, [fp, #-16]
 2837 0a74 013043E2 		sub	r3, r3, #1
 2838 0a78 10300BE5 		str	r3, [fp, #-16]
 2839 0a7c 11305BE5 		ldrb	r3, [fp, #-17]
 2840 0a80 573083E2 		add	r3, r3, #87
 2841 0a84 FF2003E2 		and	r2, r3, #255
 2842 0a88 10301BE5 		ldr	r3, [fp, #-16]
 2843 0a8c 0020C3E5 		strb	r2, [r3, #0]
 2844              	.L65:
 203:../src/lcd.c  ****         i = i >> 4;
 2845              		.loc 1 203 0
 2846 0a90 28301BE5 		ldr	r3, [fp, #-40]
 2847 0a94 2332A0E1 		mov	r3, r3, lsr #4
 2848 0a98 28300BE5 		str	r3, [fp, #-40]
 204:../src/lcd.c  ****     } while( i );
 2849              		.loc 1 204 0
 2850 0a9c 28301BE5 		ldr	r3, [fp, #-40]
 2851 0aa0 000053E3 		cmp	r3, #0
 2852 0aa4 E1FFFF1A 		bne	.L66
 205:../src/lcd.c  **** 
 206:../src/lcd.c  ****     lcd_puts(x,y,color,p);
 2853              		.loc 1 206 0
 2854 0aa8 BE115BE1 		ldrh	r1, [fp, #-30]
 2855 0aac B0225BE1 		ldrh	r2, [fp, #-32]
 2856 0ab0 21305BE5 		ldrb	r3, [fp, #-33]	@ zero_extendqisi2
 2857 0ab4 0100A0E1 		mov	r0, r1
 2858 0ab8 0210A0E1 		mov	r1, r2
 2859 0abc 0320A0E1 		mov	r2, r3
 2860 0ac0 10301BE5 		ldr	r3, [fp, #-16]
 2861 0ac4 FEFFFFEB 		bl	lcd_puts
 207:../src/lcd.c  **** }
 2862              		.loc 1 207 0
 2863 0ac8 0CD04BE2 		sub	sp, fp, #12
 2864 0acc 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2865 0ad0 1EFF2FE1 		bx	lr
 2866              		.cfi_endproc
 2867              	.LFE13:
 2869              		.align	2
 2870              		.global	lcd_putchar_x2
 2872              	lcd_putchar_x2:
 2873              	.LFB14:
 208:../src/lcd.c  **** 
 209:../src/lcd.c  **** void lcd_putchar_x2( uint16 x, uint16 y, uint8 color, char ch )
 210:../src/lcd.c  **** {
 2874              		.loc 1 210 0
 2875              		.cfi_startproc
 2876              		@ Function supports interworking.
 2877              		@ args = 0, pretend = 0, frame = 16
 2878              		@ frame_needed = 1, uses_anonymous_args = 0
 2879 0ad4 0DC0A0E1 		mov	ip, sp
 2880              	.LCFI28:
 2881              		.cfi_def_cfa_register 12
 2882 0ad8 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2883 0adc 04B04CE2 		sub	fp, ip, #4
 2884              		.cfi_offset 14, -8
 2885              		.cfi_offset 13, -12
 2886              		.cfi_offset 11, -16
 2887              	.LCFI29:
 2888              		.cfi_def_cfa 11, 4
 2889 0ae0 10D04DE2 		sub	sp, sp, #16
 2890 0ae4 B6014BE1 		strh	r0, [fp, #-22]	@ movhi
 2891 0ae8 B8114BE1 		strh	r1, [fp, #-24]	@ movhi
 2892 0aec 19204BE5 		strb	r2, [fp, #-25]
 2893 0af0 1A304BE5 		strb	r3, [fp, #-26]
 211:../src/lcd.c  **** 	uint8 line, row;
 212:../src/lcd.c  **** 	uint8* bitmap;
 213:../src/lcd.c  **** 	bitmap = font + ch * 16;
 2894              		.loc 1 213 0
 2895 0af4 1A305BE5 		ldrb	r3, [fp, #-26]	@ zero_extendqisi2
 2896 0af8 0332A0E1 		mov	r3, r3, asl #4
 2897 0afc 0320A0E1 		mov	r2, r3
 2898 0b00 48339FE5 		ldr	r3, .L74
 2899 0b04 033082E0 		add	r3, r2, r3
 2900 0b08 14300BE5 		str	r3, [fp, #-20]
 214:../src/lcd.c  **** 	for (line = 0; line < 32; line += 2)
 2901              		.loc 1 214 0
 2902 0b0c 0030A0E3 		mov	r3, #0
 2903 0b10 0D304BE5 		strb	r3, [fp, #-13]
 2904 0b14 C70000EA 		b	.L68
 2905              	.L73:
 215:../src/lcd.c  **** 		for (row = 0; row < 16; row += 2)
 2906              		.loc 1 215 0
 2907 0b18 0030A0E3 		mov	r3, #0
 2908 0b1c 0E304BE5 		strb	r3, [fp, #-14]
 2909 0b20 BE0000EA 		b	.L69
 2910              	.L72:
 216:../src/lcd.c  **** 			if (bitmap[(line / 2)] & (0x80 >> (row / 2))) {
 2911              		.loc 1 216 0
 2912 0b24 0D305BE5 		ldrb	r3, [fp, #-13]	@ zero_extendqisi2
 2913 0b28 A330A0E1 		mov	r3, r3, lsr #1
 2914 0b2c FF3003E2 		and	r3, r3, #255
 2915 0b30 14201BE5 		ldr	r2, [fp, #-20]
 2916 0b34 033082E0 		add	r3, r2, r3
 2917 0b38 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2918 0b3c 0320A0E1 		mov	r2, r3
 2919 0b40 0E305BE5 		ldrb	r3, [fp, #-14]	@ zero_extendqisi2
 2920 0b44 A330A0E1 		mov	r3, r3, lsr #1
 2921 0b48 FF3003E2 		and	r3, r3, #255
 2922 0b4c 8010A0E3 		mov	r1, #128
 2923 0b50 5133A0E1 		mov	r3, r1, asr r3
 2924 0b54 033002E0 		and	r3, r2, r3
 2925 0b58 000053E3 		cmp	r3, #0
 2926 0b5c 5800000A 		beq	.L70
 217:../src/lcd.c  **** 				lcd_putpixel(x + row, y + line, color);
 2927              		.loc 1 217 0
 2928 0b60 0E305BE5 		ldrb	r3, [fp, #-14]	@ zero_extendqisi2
 2929 0b64 0338A0E1 		mov	r3, r3, asl #16
 2930 0b68 2328A0E1 		mov	r2, r3, lsr #16
 2931 0b6c B6315BE1 		ldrh	r3, [fp, #-22]	@ movhi
 2932 0b70 033082E0 		add	r3, r2, r3
 2933 0b74 0338A0E1 		mov	r3, r3, asl #16
 2934 0b78 2318A0E1 		mov	r1, r3, lsr #16
 2935 0b7c 0D305BE5 		ldrb	r3, [fp, #-13]	@ zero_extendqisi2
 2936 0b80 0338A0E1 		mov	r3, r3, asl #16
 2937 0b84 2328A0E1 		mov	r2, r3, lsr #16
 2938 0b88 B8315BE1 		ldrh	r3, [fp, #-24]	@ movhi
 2939 0b8c 033082E0 		add	r3, r2, r3
 2940 0b90 0338A0E1 		mov	r3, r3, asl #16
 2941 0b94 2328A0E1 		mov	r2, r3, lsr #16
 2942 0b98 19305BE5 		ldrb	r3, [fp, #-25]	@ zero_extendqisi2
 2943 0b9c 0100A0E1 		mov	r0, r1
 2944 0ba0 0210A0E1 		mov	r1, r2
 2945 0ba4 0320A0E1 		mov	r2, r3
 2946 0ba8 FEFFFFEB 		bl	lcd_putpixel
 218:../src/lcd.c  **** 				lcd_putpixel(x + row, (y + line + 1), color);
 2947              		.loc 1 218 0
 2948 0bac 0E305BE5 		ldrb	r3, [fp, #-14]	@ zero_extendqisi2
 2949 0bb0 0338A0E1 		mov	r3, r3, asl #16
 2950 0bb4 2328A0E1 		mov	r2, r3, lsr #16
 2951 0bb8 B6315BE1 		ldrh	r3, [fp, #-22]	@ movhi
 2952 0bbc 033082E0 		add	r3, r2, r3
 2953 0bc0 0338A0E1 		mov	r3, r3, asl #16
 2954 0bc4 2318A0E1 		mov	r1, r3, lsr #16
 2955 0bc8 0D305BE5 		ldrb	r3, [fp, #-13]	@ zero_extendqisi2
 2956 0bcc 0338A0E1 		mov	r3, r3, asl #16
 2957 0bd0 2328A0E1 		mov	r2, r3, lsr #16
 2958 0bd4 B8315BE1 		ldrh	r3, [fp, #-24]	@ movhi
 2959 0bd8 033082E0 		add	r3, r2, r3
 2960 0bdc 0338A0E1 		mov	r3, r3, asl #16
 2961 0be0 2338A0E1 		mov	r3, r3, lsr #16
 2962 0be4 013083E2 		add	r3, r3, #1
 2963 0be8 0338A0E1 		mov	r3, r3, asl #16
 2964 0bec 2328A0E1 		mov	r2, r3, lsr #16
 2965 0bf0 19305BE5 		ldrb	r3, [fp, #-25]	@ zero_extendqisi2
 2966 0bf4 0100A0E1 		mov	r0, r1
 2967 0bf8 0210A0E1 		mov	r1, r2
 2968 0bfc 0320A0E1 		mov	r2, r3
 2969 0c00 FEFFFFEB 		bl	lcd_putpixel
 219:../src/lcd.c  **** 				lcd_putpixel((x + row + 1), y + line, color);
 2970              		.loc 1 219 0
 2971 0c04 0E305BE5 		ldrb	r3, [fp, #-14]	@ zero_extendqisi2
 2972 0c08 0338A0E1 		mov	r3, r3, asl #16
 2973 0c0c 2328A0E1 		mov	r2, r3, lsr #16
 2974 0c10 B6315BE1 		ldrh	r3, [fp, #-22]	@ movhi
 2975 0c14 033082E0 		add	r3, r2, r3
 2976 0c18 0338A0E1 		mov	r3, r3, asl #16
 2977 0c1c 2338A0E1 		mov	r3, r3, lsr #16
 2978 0c20 013083E2 		add	r3, r3, #1
 2979 0c24 0338A0E1 		mov	r3, r3, asl #16
 2980 0c28 2318A0E1 		mov	r1, r3, lsr #16
 2981 0c2c 0D305BE5 		ldrb	r3, [fp, #-13]	@ zero_extendqisi2
 2982 0c30 0338A0E1 		mov	r3, r3, asl #16
 2983 0c34 2328A0E1 		mov	r2, r3, lsr #16
 2984 0c38 B8315BE1 		ldrh	r3, [fp, #-24]	@ movhi
 2985 0c3c 033082E0 		add	r3, r2, r3
 2986 0c40 0338A0E1 		mov	r3, r3, asl #16
 2987 0c44 2328A0E1 		mov	r2, r3, lsr #16
 2988 0c48 19305BE5 		ldrb	r3, [fp, #-25]	@ zero_extendqisi2
 2989 0c4c 0100A0E1 		mov	r0, r1
 2990 0c50 0210A0E1 		mov	r1, r2
 2991 0c54 0320A0E1 		mov	r2, r3
 2992 0c58 FEFFFFEB 		bl	lcd_putpixel
 220:../src/lcd.c  **** 				lcd_putpixel((x + row + 1), (y + line + 1), color);
 2993              		.loc 1 220 0
 2994 0c5c 0E305BE5 		ldrb	r3, [fp, #-14]	@ zero_extendqisi2
 2995 0c60 0338A0E1 		mov	r3, r3, asl #16
 2996 0c64 2328A0E1 		mov	r2, r3, lsr #16
 2997 0c68 B6315BE1 		ldrh	r3, [fp, #-22]	@ movhi
 2998 0c6c 033082E0 		add	r3, r2, r3
 2999 0c70 0338A0E1 		mov	r3, r3, asl #16
 3000 0c74 2338A0E1 		mov	r3, r3, lsr #16
 3001 0c78 013083E2 		add	r3, r3, #1
 3002 0c7c 0338A0E1 		mov	r3, r3, asl #16
 3003 0c80 2318A0E1 		mov	r1, r3, lsr #16
 3004 0c84 0D305BE5 		ldrb	r3, [fp, #-13]	@ zero_extendqisi2
 3005 0c88 0338A0E1 		mov	r3, r3, asl #16
 3006 0c8c 2328A0E1 		mov	r2, r3, lsr #16
 3007 0c90 B8315BE1 		ldrh	r3, [fp, #-24]	@ movhi
 3008 0c94 033082E0 		add	r3, r2, r3
 3009 0c98 0338A0E1 		mov	r3, r3, asl #16
 3010 0c9c 2338A0E1 		mov	r3, r3, lsr #16
 3011 0ca0 013083E2 		add	r3, r3, #1
 3012 0ca4 0338A0E1 		mov	r3, r3, asl #16
 3013 0ca8 2328A0E1 		mov	r2, r3, lsr #16
 3014 0cac 19305BE5 		ldrb	r3, [fp, #-25]	@ zero_extendqisi2
 3015 0cb0 0100A0E1 		mov	r0, r1
 3016 0cb4 0210A0E1 		mov	r1, r2
 3017 0cb8 0320A0E1 		mov	r2, r3
 3018 0cbc FEFFFFEB 		bl	lcd_putpixel
 3019 0cc0 530000EA 		b	.L71
 3020              	.L70:
 221:../src/lcd.c  **** 			}
 222:../src/lcd.c  **** 			else {
 223:../src/lcd.c  **** 				lcd_putpixel(x + row, y + line, WHITE);
 3021              		.loc 1 223 0
 3022 0cc4 0E305BE5 		ldrb	r3, [fp, #-14]	@ zero_extendqisi2
 3023 0cc8 0338A0E1 		mov	r3, r3, asl #16
 3024 0ccc 2328A0E1 		mov	r2, r3, lsr #16
 3025 0cd0 B6315BE1 		ldrh	r3, [fp, #-22]	@ movhi
 3026 0cd4 033082E0 		add	r3, r2, r3
 3027 0cd8 0338A0E1 		mov	r3, r3, asl #16
 3028 0cdc 2328A0E1 		mov	r2, r3, lsr #16
 3029 0ce0 0D305BE5 		ldrb	r3, [fp, #-13]	@ zero_extendqisi2
 3030 0ce4 0338A0E1 		mov	r3, r3, asl #16
 3031 0ce8 2318A0E1 		mov	r1, r3, lsr #16
 3032 0cec B8315BE1 		ldrh	r3, [fp, #-24]	@ movhi
 3033 0cf0 033081E0 		add	r3, r1, r3
 3034 0cf4 0338A0E1 		mov	r3, r3, asl #16
 3035 0cf8 2338A0E1 		mov	r3, r3, lsr #16
 3036 0cfc 0200A0E1 		mov	r0, r2
 3037 0d00 0310A0E1 		mov	r1, r3
 3038 0d04 0020A0E3 		mov	r2, #0
 3039 0d08 FEFFFFEB 		bl	lcd_putpixel
 224:../src/lcd.c  **** 				lcd_putpixel(x + row, (y + line + 1), WHITE);
 3040              		.loc 1 224 0
 3041 0d0c 0E305BE5 		ldrb	r3, [fp, #-14]	@ zero_extendqisi2
 3042 0d10 0338A0E1 		mov	r3, r3, asl #16
 3043 0d14 2328A0E1 		mov	r2, r3, lsr #16
 3044 0d18 B6315BE1 		ldrh	r3, [fp, #-22]	@ movhi
 3045 0d1c 033082E0 		add	r3, r2, r3
 3046 0d20 0338A0E1 		mov	r3, r3, asl #16
 3047 0d24 2328A0E1 		mov	r2, r3, lsr #16
 3048 0d28 0D305BE5 		ldrb	r3, [fp, #-13]	@ zero_extendqisi2
 3049 0d2c 0338A0E1 		mov	r3, r3, asl #16
 3050 0d30 2318A0E1 		mov	r1, r3, lsr #16
 3051 0d34 B8315BE1 		ldrh	r3, [fp, #-24]	@ movhi
 3052 0d38 033081E0 		add	r3, r1, r3
 3053 0d3c 0338A0E1 		mov	r3, r3, asl #16
 3054 0d40 2338A0E1 		mov	r3, r3, lsr #16
 3055 0d44 013083E2 		add	r3, r3, #1
 3056 0d48 0338A0E1 		mov	r3, r3, asl #16
 3057 0d4c 2338A0E1 		mov	r3, r3, lsr #16
 3058 0d50 0200A0E1 		mov	r0, r2
 3059 0d54 0310A0E1 		mov	r1, r3
 3060 0d58 0020A0E3 		mov	r2, #0
 3061 0d5c FEFFFFEB 		bl	lcd_putpixel
 225:../src/lcd.c  **** 				lcd_putpixel((x + row + 1), y + line, WHITE);
 3062              		.loc 1 225 0
 3063 0d60 0E305BE5 		ldrb	r3, [fp, #-14]	@ zero_extendqisi2
 3064 0d64 0338A0E1 		mov	r3, r3, asl #16
 3065 0d68 2328A0E1 		mov	r2, r3, lsr #16
 3066 0d6c B6315BE1 		ldrh	r3, [fp, #-22]	@ movhi
 3067 0d70 033082E0 		add	r3, r2, r3
 3068 0d74 0338A0E1 		mov	r3, r3, asl #16
 3069 0d78 2338A0E1 		mov	r3, r3, lsr #16
 3070 0d7c 013083E2 		add	r3, r3, #1
 3071 0d80 0338A0E1 		mov	r3, r3, asl #16
 3072 0d84 2328A0E1 		mov	r2, r3, lsr #16
 3073 0d88 0D305BE5 		ldrb	r3, [fp, #-13]	@ zero_extendqisi2
 3074 0d8c 0338A0E1 		mov	r3, r3, asl #16
 3075 0d90 2318A0E1 		mov	r1, r3, lsr #16
 3076 0d94 B8315BE1 		ldrh	r3, [fp, #-24]	@ movhi
 3077 0d98 033081E0 		add	r3, r1, r3
 3078 0d9c 0338A0E1 		mov	r3, r3, asl #16
 3079 0da0 2338A0E1 		mov	r3, r3, lsr #16
 3080 0da4 0200A0E1 		mov	r0, r2
 3081 0da8 0310A0E1 		mov	r1, r3
 3082 0dac 0020A0E3 		mov	r2, #0
 3083 0db0 FEFFFFEB 		bl	lcd_putpixel
 226:../src/lcd.c  **** 				lcd_putpixel((x + row + 1), (y + line + 1), WHITE);
 3084              		.loc 1 226 0
 3085 0db4 0E305BE5 		ldrb	r3, [fp, #-14]	@ zero_extendqisi2
 3086 0db8 0338A0E1 		mov	r3, r3, asl #16
 3087 0dbc 2328A0E1 		mov	r2, r3, lsr #16
 3088 0dc0 B6315BE1 		ldrh	r3, [fp, #-22]	@ movhi
 3089 0dc4 033082E0 		add	r3, r2, r3
 3090 0dc8 0338A0E1 		mov	r3, r3, asl #16
 3091 0dcc 2338A0E1 		mov	r3, r3, lsr #16
 3092 0dd0 013083E2 		add	r3, r3, #1
 3093 0dd4 0338A0E1 		mov	r3, r3, asl #16
 3094 0dd8 2328A0E1 		mov	r2, r3, lsr #16
 3095 0ddc 0D305BE5 		ldrb	r3, [fp, #-13]	@ zero_extendqisi2
 3096 0de0 0338A0E1 		mov	r3, r3, asl #16
 3097 0de4 2318A0E1 		mov	r1, r3, lsr #16
 3098 0de8 B8315BE1 		ldrh	r3, [fp, #-24]	@ movhi
 3099 0dec 033081E0 		add	r3, r1, r3
 3100 0df0 0338A0E1 		mov	r3, r3, asl #16
 3101 0df4 2338A0E1 		mov	r3, r3, lsr #16
 3102 0df8 013083E2 		add	r3, r3, #1
 3103 0dfc 0338A0E1 		mov	r3, r3, asl #16
 3104 0e00 2338A0E1 		mov	r3, r3, lsr #16
 3105 0e04 0200A0E1 		mov	r0, r2
 3106 0e08 0310A0E1 		mov	r1, r3
 3107 0e0c 0020A0E3 		mov	r2, #0
 3108 0e10 FEFFFFEB 		bl	lcd_putpixel
 3109              	.L71:
 215:../src/lcd.c  **** 		for (row = 0; row < 16; row += 2)
 3110              		.loc 1 215 0
 3111 0e14 0E305BE5 		ldrb	r3, [fp, #-14]
 3112 0e18 023083E2 		add	r3, r3, #2
 3113 0e1c 0E304BE5 		strb	r3, [fp, #-14]
 3114              	.L69:
 215:../src/lcd.c  **** 		for (row = 0; row < 16; row += 2)
 3115              		.loc 1 215 0 is_stmt 0 discriminator 1
 3116 0e20 0E305BE5 		ldrb	r3, [fp, #-14]	@ zero_extendqisi2
 3117 0e24 0F0053E3 		cmp	r3, #15
 3118 0e28 3DFFFF9A 		bls	.L72
 214:../src/lcd.c  **** 	for (line = 0; line < 32; line += 2)
 3119              		.loc 1 214 0 is_stmt 1
 3120 0e2c 0D305BE5 		ldrb	r3, [fp, #-13]
 3121 0e30 023083E2 		add	r3, r3, #2
 3122 0e34 0D304BE5 		strb	r3, [fp, #-13]
 3123              	.L68:
 214:../src/lcd.c  **** 	for (line = 0; line < 32; line += 2)
 3124              		.loc 1 214 0 is_stmt 0 discriminator 1
 3125 0e38 0D305BE5 		ldrb	r3, [fp, #-13]	@ zero_extendqisi2
 3126 0e3c 1F0053E3 		cmp	r3, #31
 3127 0e40 34FFFF9A 		bls	.L73
 227:../src/lcd.c  **** 			}
 228:../src/lcd.c  **** }
 3128              		.loc 1 228 0 is_stmt 1
 3129 0e44 0CD04BE2 		sub	sp, fp, #12
 3130 0e48 00689DE8 		ldmfd	sp, {fp, sp, lr}
 3131 0e4c 1EFF2FE1 		bx	lr
 3132              	.L75:
 3133              		.align	2
 3134              	.L74:
 3135 0e50 00000000 		.word	font
 3136              		.cfi_endproc
 3137              	.LFE14:
 3139              		.align	2
 3140              		.global	lcd_puts_x2
 3142              	lcd_puts_x2:
 3143              	.LFB15:
 229:../src/lcd.c  **** 
 230:../src/lcd.c  **** void lcd_puts_x2( uint16 x, uint16 y, uint8 color, char *s )
 231:../src/lcd.c  **** {
 3144              		.loc 1 231 0
 3145              		.cfi_startproc
 3146              		@ Function supports interworking.
 3147              		@ args = 0, pretend = 0, frame = 24
 3148              		@ frame_needed = 1, uses_anonymous_args = 0
 3149 0e54 0DC0A0E1 		mov	ip, sp
 3150              	.LCFI30:
 3151              		.cfi_def_cfa_register 12
 3152 0e58 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 3153 0e5c 04B04CE2 		sub	fp, ip, #4
 3154              		.cfi_offset 14, -8
 3155              		.cfi_offset 13, -12
 3156              		.cfi_offset 11, -16
 3157              	.LCFI31:
 3158              		.cfi_def_cfa 11, 4
 3159 0e60 18D04DE2 		sub	sp, sp, #24
 3160 0e64 20300BE5 		str	r3, [fp, #-32]
 3161 0e68 B6014BE1 		strh	r0, [fp, #-22]	@ movhi
 3162 0e6c B8114BE1 		strh	r1, [fp, #-24]	@ movhi
 3163 0e70 0230A0E1 		mov	r3, r2
 3164 0e74 19304BE5 		strb	r3, [fp, #-25]
 232:../src/lcd.c  **** 	uint16 i = y, j;
 3165              		.loc 1 232 0
 3166 0e78 B8315BE1 		ldrh	r3, [fp, #-24]	@ movhi
 3167 0e7c BE304BE1 		strh	r3, [fp, #-14]	@ movhi
 233:../src/lcd.c  **** 
 234:../src/lcd.c  **** 	while((*s != '\0')&&(i < LCD_HEIGHT)){
 3168              		.loc 1 234 0
 3169 0e80 190000EA 		b	.L77
 3170              	.L82:
 235:../src/lcd.c  **** 		j = x;
 3171              		.loc 1 235 0
 3172 0e84 B6315BE1 		ldrh	r3, [fp, #-22]	@ movhi
 3173 0e88 B0314BE1 		strh	r3, [fp, #-16]	@ movhi
 236:../src/lcd.c  **** 		while((*s != '\0')&&(j < LCD_WIDTH)){
 3174              		.loc 1 236 0
 3175 0e8c 0B0000EA 		b	.L78
 3176              	.L80:
 237:../src/lcd.c  **** 			lcd_putchar_x2(j,i,color,*s);
 3177              		.loc 1 237 0
 3178 0e90 20301BE5 		ldr	r3, [fp, #-32]
 3179 0e94 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3180 0e98 B0015BE1 		ldrh	r0, [fp, #-16]
 3181 0e9c BE105BE1 		ldrh	r1, [fp, #-14]
 3182 0ea0 19205BE5 		ldrb	r2, [fp, #-25]	@ zero_extendqisi2
 3183 0ea4 FEFFFFEB 		bl	lcd_putchar_x2
 238:../src/lcd.c  **** 			s++;
 3184              		.loc 1 238 0
 3185 0ea8 20301BE5 		ldr	r3, [fp, #-32]
 3186 0eac 013083E2 		add	r3, r3, #1
 3187 0eb0 20300BE5 		str	r3, [fp, #-32]
 239:../src/lcd.c  **** 			j+=16;
 3188              		.loc 1 239 0
 3189 0eb4 B0315BE1 		ldrh	r3, [fp, #-16]	@ movhi
 3190 0eb8 103083E2 		add	r3, r3, #16
 3191 0ebc B0314BE1 		strh	r3, [fp, #-16]	@ movhi
 3192              	.L78:
 236:../src/lcd.c  **** 		while((*s != '\0')&&(j < LCD_WIDTH)){
 3193              		.loc 1 236 0 discriminator 1
 3194 0ec0 20301BE5 		ldr	r3, [fp, #-32]
 3195 0ec4 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3196 0ec8 000053E3 		cmp	r3, #0
 3197 0ecc 0300000A 		beq	.L79
 236:../src/lcd.c  **** 		while((*s != '\0')&&(j < LCD_WIDTH)){
 3198              		.loc 1 236 0 is_stmt 0 discriminator 2
 3199 0ed0 B0215BE1 		ldrh	r2, [fp, #-16]
 3200 0ed4 38309FE5 		ldr	r3, .L83
 3201 0ed8 030052E1 		cmp	r2, r3
 3202 0edc EBFFFF9A 		bls	.L80
 3203              	.L79:
 240:../src/lcd.c  **** 		}
 241:../src/lcd.c  **** 		i+=32;
 3204              		.loc 1 241 0 is_stmt 1
 3205 0ee0 BE305BE1 		ldrh	r3, [fp, #-14]	@ movhi
 3206 0ee4 203083E2 		add	r3, r3, #32
 3207 0ee8 BE304BE1 		strh	r3, [fp, #-14]	@ movhi
 3208              	.L77:
 234:../src/lcd.c  **** 	while((*s != '\0')&&(i < LCD_HEIGHT)){
 3209              		.loc 1 234 0 discriminator 1
 3210 0eec 20301BE5 		ldr	r3, [fp, #-32]
 3211 0ef0 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3212 0ef4 000053E3 		cmp	r3, #0
 3213 0ef8 0200000A 		beq	.L76
 234:../src/lcd.c  **** 	while((*s != '\0')&&(i < LCD_HEIGHT)){
 3214              		.loc 1 234 0 is_stmt 0 discriminator 2
 3215 0efc BE305BE1 		ldrh	r3, [fp, #-14]
 3216 0f00 EF0053E3 		cmp	r3, #239
 3217 0f04 DEFFFF9A 		bls	.L82
 3218              	.L76:
 242:../src/lcd.c  **** 	}
 243:../src/lcd.c  **** }
 3219              		.loc 1 243 0 is_stmt 1
 3220 0f08 0CD04BE2 		sub	sp, fp, #12
 3221 0f0c 00689DE8 		ldmfd	sp, {fp, sp, lr}
 3222 0f10 1EFF2FE1 		bx	lr
 3223              	.L84:
 3224              		.align	2
 3225              	.L83:
 3226 0f14 3F010000 		.word	319
 3227              		.cfi_endproc
 3228              	.LFE15:
 3230              		.align	2
 3231              		.global	lcd_putint_x2
 3233              	lcd_putint_x2:
 3234              	.LFB16:
 244:../src/lcd.c  **** 
 245:../src/lcd.c  **** void lcd_putint_x2( uint16 x, uint16 y, uint8 color, int32 i )
 246:../src/lcd.c  **** {
 3235              		.loc 1 246 0
 3236              		.cfi_startproc
 3237              		@ Function supports interworking.
 3238              		@ args = 0, pretend = 0, frame = 40
 3239              		@ frame_needed = 1, uses_anonymous_args = 0
 3240 0f18 0DC0A0E1 		mov	ip, sp
 3241              	.LCFI32:
 3242              		.cfi_def_cfa_register 12
 3243 0f1c 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 3244 0f20 04B04CE2 		sub	fp, ip, #4
 3245              		.cfi_offset 14, -8
 3246              		.cfi_offset 13, -12
 3247              		.cfi_offset 11, -16
 3248              	.LCFI33:
 3249              		.cfi_def_cfa 11, 4
 3250 0f24 28D04DE2 		sub	sp, sp, #40
 3251 0f28 30300BE5 		str	r3, [fp, #-48]
 3252 0f2c B6024BE1 		strh	r0, [fp, #-38]	@ movhi
 3253 0f30 B8124BE1 		strh	r1, [fp, #-40]	@ movhi
 3254 0f34 0230A0E1 		mov	r3, r2
 3255 0f38 29304BE5 		strb	r3, [fp, #-41]
 247:../src/lcd.c  **** 	uint16 x2 = x, y2 = y;
 3256              		.loc 1 247 0
 3257 0f3c B6325BE1 		ldrh	r3, [fp, #-38]	@ movhi
 3258 0f40 B4314BE1 		strh	r3, [fp, #-20]	@ movhi
 3259 0f44 B8325BE1 		ldrh	r3, [fp, #-40]	@ movhi
 3260 0f48 B6314BE1 		strh	r3, [fp, #-22]	@ movhi
 248:../src/lcd.c  **** 	char buf[8 + 1];
 249:../src/lcd.c  **** 	char *p = buf + 8;
 3261              		.loc 1 249 0
 3262 0f4c 20304BE2 		sub	r3, fp, #32
 3263 0f50 083083E2 		add	r3, r3, #8
 3264 0f54 10300BE5 		str	r3, [fp, #-16]
 250:../src/lcd.c  **** 	uint8 c = 0;
 3265              		.loc 1 250 0
 3266 0f58 0030A0E3 		mov	r3, #0
 3267 0f5c 17304BE5 		strb	r3, [fp, #-23]
 251:../src/lcd.c  **** 	uint8 neg = 0;
 3268              		.loc 1 251 0
 3269 0f60 0030A0E3 		mov	r3, #0
 3270 0f64 11304BE5 		strb	r3, [fp, #-17]
 252:../src/lcd.c  **** 
 253:../src/lcd.c  **** 	if(i < 0){
 3271              		.loc 1 253 0
 3272 0f68 30301BE5 		ldr	r3, [fp, #-48]
 3273 0f6c 000053E3 		cmp	r3, #0
 3274 0f70 040000AA 		bge	.L86
 254:../src/lcd.c  **** 		neg = 1;
 3275              		.loc 1 254 0
 3276 0f74 0130A0E3 		mov	r3, #1
 3277 0f78 11304BE5 		strb	r3, [fp, #-17]
 255:../src/lcd.c  **** 		i = -i;
 3278              		.loc 1 255 0
 3279 0f7c 30301BE5 		ldr	r3, [fp, #-48]
 3280 0f80 003063E2 		rsb	r3, r3, #0
 3281 0f84 30300BE5 		str	r3, [fp, #-48]
 3282              	.L86:
 256:../src/lcd.c  **** 	}
 257:../src/lcd.c  **** 
 258:../src/lcd.c  **** 	*p = '\0';
 3283              		.loc 1 258 0
 3284 0f88 10301BE5 		ldr	r3, [fp, #-16]
 3285 0f8c 0020A0E3 		mov	r2, #0
 3286 0f90 0020C3E5 		strb	r2, [r3, #0]
 3287              	.L87:
 259:../src/lcd.c  **** 	do {
 260:../src/lcd.c  **** 		c = i % 10;
 3288              		.loc 1 260 0 discriminator 1
 3289 0f94 30101BE5 		ldr	r1, [fp, #-48]
 3290 0f98 C0309FE5 		ldr	r3, .L89
 3291 0f9c 9123C3E0 		smull	r2, r3, r1, r3
 3292 0fa0 4321A0E1 		mov	r2, r3, asr #2
 3293 0fa4 C13FA0E1 		mov	r3, r1, asr #31
 3294 0fa8 022063E0 		rsb	r2, r3, r2
 3295 0fac 0230A0E1 		mov	r3, r2
 3296 0fb0 0331A0E1 		mov	r3, r3, asl #2
 3297 0fb4 023083E0 		add	r3, r3, r2
 3298 0fb8 8330A0E1 		mov	r3, r3, asl #1
 3299 0fbc 012063E0 		rsb	r2, r3, r1
 3300 0fc0 0230A0E1 		mov	r3, r2
 3301 0fc4 17304BE5 		strb	r3, [fp, #-23]
 261:../src/lcd.c  **** 		*--p = '0' + c;
 3302              		.loc 1 261 0 discriminator 1
 3303 0fc8 10301BE5 		ldr	r3, [fp, #-16]
 3304 0fcc 013043E2 		sub	r3, r3, #1
 3305 0fd0 10300BE5 		str	r3, [fp, #-16]
 3306 0fd4 17305BE5 		ldrb	r3, [fp, #-23]
 3307 0fd8 303083E2 		add	r3, r3, #48
 3308 0fdc FF2003E2 		and	r2, r3, #255
 3309 0fe0 10301BE5 		ldr	r3, [fp, #-16]
 3310 0fe4 0020C3E5 		strb	r2, [r3, #0]
 262:../src/lcd.c  **** 		i = i / 10;
 3311              		.loc 1 262 0 discriminator 1
 3312 0fe8 30301BE5 		ldr	r3, [fp, #-48]
 3313 0fec 6C209FE5 		ldr	r2, .L89
 3314 0ff0 9312C2E0 		smull	r1, r2, r3, r2
 3315 0ff4 4221A0E1 		mov	r2, r2, asr #2
 3316 0ff8 C33FA0E1 		mov	r3, r3, asr #31
 3317 0ffc 023063E0 		rsb	r3, r3, r2
 3318 1000 30300BE5 		str	r3, [fp, #-48]
 263:../src/lcd.c  **** 	} while (i);
 3319              		.loc 1 263 0 discriminator 1
 3320 1004 30301BE5 		ldr	r3, [fp, #-48]
 3321 1008 000053E3 		cmp	r3, #0
 3322 100c E0FFFF1A 		bne	.L87
 264:../src/lcd.c  **** 
 265:../src/lcd.c  **** 	if(neg == 1){
 3323              		.loc 1 265 0
 3324 1010 11305BE5 		ldrb	r3, [fp, #-17]	@ zero_extendqisi2
 3325 1014 010053E3 		cmp	r3, #1
 3326 1018 0500001A 		bne	.L88
 266:../src/lcd.c  **** 		*--p = '-';
 3327              		.loc 1 266 0
 3328 101c 10301BE5 		ldr	r3, [fp, #-16]
 3329 1020 013043E2 		sub	r3, r3, #1
 3330 1024 10300BE5 		str	r3, [fp, #-16]
 3331 1028 10301BE5 		ldr	r3, [fp, #-16]
 3332 102c 2D20A0E3 		mov	r2, #45
 3333 1030 0020C3E5 		strb	r2, [r3, #0]
 3334              	.L88:
 267:../src/lcd.c  **** 	}
 268:../src/lcd.c  **** 
 269:../src/lcd.c  **** 	lcd_puts_x2(x2,y2,color,p);
 3335              		.loc 1 269 0
 3336 1034 B4115BE1 		ldrh	r1, [fp, #-20]
 3337 1038 B6215BE1 		ldrh	r2, [fp, #-22]
 3338 103c 29305BE5 		ldrb	r3, [fp, #-41]	@ zero_extendqisi2
 3339 1040 0100A0E1 		mov	r0, r1
 3340 1044 0210A0E1 		mov	r1, r2
 3341 1048 0320A0E1 		mov	r2, r3
 3342 104c 10301BE5 		ldr	r3, [fp, #-16]
 3343 1050 FEFFFFEB 		bl	lcd_puts_x2
 270:../src/lcd.c  **** }
 3344              		.loc 1 270 0
 3345 1054 0CD04BE2 		sub	sp, fp, #12
 3346 1058 00689DE8 		ldmfd	sp, {fp, sp, lr}
 3347 105c 1EFF2FE1 		bx	lr
 3348              	.L90:
 3349              		.align	2
 3350              	.L89:
 3351 1060 67666666 		.word	1717986919
 3352              		.cfi_endproc
 3353              	.LFE16:
 3355              		.align	2
 3356              		.global	lcd_puthex_x2
 3358              	lcd_puthex_x2:
 3359              	.LFB17:
 271:../src/lcd.c  **** 
 272:../src/lcd.c  **** void lcd_puthex_x2( uint16 x, uint16 y, uint8 color, uint32 i )
 273:../src/lcd.c  **** {
 3360              		.loc 1 273 0
 3361              		.cfi_startproc
 3362              		@ Function supports interworking.
 3363              		@ args = 0, pretend = 0, frame = 32
 3364              		@ frame_needed = 1, uses_anonymous_args = 0
 3365 1064 0DC0A0E1 		mov	ip, sp
 3366              	.LCFI34:
 3367              		.cfi_def_cfa_register 12
 3368 1068 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 3369 106c 04B04CE2 		sub	fp, ip, #4
 3370              		.cfi_offset 14, -8
 3371              		.cfi_offset 13, -12
 3372              		.cfi_offset 11, -16
 3373              	.LCFI35:
 3374              		.cfi_def_cfa 11, 4
 3375 1070 20D04DE2 		sub	sp, sp, #32
 3376 1074 28300BE5 		str	r3, [fp, #-40]
 3377 1078 BE014BE1 		strh	r0, [fp, #-30]	@ movhi
 3378 107c B0124BE1 		strh	r1, [fp, #-32]	@ movhi
 3379 1080 0230A0E1 		mov	r3, r2
 3380 1084 21304BE5 		strb	r3, [fp, #-33]
 274:../src/lcd.c  ****     char buf[8 + 1];
 275:../src/lcd.c  ****     char *p = buf + 8;
 3381              		.loc 1 275 0
 3382 1088 1C304BE2 		sub	r3, fp, #28
 3383 108c 083083E2 		add	r3, r3, #8
 3384 1090 10300BE5 		str	r3, [fp, #-16]
 276:../src/lcd.c  ****     uint8 c;
 277:../src/lcd.c  **** 
 278:../src/lcd.c  ****     *p = '\0';
 3385              		.loc 1 278 0
 3386 1094 10301BE5 		ldr	r3, [fp, #-16]
 3387 1098 0020A0E3 		mov	r2, #0
 3388 109c 0020C3E5 		strb	r2, [r3, #0]
 3389              	.L94:
 279:../src/lcd.c  **** 
 280:../src/lcd.c  ****     do {
 281:../src/lcd.c  ****         c = i & 0xf;
 3390              		.loc 1 281 0
 3391 10a0 28301BE5 		ldr	r3, [fp, #-40]
 3392 10a4 FF3003E2 		and	r3, r3, #255
 3393 10a8 0F3003E2 		and	r3, r3, #15
 3394 10ac 11304BE5 		strb	r3, [fp, #-17]
 282:../src/lcd.c  ****         if( c < 10 )
 3395              		.loc 1 282 0
 3396 10b0 11305BE5 		ldrb	r3, [fp, #-17]	@ zero_extendqisi2
 3397 10b4 090053E3 		cmp	r3, #9
 3398 10b8 0800008A 		bhi	.L92
 283:../src/lcd.c  ****             *--p = '0' + c;
 3399              		.loc 1 283 0
 3400 10bc 10301BE5 		ldr	r3, [fp, #-16]
 3401 10c0 013043E2 		sub	r3, r3, #1
 3402 10c4 10300BE5 		str	r3, [fp, #-16]
 3403 10c8 11305BE5 		ldrb	r3, [fp, #-17]
 3404 10cc 303083E2 		add	r3, r3, #48
 3405 10d0 FF2003E2 		and	r2, r3, #255
 3406 10d4 10301BE5 		ldr	r3, [fp, #-16]
 3407 10d8 0020C3E5 		strb	r2, [r3, #0]
 3408 10dc 070000EA 		b	.L93
 3409              	.L92:
 284:../src/lcd.c  ****         else
 285:../src/lcd.c  ****             *--p = 'a' + c - 10;
 3410              		.loc 1 285 0
 3411 10e0 10301BE5 		ldr	r3, [fp, #-16]
 3412 10e4 013043E2 		sub	r3, r3, #1
 3413 10e8 10300BE5 		str	r3, [fp, #-16]
 3414 10ec 11305BE5 		ldrb	r3, [fp, #-17]
 3415 10f0 573083E2 		add	r3, r3, #87
 3416 10f4 FF2003E2 		and	r2, r3, #255
 3417 10f8 10301BE5 		ldr	r3, [fp, #-16]
 3418 10fc 0020C3E5 		strb	r2, [r3, #0]
 3419              	.L93:
 286:../src/lcd.c  ****         i = i >> 4;
 3420              		.loc 1 286 0
 3421 1100 28301BE5 		ldr	r3, [fp, #-40]
 3422 1104 2332A0E1 		mov	r3, r3, lsr #4
 3423 1108 28300BE5 		str	r3, [fp, #-40]
 287:../src/lcd.c  ****     } while( i );
 3424              		.loc 1 287 0
 3425 110c 28301BE5 		ldr	r3, [fp, #-40]
 3426 1110 000053E3 		cmp	r3, #0
 3427 1114 E1FFFF1A 		bne	.L94
 288:../src/lcd.c  **** 
 289:../src/lcd.c  ****     lcd_puts_x2(x,y,color,p);
 3428              		.loc 1 289 0
 3429 1118 BE115BE1 		ldrh	r1, [fp, #-30]
 3430 111c B0225BE1 		ldrh	r2, [fp, #-32]
 3431 1120 21305BE5 		ldrb	r3, [fp, #-33]	@ zero_extendqisi2
 3432 1124 0100A0E1 		mov	r0, r1
 3433 1128 0210A0E1 		mov	r1, r2
 3434 112c 0320A0E1 		mov	r2, r3
 3435 1130 10301BE5 		ldr	r3, [fp, #-16]
 3436 1134 FEFFFFEB 		bl	lcd_puts_x2
 290:../src/lcd.c  **** }
 3437              		.loc 1 290 0
 3438 1138 0CD04BE2 		sub	sp, fp, #12
 3439 113c 00689DE8 		ldmfd	sp, {fp, sp, lr}
 3440 1140 1EFF2FE1 		bx	lr
 3441              		.cfi_endproc
 3442              	.LFE17:
 3444              		.align	2
 3445              		.global	lcd_putWallpaper
 3447              	lcd_putWallpaper:
 3448              	.LFB18:
 291:../src/lcd.c  **** 
 292:../src/lcd.c  **** void lcd_putWallpaper( uint8 *bmp )
 293:../src/lcd.c  **** {
 3449              		.loc 1 293 0
 3450              		.cfi_startproc
 3451              		@ Function supports interworking.
 3452              		@ args = 0, pretend = 0, frame = 24
 3453              		@ frame_needed = 1, uses_anonymous_args = 0
 3454 1144 0DC0A0E1 		mov	ip, sp
 3455              	.LCFI36:
 3456              		.cfi_def_cfa_register 12
 3457 1148 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 3458 114c 04B04CE2 		sub	fp, ip, #4
 3459              		.cfi_offset 14, -8
 3460              		.cfi_offset 13, -12
 3461              		.cfi_offset 11, -16
 3462              	.LCFI37:
 3463              		.cfi_def_cfa 11, 4
 3464 1150 18D04DE2 		sub	sp, sp, #24
 3465 1154 20000BE5 		str	r0, [fp, #-32]
 294:../src/lcd.c  ****     uint32 headerSize;
 295:../src/lcd.c  **** 
 296:../src/lcd.c  ****     uint16 x, ySrc, yDst;
 297:../src/lcd.c  ****     uint16 offsetSrc, offsetDst;
 298:../src/lcd.c  **** 
 299:../src/lcd.c  ****     headerSize = bmp[10] + (bmp[11] << 8) + (bmp[12] << 16) + (bmp[13] << 24);
 3466              		.loc 1 299 0
 3467 1158 20301BE5 		ldr	r3, [fp, #-32]
 3468 115c 0A3083E2 		add	r3, r3, #10
 3469 1160 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3470 1164 0320A0E1 		mov	r2, r3
 3471 1168 20301BE5 		ldr	r3, [fp, #-32]
 3472 116c 0B3083E2 		add	r3, r3, #11
 3473 1170 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3474 1174 0334A0E1 		mov	r3, r3, asl #8
 3475 1178 032082E0 		add	r2, r2, r3
 3476 117c 20301BE5 		ldr	r3, [fp, #-32]
 3477 1180 0C3083E2 		add	r3, r3, #12
 3478 1184 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3479 1188 0338A0E1 		mov	r3, r3, asl #16
 3480 118c 032082E0 		add	r2, r2, r3
 3481 1190 20301BE5 		ldr	r3, [fp, #-32]
 3482 1194 0D3083E2 		add	r3, r3, #13
 3483 1198 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3484 119c 033CA0E1 		mov	r3, r3, asl #24
 3485 11a0 033082E0 		add	r3, r2, r3
 3486 11a4 18300BE5 		str	r3, [fp, #-24]
 300:../src/lcd.c  **** 
 301:../src/lcd.c  ****     bmp = bmp + headerSize;
 3487              		.loc 1 301 0
 3488 11a8 20201BE5 		ldr	r2, [fp, #-32]
 3489 11ac 18301BE5 		ldr	r3, [fp, #-24]
 3490 11b0 033082E0 		add	r3, r2, r3
 3491 11b4 20300BE5 		str	r3, [fp, #-32]
 302:../src/lcd.c  ****     
 303:../src/lcd.c  ****     for( ySrc=0, yDst=LCD_HEIGHT-1; ySrc<LCD_HEIGHT; ySrc++, yDst-- )                              
 3492              		.loc 1 303 0
 3493 11b8 0030A0E3 		mov	r3, #0
 3494 11bc B0314BE1 		strh	r3, [fp, #-16]	@ movhi
 3495 11c0 EF30A0E3 		mov	r3, #239
 3496 11c4 B2314BE1 		strh	r3, [fp, #-18]	@ movhi
 3497 11c8 2D0000EA 		b	.L96
 3498              	.L99:
 304:../src/lcd.c  ****     {
 305:../src/lcd.c  ****         offsetDst = yDst*LCD_WIDTH/2;
 3499              		.loc 1 305 0
 3500 11cc B2215BE1 		ldrh	r2, [fp, #-18]
 3501 11d0 0230A0E1 		mov	r3, r2
 3502 11d4 0331A0E1 		mov	r3, r3, asl #2
 3503 11d8 023083E0 		add	r3, r3, r2
 3504 11dc 0333A0E1 		mov	r3, r3, asl #6
 3505 11e0 A32FA0E1 		mov	r2, r3, lsr #31
 3506 11e4 033082E0 		add	r3, r2, r3
 3507 11e8 C330A0E1 		mov	r3, r3, asr #1
 3508 11ec BA314BE1 		strh	r3, [fp, #-26]	@ movhi
 306:../src/lcd.c  ****         offsetSrc = ySrc*LCD_WIDTH/2;
 3509              		.loc 1 306 0
 3510 11f0 B0215BE1 		ldrh	r2, [fp, #-16]
 3511 11f4 0230A0E1 		mov	r3, r2
 3512 11f8 0331A0E1 		mov	r3, r3, asl #2
 3513 11fc 023083E0 		add	r3, r3, r2
 3514 1200 0333A0E1 		mov	r3, r3, asl #6
 3515 1204 A32FA0E1 		mov	r2, r3, lsr #31
 3516 1208 033082E0 		add	r3, r2, r3
 3517 120c C330A0E1 		mov	r3, r3, asr #1
 3518 1210 BC314BE1 		strh	r3, [fp, #-28]	@ movhi
 307:../src/lcd.c  ****         for( x=0; x<LCD_WIDTH/2; x++ )
 3519              		.loc 1 307 0
 3520 1214 0030A0E3 		mov	r3, #0
 3521 1218 BE304BE1 		strh	r3, [fp, #-14]	@ movhi
 3522 121c 0F0000EA 		b	.L97
 3523              	.L98:
 308:../src/lcd.c  ****             lcd_buffer[offsetDst+x] = ~bmp[offsetSrc+x];
 3524              		.loc 1 308 0 discriminator 2
 3525 1220 BA215BE1 		ldrh	r2, [fp, #-26]
 3526 1224 BE305BE1 		ldrh	r3, [fp, #-14]
 3527 1228 033082E0 		add	r3, r2, r3
 3528 122c BC115BE1 		ldrh	r1, [fp, #-28]
 3529 1230 BE205BE1 		ldrh	r2, [fp, #-14]
 3530 1234 022081E0 		add	r2, r1, r2
 3531 1238 20101BE5 		ldr	r1, [fp, #-32]
 3532 123c 022081E0 		add	r2, r1, r2
 3533 1240 0020D2E5 		ldrb	r2, [r2, #0]	@ zero_extendqisi2
 3534 1244 0220E0E1 		mvn	r2, r2
 3535 1248 FF1002E2 		and	r1, r2, #255
 3536 124c 48209FE5 		ldr	r2, .L100
 3537 1250 0310C2E7 		strb	r1, [r2, r3]
 307:../src/lcd.c  ****         for( x=0; x<LCD_WIDTH/2; x++ )
 3538              		.loc 1 307 0 discriminator 2
 3539 1254 BE305BE1 		ldrh	r3, [fp, #-14]	@ movhi
 3540 1258 013083E2 		add	r3, r3, #1
 3541 125c BE304BE1 		strh	r3, [fp, #-14]	@ movhi
 3542              	.L97:
 307:../src/lcd.c  ****         for( x=0; x<LCD_WIDTH/2; x++ )
 3543              		.loc 1 307 0 is_stmt 0 discriminator 1
 3544 1260 BE305BE1 		ldrh	r3, [fp, #-14]
 3545 1264 9F0053E3 		cmp	r3, #159
 3546 1268 ECFFFF9A 		bls	.L98
 303:../src/lcd.c  ****     for( ySrc=0, yDst=LCD_HEIGHT-1; ySrc<LCD_HEIGHT; ySrc++, yDst-- )                              
 3547              		.loc 1 303 0 is_stmt 1
 3548 126c B0315BE1 		ldrh	r3, [fp, #-16]	@ movhi
 3549 1270 013083E2 		add	r3, r3, #1
 3550 1274 B0314BE1 		strh	r3, [fp, #-16]	@ movhi
 3551 1278 B2315BE1 		ldrh	r3, [fp, #-18]	@ movhi
 3552 127c 013043E2 		sub	r3, r3, #1
 3553 1280 B2314BE1 		strh	r3, [fp, #-18]	@ movhi
 3554              	.L96:
 303:../src/lcd.c  ****     for( ySrc=0, yDst=LCD_HEIGHT-1; ySrc<LCD_HEIGHT; ySrc++, yDst-- )                              
 3555              		.loc 1 303 0 is_stmt 0 discriminator 1
 3556 1284 B0315BE1 		ldrh	r3, [fp, #-16]
 3557 1288 EF0053E3 		cmp	r3, #239
 3558 128c CEFFFF9A 		bls	.L99
 309:../src/lcd.c  ****     }
 310:../src/lcd.c  **** }
 3559              		.loc 1 310 0 is_stmt 1
 3560 1290 0CD04BE2 		sub	sp, fp, #12
 3561 1294 00689DE8 		ldmfd	sp, {fp, sp, lr}
 3562 1298 1EFF2FE1 		bx	lr
 3563              	.L101:
 3564              		.align	2
 3565              	.L100:
 3566 129c 00000000 		.word	lcd_buffer
 3567              		.cfi_endproc
 3568              	.LFE18:
 3570              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 lcd.c
C:\Users\Muadi\AppData\Local\Temp\cc4Rh8Fc.s:1703   .bss:00000000 $d
C:\Users\Muadi\AppData\Local\Temp\cc4Rh8Fc.s:1704   .bss:00000000 lcd_buffer
C:\Users\Muadi\AppData\Local\Temp\cc4Rh8Fc.s:1707   .text:00000000 $a
C:\Users\Muadi\AppData\Local\Temp\cc4Rh8Fc.s:1710   .text:00000000 lcd_init
C:\Users\Muadi\AppData\Local\Temp\cc4Rh8Fc.s:1883   .text:000001b0 lcd_off
C:\Users\Muadi\AppData\Local\Temp\cc4Rh8Fc.s:1815   .text:00000110 $d
C:\Users\Muadi\AppData\Local\Temp\cc4Rh8Fc.s:1847   .text:00000184 $a
C:\Users\Muadi\AppData\Local\Temp\cc4Rh8Fc.s:1850   .text:00000184 lcd_on
C:\Users\Muadi\AppData\Local\Temp\cc4Rh8Fc.s:1916   .text:000001dc lcd_status
C:\Users\Muadi\AppData\Local\Temp\cc4Rh8Fc.s:1958   .text:0000021c lcd_clear
C:\Users\Muadi\AppData\Local\Temp\cc4Rh8Fc.s:2030   .text:000002b0 lcd_putpixel
C:\Users\Muadi\AppData\Local\Temp\cc4Rh8Fc.s:2023   .text:000002ac $d
C:\Users\Muadi\AppData\Local\Temp\cc4Rh8Fc.s:2027   .text:000002b0 $a
C:\Users\Muadi\AppData\Local\Temp\cc4Rh8Fc.s:2117   .text:00000398 $d
C:\Users\Muadi\AppData\Local\Temp\cc4Rh8Fc.s:2121   .text:0000039c $a
C:\Users\Muadi\AppData\Local\Temp\cc4Rh8Fc.s:2124   .text:0000039c lcd_getpixel
C:\Users\Muadi\AppData\Local\Temp\cc4Rh8Fc.s:2212   .text:00000474 $d
C:\Users\Muadi\AppData\Local\Temp\cc4Rh8Fc.s:2216   .text:00000478 $a
C:\Users\Muadi\AppData\Local\Temp\cc4Rh8Fc.s:2219   .text:00000478 lcd_draw_hline
C:\Users\Muadi\AppData\Local\Temp\cc4Rh8Fc.s:2295   .text:00000528 lcd_draw_vline
C:\Users\Muadi\AppData\Local\Temp\cc4Rh8Fc.s:2371   .text:000005d8 lcd_draw_box
C:\Users\Muadi\AppData\Local\Temp\cc4Rh8Fc.s:2442   .text:00000690 lcd_putchar
C:\Users\Muadi\AppData\Local\Temp\cc4Rh8Fc.s:2560   .text:000007e0 $d
C:\Users\Muadi\AppData\Local\Temp\cc4Rh8Fc.s:2564   .text:000007e4 $a
C:\Users\Muadi\AppData\Local\Temp\cc4Rh8Fc.s:2567   .text:000007e4 lcd_puts
C:\Users\Muadi\AppData\Local\Temp\cc4Rh8Fc.s:2651   .text:000008a4 $d
C:\Users\Muadi\AppData\Local\Temp\cc4Rh8Fc.s:2655   .text:000008a8 $a
C:\Users\Muadi\AppData\Local\Temp\cc4Rh8Fc.s:2658   .text:000008a8 lcd_putint
C:\Users\Muadi\AppData\Local\Temp\cc4Rh8Fc.s:2776   .text:000009f0 $d
C:\Users\Muadi\AppData\Local\Temp\cc4Rh8Fc.s:2780   .text:000009f4 $a
C:\Users\Muadi\AppData\Local\Temp\cc4Rh8Fc.s:2783   .text:000009f4 lcd_puthex
C:\Users\Muadi\AppData\Local\Temp\cc4Rh8Fc.s:2872   .text:00000ad4 lcd_putchar_x2
C:\Users\Muadi\AppData\Local\Temp\cc4Rh8Fc.s:3135   .text:00000e50 $d
C:\Users\Muadi\AppData\Local\Temp\cc4Rh8Fc.s:3139   .text:00000e54 $a
C:\Users\Muadi\AppData\Local\Temp\cc4Rh8Fc.s:3142   .text:00000e54 lcd_puts_x2
C:\Users\Muadi\AppData\Local\Temp\cc4Rh8Fc.s:3226   .text:00000f14 $d
C:\Users\Muadi\AppData\Local\Temp\cc4Rh8Fc.s:3230   .text:00000f18 $a
C:\Users\Muadi\AppData\Local\Temp\cc4Rh8Fc.s:3233   .text:00000f18 lcd_putint_x2
C:\Users\Muadi\AppData\Local\Temp\cc4Rh8Fc.s:3351   .text:00001060 $d
C:\Users\Muadi\AppData\Local\Temp\cc4Rh8Fc.s:3355   .text:00001064 $a
C:\Users\Muadi\AppData\Local\Temp\cc4Rh8Fc.s:3358   .text:00001064 lcd_puthex_x2
C:\Users\Muadi\AppData\Local\Temp\cc4Rh8Fc.s:3447   .text:00001144 lcd_putWallpaper
C:\Users\Muadi\AppData\Local\Temp\cc4Rh8Fc.s:3566   .text:0000129c $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
font
