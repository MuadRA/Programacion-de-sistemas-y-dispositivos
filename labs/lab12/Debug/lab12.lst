
lab12.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000e3d4  0c100000  0c100000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       0000183c  0c10e3d4  0c10e3d4  000163d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .ARM.exidx    00000008  0c10fc10  0c10fc10  00017c10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          00065584  0c10fc18  0c10fc18  00017c18  2**2
                  ALLOC
  4 .ARM.attributes 0000002e  00000000  00000000  00017c18  2**0
                  CONTENTS, READONLY
  5 .comment      0000002a  00000000  00000000  00017c46  2**0
                  CONTENTS, READONLY
  6 .debug_line   00002356  00000000  00000000  00017c70  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000088c1  00000000  00000000  00019fc6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000019da  00000000  00000000  00022887  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000002e0  00000000  00000000  00024268  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_macinfo 0005e461  00000000  00000000  00024548  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002890  00000000  00000000  000829a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubnames 000017de  00000000  00000000  00085239  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000e02  00000000  00000000  00086a17  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000194c  00000000  00000000  00087819  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00002140  00000000  00000000  00089168  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0c100000 <OSStartHighRdy>:
**
*/

OSStartHighRdy:  
  
  bl    OSTaskSwHook            /* (1) Llama a la función OSTaskSwHook() */
 c100000:	eb0000d5 	bl	c10035c <OSTaskSwHook>

  ldr   r4, =OSRunning          /* (2) OSRunning = TRUE                  */
 c100004:	e59f40e8 	ldr	r4, [pc, #232]	; c1000f4 <OSTickISRcont+0x28>
  mov   r5, #1
 c100008:	e3a05001 	mov	r5, #1
  strb  r5, [r4]
 c10000c:	e5c45000 	strb	r5, [r4]

  ldr   r4, =OSTCBHighRdy       /* (3) SP = OSTCBHighRdy->OSTCBStkPtr    */
 c100010:	e59f40e0 	ldr	r4, [pc, #224]	; c1000f8 <OSTickISRcont+0x2c>
  ldr   r4, [r4]
 c100014:	e5944000 	ldr	r4, [r4]
  ldr   sp, [r4]
 c100018:	e594d000 	ldr	sp, [r4]

  ldmfd sp!, {r4}               /* (4) Restaura de la pila el contexto de la tarea preparada con mayor prioridad ... */
 c10001c:	e49d4004 	pop	{r4}		; (ldr r4, [sp], #4)
  msr   spsr, r4
 c100020:	e169f004 	msr	SPSR_fc, r4
  ldmfd sp!, {r0-r12,lr,pc}^    /* (5) ... retorna a dicha tarea (^ copia el SPSR al CPSR a la vez que restaura el PC) */
 c100024:	e8fddfff 	ldm	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr, pc}^

0c100028 <OSCtxSw>:
**
*/

OSCtxSw:

  stmfd sp!, {lr}               /* (1) Guarda en la pila el contexto de la tarea actual */
 c100028:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
  stmfd sp!, {r0-r12, lr}
 c10002c:	e92d5fff 	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
  mrs   r4,  cpsr
 c100030:	e10f4000 	mrs	r4, CPSR
  stmfd sp!, {r4}
 c100034:	e52d4004 	push	{r4}		; (str r4, [sp, #-4]!)

  ldr r4, =OSTCBCur             /* (2) OSTCBCur->OSTCBStkPtr = SP        */
 c100038:	e59f40bc 	ldr	r4, [pc, #188]	; c1000fc <OSTickISRcont+0x30>
  ldr r5, [r4]
 c10003c:	e5945000 	ldr	r5, [r4]
  str sp, [r5]
 c100040:	e585d000 	str	sp, [r5]

0c100044 <OSIntCtxSw>:

OSIntCtxSw:

  bl OSTaskSwHook               /* (3) Llama a la función OSTaskSwHook() */
 c100044:	eb0000c4 	bl	c10035c <OSTaskSwHook>

  ldr r4, =OSTCBCur             /* (4) OSTCBCur = OSTCBHighRdy           */
 c100048:	e59f40ac 	ldr	r4, [pc, #172]	; c1000fc <OSTickISRcont+0x30>
  ldr r5, =OSTCBHighRdy
 c10004c:	e59f50a4 	ldr	r5, [pc, #164]	; c1000f8 <OSTickISRcont+0x2c>
  ldr r5, [r5]
 c100050:	e5955000 	ldr	r5, [r5]
  str r5, [r4]
 c100054:	e5845000 	str	r5, [r4]

  ldr  r6, =OSPrioHighRdy       /* (5) OSPrioCur = OSPrioHighRdy         */
 c100058:	e59f60a0 	ldr	r6, [pc, #160]	; c100100 <OSTickISRcont+0x34>
  ldr  r7, =OSPrioCur
 c10005c:	e59f70a0 	ldr	r7, [pc, #160]	; c100104 <OSTickISRcont+0x38>
  ldrb r6, [r6]
 c100060:	e5d66000 	ldrb	r6, [r6]
  strb r6, [r7]
 c100064:	e5c76000 	strb	r6, [r7]

  ldr sp, [r5]                  /* (6) SP = OSTCBHighRdy->OSTCBStkPtr    */
 c100068:	e595d000 	ldr	sp, [r5]

  ldmfd sp!, {r4}               /* (7) Restaura de la pila el contexto de la tarea preparada con mayor prioridad y ... */
 c10006c:	e49d4004 	pop	{r4}		; (ldr r4, [sp], #4)
  msr   spsr, r4
 c100070:	e169f004 	msr	SPSR_fc, r4
  ldmfd sp!, {r0-r12,lr,pc}^    /* (8) ... retorna a dicha tarea         */
 c100074:	e8fddfff 	ldm	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr, pc}^

0c100078 <OSTickISR>:
**
*/

OSTickISR:

  stmfd sp!, {r1-r3}           /* Apila los registros de trabajo en la pila IRQ  */
 c100078:	e92d000e 	push	{r1, r2, r3}

  mov r1, sp                   /* Copia en R1 el puntero de la pila IRQ          */
 c10007c:	e1a0100d 	mov	r1, sp
  add sp, sp, #12              /* Ajusta el puntero del la pila IRQ a la posición que tenía antes de la interrupción (suma 12 porque ha apilado 3 registros) */
 c100080:	e28dd00c 	add	sp, sp, #12
  sub r2, lr, #4               /* Copia en R2, previo ajuste, la dirección de retorno a la tarea actual (tras IRQ el PC está en <dir_actual>+4) */
 c100084:	e24e2004 	sub	r2, lr, #4
  mrs r3, spsr                 /* Copia en R3 el SPSR (i.e. el CPSR de la tarea actual interrumpida) */
 c100088:	e14f3000 	mrs	r3, SPSR

  msr cpsr_c, #(NOINT|SVCMODE) /* Cambia a modo SVC */
 c10008c:	e321f0d3 	msr	CPSR_c, #211	; 0xd3

                               /* (1) Guarda en la pila SVC el contexto de la tarea actual              */
  stmfd sp!, {r2}              /*     - Apila la dirección de retorno a la tarea actual (previamente copiado en R2) */
 c100090:	e52d2004 	push	{r2}		; (str r2, [sp, #-4]!)
  stmfd sp!, {lr}              /*     - Apila el LR de la tarea actual                                  */
 c100094:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
  stmfd sp!, {r4-r12}          /*     - Apila los registros R4-R12 de la tarea actual                   */
 c100098:	e92d1ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, ip}
  ldmfd r1!, {r4-r6}           /*     - Copia en R4-R6 los registros R1-R3 de la tarea actual (previamente almacenados en la pila IRQ) */
 c10009c:	e8b10070 	ldm	r1!, {r4, r5, r6}
  stmfd sp!, {r4-r6}           /*     - Apila los registros R1-R3 de la tarea actual (anteriormente copiados en R4-R6 */
 c1000a0:	e92d0070 	push	{r4, r5, r6}
  stmfd sp!, {r0}              /*     - Apila el registro R0 de la tarea actual                         */
 c1000a4:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
  stmfd sp!, {r3}              /*     - Apila el CPSR de la tarea actual (previamente copiado en R3)    */
 c1000a8:	e52d3004 	push	{r3}		; (str r3, [sp, #-4]!)

  bl  OSIntEnter               /* (2) Llama a la función OSIntEnter()          */
 c1000ac:	eb00014f 	bl	c1005f0 <OSIntEnter>

  ldr  r0, =OSIntNesting       /* (3) Si OSIntNesting == 1 ...                 */
 c1000b0:	e59f0050 	ldr	r0, [pc, #80]	; c100108 <OSTickISRcont+0x3c>
  ldrb r0, [r0]
 c1000b4:	e5d00000 	ldrb	r0, [r0]
  cmp  r0, #1
 c1000b8:	e3500001 	cmp	r0, #1
  bne  OSTickISRcont
 c1000bc:	1a000002 	bne	c1000cc <OSTickISRcont>
  ldr  r0, =OSTCBCur           /*     ... OSTCBCur->OSTCBStkPtr = SP           */
 c1000c0:	e59f0034 	ldr	r0, [pc, #52]	; c1000fc <OSTickISRcont+0x30>
  ldr  r1, [r0]
 c1000c4:	e5901000 	ldr	r1, [r0]
  str  sp, [r1]
 c1000c8:	e581d000 	str	sp, [r1]

0c1000cc <OSTickISRcont>:

OSTickISRcont:

  msr cpsr_c, #(NOINT|IRQMODE) /* Cambia a modo IRQ (para que la pila IRQ sea usada para tratar la interrupción */
 c1000cc:	e321f0d2 	msr	CPSR_c, #210	; 0xd2
  ldr r1, =I_ISPC              /* (4) Borra interrupción pendiente por timer */
 c1000d0:	e59f1034 	ldr	r1, [pc, #52]	; c10010c <OSTickISRcont+0x40>
  mov r2, #BIT_TIMER0
 c1000d4:	e3a02a02 	mov	r2, #8192	; 0x2000
  str r2, [r1]
 c1000d8:	e5812000 	str	r2, [r1]
                               /* (5) Aquí opcionamente podrían habilitarse interrupciones */

  bl  OSTimeTick               /* (6) Llama a la función OSTimeTick                        */
 c1000dc:	eb000255 	bl	c100a38 <OSTimeTick>

  msr cpsr_c, #(NOINT|SVCMODE) /* Cambia a modo SVC                            */
 c1000e0:	e321f0d3 	msr	CPSR_c, #211	; 0xd3

  bl  OSIntExit                /* (6) Llama a la función OSIntExit()           */
 c1000e4:	eb000157 	bl	c100648 <OSIntExit>

                               /* Si ha vuelto de OSintExit() porque no hay una tarea preparada con mayor prioridad */
  ldmfd  sp!, {r4}             /* (7) Restaura de la pila el contexto de la tarea actual y ...                      */
 c1000e8:	e49d4004 	pop	{r4}		; (ldr r4, [sp], #4)
  msr   spsr, r4
 c1000ec:	e169f004 	msr	SPSR_fc, r4
  ldmfd  sp!, {r0-r12,lr,pc}^  /* (9) ... retorna a dicha tarea                */
 c1000f0:	e8fddfff 	ldm	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr, pc}^
 c1000f4:	0c119225 	.word	0x0c119225
 c1000f8:	0c119c90 	.word	0x0c119c90
 c1000fc:	0c119cac 	.word	0x0c119cac
 c100100:	0c11922c 	.word	0x0c11922c
 c100104:	0c11930c 	.word	0x0c11930c
 c100108:	0c119ca8 	.word	0x0c119ca8
 c10010c:	01e00024 	.word	0x01e00024

0c100110 <OSInitHookBegin>:
** Esta función es llamada con las interrupciones deshabilitadas por OSInit() justo después de su inicio.
*/

#if OS_CPU_HOOKS_EN > 0
void OSInitHookBegin( void )
{
 c100110:	e1a0c00d 	mov	ip, sp
 c100114:	e92dd800 	push	{fp, ip, lr, pc}
 c100118:	e24cb004 	sub	fp, ip, #4
}
 c10011c:	e24bd00c 	sub	sp, fp, #12
 c100120:	e89d6800 	ldm	sp, {fp, sp, lr}
 c100124:	e12fff1e 	bx	lr

0c100128 <OSInitHookEnd>:
** Esta función es llamada con las interrupciones deshabilitadas por OSInit() justo antes de su fin.
*/

#if OS_CPU_HOOKS_EN > 0
void OSInitHookEnd( void )
{
 c100128:	e1a0c00d 	mov	ip, sp
 c10012c:	e92dd800 	push	{fp, ip, lr, pc}
 c100130:	e24cb004 	sub	fp, ip, #4
}
 c100134:	e24bd00c 	sub	sp, fp, #12
 c100138:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10013c:	e12fff1e 	bx	lr

0c100140 <OSTaskCreateHook>:
** Toma como argumento un puntero al TCB de la tarea recién creada.
*/

#if OS_CPU_HOOKS_EN > 0 
void OSTaskCreateHook( OS_TCB *ptcb )
{
 c100140:	e1a0c00d 	mov	ip, sp
 c100144:	e92dd800 	push	{fp, ip, lr, pc}
 c100148:	e24cb004 	sub	fp, ip, #4
 c10014c:	e24dd008 	sub	sp, sp, #8
 c100150:	e50b0010 	str	r0, [fp, #-16]
}
 c100154:	e24bd00c 	sub	sp, fp, #12
 c100158:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10015c:	e12fff1e 	bx	lr

0c100160 <OSTaskDelHook>:
** Toma como argumento un puntero al TCB de la tarea borrada.
*/

#if OS_CPU_HOOKS_EN > 0 
void OSTaskDelHook( OS_TCB *ptcb )
{
 c100160:	e1a0c00d 	mov	ip, sp
 c100164:	e92dd800 	push	{fp, ip, lr, pc}
 c100168:	e24cb004 	sub	fp, ip, #4
 c10016c:	e24dd008 	sub	sp, sp, #8
 c100170:	e50b0010 	str	r0, [fp, #-16]
}
 c100174:	e24bd00c 	sub	sp, fp, #12
 c100178:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10017c:	e12fff1e 	bx	lr

0c100180 <OSTaskIdleHook>:
** Esta función es llamada con las interrupciones habilitadas por la tarea OS_TaskIdle().
*/

#if OS_CPU_HOOKS_EN > 0
void OSTaskIdleHook( void )
{
 c100180:	e1a0c00d 	mov	ip, sp
 c100184:	e92dd800 	push	{fp, ip, lr, pc}
 c100188:	e24cb004 	sub	fp, ip, #4
    sleep();    /* Pone a la CPU en estado IDLE, sale por interrupción */
 c10018c:	eb0031e2 	bl	c10c91c <sleep>
}
 c100190:	e24bd00c 	sub	sp, fp, #12
 c100194:	e89d6800 	ldm	sp, {fp, sp, lr}
 c100198:	e12fff1e 	bx	lr

0c10019c <OSTaskStatHook>:
** Esta función es llamada cada segundo por la tarea OSTaskStat().
*/

#if OS_CPU_HOOKS_EN > 0 
void OSTaskStatHook( void )
{
 c10019c:	e1a0c00d 	mov	ip, sp
 c1001a0:	e92dd800 	push	{fp, ip, lr, pc}
 c1001a4:	e24cb004 	sub	fp, ip, #4
}
 c1001a8:	e24bd00c 	sub	sp, fp, #12
 c1001ac:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1001b0:	e12fff1e 	bx	lr

0c1001b4 <OSTaskStkInit>:
**   - OS_STK *ptos           -- puntero a la cima de la pila en la que la función inicializará el contexto de la tarea
**   - INT16U opt             -- permite indicar opciones para modificar el comportamiento de la función
** Devuelve un puntero a la nueva cima de la pila
*/
OS_STK *OSTaskStkInit( void (*task)(void *pd), void *pdata, OS_STK *ptos, INT16U opt )
{
 c1001b4:	e1a0c00d 	mov	ip, sp
 c1001b8:	e92dd800 	push	{fp, ip, lr, pc}
 c1001bc:	e24cb004 	sub	fp, ip, #4
 c1001c0:	e24dd010 	sub	sp, sp, #16
 c1001c4:	e50b0010 	str	r0, [fp, #-16]
 c1001c8:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
 c1001cc:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
 c1001d0:	e14b31ba 	strh	r3, [fp, #-26]	; 0xffffffe6

    #if OS_STK_GROWTH == 1               /* Si la pila crece de de direcciones ALTAS hacia BAJAS */

    *(ptos)   = (INT32U) task;        /* Apila el punto de entrada a la tarea                 */
 c1001d4:	e51b2010 	ldr	r2, [fp, #-16]
 c1001d8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c1001dc:	e5832000 	str	r2, [r3]
    *(--ptos) = (INT32U) 0;           /* Apila LR                                             */
 c1001e0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c1001e4:	e2433004 	sub	r3, r3, #4
 c1001e8:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
 c1001ec:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c1001f0:	e3a02000 	mov	r2, #0
 c1001f4:	e5832000 	str	r2, [r3]
    *(--ptos) = (INT32U) 0;           /* Apila R12                                            */
 c1001f8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c1001fc:	e2433004 	sub	r3, r3, #4
 c100200:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
 c100204:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c100208:	e3a02000 	mov	r2, #0
 c10020c:	e5832000 	str	r2, [r3]
    *(--ptos) = (INT32U) 0;           /* Apila R11                                            */
 c100210:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c100214:	e2433004 	sub	r3, r3, #4
 c100218:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
 c10021c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c100220:	e3a02000 	mov	r2, #0
 c100224:	e5832000 	str	r2, [r3]
    *(--ptos) = (INT32U) 0;           /* Apila R10                                            */
 c100228:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c10022c:	e2433004 	sub	r3, r3, #4
 c100230:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
 c100234:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c100238:	e3a02000 	mov	r2, #0
 c10023c:	e5832000 	str	r2, [r3]
    *(--ptos) = (INT32U) 0;           /* Apila R9                                             */
 c100240:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c100244:	e2433004 	sub	r3, r3, #4
 c100248:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
 c10024c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c100250:	e3a02000 	mov	r2, #0
 c100254:	e5832000 	str	r2, [r3]
    *(--ptos) = (INT32U) 0;           /* Apila R8                                             */
 c100258:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c10025c:	e2433004 	sub	r3, r3, #4
 c100260:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
 c100264:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c100268:	e3a02000 	mov	r2, #0
 c10026c:	e5832000 	str	r2, [r3]
    *(--ptos) = (INT32U) 0;           /* Apila R7                                             */
 c100270:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c100274:	e2433004 	sub	r3, r3, #4
 c100278:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
 c10027c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c100280:	e3a02000 	mov	r2, #0
 c100284:	e5832000 	str	r2, [r3]
    *(--ptos) = (INT32U) 0;           /* Apila R6                                             */
 c100288:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c10028c:	e2433004 	sub	r3, r3, #4
 c100290:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
 c100294:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c100298:	e3a02000 	mov	r2, #0
 c10029c:	e5832000 	str	r2, [r3]
    *(--ptos) = (INT32U) 0;           /* Apila R5                                             */
 c1002a0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c1002a4:	e2433004 	sub	r3, r3, #4
 c1002a8:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
 c1002ac:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c1002b0:	e3a02000 	mov	r2, #0
 c1002b4:	e5832000 	str	r2, [r3]
    *(--ptos) = (INT32U) 0;           /* Apila R4                                             */
 c1002b8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c1002bc:	e2433004 	sub	r3, r3, #4
 c1002c0:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
 c1002c4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c1002c8:	e3a02000 	mov	r2, #0
 c1002cc:	e5832000 	str	r2, [r3]
    *(--ptos) = (INT32U) 0;           /* Apila R3                                             */
 c1002d0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c1002d4:	e2433004 	sub	r3, r3, #4
 c1002d8:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
 c1002dc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c1002e0:	e3a02000 	mov	r2, #0
 c1002e4:	e5832000 	str	r2, [r3]
    *(--ptos) = (INT32U) 0;           /* Apila R2                                             */
 c1002e8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c1002ec:	e2433004 	sub	r3, r3, #4
 c1002f0:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
 c1002f4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c1002f8:	e3a02000 	mov	r2, #0
 c1002fc:	e5832000 	str	r2, [r3]
    *(--ptos) = (INT32U) 0;           /* Apila R1                                             */
 c100300:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c100304:	e2433004 	sub	r3, r3, #4
 c100308:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
 c10030c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c100310:	e3a02000 	mov	r2, #0
 c100314:	e5832000 	str	r2, [r3]
    *(--ptos) = (INT32U) pdata;       /* Apila R0 : argumento                                 */
 c100318:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c10031c:	e2433004 	sub	r3, r3, #4
 c100320:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
 c100324:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
 c100328:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c10032c:	e5832000 	str	r2, [r3]
    *(--ptos) = (INT32U) (0x13|0x0);  /* Apila CPSR (IRQ y FIQ habilitadas, modo SVC)         */
 c100330:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c100334:	e2433004 	sub	r3, r3, #4
 c100338:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
 c10033c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c100340:	e3a02013 	mov	r2, #19
 c100344:	e5832000 	str	r2, [r3]

    return (ptos);
 c100348:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8

#else
#error OS_STK_GROWTH no implementado
#endif

}
 c10034c:	e1a00003 	mov	r0, r3
 c100350:	e24bd00c 	sub	sp, fp, #12
 c100354:	e89d6800 	ldm	sp, {fp, sp, lr}
 c100358:	e12fff1e 	bx	lr

0c10035c <OSTaskSwHook>:
**   - OS_TCB *OSTCBHighRdy que apuntará al TCB de la tarea preparada de máxima prioridad (a reanudar)
*/

#if (OS_CPU_HOOKS_EN > 0) && (OS_TASK_SW_HOOK_EN > 0)
void OSTaskSwHook( void )
{
 c10035c:	e1a0c00d 	mov	ip, sp
 c100360:	e92dd800 	push	{fp, ip, lr, pc}
 c100364:	e24cb004 	sub	fp, ip, #4
}
 c100368:	e24bd00c 	sub	sp, fp, #12
 c10036c:	e89d6800 	ldm	sp, {fp, sp, lr}
 c100370:	e12fff1e 	bx	lr

0c100374 <OSTCBInitHook>:
** Las interrupciones pueden estar habilitadas o deshabilitadas.
** Toma como argumento un puntero al TCB de la tarea recién creada.
*/
#if OS_CPU_HOOKS_EN > 0
void OSTCBInitHook( OS_TCB *ptcb )
{
 c100374:	e1a0c00d 	mov	ip, sp
 c100378:	e92dd800 	push	{fp, ip, lr, pc}
 c10037c:	e24cb004 	sub	fp, ip, #4
 c100380:	e24dd008 	sub	sp, sp, #8
 c100384:	e50b0010 	str	r0, [fp, #-16]
}
 c100388:	e24bd00c 	sub	sp, fp, #12
 c10038c:	e89d6800 	ldm	sp, {fp, sp, lr}
 c100390:	e12fff1e 	bx	lr

0c100394 <OSTimeTickHook>:
** Esta función es llamada cada tick. Las interrupciones pueden estar habilitadas o deshabilitadas.
*/

#if (OS_CPU_HOOKS_EN > 0) && (OS_TIME_TICK_HOOK_EN > 0)
void OSTimeTickHook( void )
{
 c100394:	e1a0c00d 	mov	ip, sp
 c100398:	e92dd800 	push	{fp, ip, lr, pc}
 c10039c:	e24cb004 	sub	fp, ip, #4
}
 c1003a0:	e24bd00c 	sub	sp, fp, #12
 c1003a4:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1003a8:	e12fff1e 	bx	lr

0c1003ac <OSEventNameGet>:
*********************************************************************************************************
*/

#if OS_EVENT_EN && (OS_EVENT_NAME_SIZE > 1)
INT8U  OSEventNameGet (OS_EVENT *pevent, char *pname, INT8U *err)
{
 c1003ac:	e1a0c00d 	mov	ip, sp
 c1003b0:	e92dd800 	push	{fp, ip, lr, pc}
 c1003b4:	e24cb004 	sub	fp, ip, #4
 c1003b8:	e24dd018 	sub	sp, sp, #24
 c1003bc:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
 c1003c0:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
 c1003c4:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0



    cpu_sr = 0;                                  /* Prevent compiler warning                           */
#endif    
    OS_ENTER_CRITICAL();
 c1003c8:	e10f0000 	mrs	r0, CPSR
 c1003cc:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
 c1003d0:	e38000c0 	orr	r0, r0, #192	; 0xc0
 c1003d4:	e121f000 	msr	CPSR_c, r0
#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
 c1003d8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c1003dc:	e3530000 	cmp	r3, #0
 c1003e0:	1a000006 	bne	c100400 <OSEventNameGet+0x54>
        OS_EXIT_CRITICAL();                      /* Yes                                                */
 c1003e4:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 c1003e8:	e121f000 	msr	CPSR_c, r0
        *err = OS_ERR_PEVENT_NULL;
 c1003ec:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c1003f0:	e3a02004 	mov	r2, #4
 c1003f4:	e5c32000 	strb	r2, [r3]
        return (0);
 c1003f8:	e3a03000 	mov	r3, #0
 c1003fc:	ea000022 	b	c10048c <OSEventNameGet+0xe0>
    }
    if (pname == (char *)0) {                    /* Is 'pname' a NULL pointer?                         */
 c100400:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 c100404:	e3530000 	cmp	r3, #0
 c100408:	1a000006 	bne	c100428 <OSEventNameGet+0x7c>
        OS_EXIT_CRITICAL();                      /* Yes                                                */
 c10040c:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 c100410:	e121f000 	msr	CPSR_c, r0
        *err = OS_ERR_PNAME_NULL;
 c100414:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c100418:	e3a0200f 	mov	r2, #15
 c10041c:	e5c32000 	strb	r2, [r3]
        return (0);
 c100420:	e3a03000 	mov	r3, #0
 c100424:	ea000018 	b	c10048c <OSEventNameGet+0xe0>
    }
#endif
    switch (pevent->OSEventType) {
 c100428:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c10042c:	e5d33000 	ldrb	r3, [r3]
 c100430:	e2433001 	sub	r3, r3, #1
 c100434:	e3530003 	cmp	r3, #3
 c100438:	8a00000d 	bhi	c100474 <OSEventNameGet+0xc8>
        default:
             OS_EXIT_CRITICAL();
             *err = OS_ERR_EVENT_TYPE;
             return (0);
    }
    len  = OS_StrCopy(pname, pevent->OSEventName);    /* Copy name from OS_EVENT                       */
 c10043c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c100440:	e2833010 	add	r3, r3, #16
 c100444:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
 c100448:	e1a01003 	mov	r1, r3
 c10044c:	eb0004ec 	bl	c101804 <OS_StrCopy>
 c100450:	e1a03000 	mov	r3, r0
 c100454:	e54b300d 	strb	r3, [fp, #-13]
    OS_EXIT_CRITICAL();
 c100458:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 c10045c:	e121f000 	msr	CPSR_c, r0
    *err = OS_NO_ERR;
 c100460:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c100464:	e3a02000 	mov	r2, #0
 c100468:	e5c32000 	strb	r2, [r3]
    return (len);
 c10046c:	e55b300d 	ldrb	r3, [fp, #-13]
 c100470:	ea000005 	b	c10048c <OSEventNameGet+0xe0>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             OS_EXIT_CRITICAL();
 c100474:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 c100478:	e121f000 	msr	CPSR_c, r0
             *err = OS_ERR_EVENT_TYPE;
 c10047c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c100480:	e3a02001 	mov	r2, #1
 c100484:	e5c32000 	strb	r2, [r3]
             return (0);
 c100488:	e3a03000 	mov	r3, #0
    }
    len  = OS_StrCopy(pname, pevent->OSEventName);    /* Copy name from OS_EVENT                       */
    OS_EXIT_CRITICAL();
    *err = OS_NO_ERR;
    return (len);
}
 c10048c:	e1a00003 	mov	r0, r3
 c100490:	e24bd00c 	sub	sp, fp, #12
 c100494:	e89d6800 	ldm	sp, {fp, sp, lr}
 c100498:	e12fff1e 	bx	lr

0c10049c <OSEventNameSet>:
*********************************************************************************************************
*/

#if OS_EVENT_EN && (OS_EVENT_NAME_SIZE > 1)
void  OSEventNameSet (OS_EVENT *pevent, char *pname, INT8U *err)
{
 c10049c:	e1a0c00d 	mov	ip, sp
 c1004a0:	e92dd800 	push	{fp, ip, lr, pc}
 c1004a4:	e24cb004 	sub	fp, ip, #4
 c1004a8:	e24dd018 	sub	sp, sp, #24
 c1004ac:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
 c1004b0:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
 c1004b4:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0



    cpu_sr = 0;                                  /* Prevent compiler warning                           */
#endif    
    OS_ENTER_CRITICAL();
 c1004b8:	e10f0000 	mrs	r0, CPSR
 c1004bc:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
 c1004c0:	e38000c0 	orr	r0, r0, #192	; 0xc0
 c1004c4:	e121f000 	msr	CPSR_c, r0
#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
 c1004c8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c1004cc:	e3530000 	cmp	r3, #0
 c1004d0:	1a000005 	bne	c1004ec <OSEventNameSet+0x50>
        OS_EXIT_CRITICAL();                      /* Yes                                                */
 c1004d4:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 c1004d8:	e121f000 	msr	CPSR_c, r0
        *err = OS_ERR_PEVENT_NULL;
 c1004dc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c1004e0:	e3a02004 	mov	r2, #4
 c1004e4:	e5c32000 	strb	r2, [r3]
        return;
 c1004e8:	ea00002b 	b	c10059c <OSEventNameSet+0x100>
    }
    if (pname == (char *)0) {                    /* Is 'pname' a NULL pointer?                         */
 c1004ec:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 c1004f0:	e3530000 	cmp	r3, #0
 c1004f4:	1a000005 	bne	c100510 <OSEventNameSet+0x74>
        OS_EXIT_CRITICAL();                      /* Yes                                                */
 c1004f8:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 c1004fc:	e121f000 	msr	CPSR_c, r0
        *err = OS_ERR_PNAME_NULL;
 c100500:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c100504:	e3a0200f 	mov	r2, #15
 c100508:	e5c32000 	strb	r2, [r3]
        return;
 c10050c:	ea000022 	b	c10059c <OSEventNameSet+0x100>
    }
#endif
    switch (pevent->OSEventType) {
 c100510:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c100514:	e5d33000 	ldrb	r3, [r3]
 c100518:	e2433001 	sub	r3, r3, #1
 c10051c:	e3530003 	cmp	r3, #3
 c100520:	8a000007 	bhi	c100544 <OSEventNameSet+0xa8>
        default:
             OS_EXIT_CRITICAL();
             *err = OS_ERR_EVENT_TYPE;
             return;
    }
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
 c100524:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
 c100528:	eb0004d7 	bl	c10188c <OS_StrLen>
 c10052c:	e1a03000 	mov	r3, r0
 c100530:	e54b300d 	strb	r3, [fp, #-13]
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
 c100534:	e55b300d 	ldrb	r3, [fp, #-13]
 c100538:	e353001f 	cmp	r3, #31
 c10053c:	8a000006 	bhi	c10055c <OSEventNameSet+0xc0>
 c100540:	ea00000b 	b	c100574 <OSEventNameSet+0xd8>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             OS_EXIT_CRITICAL();
 c100544:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 c100548:	e121f000 	msr	CPSR_c, r0
             *err = OS_ERR_EVENT_TYPE;
 c10054c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c100550:	e3a02001 	mov	r2, #1
 c100554:	e5c32000 	strb	r2, [r3]
             return;
 c100558:	ea00000f 	b	c10059c <OSEventNameSet+0x100>
    }
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
        OS_EXIT_CRITICAL();
 c10055c:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 c100560:	e121f000 	msr	CPSR_c, r0
        *err = OS_ERR_EVENT_NAME_TOO_LONG;
 c100564:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c100568:	e3a0200c 	mov	r2, #12
 c10056c:	e5c32000 	strb	r2, [r3]
        return;
 c100570:	ea000009 	b	c10059c <OSEventNameSet+0x100>
    } 
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
 c100574:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c100578:	e2833010 	add	r3, r3, #16
 c10057c:	e1a00003 	mov	r0, r3
 c100580:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
 c100584:	eb00049e 	bl	c101804 <OS_StrCopy>
    OS_EXIT_CRITICAL();
 c100588:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 c10058c:	e121f000 	msr	CPSR_c, r0
    *err = OS_NO_ERR;
 c100590:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c100594:	e3a02000 	mov	r2, #0
 c100598:	e5c32000 	strb	r2, [r3]
}
 c10059c:	e24bd00c 	sub	sp, fp, #12
 c1005a0:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1005a4:	e12fff1e 	bx	lr

0c1005a8 <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
 c1005a8:	e1a0c00d 	mov	ip, sp
 c1005ac:	e92dd800 	push	{fp, ip, lr, pc}
 c1005b0:	e24cb004 	sub	fp, ip, #4
#if OS_VERSION >= 204
    OSInitHookBegin();                                           /* Call port specific initialization code   */
 c1005b4:	ebfffed5 	bl	c100110 <OSInitHookBegin>
#endif

    OS_InitMisc();                                               /* Initialize miscellaneous variables       */
 c1005b8:	eb000348 	bl	c1012e0 <OS_InitMisc>

    OS_InitRdyList();                                            /* Initialize the Ready List                */
 c1005bc:	eb000375 	bl	c101398 <OS_InitRdyList>

    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */
 c1005c0:	eb0003d5 	bl	c10151c <OS_InitTCBList>

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */
 c1005c4:	eb000309 	bl	c1011f0 <OS_InitEventList>

#if (OS_VERSION >= 251) && (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FlagInit();                                               /* Initialize the event flag structures     */
 c1005c8:	eb000ba6 	bl	c103468 <OS_FlagInit>
#endif

#if (OS_MEM_EN > 0) && (OS_MAX_MEM_PART > 0)
    OS_MemInit();                                                /* Initialize the memory manager            */
 c1005cc:	eb001015 	bl	c104628 <OS_MemInit>
#endif

#if (OS_Q_EN > 0) && (OS_MAX_QS > 0)
    OS_QInit();                                                  /* Initialize the message queue structures  */
 c1005d0:	eb00180e 	bl	c106610 <OS_QInit>
#endif

    OS_InitTaskIdle();                                           /* Create the Idle Task                     */
 c1005d4:	eb00039c 	bl	c10144c <OS_InitTaskIdle>
#if OS_TASK_STAT_EN > 0
    OS_InitTaskStat();                                           /* Create the Statistic Task                */
 c1005d8:	eb0003b5 	bl	c1014b4 <OS_InitTaskStat>
#endif

#if OS_VERSION >= 204
    OSInitHookEnd();                                             /* Call port specific init. code            */
 c1005dc:	ebfffed1 	bl	c100128 <OSInitHookEnd>
#endif

#if OS_VERSION >= 270 && OS_DEBUG_EN > 0
    OSDebugInit();
 c1005e0:	eb000607 	bl	c101e04 <OSDebugInit>
#endif
}
 c1005e4:	e24bd00c 	sub	sp, fp, #12
 c1005e8:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1005ec:	e12fff1e 	bx	lr

0c1005f0 <OSIntEnter>:
*                 OSIntEnter() is always called with interrupts disabled.
*********************************************************************************************************
*/

void  OSIntEnter (void)
{
 c1005f0:	e1a0c00d 	mov	ip, sp
 c1005f4:	e92dd800 	push	{fp, ip, lr, pc}
 c1005f8:	e24cb004 	sub	fp, ip, #4
    if (OSRunning == TRUE) {
 c1005fc:	e59f303c 	ldr	r3, [pc, #60]	; c100640 <OSIntEnter+0x50>
 c100600:	e5d33000 	ldrb	r3, [r3]
 c100604:	e3530001 	cmp	r3, #1
 c100608:	1a000009 	bne	c100634 <OSIntEnter+0x44>
        if (OSIntNesting < 255u) {
 c10060c:	e59f3030 	ldr	r3, [pc, #48]	; c100644 <OSIntEnter+0x54>
 c100610:	e5d33000 	ldrb	r3, [r3]
 c100614:	e35300ff 	cmp	r3, #255	; 0xff
 c100618:	0a000005 	beq	c100634 <OSIntEnter+0x44>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
 c10061c:	e59f3020 	ldr	r3, [pc, #32]	; c100644 <OSIntEnter+0x54>
 c100620:	e5d33000 	ldrb	r3, [r3]
 c100624:	e2833001 	add	r3, r3, #1
 c100628:	e20320ff 	and	r2, r3, #255	; 0xff
 c10062c:	e59f3010 	ldr	r3, [pc, #16]	; c100644 <OSIntEnter+0x54>
 c100630:	e5c32000 	strb	r2, [r3]
        }
    }
}
 c100634:	e24bd00c 	sub	sp, fp, #12
 c100638:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10063c:	e12fff1e 	bx	lr
 c100640:	0c119225 	.word	0x0c119225
 c100644:	0c119ca8 	.word	0x0c119ca8

0c100648 <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
 c100648:	e1a0c00d 	mov	ip, sp
 c10064c:	e92dd800 	push	{fp, ip, lr, pc}
 c100650:	e24cb004 	sub	fp, ip, #4
 c100654:	e24dd008 	sub	sp, sp, #8
    
    

    cpu_sr = 0;                                            /* Prevent compiler warning                 */
#endif    
    if (OSRunning == TRUE) {
 c100658:	e59f3118 	ldr	r3, [pc, #280]	; c100778 <OSIntExit+0x130>
 c10065c:	e5d33000 	ldrb	r3, [r3]
 c100660:	e3530001 	cmp	r3, #1
 c100664:	1a000040 	bne	c10076c <OSIntExit+0x124>
        OS_ENTER_CRITICAL();
 c100668:	e10f0000 	mrs	r0, CPSR
 c10066c:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
 c100670:	e38000c0 	orr	r0, r0, #192	; 0xc0
 c100674:	e121f000 	msr	CPSR_c, r0
        if (OSIntNesting > 0) {                            /* Prevent OSIntNesting from wrapping       */
 c100678:	e59f30fc 	ldr	r3, [pc, #252]	; c10077c <OSIntExit+0x134>
 c10067c:	e5d33000 	ldrb	r3, [r3]
 c100680:	e3530000 	cmp	r3, #0
 c100684:	0a000005 	beq	c1006a0 <OSIntExit+0x58>
            OSIntNesting--;
 c100688:	e59f30ec 	ldr	r3, [pc, #236]	; c10077c <OSIntExit+0x134>
 c10068c:	e5d33000 	ldrb	r3, [r3]
 c100690:	e2433001 	sub	r3, r3, #1
 c100694:	e20320ff 	and	r2, r3, #255	; 0xff
 c100698:	e59f30dc 	ldr	r3, [pc, #220]	; c10077c <OSIntExit+0x134>
 c10069c:	e5c32000 	strb	r2, [r3]
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
 c1006a0:	e59f30d4 	ldr	r3, [pc, #212]	; c10077c <OSIntExit+0x134>
 c1006a4:	e5d33000 	ldrb	r3, [r3]
 c1006a8:	e3530000 	cmp	r3, #0
 c1006ac:	1a00002c 	bne	c100764 <OSIntExit+0x11c>
            if (OSLockNesting == 0) {                      /* ... and not locked.                      */
 c1006b0:	e59f30c8 	ldr	r3, [pc, #200]	; c100780 <OSIntExit+0x138>
 c1006b4:	e5d33000 	ldrb	r3, [r3]
 c1006b8:	e3530000 	cmp	r3, #0
 c1006bc:	1a000028 	bne	c100764 <OSIntExit+0x11c>
                y             = OSUnMapTbl[OSRdyGrp];          
 c1006c0:	e59f30bc 	ldr	r3, [pc, #188]	; c100784 <OSIntExit+0x13c>
 c1006c4:	e5d33000 	ldrb	r3, [r3]
 c1006c8:	e59f20b8 	ldr	r2, [pc, #184]	; c100788 <OSIntExit+0x140>
 c1006cc:	e7d23003 	ldrb	r3, [r2, r3]
 c1006d0:	e54b300d 	strb	r3, [fp, #-13]
                OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
 c1006d4:	e55b300d 	ldrb	r3, [fp, #-13]
 c1006d8:	e1a03183 	lsl	r3, r3, #3
 c1006dc:	e20320ff 	and	r2, r3, #255	; 0xff
 c1006e0:	e55b300d 	ldrb	r3, [fp, #-13]
 c1006e4:	e59f10a0 	ldr	r1, [pc, #160]	; c10078c <OSIntExit+0x144>
 c1006e8:	e7d13003 	ldrb	r3, [r1, r3]
 c1006ec:	e59f1094 	ldr	r1, [pc, #148]	; c100788 <OSIntExit+0x140>
 c1006f0:	e7d13003 	ldrb	r3, [r1, r3]
 c1006f4:	e0823003 	add	r3, r2, r3
 c1006f8:	e20320ff 	and	r2, r3, #255	; 0xff
 c1006fc:	e59f308c 	ldr	r3, [pc, #140]	; c100790 <OSIntExit+0x148>
 c100700:	e5c32000 	strb	r2, [r3]
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
 c100704:	e59f3084 	ldr	r3, [pc, #132]	; c100790 <OSIntExit+0x148>
 c100708:	e5d32000 	ldrb	r2, [r3]
 c10070c:	e59f3080 	ldr	r3, [pc, #128]	; c100794 <OSIntExit+0x14c>
 c100710:	e5d33000 	ldrb	r3, [r3]
 c100714:	e1520003 	cmp	r2, r3
 c100718:	0a000011 	beq	c100764 <OSIntExit+0x11c>
                    OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
 c10071c:	e59f306c 	ldr	r3, [pc, #108]	; c100790 <OSIntExit+0x148>
 c100720:	e5d33000 	ldrb	r3, [r3]
 c100724:	e1a02003 	mov	r2, r3
 c100728:	e59f3068 	ldr	r3, [pc, #104]	; c100798 <OSIntExit+0x150>
 c10072c:	e7932102 	ldr	r2, [r3, r2, lsl #2]
 c100730:	e59f3064 	ldr	r3, [pc, #100]	; c10079c <OSIntExit+0x154>
 c100734:	e5832000 	str	r2, [r3]
#if OS_TASK_PROFILE_EN > 0
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
 c100738:	e59f305c 	ldr	r3, [pc, #92]	; c10079c <OSIntExit+0x154>
 c10073c:	e5933000 	ldr	r3, [r3]
 c100740:	e5932034 	ldr	r2, [r3, #52]	; 0x34
 c100744:	e2822001 	add	r2, r2, #1
 c100748:	e5832034 	str	r2, [r3, #52]	; 0x34
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
 c10074c:	e59f304c 	ldr	r3, [pc, #76]	; c1007a0 <OSIntExit+0x158>
 c100750:	e5933000 	ldr	r3, [r3]
 c100754:	e2832001 	add	r2, r3, #1
 c100758:	e59f3040 	ldr	r3, [pc, #64]	; c1007a0 <OSIntExit+0x158>
 c10075c:	e5832000 	str	r2, [r3]
                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
 c100760:	ebfffe37 	bl	c100044 <OSIntCtxSw>
                }
            }
        }
        OS_EXIT_CRITICAL();
 c100764:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 c100768:	e121f000 	msr	CPSR_c, r0
    }
}
 c10076c:	e24bd00c 	sub	sp, fp, #12
 c100770:	e89d6800 	ldm	sp, {fp, sp, lr}
 c100774:	e12fff1e 	bx	lr
 c100778:	0c119225 	.word	0x0c119225
 c10077c:	0c119ca8 	.word	0x0c119ca8
 c100780:	0c119224 	.word	0x0c119224
 c100784:	0c119c98 	.word	0x0c119c98
 c100788:	0c10e3dc 	.word	0x0c10e3dc
 c10078c:	0c119c9c 	.word	0x0c119c9c
 c100790:	0c11922c 	.word	0x0c11922c
 c100794:	0c11930c 	.word	0x0c11930c
 c100798:	0c11af8c 	.word	0x0c11af8c
 c10079c:	0c119c90 	.word	0x0c119c90
 c1007a0:	0c119c1c 	.word	0x0c119c1c

0c1007a4 <OSSchedLock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedLock (void)
{
 c1007a4:	e1a0c00d 	mov	ip, sp
 c1007a8:	e92dd800 	push	{fp, ip, lr, pc}
 c1007ac:	e24cb004 	sub	fp, ip, #4
    
    

    cpu_sr = 0;                                  /* Prevent compiler warning                           */
#endif    
    if (OSRunning == TRUE) {                     /* Make sure multitasking is running                  */
 c1007b0:	e59f3054 	ldr	r3, [pc, #84]	; c10080c <OSSchedLock+0x68>
 c1007b4:	e5d33000 	ldrb	r3, [r3]
 c1007b8:	e3530001 	cmp	r3, #1
 c1007bc:	1a00000f 	bne	c100800 <OSSchedLock+0x5c>
        OS_ENTER_CRITICAL();
 c1007c0:	e10f0000 	mrs	r0, CPSR
 c1007c4:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
 c1007c8:	e38000c0 	orr	r0, r0, #192	; 0xc0
 c1007cc:	e121f000 	msr	CPSR_c, r0
        if (OSLockNesting < 255u) {              /* Prevent OSLockNesting from wrapping back to 0      */
 c1007d0:	e59f3038 	ldr	r3, [pc, #56]	; c100810 <OSSchedLock+0x6c>
 c1007d4:	e5d33000 	ldrb	r3, [r3]
 c1007d8:	e35300ff 	cmp	r3, #255	; 0xff
 c1007dc:	0a000005 	beq	c1007f8 <OSSchedLock+0x54>
            OSLockNesting++;                     /* Increment lock nesting level                       */
 c1007e0:	e59f3028 	ldr	r3, [pc, #40]	; c100810 <OSSchedLock+0x6c>
 c1007e4:	e5d33000 	ldrb	r3, [r3]
 c1007e8:	e2833001 	add	r3, r3, #1
 c1007ec:	e20320ff 	and	r2, r3, #255	; 0xff
 c1007f0:	e59f3018 	ldr	r3, [pc, #24]	; c100810 <OSSchedLock+0x6c>
 c1007f4:	e5c32000 	strb	r2, [r3]
        }
        OS_EXIT_CRITICAL();
 c1007f8:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 c1007fc:	e121f000 	msr	CPSR_c, r0
    }
}
 c100800:	e24bd00c 	sub	sp, fp, #12
 c100804:	e89d6800 	ldm	sp, {fp, sp, lr}
 c100808:	e12fff1e 	bx	lr
 c10080c:	0c119225 	.word	0x0c119225
 c100810:	0c119224 	.word	0x0c119224

0c100814 <OSSchedUnlock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedUnlock (void)
{
 c100814:	e1a0c00d 	mov	ip, sp
 c100818:	e92dd800 	push	{fp, ip, lr, pc}
 c10081c:	e24cb004 	sub	fp, ip, #4
    
    

    cpu_sr = 0;                                            /* Prevent compiler warning                 */
#endif    
    if (OSRunning == TRUE) {                               /* Make sure multitasking is running        */
 c100820:	e59f309c 	ldr	r3, [pc, #156]	; c1008c4 <OSSchedUnlock+0xb0>
 c100824:	e5d33000 	ldrb	r3, [r3]
 c100828:	e3530001 	cmp	r3, #1
 c10082c:	1a000021 	bne	c1008b8 <OSSchedUnlock+0xa4>
        OS_ENTER_CRITICAL();
 c100830:	e10f0000 	mrs	r0, CPSR
 c100834:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
 c100838:	e38000c0 	orr	r0, r0, #192	; 0xc0
 c10083c:	e121f000 	msr	CPSR_c, r0
        if (OSLockNesting > 0) {                           /* Do not decrement if already 0            */
 c100840:	e59f3080 	ldr	r3, [pc, #128]	; c1008c8 <OSSchedUnlock+0xb4>
 c100844:	e5d33000 	ldrb	r3, [r3]
 c100848:	e3530000 	cmp	r3, #0
 c10084c:	0a000017 	beq	c1008b0 <OSSchedUnlock+0x9c>
            OSLockNesting--;                               /* Decrement lock nesting level             */
 c100850:	e59f3070 	ldr	r3, [pc, #112]	; c1008c8 <OSSchedUnlock+0xb4>
 c100854:	e5d33000 	ldrb	r3, [r3]
 c100858:	e2433001 	sub	r3, r3, #1
 c10085c:	e20320ff 	and	r2, r3, #255	; 0xff
 c100860:	e59f3060 	ldr	r3, [pc, #96]	; c1008c8 <OSSchedUnlock+0xb4>
 c100864:	e5c32000 	strb	r2, [r3]
            if (OSLockNesting == 0) {                      /* See if scheduler is enabled and ...      */
 c100868:	e59f3058 	ldr	r3, [pc, #88]	; c1008c8 <OSSchedUnlock+0xb4>
 c10086c:	e5d33000 	ldrb	r3, [r3]
 c100870:	e3530000 	cmp	r3, #0
 c100874:	1a00000a 	bne	c1008a4 <OSSchedUnlock+0x90>
                if (OSIntNesting == 0) {                   /* ... not in an ISR                        */
 c100878:	e59f304c 	ldr	r3, [pc, #76]	; c1008cc <OSSchedUnlock+0xb8>
 c10087c:	e5d33000 	ldrb	r3, [r3]
 c100880:	e3530000 	cmp	r3, #0
 c100884:	1a000003 	bne	c100898 <OSSchedUnlock+0x84>
                    OS_EXIT_CRITICAL();
 c100888:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 c10088c:	e121f000 	msr	CPSR_c, r0
                    OS_Sched();                            /* See if a HPT is ready                    */
 c100890:	eb000393 	bl	c1016e4 <OS_Sched>
 c100894:	ea000007 	b	c1008b8 <OSSchedUnlock+0xa4>
                } else {
                    OS_EXIT_CRITICAL();
 c100898:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 c10089c:	e121f000 	msr	CPSR_c, r0
 c1008a0:	ea000004 	b	c1008b8 <OSSchedUnlock+0xa4>
                }
            } else {
                OS_EXIT_CRITICAL();
 c1008a4:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 c1008a8:	e121f000 	msr	CPSR_c, r0
 c1008ac:	ea000001 	b	c1008b8 <OSSchedUnlock+0xa4>
            }
        } else {
            OS_EXIT_CRITICAL();
 c1008b0:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 c1008b4:	e121f000 	msr	CPSR_c, r0
        }
    }
}
 c1008b8:	e24bd00c 	sub	sp, fp, #12
 c1008bc:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1008c0:	e12fff1e 	bx	lr
 c1008c4:	0c119225 	.word	0x0c119225
 c1008c8:	0c119224 	.word	0x0c119224
 c1008cc:	0c119ca8 	.word	0x0c119ca8

0c1008d0 <OSStart>:
*                 d_ Execute the task.
*********************************************************************************************************
*/

void  OSStart (void)
{
 c1008d0:	e1a0c00d 	mov	ip, sp
 c1008d4:	e92dd800 	push	{fp, ip, lr, pc}
 c1008d8:	e24cb004 	sub	fp, ip, #4
 c1008dc:	e24dd008 	sub	sp, sp, #8
    INT8U y;
    INT8U x;


    if (OSRunning == FALSE) {
 c1008e0:	e59f30a0 	ldr	r3, [pc, #160]	; c100988 <OSStart+0xb8>
 c1008e4:	e5d33000 	ldrb	r3, [r3]
 c1008e8:	e3530000 	cmp	r3, #0
 c1008ec:	1a000022 	bne	c10097c <OSStart+0xac>
        y             = OSUnMapTbl[OSRdyGrp];        /* Find highest priority's task priority number   */
 c1008f0:	e59f3094 	ldr	r3, [pc, #148]	; c10098c <OSStart+0xbc>
 c1008f4:	e5d33000 	ldrb	r3, [r3]
 c1008f8:	e59f2090 	ldr	r2, [pc, #144]	; c100990 <OSStart+0xc0>
 c1008fc:	e7d23003 	ldrb	r3, [r2, r3]
 c100900:	e54b300d 	strb	r3, [fp, #-13]
        x             = OSUnMapTbl[OSRdyTbl[y]];
 c100904:	e55b300d 	ldrb	r3, [fp, #-13]
 c100908:	e59f2084 	ldr	r2, [pc, #132]	; c100994 <OSStart+0xc4>
 c10090c:	e7d23003 	ldrb	r3, [r2, r3]
 c100910:	e59f2078 	ldr	r2, [pc, #120]	; c100990 <OSStart+0xc0>
 c100914:	e7d23003 	ldrb	r3, [r2, r3]
 c100918:	e54b300e 	strb	r3, [fp, #-14]
        OSPrioHighRdy = (INT8U)((y << 3) + x);
 c10091c:	e55b300d 	ldrb	r3, [fp, #-13]
 c100920:	e1a03183 	lsl	r3, r3, #3
 c100924:	e20320ff 	and	r2, r3, #255	; 0xff
 c100928:	e55b300e 	ldrb	r3, [fp, #-14]
 c10092c:	e0823003 	add	r3, r2, r3
 c100930:	e20320ff 	and	r2, r3, #255	; 0xff
 c100934:	e59f305c 	ldr	r3, [pc, #92]	; c100998 <OSStart+0xc8>
 c100938:	e5c32000 	strb	r2, [r3]
        OSPrioCur     = OSPrioHighRdy;
 c10093c:	e59f3054 	ldr	r3, [pc, #84]	; c100998 <OSStart+0xc8>
 c100940:	e5d32000 	ldrb	r2, [r3]
 c100944:	e59f3050 	ldr	r3, [pc, #80]	; c10099c <OSStart+0xcc>
 c100948:	e5c32000 	strb	r2, [r3]
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
 c10094c:	e59f3044 	ldr	r3, [pc, #68]	; c100998 <OSStart+0xc8>
 c100950:	e5d33000 	ldrb	r3, [r3]
 c100954:	e1a02003 	mov	r2, r3
 c100958:	e59f3040 	ldr	r3, [pc, #64]	; c1009a0 <OSStart+0xd0>
 c10095c:	e7932102 	ldr	r2, [r3, r2, lsl #2]
 c100960:	e59f303c 	ldr	r3, [pc, #60]	; c1009a4 <OSStart+0xd4>
 c100964:	e5832000 	str	r2, [r3]
        OSTCBCur      = OSTCBHighRdy;
 c100968:	e59f3034 	ldr	r3, [pc, #52]	; c1009a4 <OSStart+0xd4>
 c10096c:	e5932000 	ldr	r2, [r3]
 c100970:	e59f3030 	ldr	r3, [pc, #48]	; c1009a8 <OSStart+0xd8>
 c100974:	e5832000 	str	r2, [r3]
        OSStartHighRdy();                            /* Execute target specific code to start task     */
 c100978:	ebfffda0 	bl	c100000 <OSStartHighRdy>
    }
}
 c10097c:	e24bd00c 	sub	sp, fp, #12
 c100980:	e89d6800 	ldm	sp, {fp, sp, lr}
 c100984:	e12fff1e 	bx	lr
 c100988:	0c119225 	.word	0x0c119225
 c10098c:	0c119c98 	.word	0x0c119c98
 c100990:	0c10e3dc 	.word	0x0c10e3dc
 c100994:	0c119c9c 	.word	0x0c119c9c
 c100998:	0c11922c 	.word	0x0c11922c
 c10099c:	0c11930c 	.word	0x0c11930c
 c1009a0:	0c11af8c 	.word	0x0c11af8c
 c1009a4:	0c119c90 	.word	0x0c119c90
 c1009a8:	0c119cac 	.word	0x0c119cac

0c1009ac <OSStatInit>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OSStatInit (void)
{
 c1009ac:	e1a0c00d 	mov	ip, sp
 c1009b0:	e92dd800 	push	{fp, ip, lr, pc}
 c1009b4:	e24cb004 	sub	fp, ip, #4
    
    

    cpu_sr = 0;                                  /* Prevent compiler warning                           */
#endif    
    OSTimeDly(2);                                /* Synchronize with clock tick                        */
 c1009b8:	e3a00002 	mov	r0, #2
 c1009bc:	eb001e8e 	bl	c1083fc <OSTimeDly>
    OS_ENTER_CRITICAL();
 c1009c0:	e10f0000 	mrs	r0, CPSR
 c1009c4:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
 c1009c8:	e38000c0 	orr	r0, r0, #192	; 0xc0
 c1009cc:	e121f000 	msr	CPSR_c, r0
    OSIdleCtr    = 0L;                           /* Clear idle counter                                 */
 c1009d0:	e59f3054 	ldr	r3, [pc, #84]	; c100a2c <OSStatInit+0x80>
 c1009d4:	e3a02000 	mov	r2, #0
 c1009d8:	e5832000 	str	r2, [r3]
    OS_EXIT_CRITICAL();
 c1009dc:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 c1009e0:	e121f000 	msr	CPSR_c, r0
    OSTimeDly(OS_TICKS_PER_SEC / 10);            /* Determine MAX. idle counter value for 1/10 second  */
 c1009e4:	e3a0000a 	mov	r0, #10
 c1009e8:	eb001e83 	bl	c1083fc <OSTimeDly>
    OS_ENTER_CRITICAL();
 c1009ec:	e10f0000 	mrs	r0, CPSR
 c1009f0:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
 c1009f4:	e38000c0 	orr	r0, r0, #192	; 0xc0
 c1009f8:	e121f000 	msr	CPSR_c, r0
    OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1/10 second    */
 c1009fc:	e59f3028 	ldr	r3, [pc, #40]	; c100a2c <OSStatInit+0x80>
 c100a00:	e5932000 	ldr	r2, [r3]
 c100a04:	e59f3024 	ldr	r3, [pc, #36]	; c100a30 <OSStatInit+0x84>
 c100a08:	e5832000 	str	r2, [r3]
    OSStatRdy    = TRUE;
 c100a0c:	e59f3020 	ldr	r3, [pc, #32]	; c100a34 <OSStatInit+0x88>
 c100a10:	e3a02001 	mov	r2, #1
 c100a14:	e5c32000 	strb	r2, [r3]
    OS_EXIT_CRITICAL();
 c100a18:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 c100a1c:	e121f000 	msr	CPSR_c, r0
}
 c100a20:	e24bd00c 	sub	sp, fp, #12
 c100a24:	e89d6800 	ldm	sp, {fp, sp, lr}
 c100a28:	e12fff1e 	bx	lr
 c100a2c:	0c119228 	.word	0x0c119228
 c100a30:	0c119c20 	.word	0x0c119c20
 c100a34:	0c11af88 	.word	0x0c11af88

0c100a38 <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
 c100a38:	e1a0c00d 	mov	ip, sp
 c100a3c:	e92dd800 	push	{fp, ip, lr, pc}
 c100a40:	e24cb004 	sub	fp, ip, #4
 c100a44:	e24dd008 	sub	sp, sp, #8


    cpu_sr = 0;                                            /* Prevent compiler warning                     */
#endif
#if OS_TIME_TICK_HOOK_EN > 0
    OSTimeTickHook();                                      /* Call user definable hook                     */
 c100a48:	ebfffe51 	bl	c100394 <OSTimeTickHook>
#endif
#if OS_TIME_GET_SET_EN > 0
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
 c100a4c:	e10f0000 	mrs	r0, CPSR
 c100a50:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
 c100a54:	e38000c0 	orr	r0, r0, #192	; 0xc0
 c100a58:	e121f000 	msr	CPSR_c, r0
    OSTime++;
 c100a5c:	e59f31d8 	ldr	r3, [pc, #472]	; c100c3c <OSTimeTick+0x204>
 c100a60:	e5933000 	ldr	r3, [r3]
 c100a64:	e2832001 	add	r2, r3, #1
 c100a68:	e59f31cc 	ldr	r3, [pc, #460]	; c100c3c <OSTimeTick+0x204>
 c100a6c:	e5832000 	str	r2, [r3]
    OS_EXIT_CRITICAL();
 c100a70:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 c100a74:	e121f000 	msr	CPSR_c, r0
#endif
    if (OSRunning == TRUE) {
 c100a78:	e59f31c0 	ldr	r3, [pc, #448]	; c100c40 <OSTimeTick+0x208>
 c100a7c:	e5d33000 	ldrb	r3, [r3]
 c100a80:	e3530001 	cmp	r3, #1
 c100a84:	1a000069 	bne	c100c30 <OSTimeTick+0x1f8>
#if OS_TICK_STEP_EN > 0
        switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
 c100a88:	e59f31b4 	ldr	r3, [pc, #436]	; c100c44 <OSTimeTick+0x20c>
 c100a8c:	e5d33000 	ldrb	r3, [r3]
 c100a90:	e3530001 	cmp	r3, #1
 c100a94:	0a000006 	beq	c100ab4 <OSTimeTick+0x7c>
 c100a98:	e3530002 	cmp	r3, #2
 c100a9c:	0a000007 	beq	c100ac0 <OSTimeTick+0x88>
 c100aa0:	e3530000 	cmp	r3, #0
 c100aa4:	1a00000b 	bne	c100ad8 <OSTimeTick+0xa0>
            case OS_TICK_STEP_DIS:                         /* Yes, stepping is disabled                    */
                 step = TRUE;
 c100aa8:	e3a03001 	mov	r3, #1
 c100aac:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
                 break;
 c100ab0:	ea00000e 	b	c100af0 <OSTimeTick+0xb8>

            case OS_TICK_STEP_WAIT:                        /* No,  waiting for uC/OS-View to set ...       */
                 step = FALSE;                             /*      .. OSTickStepState to OS_TICK_STEP_ONCE */
 c100ab4:	e3a03000 	mov	r3, #0
 c100ab8:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
                 break;
 c100abc:	ea00000b 	b	c100af0 <OSTimeTick+0xb8>

            case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for next ... */
                 step            = TRUE;                   /*      ... step command from uC/OS-View        */
 c100ac0:	e3a03001 	mov	r3, #1
 c100ac4:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
                 OSTickStepState = OS_TICK_STEP_WAIT;
 c100ac8:	e59f3174 	ldr	r3, [pc, #372]	; c100c44 <OSTimeTick+0x20c>
 c100acc:	e3a02001 	mov	r2, #1
 c100ad0:	e5c32000 	strb	r2, [r3]
                 break;
 c100ad4:	ea000005 	b	c100af0 <OSTimeTick+0xb8>

            default:                                       /* Invalid case, correct situation              */
                 step            = TRUE;
 c100ad8:	e3a03001 	mov	r3, #1
 c100adc:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
                 OSTickStepState = OS_TICK_STEP_DIS;
 c100ae0:	e59f315c 	ldr	r3, [pc, #348]	; c100c44 <OSTimeTick+0x20c>
 c100ae4:	e3a02000 	mov	r2, #0
 c100ae8:	e5c32000 	strb	r2, [r3]
                 break;
 c100aec:	e1a00000 	nop			; (mov r0, r0)
        }
        if (step == FALSE) {                               /* Return if waiting for step command           */
 c100af0:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c100af4:	e3530000 	cmp	r3, #0
 c100af8:	0a00004b 	beq	c100c2c <OSTimeTick+0x1f4>
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
 c100afc:	e59f3144 	ldr	r3, [pc, #324]	; c100c48 <OSTimeTick+0x210>
 c100b00:	e5933000 	ldr	r3, [r3]
 c100b04:	e50b3010 	str	r3, [fp, #-16]
        while (ptcb->OSTCBPrio != OS_IDLE_PRIO) {          /* Go through all TCBs in TCB list              */
 c100b08:	ea000042 	b	c100c18 <OSTimeTick+0x1e0>
            OS_ENTER_CRITICAL();
 c100b0c:	e10f0000 	mrs	r0, CPSR
 c100b10:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
 c100b14:	e38000c0 	orr	r0, r0, #192	; 0xc0
 c100b18:	e121f000 	msr	CPSR_c, r0
            if (ptcb->OSTCBDly != 0) {                     /* No, Delayed or waiting for event with TO     */
 c100b1c:	e51b3010 	ldr	r3, [fp, #-16]
 c100b20:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
 c100b24:	e3530000 	cmp	r3, #0
 c100b28:	0a000035 	beq	c100c04 <OSTimeTick+0x1cc>
                if (--ptcb->OSTCBDly == 0) {               /* Decrement nbr of ticks to end of delay       */
 c100b2c:	e51b3010 	ldr	r3, [fp, #-16]
 c100b30:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
 c100b34:	e2433001 	sub	r3, r3, #1
 c100b38:	e1a03803 	lsl	r3, r3, #16
 c100b3c:	e1a02823 	lsr	r2, r3, #16
 c100b40:	e51b3010 	ldr	r3, [fp, #-16]
 c100b44:	e1c322ba 	strh	r2, [r3, #42]	; 0x2a
 c100b48:	e51b3010 	ldr	r3, [fp, #-16]
 c100b4c:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
 c100b50:	e3530000 	cmp	r3, #0
 c100b54:	1a00002a 	bne	c100c04 <OSTimeTick+0x1cc>
                                                           /* Check for timeout                            */
                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
 c100b58:	e51b3010 	ldr	r3, [fp, #-16]
 c100b5c:	e5d3302c 	ldrb	r3, [r3, #44]	; 0x2c
 c100b60:	e2033037 	and	r3, r3, #55	; 0x37
 c100b64:	e3530000 	cmp	r3, #0
 c100b68:	0a000009 	beq	c100b94 <OSTimeTick+0x15c>
                        ptcb->OSTCBStat   &= ~OS_STAT_PEND_ANY;                /* Yes, Clear status flag   */
 c100b6c:	e51b3010 	ldr	r3, [fp, #-16]
 c100b70:	e5d3302c 	ldrb	r3, [r3, #44]	; 0x2c
 c100b74:	e3c33037 	bic	r3, r3, #55	; 0x37
 c100b78:	e20320ff 	and	r2, r3, #255	; 0xff
 c100b7c:	e51b3010 	ldr	r3, [fp, #-16]
 c100b80:	e5c3202c 	strb	r2, [r3, #44]	; 0x2c
                        ptcb->OSTCBPendTO  = TRUE;                             /* Indicate PEND timeout    */
 c100b84:	e51b3010 	ldr	r3, [fp, #-16]
 c100b88:	e3a02001 	mov	r2, #1
 c100b8c:	e5c3202d 	strb	r2, [r3, #45]	; 0x2d
 c100b90:	ea000002 	b	c100ba0 <OSTimeTick+0x168>
                    } else {
                        ptcb->OSTCBPendTO  = FALSE;
 c100b94:	e51b3010 	ldr	r3, [fp, #-16]
 c100b98:	e3a02000 	mov	r2, #0
 c100b9c:	e5c3202d 	strb	r2, [r3, #45]	; 0x2d
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
 c100ba0:	e51b3010 	ldr	r3, [fp, #-16]
 c100ba4:	e5d3302c 	ldrb	r3, [r3, #44]	; 0x2c
 c100ba8:	e2033008 	and	r3, r3, #8
 c100bac:	e3530000 	cmp	r3, #0
 c100bb0:	1a000013 	bne	c100c04 <OSTimeTick+0x1cc>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
 c100bb4:	e51b3010 	ldr	r3, [fp, #-16]
 c100bb8:	e5d32032 	ldrb	r2, [r3, #50]	; 0x32
 c100bbc:	e59f3088 	ldr	r3, [pc, #136]	; c100c4c <OSTimeTick+0x214>
 c100bc0:	e5d33000 	ldrb	r3, [r3]
 c100bc4:	e1823003 	orr	r3, r2, r3
 c100bc8:	e20320ff 	and	r2, r3, #255	; 0xff
 c100bcc:	e59f3078 	ldr	r3, [pc, #120]	; c100c4c <OSTimeTick+0x214>
 c100bd0:	e5c32000 	strb	r2, [r3]
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 c100bd4:	e51b3010 	ldr	r3, [fp, #-16]
 c100bd8:	e5d33030 	ldrb	r3, [r3, #48]	; 0x30
 c100bdc:	e51b2010 	ldr	r2, [fp, #-16]
 c100be0:	e5d22030 	ldrb	r2, [r2, #48]	; 0x30
 c100be4:	e59f1064 	ldr	r1, [pc, #100]	; c100c50 <OSTimeTick+0x218>
 c100be8:	e7d11002 	ldrb	r1, [r1, r2]
 c100bec:	e51b2010 	ldr	r2, [fp, #-16]
 c100bf0:	e5d22031 	ldrb	r2, [r2, #49]	; 0x31
 c100bf4:	e1812002 	orr	r2, r1, r2
 c100bf8:	e20210ff 	and	r1, r2, #255	; 0xff
 c100bfc:	e59f204c 	ldr	r2, [pc, #76]	; c100c50 <OSTimeTick+0x218>
 c100c00:	e7c21003 	strb	r1, [r2, r3]
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
 c100c04:	e51b3010 	ldr	r3, [fp, #-16]
 c100c08:	e5933014 	ldr	r3, [r3, #20]
 c100c0c:	e50b3010 	str	r3, [fp, #-16]
            OS_EXIT_CRITICAL();
 c100c10:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 c100c14:	e121f000 	msr	CPSR_c, r0
        if (step == FALSE) {                               /* Return if waiting for step command           */
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
        while (ptcb->OSTCBPrio != OS_IDLE_PRIO) {          /* Go through all TCBs in TCB list              */
 c100c18:	e51b3010 	ldr	r3, [fp, #-16]
 c100c1c:	e5d3302e 	ldrb	r3, [r3, #46]	; 0x2e
 c100c20:	e353003f 	cmp	r3, #63	; 0x3f
 c100c24:	1affffb8 	bne	c100b0c <OSTimeTick+0xd4>
 c100c28:	ea000000 	b	c100c30 <OSTimeTick+0x1f8>
                 step            = TRUE;
                 OSTickStepState = OS_TICK_STEP_DIS;
                 break;
        }
        if (step == FALSE) {                               /* Return if waiting for step command           */
            return;
 c100c2c:	e1a00000 	nop			; (mov r0, r0)
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
            OS_EXIT_CRITICAL();
        }
    }
}
 c100c30:	e24bd00c 	sub	sp, fp, #12
 c100c34:	e89d6800 	ldm	sp, {fp, sp, lr}
 c100c38:	e12fff1e 	bx	lr
 c100c3c:	0c119cb0 	.word	0x0c119cb0
 c100c40:	0c119225 	.word	0x0c119225
 c100c44:	0c119418 	.word	0x0c119418
 c100c48:	0c119310 	.word	0x0c119310
 c100c4c:	0c119c98 	.word	0x0c119c98
 c100c50:	0c119c9c 	.word	0x0c119c9c

0c100c54 <OSVersion>:
* Returns    : the version number of uC/OS-II multiplied by 100.
*********************************************************************************************************
*/

INT16U  OSVersion (void)
{
 c100c54:	e1a0c00d 	mov	ip, sp
 c100c58:	e92dd800 	push	{fp, ip, lr, pc}
 c100c5c:	e24cb004 	sub	fp, ip, #4
    return (OS_VERSION);
 c100c60:	e3a03f45 	mov	r3, #276	; 0x114
}
 c100c64:	e1a00003 	mov	r0, r3
 c100c68:	e24bd00c 	sub	sp, fp, #12
 c100c6c:	e89d6800 	ldm	sp, {fp, sp, lr}
 c100c70:	e12fff1e 	bx	lr

0c100c74 <OS_Dummy>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
void  OS_Dummy (void)
{
 c100c74:	e1a0c00d 	mov	ip, sp
 c100c78:	e92dd800 	push	{fp, ip, lr, pc}
 c100c7c:	e24cb004 	sub	fp, ip, #4
}
 c100c80:	e24bd00c 	sub	sp, fp, #12
 c100c84:	e89d6800 	ldm	sp, {fp, sp, lr}
 c100c88:	e12fff1e 	bx	lr

0c100c8c <OS_EventTaskRdy>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if OS_EVENT_EN
INT8U  OS_EventTaskRdy (OS_EVENT *pevent, void *msg, INT8U msk)
{
 c100c8c:	e1a0c00d 	mov	ip, sp
 c100c90:	e92dd800 	push	{fp, ip, lr, pc}
 c100c94:	e24cb004 	sub	fp, ip, #4
 c100c98:	e24dd020 	sub	sp, sp, #32
 c100c9c:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
 c100ca0:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
 c100ca4:	e1a03002 	mov	r3, r2
 c100ca8:	e54b3025 	strb	r3, [fp, #-37]	; 0xffffffdb
    INT8U   bitx;
    INT8U   bity;
    INT8U   prio;


    y                      = OSUnMapTbl[pevent->OSEventGrp];   /* Find HPT waiting for message         */
 c100cac:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c100cb0:	e5d33001 	ldrb	r3, [r3, #1]
 c100cb4:	e59f21c8 	ldr	r2, [pc, #456]	; c100e84 <OS_EventTaskRdy+0x1f8>
 c100cb8:	e7d23003 	ldrb	r3, [r2, r3]
 c100cbc:	e54b300d 	strb	r3, [fp, #-13]
    bity                   = OSMapTbl[y];
 c100cc0:	e55b300d 	ldrb	r3, [fp, #-13]
 c100cc4:	e59f21bc 	ldr	r2, [pc, #444]	; c100e88 <OS_EventTaskRdy+0x1fc>
 c100cc8:	e7d23003 	ldrb	r3, [r2, r3]
 c100ccc:	e54b300e 	strb	r3, [fp, #-14]
    x                      = OSUnMapTbl[pevent->OSEventTbl[y]];
 c100cd0:	e55b200d 	ldrb	r2, [fp, #-13]
 c100cd4:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
 c100cd8:	e3a03008 	mov	r3, #8
 c100cdc:	e0812002 	add	r2, r1, r2
 c100ce0:	e0823003 	add	r3, r2, r3
 c100ce4:	e5d33000 	ldrb	r3, [r3]
 c100ce8:	e59f2194 	ldr	r2, [pc, #404]	; c100e84 <OS_EventTaskRdy+0x1f8>
 c100cec:	e7d23003 	ldrb	r3, [r2, r3]
 c100cf0:	e54b300f 	strb	r3, [fp, #-15]
    bitx                   = OSMapTbl[x];
 c100cf4:	e55b300f 	ldrb	r3, [fp, #-15]
 c100cf8:	e59f2188 	ldr	r2, [pc, #392]	; c100e88 <OS_EventTaskRdy+0x1fc>
 c100cfc:	e7d23003 	ldrb	r3, [r2, r3]
 c100d00:	e54b3010 	strb	r3, [fp, #-16]
    prio                   = (INT8U)((y << 3) + x);     /* Find priority of task getting the msg       */
 c100d04:	e55b300d 	ldrb	r3, [fp, #-13]
 c100d08:	e1a03183 	lsl	r3, r3, #3
 c100d0c:	e20320ff 	and	r2, r3, #255	; 0xff
 c100d10:	e55b300f 	ldrb	r3, [fp, #-15]
 c100d14:	e0823003 	add	r3, r2, r3
 c100d18:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
    pevent->OSEventTbl[y] &= ~bitx;                     /* Remove this task from the waiting list      */
 c100d1c:	e55b100d 	ldrb	r1, [fp, #-13]
 c100d20:	e55b200d 	ldrb	r2, [fp, #-13]
 c100d24:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
 c100d28:	e3a03008 	mov	r3, #8
 c100d2c:	e0802002 	add	r2, r0, r2
 c100d30:	e0823003 	add	r3, r2, r3
 c100d34:	e5d33000 	ldrb	r3, [r3]
 c100d38:	e20320ff 	and	r2, r3, #255	; 0xff
 c100d3c:	e55b3010 	ldrb	r3, [fp, #-16]
 c100d40:	e1e03003 	mvn	r3, r3
 c100d44:	e20330ff 	and	r3, r3, #255	; 0xff
 c100d48:	e0023003 	and	r3, r2, r3
 c100d4c:	e20330ff 	and	r3, r3, #255	; 0xff
 c100d50:	e20320ff 	and	r2, r3, #255	; 0xff
 c100d54:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
 c100d58:	e3a03008 	mov	r3, #8
 c100d5c:	e0801001 	add	r1, r0, r1
 c100d60:	e0813003 	add	r3, r1, r3
 c100d64:	e5c32000 	strb	r2, [r3]
    if (pevent->OSEventTbl[y] == 0x00) {                
 c100d68:	e55b200d 	ldrb	r2, [fp, #-13]
 c100d6c:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
 c100d70:	e3a03008 	mov	r3, #8
 c100d74:	e0812002 	add	r2, r1, r2
 c100d78:	e0823003 	add	r3, r2, r3
 c100d7c:	e5d33000 	ldrb	r3, [r3]
 c100d80:	e3530000 	cmp	r3, #0
 c100d84:	1a00000a 	bne	c100db4 <OS_EventTaskRdy+0x128>
        pevent->OSEventGrp &= ~bity;                    /* Clr group bit if this was only task pending */
 c100d88:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c100d8c:	e5d33001 	ldrb	r3, [r3, #1]
 c100d90:	e20320ff 	and	r2, r3, #255	; 0xff
 c100d94:	e55b300e 	ldrb	r3, [fp, #-14]
 c100d98:	e1e03003 	mvn	r3, r3
 c100d9c:	e20330ff 	and	r3, r3, #255	; 0xff
 c100da0:	e0023003 	and	r3, r2, r3
 c100da4:	e20330ff 	and	r3, r3, #255	; 0xff
 c100da8:	e20320ff 	and	r2, r3, #255	; 0xff
 c100dac:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c100db0:	e5c32001 	strb	r2, [r3, #1]
    }
    ptcb                 =  OSTCBPrioTbl[prio];         /* Point to this task's OS_TCB                 */
 c100db4:	e55b2011 	ldrb	r2, [fp, #-17]	; 0xffffffef
 c100db8:	e59f30cc 	ldr	r3, [pc, #204]	; c100e8c <OS_EventTaskRdy+0x200>
 c100dbc:	e7933102 	ldr	r3, [r3, r2, lsl #2]
 c100dc0:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    ptcb->OSTCBDly       =  0;                          /* Prevent OSTimeTick() from readying task     */
 c100dc4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c100dc8:	e3a02000 	mov	r2, #0
 c100dcc:	e1c322ba 	strh	r2, [r3, #42]	; 0x2a
    ptcb->OSTCBEventPtr  = (OS_EVENT *)0;               /* Unlink ECB from this task                   */
 c100dd0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c100dd4:	e3a02000 	mov	r2, #0
 c100dd8:	e583201c 	str	r2, [r3, #28]
#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0)) || (OS_MBOX_EN > 0)
    ptcb->OSTCBMsg       = msg;                         /* Send message directly to waiting task       */
 c100ddc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c100de0:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
 c100de4:	e5832020 	str	r2, [r3, #32]
#else
    msg                  = msg;                         /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBPendTO    = FALSE;                       /* Cancel 'any' timeout because of post        */
 c100de8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c100dec:	e3a02000 	mov	r2, #0
 c100df0:	e5c3202d 	strb	r2, [r3, #45]	; 0x2d
    ptcb->OSTCBStat     &= ~msk;                        /* Clear bit associated with event type        */
 c100df4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c100df8:	e5d3302c 	ldrb	r3, [r3, #44]	; 0x2c
 c100dfc:	e20320ff 	and	r2, r3, #255	; 0xff
 c100e00:	e55b3025 	ldrb	r3, [fp, #-37]	; 0xffffffdb
 c100e04:	e1e03003 	mvn	r3, r3
 c100e08:	e20330ff 	and	r3, r3, #255	; 0xff
 c100e0c:	e0023003 	and	r3, r2, r3
 c100e10:	e20330ff 	and	r3, r3, #255	; 0xff
 c100e14:	e20320ff 	and	r2, r3, #255	; 0xff
 c100e18:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c100e1c:	e5c3202c 	strb	r2, [r3, #44]	; 0x2c
    if (ptcb->OSTCBStat == OS_STAT_RDY) {               /* See if task is ready (could be susp'd)      */
 c100e20:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c100e24:	e5d3302c 	ldrb	r3, [r3, #44]	; 0x2c
 c100e28:	e3530000 	cmp	r3, #0
 c100e2c:	1a00000f 	bne	c100e70 <OS_EventTaskRdy+0x1e4>
        OSRdyGrp        |=  bity;                       /* Put task in the ready to run list           */
 c100e30:	e59f3058 	ldr	r3, [pc, #88]	; c100e90 <OS_EventTaskRdy+0x204>
 c100e34:	e5d32000 	ldrb	r2, [r3]
 c100e38:	e55b300e 	ldrb	r3, [fp, #-14]
 c100e3c:	e1823003 	orr	r3, r2, r3
 c100e40:	e20320ff 	and	r2, r3, #255	; 0xff
 c100e44:	e59f3044 	ldr	r3, [pc, #68]	; c100e90 <OS_EventTaskRdy+0x204>
 c100e48:	e5c32000 	strb	r2, [r3]
        OSRdyTbl[y]     |=  bitx;
 c100e4c:	e55b300d 	ldrb	r3, [fp, #-13]
 c100e50:	e55b200d 	ldrb	r2, [fp, #-13]
 c100e54:	e59f1038 	ldr	r1, [pc, #56]	; c100e94 <OS_EventTaskRdy+0x208>
 c100e58:	e7d11002 	ldrb	r1, [r1, r2]
 c100e5c:	e55b2010 	ldrb	r2, [fp, #-16]
 c100e60:	e1812002 	orr	r2, r1, r2
 c100e64:	e20210ff 	and	r1, r2, #255	; 0xff
 c100e68:	e59f2024 	ldr	r2, [pc, #36]	; c100e94 <OS_EventTaskRdy+0x208>
 c100e6c:	e7c21003 	strb	r1, [r2, r3]
    }
    return (prio);
 c100e70:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
}
 c100e74:	e1a00003 	mov	r0, r3
 c100e78:	e24bd00c 	sub	sp, fp, #12
 c100e7c:	e89d6800 	ldm	sp, {fp, sp, lr}
 c100e80:	e12fff1e 	bx	lr
 c100e84:	0c10e3dc 	.word	0x0c10e3dc
 c100e88:	0c10e3d4 	.word	0x0c10e3d4
 c100e8c:	0c11af8c 	.word	0x0c11af8c
 c100e90:	0c119c98 	.word	0x0c119c98
 c100e94:	0c119c9c 	.word	0x0c119c9c

0c100e98 <OS_EventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if OS_EVENT_EN
void  OS_EventTaskWait (OS_EVENT *pevent)
{
 c100e98:	e1a0c00d 	mov	ip, sp
 c100e9c:	e92dd800 	push	{fp, ip, lr, pc}
 c100ea0:	e24cb004 	sub	fp, ip, #4
 c100ea4:	e24dd010 	sub	sp, sp, #16
 c100ea8:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
    INT8U  y;


    OSTCBCur->OSTCBEventPtr = pevent;             /* Store pointer to event control block in TCB       */
 c100eac:	e59f3130 	ldr	r3, [pc, #304]	; c100fe4 <OS_EventTaskWait+0x14c>
 c100eb0:	e5933000 	ldr	r3, [r3]
 c100eb4:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
 c100eb8:	e583201c 	str	r2, [r3, #28]
    y                       = OSTCBCur->OSTCBY;   /* Task no longer ready                              */
 c100ebc:	e59f3120 	ldr	r3, [pc, #288]	; c100fe4 <OS_EventTaskWait+0x14c>
 c100ec0:	e5933000 	ldr	r3, [r3]
 c100ec4:	e5d33030 	ldrb	r3, [r3, #48]	; 0x30
 c100ec8:	e54b300d 	strb	r3, [fp, #-13]
    OSRdyTbl[y]            &= ~OSTCBCur->OSTCBBitX;
 c100ecc:	e55b300d 	ldrb	r3, [fp, #-13]
 c100ed0:	e55b200d 	ldrb	r2, [fp, #-13]
 c100ed4:	e59f110c 	ldr	r1, [pc, #268]	; c100fe8 <OS_EventTaskWait+0x150>
 c100ed8:	e7d12002 	ldrb	r2, [r1, r2]
 c100edc:	e20210ff 	and	r1, r2, #255	; 0xff
 c100ee0:	e59f20fc 	ldr	r2, [pc, #252]	; c100fe4 <OS_EventTaskWait+0x14c>
 c100ee4:	e5922000 	ldr	r2, [r2]
 c100ee8:	e5d22031 	ldrb	r2, [r2, #49]	; 0x31
 c100eec:	e20220ff 	and	r2, r2, #255	; 0xff
 c100ef0:	e1e02002 	mvn	r2, r2
 c100ef4:	e20220ff 	and	r2, r2, #255	; 0xff
 c100ef8:	e0012002 	and	r2, r1, r2
 c100efc:	e20220ff 	and	r2, r2, #255	; 0xff
 c100f00:	e20210ff 	and	r1, r2, #255	; 0xff
 c100f04:	e59f20dc 	ldr	r2, [pc, #220]	; c100fe8 <OS_EventTaskWait+0x150>
 c100f08:	e7c21003 	strb	r1, [r2, r3]
    if (OSRdyTbl[y] == 0x00) {                   
 c100f0c:	e55b300d 	ldrb	r3, [fp, #-13]
 c100f10:	e59f20d0 	ldr	r2, [pc, #208]	; c100fe8 <OS_EventTaskWait+0x150>
 c100f14:	e7d23003 	ldrb	r3, [r2, r3]
 c100f18:	e3530000 	cmp	r3, #0
 c100f1c:	1a00000d 	bne	c100f58 <OS_EventTaskWait+0xc0>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
 c100f20:	e59f30bc 	ldr	r3, [pc, #188]	; c100fe4 <OS_EventTaskWait+0x14c>
 c100f24:	e5933000 	ldr	r3, [r3]
 c100f28:	e5d33032 	ldrb	r3, [r3, #50]	; 0x32
 c100f2c:	e20330ff 	and	r3, r3, #255	; 0xff
 c100f30:	e1e03003 	mvn	r3, r3
 c100f34:	e20320ff 	and	r2, r3, #255	; 0xff
 c100f38:	e59f30ac 	ldr	r3, [pc, #172]	; c100fec <OS_EventTaskWait+0x154>
 c100f3c:	e5d33000 	ldrb	r3, [r3]
 c100f40:	e20330ff 	and	r3, r3, #255	; 0xff
 c100f44:	e0023003 	and	r3, r2, r3
 c100f48:	e20330ff 	and	r3, r3, #255	; 0xff
 c100f4c:	e20320ff 	and	r2, r3, #255	; 0xff
 c100f50:	e59f3094 	ldr	r3, [pc, #148]	; c100fec <OS_EventTaskWait+0x154>
 c100f54:	e5c32000 	strb	r2, [r3]
    }
    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;          /* Put task in waiting list  */
 c100f58:	e59f3084 	ldr	r3, [pc, #132]	; c100fe4 <OS_EventTaskWait+0x14c>
 c100f5c:	e5933000 	ldr	r3, [r3]
 c100f60:	e5d33030 	ldrb	r3, [r3, #48]	; 0x30
 c100f64:	e1a01003 	mov	r1, r3
 c100f68:	e59f3074 	ldr	r3, [pc, #116]	; c100fe4 <OS_EventTaskWait+0x14c>
 c100f6c:	e5933000 	ldr	r3, [r3]
 c100f70:	e5d33030 	ldrb	r3, [r3, #48]	; 0x30
 c100f74:	e1a02003 	mov	r2, r3
 c100f78:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
 c100f7c:	e3a03008 	mov	r3, #8
 c100f80:	e0802002 	add	r2, r0, r2
 c100f84:	e0823003 	add	r3, r2, r3
 c100f88:	e5d32000 	ldrb	r2, [r3]
 c100f8c:	e59f3050 	ldr	r3, [pc, #80]	; c100fe4 <OS_EventTaskWait+0x14c>
 c100f90:	e5933000 	ldr	r3, [r3]
 c100f94:	e5d33031 	ldrb	r3, [r3, #49]	; 0x31
 c100f98:	e1823003 	orr	r3, r2, r3
 c100f9c:	e20320ff 	and	r2, r3, #255	; 0xff
 c100fa0:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
 c100fa4:	e3a03008 	mov	r3, #8
 c100fa8:	e0801001 	add	r1, r0, r1
 c100fac:	e0813003 	add	r3, r1, r3
 c100fb0:	e5c32000 	strb	r2, [r3]
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
 c100fb4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c100fb8:	e5d32001 	ldrb	r2, [r3, #1]
 c100fbc:	e59f3020 	ldr	r3, [pc, #32]	; c100fe4 <OS_EventTaskWait+0x14c>
 c100fc0:	e5933000 	ldr	r3, [r3]
 c100fc4:	e5d33032 	ldrb	r3, [r3, #50]	; 0x32
 c100fc8:	e1823003 	orr	r3, r2, r3
 c100fcc:	e20320ff 	and	r2, r3, #255	; 0xff
 c100fd0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c100fd4:	e5c32001 	strb	r2, [r3, #1]
}
 c100fd8:	e24bd00c 	sub	sp, fp, #12
 c100fdc:	e89d6800 	ldm	sp, {fp, sp, lr}
 c100fe0:	e12fff1e 	bx	lr
 c100fe4:	0c119cac 	.word	0x0c119cac
 c100fe8:	0c119c9c 	.word	0x0c119c9c
 c100fec:	0c119c98 	.word	0x0c119c98

0c100ff0 <OS_EventTO>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if OS_EVENT_EN
void  OS_EventTO (OS_EVENT *pevent)
{
 c100ff0:	e1a0c00d 	mov	ip, sp
 c100ff4:	e92dd800 	push	{fp, ip, lr, pc}
 c100ff8:	e24cb004 	sub	fp, ip, #4
 c100ffc:	e24dd010 	sub	sp, sp, #16
 c101000:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
    INT8U  y;


    y                      = OSTCBCur->OSTCBY;
 c101004:	e59f30f4 	ldr	r3, [pc, #244]	; c101100 <OS_EventTO+0x110>
 c101008:	e5933000 	ldr	r3, [r3]
 c10100c:	e5d33030 	ldrb	r3, [r3, #48]	; 0x30
 c101010:	e54b300d 	strb	r3, [fp, #-13]
    pevent->OSEventTbl[y] &= ~OSTCBCur->OSTCBBitX;     /* Remove task from wait list                   */
 c101014:	e55b100d 	ldrb	r1, [fp, #-13]
 c101018:	e55b200d 	ldrb	r2, [fp, #-13]
 c10101c:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
 c101020:	e3a03008 	mov	r3, #8
 c101024:	e0802002 	add	r2, r0, r2
 c101028:	e0823003 	add	r3, r2, r3
 c10102c:	e5d33000 	ldrb	r3, [r3]
 c101030:	e20320ff 	and	r2, r3, #255	; 0xff
 c101034:	e59f30c4 	ldr	r3, [pc, #196]	; c101100 <OS_EventTO+0x110>
 c101038:	e5933000 	ldr	r3, [r3]
 c10103c:	e5d33031 	ldrb	r3, [r3, #49]	; 0x31
 c101040:	e20330ff 	and	r3, r3, #255	; 0xff
 c101044:	e1e03003 	mvn	r3, r3
 c101048:	e20330ff 	and	r3, r3, #255	; 0xff
 c10104c:	e0023003 	and	r3, r2, r3
 c101050:	e20330ff 	and	r3, r3, #255	; 0xff
 c101054:	e20320ff 	and	r2, r3, #255	; 0xff
 c101058:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
 c10105c:	e3a03008 	mov	r3, #8
 c101060:	e0801001 	add	r1, r0, r1
 c101064:	e0813003 	add	r3, r1, r3
 c101068:	e5c32000 	strb	r2, [r3]
    if (pevent->OSEventTbl[y] == 0x00) {
 c10106c:	e55b200d 	ldrb	r2, [fp, #-13]
 c101070:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
 c101074:	e3a03008 	mov	r3, #8
 c101078:	e0812002 	add	r2, r1, r2
 c10107c:	e0823003 	add	r3, r2, r3
 c101080:	e5d33000 	ldrb	r3, [r3]
 c101084:	e3530000 	cmp	r3, #0
 c101088:	1a00000d 	bne	c1010c4 <OS_EventTO+0xd4>
        pevent->OSEventGrp &= ~OSTCBCur->OSTCBBitY;
 c10108c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c101090:	e5d33001 	ldrb	r3, [r3, #1]
 c101094:	e20320ff 	and	r2, r3, #255	; 0xff
 c101098:	e59f3060 	ldr	r3, [pc, #96]	; c101100 <OS_EventTO+0x110>
 c10109c:	e5933000 	ldr	r3, [r3]
 c1010a0:	e5d33032 	ldrb	r3, [r3, #50]	; 0x32
 c1010a4:	e20330ff 	and	r3, r3, #255	; 0xff
 c1010a8:	e1e03003 	mvn	r3, r3
 c1010ac:	e20330ff 	and	r3, r3, #255	; 0xff
 c1010b0:	e0023003 	and	r3, r2, r3
 c1010b4:	e20330ff 	and	r3, r3, #255	; 0xff
 c1010b8:	e20320ff 	and	r2, r3, #255	; 0xff
 c1010bc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c1010c0:	e5c32001 	strb	r2, [r3, #1]
    }
    OSTCBCur->OSTCBPendTO   = FALSE;                   /* Clear the Pend Timeout flag                  */
 c1010c4:	e59f3034 	ldr	r3, [pc, #52]	; c101100 <OS_EventTO+0x110>
 c1010c8:	e5933000 	ldr	r3, [r3]
 c1010cc:	e3a02000 	mov	r2, #0
 c1010d0:	e5c3202d 	strb	r2, [r3, #45]	; 0x2d
    OSTCBCur->OSTCBStat     = OS_STAT_RDY;             /* Set status to ready                          */
 c1010d4:	e59f3024 	ldr	r3, [pc, #36]	; c101100 <OS_EventTO+0x110>
 c1010d8:	e5933000 	ldr	r3, [r3]
 c1010dc:	e3a02000 	mov	r2, #0
 c1010e0:	e5c3202c 	strb	r2, [r3, #44]	; 0x2c
    OSTCBCur->OSTCBEventPtr = (OS_EVENT *)0;           /* No longer waiting for event                  */
 c1010e4:	e59f3014 	ldr	r3, [pc, #20]	; c101100 <OS_EventTO+0x110>
 c1010e8:	e5933000 	ldr	r3, [r3]
 c1010ec:	e3a02000 	mov	r2, #0
 c1010f0:	e583201c 	str	r2, [r3, #28]
}
 c1010f4:	e24bd00c 	sub	sp, fp, #12
 c1010f8:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1010fc:	e12fff1e 	bx	lr
 c101100:	0c119cac 	.word	0x0c119cac

0c101104 <OS_EventWaitListInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if OS_EVENT_EN
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
 c101104:	e1a0c00d 	mov	ip, sp
 c101108:	e92dd800 	push	{fp, ip, lr, pc}
 c10110c:	e24cb004 	sub	fp, ip, #4
 c101110:	e24dd010 	sub	sp, sp, #16
 c101114:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
    INT8U  *ptbl;


    pevent->OSEventGrp = 0x00;                   /* No task waiting on event                           */
 c101118:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c10111c:	e3a02000 	mov	r2, #0
 c101120:	e5c32001 	strb	r2, [r3, #1]
    ptbl               = &pevent->OSEventTbl[0];
 c101124:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c101128:	e2833008 	add	r3, r3, #8
 c10112c:	e50b3010 	str	r3, [fp, #-16]

#if OS_EVENT_TBL_SIZE > 0
    *ptbl++            = 0x00;
 c101130:	e51b3010 	ldr	r3, [fp, #-16]
 c101134:	e3a02000 	mov	r2, #0
 c101138:	e5c32000 	strb	r2, [r3]
 c10113c:	e51b3010 	ldr	r3, [fp, #-16]
 c101140:	e2833001 	add	r3, r3, #1
 c101144:	e50b3010 	str	r3, [fp, #-16]
#endif

#if OS_EVENT_TBL_SIZE > 1
    *ptbl++            = 0x00;
 c101148:	e51b3010 	ldr	r3, [fp, #-16]
 c10114c:	e3a02000 	mov	r2, #0
 c101150:	e5c32000 	strb	r2, [r3]
 c101154:	e51b3010 	ldr	r3, [fp, #-16]
 c101158:	e2833001 	add	r3, r3, #1
 c10115c:	e50b3010 	str	r3, [fp, #-16]
#endif

#if OS_EVENT_TBL_SIZE > 2
    *ptbl++            = 0x00;
 c101160:	e51b3010 	ldr	r3, [fp, #-16]
 c101164:	e3a02000 	mov	r2, #0
 c101168:	e5c32000 	strb	r2, [r3]
 c10116c:	e51b3010 	ldr	r3, [fp, #-16]
 c101170:	e2833001 	add	r3, r3, #1
 c101174:	e50b3010 	str	r3, [fp, #-16]
#endif

#if OS_EVENT_TBL_SIZE > 3
    *ptbl++            = 0x00;
 c101178:	e51b3010 	ldr	r3, [fp, #-16]
 c10117c:	e3a02000 	mov	r2, #0
 c101180:	e5c32000 	strb	r2, [r3]
 c101184:	e51b3010 	ldr	r3, [fp, #-16]
 c101188:	e2833001 	add	r3, r3, #1
 c10118c:	e50b3010 	str	r3, [fp, #-16]
#endif

#if OS_EVENT_TBL_SIZE > 4
    *ptbl++            = 0x00;
 c101190:	e51b3010 	ldr	r3, [fp, #-16]
 c101194:	e3a02000 	mov	r2, #0
 c101198:	e5c32000 	strb	r2, [r3]
 c10119c:	e51b3010 	ldr	r3, [fp, #-16]
 c1011a0:	e2833001 	add	r3, r3, #1
 c1011a4:	e50b3010 	str	r3, [fp, #-16]
#endif

#if OS_EVENT_TBL_SIZE > 5
    *ptbl++            = 0x00;
 c1011a8:	e51b3010 	ldr	r3, [fp, #-16]
 c1011ac:	e3a02000 	mov	r2, #0
 c1011b0:	e5c32000 	strb	r2, [r3]
 c1011b4:	e51b3010 	ldr	r3, [fp, #-16]
 c1011b8:	e2833001 	add	r3, r3, #1
 c1011bc:	e50b3010 	str	r3, [fp, #-16]
#endif

#if OS_EVENT_TBL_SIZE > 6
    *ptbl++            = 0x00;
 c1011c0:	e51b3010 	ldr	r3, [fp, #-16]
 c1011c4:	e3a02000 	mov	r2, #0
 c1011c8:	e5c32000 	strb	r2, [r3]
 c1011cc:	e51b3010 	ldr	r3, [fp, #-16]
 c1011d0:	e2833001 	add	r3, r3, #1
 c1011d4:	e50b3010 	str	r3, [fp, #-16]
#endif

#if OS_EVENT_TBL_SIZE > 7
    *ptbl              = 0x00;
 c1011d8:	e51b3010 	ldr	r3, [fp, #-16]
 c1011dc:	e3a02000 	mov	r2, #0
 c1011e0:	e5c32000 	strb	r2, [r3]
#endif
}
 c1011e4:	e24bd00c 	sub	sp, fp, #12
 c1011e8:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1011ec:	e12fff1e 	bx	lr

0c1011f0 <OS_InitEventList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitEventList (void)
{
 c1011f0:	e1a0c00d 	mov	ip, sp
 c1011f4:	e92dd800 	push	{fp, ip, lr, pc}
 c1011f8:	e24cb004 	sub	fp, ip, #4
 c1011fc:	e24dd010 	sub	sp, sp, #16
    INT16U     i;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
 c101200:	e59f30cc 	ldr	r3, [pc, #204]	; c1012d4 <OS_InitEventList+0xe4>
 c101204:	e1a00003 	mov	r0, r3
 c101208:	e3a01e1e 	mov	r1, #480	; 0x1e0
 c10120c:	eb000101 	bl	c101618 <OS_MemClr>
    pevent1 = &OSEventTbl[0];
 c101210:	e59f30bc 	ldr	r3, [pc, #188]	; c1012d4 <OS_InitEventList+0xe4>
 c101214:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    pevent2 = &OSEventTbl[1];
 c101218:	e59f30b8 	ldr	r3, [pc, #184]	; c1012d8 <OS_InitEventList+0xe8>
 c10121c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
 c101220:	e3a03000 	mov	r3, #0
 c101224:	e14b30be 	strh	r3, [fp, #-14]
 c101228:	ea000014 	b	c101280 <OS_InitEventList+0x90>
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
 c10122c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c101230:	e3a02000 	mov	r2, #0
 c101234:	e5c32000 	strb	r2, [r3]
        pevent1->OSEventPtr     = pevent2;
 c101238:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c10123c:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
 c101240:	e5832004 	str	r2, [r3, #4]
#if OS_EVENT_NAME_SIZE > 1
        pevent1->OSEventName[0] = '?';                      /* Unknown name                            */
 c101244:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c101248:	e3a0203f 	mov	r2, #63	; 0x3f
 c10124c:	e5c32010 	strb	r2, [r3, #16]
        pevent1->OSEventName[1] = OS_ASCII_NUL;
 c101250:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c101254:	e3a02000 	mov	r2, #0
 c101258:	e5c32011 	strb	r2, [r3, #17]
#endif
        pevent1++;
 c10125c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c101260:	e2833030 	add	r3, r3, #48	; 0x30
 c101264:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
        pevent2++;
 c101268:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c10126c:	e2833030 	add	r3, r3, #48	; 0x30
 c101270:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    pevent1 = &OSEventTbl[0];
    pevent2 = &OSEventTbl[1];
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
 c101274:	e15b30be 	ldrh	r3, [fp, #-14]
 c101278:	e2833001 	add	r3, r3, #1
 c10127c:	e14b30be 	strh	r3, [fp, #-14]
 c101280:	e15b30be 	ldrh	r3, [fp, #-14]
 c101284:	e3530008 	cmp	r3, #8
 c101288:	9affffe7 	bls	c10122c <OS_InitEventList+0x3c>
        pevent1->OSEventName[1] = OS_ASCII_NUL;
#endif
        pevent1++;
        pevent2++;
    }
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
 c10128c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c101290:	e3a02000 	mov	r2, #0
 c101294:	e5c32000 	strb	r2, [r3]
    pevent1->OSEventPtr             = (OS_EVENT *)0;
 c101298:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c10129c:	e3a02000 	mov	r2, #0
 c1012a0:	e5832004 	str	r2, [r3, #4]
#if OS_EVENT_NAME_SIZE > 1
    pevent1->OSEventName[0]         = '?';                  
 c1012a4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c1012a8:	e3a0203f 	mov	r2, #63	; 0x3f
 c1012ac:	e5c32010 	strb	r2, [r3, #16]
    pevent1->OSEventName[1]         = OS_ASCII_NUL;
 c1012b0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c1012b4:	e3a02000 	mov	r2, #0
 c1012b8:	e5c32011 	strb	r2, [r3, #17]
#endif
    OSEventFreeList                 = &OSEventTbl[0];
 c1012bc:	e59f3018 	ldr	r3, [pc, #24]	; c1012dc <OS_InitEventList+0xec>
 c1012c0:	e59f200c 	ldr	r2, [pc, #12]	; c1012d4 <OS_InitEventList+0xe4>
 c1012c4:	e5832000 	str	r2, [r3]
    OSEventFreeList->OSEventName[0] = '?';                  /* Unknown name                            */
    OSEventFreeList->OSEventName[1] = OS_ASCII_NUL;
#endif
#endif
#endif
}
 c1012c8:	e24bd00c 	sub	sp, fp, #12
 c1012cc:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1012d0:	e12fff1e 	bx	lr
 c1012d4:	0c11a4b4 	.word	0x0c11a4b4
 c1012d8:	0c11a4e4 	.word	0x0c11a4e4
 c1012dc:	0c119ca4 	.word	0x0c119ca4

0c1012e0 <OS_InitMisc>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitMisc (void)
{
 c1012e0:	e1a0c00d 	mov	ip, sp
 c1012e4:	e92dd800 	push	{fp, ip, lr, pc}
 c1012e8:	e24cb004 	sub	fp, ip, #4
#if OS_TIME_GET_SET_EN > 0   
    OSTime        = 0L;                                    /* Clear the 32-bit system clock            */
 c1012ec:	e59f307c 	ldr	r3, [pc, #124]	; c101370 <OS_InitMisc+0x90>
 c1012f0:	e3a02000 	mov	r2, #0
 c1012f4:	e5832000 	str	r2, [r3]
#endif

    OSIntNesting  = 0;                                     /* Clear the interrupt nesting counter      */
 c1012f8:	e59f3074 	ldr	r3, [pc, #116]	; c101374 <OS_InitMisc+0x94>
 c1012fc:	e3a02000 	mov	r2, #0
 c101300:	e5c32000 	strb	r2, [r3]
    OSLockNesting = 0;                                     /* Clear the scheduling lock counter        */
 c101304:	e59f306c 	ldr	r3, [pc, #108]	; c101378 <OS_InitMisc+0x98>
 c101308:	e3a02000 	mov	r2, #0
 c10130c:	e5c32000 	strb	r2, [r3]

    OSTaskCtr     = 0;                                     /* Clear the number of tasks                */
 c101310:	e59f3064 	ldr	r3, [pc, #100]	; c10137c <OS_InitMisc+0x9c>
 c101314:	e3a02000 	mov	r2, #0
 c101318:	e5c32000 	strb	r2, [r3]

    OSRunning     = FALSE;                                 /* Indicate that multitasking not started   */
 c10131c:	e59f305c 	ldr	r3, [pc, #92]	; c101380 <OS_InitMisc+0xa0>
 c101320:	e3a02000 	mov	r2, #0
 c101324:	e5c32000 	strb	r2, [r3]
    
    OSCtxSwCtr    = 0;                                     /* Clear the context switch counter         */
 c101328:	e59f3054 	ldr	r3, [pc, #84]	; c101384 <OS_InitMisc+0xa4>
 c10132c:	e3a02000 	mov	r2, #0
 c101330:	e5832000 	str	r2, [r3]
    OSIdleCtr     = 0L;                                    /* Clear the 32-bit idle counter            */
 c101334:	e59f304c 	ldr	r3, [pc, #76]	; c101388 <OS_InitMisc+0xa8>
 c101338:	e3a02000 	mov	r2, #0
 c10133c:	e5832000 	str	r2, [r3]

#if OS_TASK_STAT_EN > 0
    OSIdleCtrRun  = 0L;
 c101340:	e59f3044 	ldr	r3, [pc, #68]	; c10138c <OS_InitMisc+0xac>
 c101344:	e3a02000 	mov	r2, #0
 c101348:	e5832000 	str	r2, [r3]
    OSIdleCtrMax  = 0L;
 c10134c:	e59f303c 	ldr	r3, [pc, #60]	; c101390 <OS_InitMisc+0xb0>
 c101350:	e3a02000 	mov	r2, #0
 c101354:	e5832000 	str	r2, [r3]
    OSStatRdy     = FALSE;                                 /* Statistic task is not ready              */
 c101358:	e59f3034 	ldr	r3, [pc, #52]	; c101394 <OS_InitMisc+0xb4>
 c10135c:	e3a02000 	mov	r2, #0
 c101360:	e5c32000 	strb	r2, [r3]
#endif
}
 c101364:	e24bd00c 	sub	sp, fp, #12
 c101368:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10136c:	e12fff1e 	bx	lr
 c101370:	0c119cb0 	.word	0x0c119cb0
 c101374:	0c119ca8 	.word	0x0c119ca8
 c101378:	0c119224 	.word	0x0c119224
 c10137c:	0c119c29 	.word	0x0c119c29
 c101380:	0c119225 	.word	0x0c119225
 c101384:	0c119c1c 	.word	0x0c119c1c
 c101388:	0c119228 	.word	0x0c119228
 c10138c:	0c11b08c 	.word	0x0c11b08c
 c101390:	0c119c20 	.word	0x0c119c20
 c101394:	0c11af88 	.word	0x0c11af88

0c101398 <OS_InitRdyList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitRdyList (void)
{
 c101398:	e1a0c00d 	mov	ip, sp
 c10139c:	e92dd800 	push	{fp, ip, lr, pc}
 c1013a0:	e24cb004 	sub	fp, ip, #4
 c1013a4:	e24dd008 	sub	sp, sp, #8
    INT8U    i;
    INT8U   *prdytbl;


    OSRdyGrp      = 0x00;                                  /* Clear the ready list                     */
 c1013a8:	e59f3084 	ldr	r3, [pc, #132]	; c101434 <OS_InitRdyList+0x9c>
 c1013ac:	e3a02000 	mov	r2, #0
 c1013b0:	e5c32000 	strb	r2, [r3]
    prdytbl       = &OSRdyTbl[0];
 c1013b4:	e59f307c 	ldr	r3, [pc, #124]	; c101438 <OS_InitRdyList+0xa0>
 c1013b8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
 c1013bc:	e3a03000 	mov	r3, #0
 c1013c0:	e54b300d 	strb	r3, [fp, #-13]
 c1013c4:	ea000008 	b	c1013ec <OS_InitRdyList+0x54>
        *prdytbl++ = 0x00;
 c1013c8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c1013cc:	e3a02000 	mov	r2, #0
 c1013d0:	e5c32000 	strb	r2, [r3]
 c1013d4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c1013d8:	e2833001 	add	r3, r3, #1
 c1013dc:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    INT8U   *prdytbl;


    OSRdyGrp      = 0x00;                                  /* Clear the ready list                     */
    prdytbl       = &OSRdyTbl[0];
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
 c1013e0:	e55b300d 	ldrb	r3, [fp, #-13]
 c1013e4:	e2833001 	add	r3, r3, #1
 c1013e8:	e54b300d 	strb	r3, [fp, #-13]
 c1013ec:	e55b300d 	ldrb	r3, [fp, #-13]
 c1013f0:	e3530007 	cmp	r3, #7
 c1013f4:	9afffff3 	bls	c1013c8 <OS_InitRdyList+0x30>
        *prdytbl++ = 0x00;
    }

    OSPrioCur     = 0;
 c1013f8:	e59f303c 	ldr	r3, [pc, #60]	; c10143c <OS_InitRdyList+0xa4>
 c1013fc:	e3a02000 	mov	r2, #0
 c101400:	e5c32000 	strb	r2, [r3]
    OSPrioHighRdy = 0;
 c101404:	e59f3034 	ldr	r3, [pc, #52]	; c101440 <OS_InitRdyList+0xa8>
 c101408:	e3a02000 	mov	r2, #0
 c10140c:	e5c32000 	strb	r2, [r3]

    OSTCBHighRdy  = (OS_TCB *)0;                                 
 c101410:	e59f302c 	ldr	r3, [pc, #44]	; c101444 <OS_InitRdyList+0xac>
 c101414:	e3a02000 	mov	r2, #0
 c101418:	e5832000 	str	r2, [r3]
    OSTCBCur      = (OS_TCB *)0;
 c10141c:	e59f3024 	ldr	r3, [pc, #36]	; c101448 <OS_InitRdyList+0xb0>
 c101420:	e3a02000 	mov	r2, #0
 c101424:	e5832000 	str	r2, [r3]
}
 c101428:	e24bd00c 	sub	sp, fp, #12
 c10142c:	e89d6800 	ldm	sp, {fp, sp, lr}
 c101430:	e12fff1e 	bx	lr
 c101434:	0c119c98 	.word	0x0c119c98
 c101438:	0c119c9c 	.word	0x0c119c9c
 c10143c:	0c11930c 	.word	0x0c11930c
 c101440:	0c11922c 	.word	0x0c11922c
 c101444:	0c119c90 	.word	0x0c119c90
 c101448:	0c119cac 	.word	0x0c119cac

0c10144c <OS_InitTaskIdle>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTaskIdle (void)
{
 c10144c:	e1a0c00d 	mov	ip, sp
 c101450:	e92dd800 	push	{fp, ip, lr, pc}
 c101454:	e24cb004 	sub	fp, ip, #4
 c101458:	e24dd018 	sub	sp, sp, #24
#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskIdle,
 c10145c:	e59f3040 	ldr	r3, [pc, #64]	; c1014a4 <OS_InitTaskIdle+0x58>
 c101460:	e58d3000 	str	r3, [sp]
 c101464:	e59f303c 	ldr	r3, [pc, #60]	; c1014a8 <OS_InitTaskIdle+0x5c>
 c101468:	e58d3004 	str	r3, [sp, #4]
 c10146c:	e3a03c02 	mov	r3, #512	; 0x200
 c101470:	e58d3008 	str	r3, [sp, #8]
 c101474:	e3a03000 	mov	r3, #0
 c101478:	e58d300c 	str	r3, [sp, #12]
 c10147c:	e3a03003 	mov	r3, #3
 c101480:	e58d3010 	str	r3, [sp, #16]
 c101484:	e59f0020 	ldr	r0, [pc, #32]	; c1014ac <OS_InitTaskIdle+0x60>
 c101488:	e3a01000 	mov	r1, #0
 c10148c:	e59f201c 	ldr	r2, [pc, #28]	; c1014b0 <OS_InitTaskIdle+0x64>
 c101490:	e3a0303f 	mov	r3, #63	; 0x3f
 c101494:	eb001805 	bl	c1074b0 <OSTaskCreateExt>
                       (void *)0,
                       &OSTaskIdleStk[0],
                       OS_IDLE_PRIO);
    #endif
#endif
}
 c101498:	e24bd00c 	sub	sp, fp, #12
 c10149c:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1014a0:	e12fff1e 	bx	lr
 c1014a4:	0000ffff 	.word	0x0000ffff
 c1014a8:	0c119cb4 	.word	0x0c119cb4
 c1014ac:	0c1018e8 	.word	0x0c1018e8
 c1014b0:	0c11a4b0 	.word	0x0c11a4b0

0c1014b4 <OS_InitTaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
static  void  OS_InitTaskStat (void)
{
 c1014b4:	e1a0c00d 	mov	ip, sp
 c1014b8:	e92dd800 	push	{fp, ip, lr, pc}
 c1014bc:	e24cb004 	sub	fp, ip, #4
 c1014c0:	e24dd018 	sub	sp, sp, #24
#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskStat,
 c1014c4:	e59f3040 	ldr	r3, [pc, #64]	; c10150c <OS_InitTaskStat+0x58>
 c1014c8:	e58d3000 	str	r3, [sp]
 c1014cc:	e59f303c 	ldr	r3, [pc, #60]	; c101510 <OS_InitTaskStat+0x5c>
 c1014d0:	e58d3004 	str	r3, [sp, #4]
 c1014d4:	e3a03c02 	mov	r3, #512	; 0x200
 c1014d8:	e58d3008 	str	r3, [sp, #8]
 c1014dc:	e3a03000 	mov	r3, #0
 c1014e0:	e58d300c 	str	r3, [sp, #12]
 c1014e4:	e3a03003 	mov	r3, #3
 c1014e8:	e58d3010 	str	r3, [sp, #16]
 c1014ec:	e59f0020 	ldr	r0, [pc, #32]	; c101514 <OS_InitTaskStat+0x60>
 c1014f0:	e3a01000 	mov	r1, #0
 c1014f4:	e59f201c 	ldr	r2, [pc, #28]	; c101518 <OS_InitTaskStat+0x64>
 c1014f8:	e3a0303e 	mov	r3, #62	; 0x3e
 c1014fc:	eb0017eb 	bl	c1074b0 <OSTaskCreateExt>
                       (void *)0,                                      /* No args passed to OS_TaskStat()*/
                       &OSTaskStatStk[0],                              /* Set Top-Of-Stack               */
                       OS_STAT_PRIO);                                  /* One higher than the idle task  */
    #endif
#endif
}
 c101500:	e24bd00c 	sub	sp, fp, #12
 c101504:	e89d6800 	ldm	sp, {fp, sp, lr}
 c101508:	e12fff1e 	bx	lr
 c10150c:	0000fffe 	.word	0x0000fffe
 c101510:	0c11941c 	.word	0x0c11941c
 c101514:	0c101934 	.word	0x0c101934
 c101518:	0c119c18 	.word	0x0c119c18

0c10151c <OS_InitTCBList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTCBList (void)
{
 c10151c:	e1a0c00d 	mov	ip, sp
 c101520:	e92dd800 	push	{fp, ip, lr, pc}
 c101524:	e24cb004 	sub	fp, ip, #4
 c101528:	e24dd010 	sub	sp, sp, #16
    INT8U    i;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
 c10152c:	e59f30d0 	ldr	r3, [pc, #208]	; c101604 <OS_InitTCBList+0xe8>
 c101530:	e1a00003 	mov	r0, r3
 c101534:	e3a01e8f 	mov	r1, #2288	; 0x8f0
 c101538:	eb000036 	bl	c101618 <OS_MemClr>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
 c10153c:	e59f30c4 	ldr	r3, [pc, #196]	; c101608 <OS_InitTCBList+0xec>
 c101540:	e1a00003 	mov	r0, r3
 c101544:	e3a01c01 	mov	r1, #256	; 0x100
 c101548:	eb000032 	bl	c101618 <OS_MemClr>
    ptcb1 = &OSTCBTbl[0];
 c10154c:	e59f30b0 	ldr	r3, [pc, #176]	; c101604 <OS_InitTCBList+0xe8>
 c101550:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    ptcb2 = &OSTCBTbl[1];
 c101554:	e59f30b0 	ldr	r3, [pc, #176]	; c10160c <OS_InitTCBList+0xf0>
 c101558:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
 c10155c:	e3a03000 	mov	r3, #0
 c101560:	e54b300d 	strb	r3, [fp, #-13]
 c101564:	ea000011 	b	c1015b0 <OS_InitTCBList+0x94>
        ptcb1->OSTCBNext = ptcb2;
 c101568:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c10156c:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
 c101570:	e5832014 	str	r2, [r3, #20]
#if OS_TASK_NAME_SIZE > 1
        ptcb1->OSTCBTaskName[0] = '?';                           /* Unknown name                       */
 c101574:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c101578:	e3a0203f 	mov	r2, #63	; 0x3f
 c10157c:	e5c32048 	strb	r2, [r3, #72]	; 0x48
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
 c101580:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c101584:	e3a02000 	mov	r2, #0
 c101588:	e5c32049 	strb	r2, [r3, #73]	; 0x49
#endif
        ptcb1++;
 c10158c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c101590:	e2833068 	add	r3, r3, #104	; 0x68
 c101594:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
        ptcb2++;
 c101598:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c10159c:	e2833068 	add	r3, r3, #104	; 0x68
 c1015a0:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8

    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    ptcb1 = &OSTCBTbl[0];
    ptcb2 = &OSTCBTbl[1];
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
 c1015a4:	e55b300d 	ldrb	r3, [fp, #-13]
 c1015a8:	e2833001 	add	r3, r3, #1
 c1015ac:	e54b300d 	strb	r3, [fp, #-13]
 c1015b0:	e55b300d 	ldrb	r3, [fp, #-13]
 c1015b4:	e3530014 	cmp	r3, #20
 c1015b8:	9affffea 	bls	c101568 <OS_InitTCBList+0x4c>
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
#endif
        ptcb1++;
        ptcb2++;
    }
    ptcb1->OSTCBNext = (OS_TCB *)0;                              /* Last OS_TCB                        */
 c1015bc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c1015c0:	e3a02000 	mov	r2, #0
 c1015c4:	e5832014 	str	r2, [r3, #20]
#if OS_TASK_NAME_SIZE > 1
    ptcb1->OSTCBTaskName[0] = '?';                               /* Unknown name                       */
 c1015c8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c1015cc:	e3a0203f 	mov	r2, #63	; 0x3f
 c1015d0:	e5c32048 	strb	r2, [r3, #72]	; 0x48
    ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
 c1015d4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c1015d8:	e3a02000 	mov	r2, #0
 c1015dc:	e5c32049 	strb	r2, [r3, #73]	; 0x49
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
 c1015e0:	e59f3028 	ldr	r3, [pc, #40]	; c101610 <OS_InitTCBList+0xf4>
 c1015e4:	e3a02000 	mov	r2, #0
 c1015e8:	e5832000 	str	r2, [r3]
    OSTCBFreeList           = &OSTCBTbl[0];
 c1015ec:	e59f3020 	ldr	r3, [pc, #32]	; c101614 <OS_InitTCBList+0xf8>
 c1015f0:	e59f200c 	ldr	r2, [pc, #12]	; c101604 <OS_InitTCBList+0xe8>
 c1015f4:	e5832000 	str	r2, [r3]
}
 c1015f8:	e24bd00c 	sub	sp, fp, #12
 c1015fc:	e89d6800 	ldm	sp, {fp, sp, lr}
 c101600:	e12fff1e 	bx	lr
 c101604:	0c11a694 	.word	0x0c11a694
 c101608:	0c11af8c 	.word	0x0c11af8c
 c10160c:	0c11a6fc 	.word	0x0c11a6fc
 c101610:	0c119310 	.word	0x0c119310
 c101614:	0c119c24 	.word	0x0c119c24

0c101618 <OS_MemClr>:
*                 of the alignment of the destination.
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
 c101618:	e1a0c00d 	mov	ip, sp
 c10161c:	e92dd800 	push	{fp, ip, lr, pc}
 c101620:	e24cb004 	sub	fp, ip, #4
 c101624:	e24dd008 	sub	sp, sp, #8
 c101628:	e50b0010 	str	r0, [fp, #-16]
 c10162c:	e1a03001 	mov	r3, r1
 c101630:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
    while (size > 0) {
 c101634:	ea000008 	b	c10165c <OS_MemClr+0x44>
        *pdest++ = (INT8U)0;
 c101638:	e51b3010 	ldr	r3, [fp, #-16]
 c10163c:	e3a02000 	mov	r2, #0
 c101640:	e5c32000 	strb	r2, [r3]
 c101644:	e51b3010 	ldr	r3, [fp, #-16]
 c101648:	e2833001 	add	r3, r3, #1
 c10164c:	e50b3010 	str	r3, [fp, #-16]
        size--;
 c101650:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
 c101654:	e2433001 	sub	r3, r3, #1
 c101658:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    while (size > 0) {
 c10165c:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
 c101660:	e3530000 	cmp	r3, #0
 c101664:	1afffff3 	bne	c101638 <OS_MemClr+0x20>
        *pdest++ = (INT8U)0;
        size--;
    }
}
 c101668:	e24bd00c 	sub	sp, fp, #12
 c10166c:	e89d6800 	ldm	sp, {fp, sp, lr}
 c101670:	e12fff1e 	bx	lr

0c101674 <OS_MemCopy>:
*                 of the alignment of the source and destination.
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
 c101674:	e1a0c00d 	mov	ip, sp
 c101678:	e92dd800 	push	{fp, ip, lr, pc}
 c10167c:	e24cb004 	sub	fp, ip, #4
 c101680:	e24dd010 	sub	sp, sp, #16
 c101684:	e50b0010 	str	r0, [fp, #-16]
 c101688:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
 c10168c:	e1a03002 	mov	r3, r2
 c101690:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
    while (size > 0) {
 c101694:	ea00000c 	b	c1016cc <OS_MemCopy+0x58>
        *pdest++ = *psrc++;
 c101698:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c10169c:	e5d32000 	ldrb	r2, [r3]
 c1016a0:	e51b3010 	ldr	r3, [fp, #-16]
 c1016a4:	e5c32000 	strb	r2, [r3]
 c1016a8:	e51b3010 	ldr	r3, [fp, #-16]
 c1016ac:	e2833001 	add	r3, r3, #1
 c1016b0:	e50b3010 	str	r3, [fp, #-16]
 c1016b4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c1016b8:	e2833001 	add	r3, r3, #1
 c1016bc:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
        size--;
 c1016c0:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
 c1016c4:	e2433001 	sub	r3, r3, #1
 c1016c8:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    while (size > 0) {
 c1016cc:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
 c1016d0:	e3530000 	cmp	r3, #0
 c1016d4:	1affffef 	bne	c101698 <OS_MemCopy+0x24>
        *pdest++ = *psrc++;
        size--;
    }
}
 c1016d8:	e24bd00c 	sub	sp, fp, #12
 c1016dc:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1016e0:	e12fff1e 	bx	lr

0c1016e4 <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
 c1016e4:	e1a0c00d 	mov	ip, sp
 c1016e8:	e92dd800 	push	{fp, ip, lr, pc}
 c1016ec:	e24cb004 	sub	fp, ip, #4
 c1016f0:	e24dd008 	sub	sp, sp, #8



    cpu_sr = 0;                                        /* Prevent compiler warning                     */
#endif    
    OS_ENTER_CRITICAL();
 c1016f4:	e10f0000 	mrs	r0, CPSR
 c1016f8:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
 c1016fc:	e38000c0 	orr	r0, r0, #192	; 0xc0
 c101700:	e121f000 	msr	CPSR_c, r0
    if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...       */
 c101704:	e59f30d0 	ldr	r3, [pc, #208]	; c1017dc <OS_Sched+0xf8>
 c101708:	e5d33000 	ldrb	r3, [r3]
 c10170c:	e3530000 	cmp	r3, #0
 c101710:	1a00002c 	bne	c1017c8 <OS_Sched+0xe4>
        if (OSLockNesting == 0) {                      /* ... scheduler is not locked                  */
 c101714:	e59f30c4 	ldr	r3, [pc, #196]	; c1017e0 <OS_Sched+0xfc>
 c101718:	e5d33000 	ldrb	r3, [r3]
 c10171c:	e3530000 	cmp	r3, #0
 c101720:	1a000028 	bne	c1017c8 <OS_Sched+0xe4>
            y             = OSUnMapTbl[OSRdyGrp];      /* Get pointer to HPT ready to run              */
 c101724:	e59f30b8 	ldr	r3, [pc, #184]	; c1017e4 <OS_Sched+0x100>
 c101728:	e5d33000 	ldrb	r3, [r3]
 c10172c:	e59f20b4 	ldr	r2, [pc, #180]	; c1017e8 <OS_Sched+0x104>
 c101730:	e7d23003 	ldrb	r3, [r2, r3]
 c101734:	e54b300d 	strb	r3, [fp, #-13]
            OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
 c101738:	e55b300d 	ldrb	r3, [fp, #-13]
 c10173c:	e1a03183 	lsl	r3, r3, #3
 c101740:	e20320ff 	and	r2, r3, #255	; 0xff
 c101744:	e55b300d 	ldrb	r3, [fp, #-13]
 c101748:	e59f109c 	ldr	r1, [pc, #156]	; c1017ec <OS_Sched+0x108>
 c10174c:	e7d13003 	ldrb	r3, [r1, r3]
 c101750:	e59f1090 	ldr	r1, [pc, #144]	; c1017e8 <OS_Sched+0x104>
 c101754:	e7d13003 	ldrb	r3, [r1, r3]
 c101758:	e0823003 	add	r3, r2, r3
 c10175c:	e20320ff 	and	r2, r3, #255	; 0xff
 c101760:	e59f3088 	ldr	r3, [pc, #136]	; c1017f0 <OS_Sched+0x10c>
 c101764:	e5c32000 	strb	r2, [r3]
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
 c101768:	e59f3080 	ldr	r3, [pc, #128]	; c1017f0 <OS_Sched+0x10c>
 c10176c:	e5d32000 	ldrb	r2, [r3]
 c101770:	e59f307c 	ldr	r3, [pc, #124]	; c1017f4 <OS_Sched+0x110>
 c101774:	e5d33000 	ldrb	r3, [r3]
 c101778:	e1520003 	cmp	r2, r3
 c10177c:	0a000011 	beq	c1017c8 <OS_Sched+0xe4>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
 c101780:	e59f3068 	ldr	r3, [pc, #104]	; c1017f0 <OS_Sched+0x10c>
 c101784:	e5d33000 	ldrb	r3, [r3]
 c101788:	e1a02003 	mov	r2, r3
 c10178c:	e59f3064 	ldr	r3, [pc, #100]	; c1017f8 <OS_Sched+0x114>
 c101790:	e7932102 	ldr	r2, [r3, r2, lsl #2]
 c101794:	e59f3060 	ldr	r3, [pc, #96]	; c1017fc <OS_Sched+0x118>
 c101798:	e5832000 	str	r2, [r3]
#if OS_TASK_PROFILE_EN > 0
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
 c10179c:	e59f3058 	ldr	r3, [pc, #88]	; c1017fc <OS_Sched+0x118>
 c1017a0:	e5933000 	ldr	r3, [r3]
 c1017a4:	e5932034 	ldr	r2, [r3, #52]	; 0x34
 c1017a8:	e2822001 	add	r2, r2, #1
 c1017ac:	e5832034 	str	r2, [r3, #52]	; 0x34
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
 c1017b0:	e59f3048 	ldr	r3, [pc, #72]	; c101800 <OS_Sched+0x11c>
 c1017b4:	e5933000 	ldr	r3, [r3]
 c1017b8:	e2832001 	add	r2, r3, #1
 c1017bc:	e59f303c 	ldr	r3, [pc, #60]	; c101800 <OS_Sched+0x11c>
 c1017c0:	e5832000 	str	r2, [r3]
                OS_TASK_SW();                          /* Perform a context switch                     */
 c1017c4:	ebfffa17 	bl	c100028 <OSCtxSw>
            }
        }
    }
    OS_EXIT_CRITICAL();
 c1017c8:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 c1017cc:	e121f000 	msr	CPSR_c, r0
}
 c1017d0:	e24bd00c 	sub	sp, fp, #12
 c1017d4:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1017d8:	e12fff1e 	bx	lr
 c1017dc:	0c119ca8 	.word	0x0c119ca8
 c1017e0:	0c119224 	.word	0x0c119224
 c1017e4:	0c119c98 	.word	0x0c119c98
 c1017e8:	0c10e3dc 	.word	0x0c10e3dc
 c1017ec:	0c119c9c 	.word	0x0c119c9c
 c1017f0:	0c11922c 	.word	0x0c11922c
 c1017f4:	0c11930c 	.word	0x0c11930c
 c1017f8:	0c11af8c 	.word	0x0c11af8c
 c1017fc:	0c119c90 	.word	0x0c119c90
 c101800:	0c119c1c 	.word	0x0c119c1c

0c101804 <OS_StrCopy>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1)
INT8U  OS_StrCopy (char *pdest, char *psrc)
{
 c101804:	e1a0c00d 	mov	ip, sp
 c101808:	e92dd800 	push	{fp, ip, lr, pc}
 c10180c:	e24cb004 	sub	fp, ip, #4
 c101810:	e24dd010 	sub	sp, sp, #16
 c101814:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
 c101818:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
    INT8U  len;


    len = 0;
 c10181c:	e3a03000 	mov	r3, #0
 c101820:	e54b300d 	strb	r3, [fp, #-13]
    while (*psrc != OS_ASCII_NUL) {
 c101824:	ea00000c 	b	c10185c <OS_StrCopy+0x58>
        *pdest++ = *psrc++;
 c101828:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 c10182c:	e5d32000 	ldrb	r2, [r3]
 c101830:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c101834:	e5c32000 	strb	r2, [r3]
 c101838:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c10183c:	e2833001 	add	r3, r3, #1
 c101840:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
 c101844:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 c101848:	e2833001 	add	r3, r3, #1
 c10184c:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
        len++;
 c101850:	e55b300d 	ldrb	r3, [fp, #-13]
 c101854:	e2833001 	add	r3, r3, #1
 c101858:	e54b300d 	strb	r3, [fp, #-13]
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
 c10185c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 c101860:	e5d33000 	ldrb	r3, [r3]
 c101864:	e3530000 	cmp	r3, #0
 c101868:	1affffee 	bne	c101828 <OS_StrCopy+0x24>
        *pdest++ = *psrc++;
        len++;
    }
    *pdest = OS_ASCII_NUL;
 c10186c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c101870:	e3a02000 	mov	r2, #0
 c101874:	e5c32000 	strb	r2, [r3]
    return (len);
 c101878:	e55b300d 	ldrb	r3, [fp, #-13]
}
 c10187c:	e1a00003 	mov	r0, r3
 c101880:	e24bd00c 	sub	sp, fp, #12
 c101884:	e89d6800 	ldm	sp, {fp, sp, lr}
 c101888:	e12fff1e 	bx	lr

0c10188c <OS_StrLen>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1)
INT8U  OS_StrLen (char *psrc)
{
 c10188c:	e1a0c00d 	mov	ip, sp
 c101890:	e92dd800 	push	{fp, ip, lr, pc}
 c101894:	e24cb004 	sub	fp, ip, #4
 c101898:	e24dd010 	sub	sp, sp, #16
 c10189c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
    INT8U  len;


    len = 0;
 c1018a0:	e3a03000 	mov	r3, #0
 c1018a4:	e54b300d 	strb	r3, [fp, #-13]
    while (*psrc != OS_ASCII_NUL) {
 c1018a8:	ea000005 	b	c1018c4 <OS_StrLen+0x38>
        psrc++;
 c1018ac:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c1018b0:	e2833001 	add	r3, r3, #1
 c1018b4:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
        len++;
 c1018b8:	e55b300d 	ldrb	r3, [fp, #-13]
 c1018bc:	e2833001 	add	r3, r3, #1
 c1018c0:	e54b300d 	strb	r3, [fp, #-13]
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
 c1018c4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c1018c8:	e5d33000 	ldrb	r3, [r3]
 c1018cc:	e3530000 	cmp	r3, #0
 c1018d0:	1afffff5 	bne	c1018ac <OS_StrLen+0x20>
        psrc++;
        len++;
    }
    return (len);
 c1018d4:	e55b300d 	ldrb	r3, [fp, #-13]
}
 c1018d8:	e1a00003 	mov	r0, r3
 c1018dc:	e24bd00c 	sub	sp, fp, #12
 c1018e0:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1018e4:	e12fff1e 	bx	lr

0c1018e8 <OS_TaskIdle>:
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *parg)
{
 c1018e8:	e1a0c00d 	mov	ip, sp
 c1018ec:	e92dd800 	push	{fp, ip, lr, pc}
 c1018f0:	e24cb004 	sub	fp, ip, #4
 c1018f4:	e24dd008 	sub	sp, sp, #8
 c1018f8:	e50b0010 	str	r0, [fp, #-16]

    cpu_sr = 0;                                  /* Prevent compiler warning                           */
#endif    
    parg   = parg;                               /* Prevent compiler warning for not using 'parg'      */
    for (;;) {
        OS_ENTER_CRITICAL();
 c1018fc:	e10f0000 	mrs	r0, CPSR
 c101900:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
 c101904:	e38000c0 	orr	r0, r0, #192	; 0xc0
 c101908:	e121f000 	msr	CPSR_c, r0
        OSIdleCtr++;
 c10190c:	e59f301c 	ldr	r3, [pc, #28]	; c101930 <OS_TaskIdle+0x48>
 c101910:	e5933000 	ldr	r3, [r3]
 c101914:	e2832001 	add	r2, r3, #1
 c101918:	e59f3010 	ldr	r3, [pc, #16]	; c101930 <OS_TaskIdle+0x48>
 c10191c:	e5832000 	str	r2, [r3]
        OS_EXIT_CRITICAL();
 c101920:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 c101924:	e121f000 	msr	CPSR_c, r0
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
 c101928:	ebfffa14 	bl	c100180 <OSTaskIdleHook>
    }
 c10192c:	eafffff2 	b	c1018fc <OS_TaskIdle+0x14>
 c101930:	0c119228 	.word	0x0c119228

0c101934 <OS_TaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OS_TaskStat (void *parg)
{
 c101934:	e1a0c00d 	mov	ip, sp
 c101938:	e92dd800 	push	{fp, ip, lr, pc}
 c10193c:	e24cb004 	sub	fp, ip, #4
 c101940:	e24dd018 	sub	sp, sp, #24
 c101944:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0


    cpu_sr = 0;                                  /* Prevent compiler warning                           */
#endif    
    parg   = parg;                               /* Prevent compiler warning for not using 'parg'      */
    while (OSStatRdy == FALSE) {
 c101948:	ea000001 	b	c101954 <OS_TaskStat+0x20>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
 c10194c:	e3a00014 	mov	r0, #20
 c101950:	eb001aa9 	bl	c1083fc <OSTimeDly>


    cpu_sr = 0;                                  /* Prevent compiler warning                           */
#endif    
    parg   = parg;                               /* Prevent compiler warning for not using 'parg'      */
    while (OSStatRdy == FALSE) {
 c101954:	e59f30f0 	ldr	r3, [pc, #240]	; c101a4c <OS_TaskStat+0x118>
 c101958:	e5d33000 	ldrb	r3, [r3]
 c10195c:	e3530000 	cmp	r3, #0
 c101960:	0afffff9 	beq	c10194c <OS_TaskStat+0x18>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    }
    max = OSIdleCtrMax / 100L;
 c101964:	e59f30e4 	ldr	r3, [pc, #228]	; c101a50 <OS_TaskStat+0x11c>
 c101968:	e5932000 	ldr	r2, [r3]
 c10196c:	e59f30e0 	ldr	r3, [pc, #224]	; c101a54 <OS_TaskStat+0x120>
 c101970:	e0831392 	umull	r1, r3, r2, r3
 c101974:	e1a032a3 	lsr	r3, r3, #5
 c101978:	e50b3010 	str	r3, [fp, #-16]
    for (;;) {
        OS_ENTER_CRITICAL();
 c10197c:	e10f0000 	mrs	r0, CPSR
 c101980:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
 c101984:	e38000c0 	orr	r0, r0, #192	; 0xc0
 c101988:	e121f000 	msr	CPSR_c, r0
        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
 c10198c:	e59f30c4 	ldr	r3, [pc, #196]	; c101a58 <OS_TaskStat+0x124>
 c101990:	e5932000 	ldr	r2, [r3]
 c101994:	e59f30c0 	ldr	r3, [pc, #192]	; c101a5c <OS_TaskStat+0x128>
 c101998:	e5832000 	str	r2, [r3]
        run          = OSIdleCtr;
 c10199c:	e59f30b4 	ldr	r3, [pc, #180]	; c101a58 <OS_TaskStat+0x124>
 c1019a0:	e5933000 	ldr	r3, [r3]
 c1019a4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
        OSIdleCtr    = 0L;                       /* Reset the idle counter for the next second         */
 c1019a8:	e59f30a8 	ldr	r3, [pc, #168]	; c101a58 <OS_TaskStat+0x124>
 c1019ac:	e3a02000 	mov	r2, #0
 c1019b0:	e5832000 	str	r2, [r3]
        OS_EXIT_CRITICAL();
 c1019b4:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 c1019b8:	e121f000 	msr	CPSR_c, r0
        if (max > 0L) {
 c1019bc:	e51b3010 	ldr	r3, [fp, #-16]
 c1019c0:	e3530000 	cmp	r3, #0
 c1019c4:	0a000012 	beq	c101a14 <OS_TaskStat+0xe0>
            usage = (INT8S)(100L - run / max);
 c1019c8:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
 c1019cc:	e51b1010 	ldr	r1, [fp, #-16]
 c1019d0:	eb002fc1 	bl	c10d8dc <__aeabi_uidiv>
 c1019d4:	e1a03000 	mov	r3, r0
 c1019d8:	e20330ff 	and	r3, r3, #255	; 0xff
 c1019dc:	e2633064 	rsb	r3, r3, #100	; 0x64
 c1019e0:	e20330ff 	and	r3, r3, #255	; 0xff
 c1019e4:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
            if (usage >= 0) {                    /* Make sure we don't have a negative percentage      */
 c1019e8:	e15b31d5 	ldrsb	r3, [fp, #-21]	; 0xffffffeb
 c1019ec:	e3530000 	cmp	r3, #0
 c1019f0:	ba000003 	blt	c101a04 <OS_TaskStat+0xd0>
                OSCPUUsage = usage;
 c1019f4:	e59f3064 	ldr	r3, [pc, #100]	; c101a60 <OS_TaskStat+0x12c>
 c1019f8:	e55b2015 	ldrb	r2, [fp, #-21]	; 0xffffffeb
 c1019fc:	e5c32000 	strb	r2, [r3]
 c101a00:	ea00000c 	b	c101a38 <OS_TaskStat+0x104>
            } else {
                OSCPUUsage = 0;
 c101a04:	e59f3054 	ldr	r3, [pc, #84]	; c101a60 <OS_TaskStat+0x12c>
 c101a08:	e3a02000 	mov	r2, #0
 c101a0c:	e5c32000 	strb	r2, [r3]
 c101a10:	ea000008 	b	c101a38 <OS_TaskStat+0x104>
            }
        } else {
            OSCPUUsage = 0;
 c101a14:	e59f3044 	ldr	r3, [pc, #68]	; c101a60 <OS_TaskStat+0x12c>
 c101a18:	e3a02000 	mov	r2, #0
 c101a1c:	e5c32000 	strb	r2, [r3]
            max        = OSIdleCtrMax / 100L;
 c101a20:	e59f3028 	ldr	r3, [pc, #40]	; c101a50 <OS_TaskStat+0x11c>
 c101a24:	e5932000 	ldr	r2, [r3]
 c101a28:	e59f3024 	ldr	r3, [pc, #36]	; c101a54 <OS_TaskStat+0x120>
 c101a2c:	e0831392 	umull	r1, r3, r2, r3
 c101a30:	e1a032a3 	lsr	r3, r3, #5
 c101a34:	e50b3010 	str	r3, [fp, #-16]
        }
        OSTaskStatHook();                        /* Invoke user definable hook                         */
 c101a38:	ebfff9d7 	bl	c10019c <OSTaskStatHook>
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
        OS_TaskStatStkChk();                     /* Check the stacks for each task                     */
 c101a3c:	eb000008 	bl	c101a64 <OS_TaskStatStkChk>
#endif
        OSTimeDly(OS_TICKS_PER_SEC / 10);        /* Accumulate OSIdleCtr for the next 1/10 second      */
 c101a40:	e3a0000a 	mov	r0, #10
 c101a44:	eb001a6c 	bl	c1083fc <OSTimeDly>
    }
 c101a48:	eaffffcb 	b	c10197c <OS_TaskStat+0x48>
 c101a4c:	0c11af88 	.word	0x0c11af88
 c101a50:	0c119c20 	.word	0x0c119c20
 c101a54:	51eb851f 	.word	0x51eb851f
 c101a58:	0c119228 	.word	0x0c119228
 c101a5c:	0c11b08c 	.word	0x0c11b08c
 c101a60:	0c119c28 	.word	0x0c119c28

0c101a64 <OS_TaskStatStkChk>:
*********************************************************************************************************
*/

#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStatStkChk (void)
{
 c101a64:	e1a0c00d 	mov	ip, sp
 c101a68:	e92dd800 	push	{fp, ip, lr, pc}
 c101a6c:	e24cb004 	sub	fp, ip, #4
 c101a70:	e24dd010 	sub	sp, sp, #16
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_IDLE_PRIO; prio++) {
 c101a74:	e3a03000 	mov	r3, #0
 c101a78:	e54b300d 	strb	r3, [fp, #-13]
 c101a7c:	ea000021 	b	c101b08 <OS_TaskStatStkChk+0xa4>
        err = OSTaskStkChk(prio, &stk_data);
 c101a80:	e55b200d 	ldrb	r2, [fp, #-13]
 c101a84:	e24b301c 	sub	r3, fp, #28
 c101a88:	e1a00002 	mov	r0, r2
 c101a8c:	e1a01003 	mov	r1, r3
 c101a90:	eb001921 	bl	c107f1c <OSTaskStkChk>
 c101a94:	e1a03000 	mov	r3, r0
 c101a98:	e54b300e 	strb	r3, [fp, #-14]
        if (err == OS_NO_ERR) {
 c101a9c:	e55b300e 	ldrb	r3, [fp, #-14]
 c101aa0:	e3530000 	cmp	r3, #0
 c101aa4:	1a000014 	bne	c101afc <OS_TaskStatStkChk+0x98>
            ptcb = OSTCBPrioTbl[prio];
 c101aa8:	e55b200d 	ldrb	r2, [fp, #-13]
 c101aac:	e59f306c 	ldr	r3, [pc, #108]	; c101b20 <OS_TaskStatStkChk+0xbc>
 c101ab0:	e7933102 	ldr	r3, [r3, r2, lsl #2]
 c101ab4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
            if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
 c101ab8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c101abc:	e3530000 	cmp	r3, #0
 c101ac0:	0a00000d 	beq	c101afc <OS_TaskStatStkChk+0x98>
                if (ptcb != (OS_TCB *)1) {                           /* ... still valid.               */
 c101ac4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c101ac8:	e3530001 	cmp	r3, #1
 c101acc:	0a00000a 	beq	c101afc <OS_TaskStatStkChk+0x98>
#if OS_TASK_PROFILE_EN > 0
                    #if OS_STK_GROWTH == 1
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
 c101ad0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c101ad4:	e5932008 	ldr	r2, [r3, #8]
 c101ad8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c101adc:	e593300c 	ldr	r3, [r3, #12]
 c101ae0:	e1a03103 	lsl	r3, r3, #2
 c101ae4:	e0822003 	add	r2, r2, r3
 c101ae8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c101aec:	e5832040 	str	r2, [r3, #64]	; 0x40
                    #else
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
                    #endif
                    ptcb->OSTCBStkUsed = (INT32U)stk_data.OSUsed;    /* Store the number of bytes used */
 c101af0:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
 c101af4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c101af8:	e5832044 	str	r2, [r3, #68]	; 0x44
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_IDLE_PRIO; prio++) {
 c101afc:	e55b300d 	ldrb	r3, [fp, #-13]
 c101b00:	e2833001 	add	r3, r3, #1
 c101b04:	e54b300d 	strb	r3, [fp, #-13]
 c101b08:	e55b300d 	ldrb	r3, [fp, #-13]
 c101b0c:	e353003f 	cmp	r3, #63	; 0x3f
 c101b10:	9affffda 	bls	c101a80 <OS_TaskStatStkChk+0x1c>
#endif
                }
            }
        }
    }
}
 c101b14:	e24bd00c 	sub	sp, fp, #12
 c101b18:	e89d6800 	ldm	sp, {fp, sp, lr}
 c101b1c:	e12fff1e 	bx	lr
 c101b20:	0c11af8c 	.word	0x0c11af8c

0c101b24 <OS_TCBInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

INT8U  OS_TCBInit (INT8U prio, OS_STK *ptos, OS_STK *pbos, INT16U id, INT32U stk_size, void *pext, INT16U opt)
{
 c101b24:	e1a0c00d 	mov	ip, sp
 c101b28:	e92dd800 	push	{fp, ip, lr, pc}
 c101b2c:	e24cb004 	sub	fp, ip, #4
 c101b30:	e24dd018 	sub	sp, sp, #24
 c101b34:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
 c101b38:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
 c101b3c:	e1a02000 	mov	r2, r0
 c101b40:	e54b2015 	strb	r2, [fp, #-21]	; 0xffffffeb
 c101b44:	e14b32b2 	strh	r3, [fp, #-34]	; 0xffffffde



    cpu_sr = 0;                                            /* Prevent compiler warning                 */
#endif    
    OS_ENTER_CRITICAL();
 c101b48:	e10f0000 	mrs	r0, CPSR
 c101b4c:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
 c101b50:	e38000c0 	orr	r0, r0, #192	; 0xc0
 c101b54:	e121f000 	msr	CPSR_c, r0
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
 c101b58:	e59f3288 	ldr	r3, [pc, #648]	; c101de8 <OS_TCBInit+0x2c4>
 c101b5c:	e5933000 	ldr	r3, [r3]
 c101b60:	e50b3010 	str	r3, [fp, #-16]
    if (ptcb != (OS_TCB *)0) {
 c101b64:	e51b3010 	ldr	r3, [fp, #-16]
 c101b68:	e3530000 	cmp	r3, #0
 c101b6c:	0a000096 	beq	c101dcc <OS_TCBInit+0x2a8>
        OSTCBFreeList        = ptcb->OSTCBNext;            /* Update pointer to free TCB list          */
 c101b70:	e51b3010 	ldr	r3, [fp, #-16]
 c101b74:	e5932014 	ldr	r2, [r3, #20]
 c101b78:	e59f3268 	ldr	r3, [pc, #616]	; c101de8 <OS_TCBInit+0x2c4>
 c101b7c:	e5832000 	str	r2, [r3]
        OS_EXIT_CRITICAL();
 c101b80:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 c101b84:	e121f000 	msr	CPSR_c, r0
        ptcb->OSTCBStkPtr    = ptos;                       /* Load Stack pointer in TCB                */
 c101b88:	e51b3010 	ldr	r3, [fp, #-16]
 c101b8c:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
 c101b90:	e5832000 	str	r2, [r3]
        ptcb->OSTCBPrio      = prio;                       /* Load task priority into TCB              */
 c101b94:	e51b3010 	ldr	r3, [fp, #-16]
 c101b98:	e55b2015 	ldrb	r2, [fp, #-21]	; 0xffffffeb
 c101b9c:	e5c3202e 	strb	r2, [r3, #46]	; 0x2e
        ptcb->OSTCBStat      = OS_STAT_RDY;                /* Task is ready to run                     */
 c101ba0:	e51b3010 	ldr	r3, [fp, #-16]
 c101ba4:	e3a02000 	mov	r2, #0
 c101ba8:	e5c3202c 	strb	r2, [r3, #44]	; 0x2c
        ptcb->OSTCBPendTO    = FALSE;                      /* Clear the Pend timeout flag              */
 c101bac:	e51b3010 	ldr	r3, [fp, #-16]
 c101bb0:	e3a02000 	mov	r2, #0
 c101bb4:	e5c3202d 	strb	r2, [r3, #45]	; 0x2d
        ptcb->OSTCBDly       = 0;                          /* Task is not delayed                      */
 c101bb8:	e51b3010 	ldr	r3, [fp, #-16]
 c101bbc:	e3a02000 	mov	r2, #0
 c101bc0:	e1c322ba 	strh	r2, [r3, #42]	; 0x2a

#if OS_TASK_CREATE_EXT_EN > 0
        ptcb->OSTCBExtPtr    = pext;                       /* Store pointer to TCB extension           */
 c101bc4:	e51b3010 	ldr	r3, [fp, #-16]
 c101bc8:	e59b2008 	ldr	r2, [fp, #8]
 c101bcc:	e5832004 	str	r2, [r3, #4]
        ptcb->OSTCBStkSize   = stk_size;                   /* Store stack size                         */
 c101bd0:	e51b3010 	ldr	r3, [fp, #-16]
 c101bd4:	e59b2004 	ldr	r2, [fp, #4]
 c101bd8:	e583200c 	str	r2, [r3, #12]
        ptcb->OSTCBStkBottom = pbos;                       /* Store pointer to bottom of stack         */
 c101bdc:	e51b3010 	ldr	r3, [fp, #-16]
 c101be0:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
 c101be4:	e5832008 	str	r2, [r3, #8]
        ptcb->OSTCBOpt       = opt;                        /* Store task options                       */
 c101be8:	e51b3010 	ldr	r3, [fp, #-16]
 c101bec:	e1db20bc 	ldrh	r2, [fp, #12]
 c101bf0:	e1c321b0 	strh	r2, [r3, #16]
        ptcb->OSTCBId        = id;                         /* Store task ID                            */
 c101bf4:	e51b3010 	ldr	r3, [fp, #-16]
 c101bf8:	e15b22b2 	ldrh	r2, [fp, #-34]	; 0xffffffde
 c101bfc:	e1c321b2 	strh	r2, [r3, #18]
        opt                  = opt;
        id                   = id;
#endif

#if OS_TASK_DEL_EN > 0
        ptcb->OSTCBDelReq    = OS_NO_ERR;
 c101c00:	e51b3010 	ldr	r3, [fp, #-16]
 c101c04:	e3a02000 	mov	r2, #0
 c101c08:	e5c32033 	strb	r2, [r3, #51]	; 0x33
#endif

        ptcb->OSTCBY         = (INT8U)(prio >> 3);         /* Pre-compute X, Y, BitX and BitY          */
 c101c0c:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
 c101c10:	e1a031a3 	lsr	r3, r3, #3
 c101c14:	e20320ff 	and	r2, r3, #255	; 0xff
 c101c18:	e51b3010 	ldr	r3, [fp, #-16]
 c101c1c:	e5c32030 	strb	r2, [r3, #48]	; 0x30
        ptcb->OSTCBBitY      = OSMapTbl[ptcb->OSTCBY];
 c101c20:	e51b3010 	ldr	r3, [fp, #-16]
 c101c24:	e5d33030 	ldrb	r3, [r3, #48]	; 0x30
 c101c28:	e59f21bc 	ldr	r2, [pc, #444]	; c101dec <OS_TCBInit+0x2c8>
 c101c2c:	e7d22003 	ldrb	r2, [r2, r3]
 c101c30:	e51b3010 	ldr	r3, [fp, #-16]
 c101c34:	e5c32032 	strb	r2, [r3, #50]	; 0x32
        ptcb->OSTCBX         = (INT8U)(prio & 0x07);
 c101c38:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
 c101c3c:	e2033007 	and	r3, r3, #7
 c101c40:	e20320ff 	and	r2, r3, #255	; 0xff
 c101c44:	e51b3010 	ldr	r3, [fp, #-16]
 c101c48:	e5c3202f 	strb	r2, [r3, #47]	; 0x2f
        ptcb->OSTCBBitX      = OSMapTbl[ptcb->OSTCBX];
 c101c4c:	e51b3010 	ldr	r3, [fp, #-16]
 c101c50:	e5d3302f 	ldrb	r3, [r3, #47]	; 0x2f
 c101c54:	e59f2190 	ldr	r2, [pc, #400]	; c101dec <OS_TCBInit+0x2c8>
 c101c58:	e7d22003 	ldrb	r2, [r2, r3]
 c101c5c:	e51b3010 	ldr	r3, [fp, #-16]
 c101c60:	e5c32031 	strb	r2, [r3, #49]	; 0x31

#if OS_EVENT_EN
        ptcb->OSTCBEventPtr  = (OS_EVENT *)0;              /* Task is not pending on an event          */
 c101c64:	e51b3010 	ldr	r3, [fp, #-16]
 c101c68:	e3a02000 	mov	r2, #0
 c101c6c:	e583201c 	str	r2, [r3, #28]
#endif

#if (OS_VERSION >= 251) && (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0) && (OS_TASK_DEL_EN > 0)
        ptcb->OSTCBFlagNode  = (OS_FLAG_NODE *)0;          /* Task is not pending on an event flag     */
 c101c70:	e51b3010 	ldr	r3, [fp, #-16]
 c101c74:	e3a02000 	mov	r2, #0
 c101c78:	e5832024 	str	r2, [r3, #36]	; 0x24
#endif

#if (OS_MBOX_EN > 0) || ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
        ptcb->OSTCBMsg       = (void *)0;                  /* No message received                      */
 c101c7c:	e51b3010 	ldr	r3, [fp, #-16]
 c101c80:	e3a02000 	mov	r2, #0
 c101c84:	e5832020 	str	r2, [r3, #32]
#endif

#if OS_TASK_PROFILE_EN > 0
        ptcb->OSTCBCtxSwCtr    = 0L;                       /* Initialize profiling variables           */
 c101c88:	e51b3010 	ldr	r3, [fp, #-16]
 c101c8c:	e3a02000 	mov	r2, #0
 c101c90:	e5832034 	str	r2, [r3, #52]	; 0x34
        ptcb->OSTCBCyclesStart = 0L;
 c101c94:	e51b3010 	ldr	r3, [fp, #-16]
 c101c98:	e3a02000 	mov	r2, #0
 c101c9c:	e583203c 	str	r2, [r3, #60]	; 0x3c
        ptcb->OSTCBCyclesTot   = 0L;
 c101ca0:	e51b3010 	ldr	r3, [fp, #-16]
 c101ca4:	e3a02000 	mov	r2, #0
 c101ca8:	e5832038 	str	r2, [r3, #56]	; 0x38
        ptcb->OSTCBStkBase     = (OS_STK *)0;
 c101cac:	e51b3010 	ldr	r3, [fp, #-16]
 c101cb0:	e3a02000 	mov	r2, #0
 c101cb4:	e5832040 	str	r2, [r3, #64]	; 0x40
        ptcb->OSTCBStkUsed     = 0L;
 c101cb8:	e51b3010 	ldr	r3, [fp, #-16]
 c101cbc:	e3a02000 	mov	r2, #0
 c101cc0:	e5832044 	str	r2, [r3, #68]	; 0x44
#endif

#if OS_TASK_NAME_SIZE > 1
        ptcb->OSTCBTaskName[0] = '?';                      /* Unknown name at task creation            */
 c101cc4:	e51b3010 	ldr	r3, [fp, #-16]
 c101cc8:	e3a0203f 	mov	r2, #63	; 0x3f
 c101ccc:	e5c32048 	strb	r2, [r3, #72]	; 0x48
        ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
 c101cd0:	e51b3010 	ldr	r3, [fp, #-16]
 c101cd4:	e3a02000 	mov	r2, #0
 c101cd8:	e5c32049 	strb	r2, [r3, #73]	; 0x49
#endif

#if OS_VERSION >= 204
        OSTCBInitHook(ptcb);
 c101cdc:	e51b0010 	ldr	r0, [fp, #-16]
 c101ce0:	ebfff9a3 	bl	c100374 <OSTCBInitHook>
#endif

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
 c101ce4:	e51b0010 	ldr	r0, [fp, #-16]
 c101ce8:	ebfff914 	bl	c100140 <OSTaskCreateHook>
        
        OS_ENTER_CRITICAL();
 c101cec:	e10f0000 	mrs	r0, CPSR
 c101cf0:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
 c101cf4:	e38000c0 	orr	r0, r0, #192	; 0xc0
 c101cf8:	e121f000 	msr	CPSR_c, r0
        OSTCBPrioTbl[prio] = ptcb;
 c101cfc:	e55b2015 	ldrb	r2, [fp, #-21]	; 0xffffffeb
 c101d00:	e59f30e8 	ldr	r3, [pc, #232]	; c101df0 <OS_TCBInit+0x2cc>
 c101d04:	e51b1010 	ldr	r1, [fp, #-16]
 c101d08:	e7831102 	str	r1, [r3, r2, lsl #2]
        ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                      */
 c101d0c:	e59f30e0 	ldr	r3, [pc, #224]	; c101df4 <OS_TCBInit+0x2d0>
 c101d10:	e5932000 	ldr	r2, [r3]
 c101d14:	e51b3010 	ldr	r3, [fp, #-16]
 c101d18:	e5832014 	str	r2, [r3, #20]
        ptcb->OSTCBPrev    = (OS_TCB *)0;
 c101d1c:	e51b3010 	ldr	r3, [fp, #-16]
 c101d20:	e3a02000 	mov	r2, #0
 c101d24:	e5832018 	str	r2, [r3, #24]
        if (OSTCBList != (OS_TCB *)0) {
 c101d28:	e59f30c4 	ldr	r3, [pc, #196]	; c101df4 <OS_TCBInit+0x2d0>
 c101d2c:	e5933000 	ldr	r3, [r3]
 c101d30:	e3530000 	cmp	r3, #0
 c101d34:	0a000003 	beq	c101d48 <OS_TCBInit+0x224>
            OSTCBList->OSTCBPrev = ptcb;
 c101d38:	e59f30b4 	ldr	r3, [pc, #180]	; c101df4 <OS_TCBInit+0x2d0>
 c101d3c:	e5933000 	ldr	r3, [r3]
 c101d40:	e51b2010 	ldr	r2, [fp, #-16]
 c101d44:	e5832018 	str	r2, [r3, #24]
        }
        OSTCBList               = ptcb;
 c101d48:	e59f30a4 	ldr	r3, [pc, #164]	; c101df4 <OS_TCBInit+0x2d0>
 c101d4c:	e51b2010 	ldr	r2, [fp, #-16]
 c101d50:	e5832000 	str	r2, [r3]
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
 c101d54:	e51b3010 	ldr	r3, [fp, #-16]
 c101d58:	e5d32032 	ldrb	r2, [r3, #50]	; 0x32
 c101d5c:	e59f3094 	ldr	r3, [pc, #148]	; c101df8 <OS_TCBInit+0x2d4>
 c101d60:	e5d33000 	ldrb	r3, [r3]
 c101d64:	e1823003 	orr	r3, r2, r3
 c101d68:	e20320ff 	and	r2, r3, #255	; 0xff
 c101d6c:	e59f3084 	ldr	r3, [pc, #132]	; c101df8 <OS_TCBInit+0x2d4>
 c101d70:	e5c32000 	strb	r2, [r3]
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 c101d74:	e51b3010 	ldr	r3, [fp, #-16]
 c101d78:	e5d33030 	ldrb	r3, [r3, #48]	; 0x30
 c101d7c:	e51b2010 	ldr	r2, [fp, #-16]
 c101d80:	e5d22030 	ldrb	r2, [r2, #48]	; 0x30
 c101d84:	e59f1070 	ldr	r1, [pc, #112]	; c101dfc <OS_TCBInit+0x2d8>
 c101d88:	e7d11002 	ldrb	r1, [r1, r2]
 c101d8c:	e51b2010 	ldr	r2, [fp, #-16]
 c101d90:	e5d22031 	ldrb	r2, [r2, #49]	; 0x31
 c101d94:	e1812002 	orr	r2, r1, r2
 c101d98:	e20210ff 	and	r1, r2, #255	; 0xff
 c101d9c:	e59f2058 	ldr	r2, [pc, #88]	; c101dfc <OS_TCBInit+0x2d8>
 c101da0:	e7c21003 	strb	r1, [r2, r3]
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
 c101da4:	e59f3054 	ldr	r3, [pc, #84]	; c101e00 <OS_TCBInit+0x2dc>
 c101da8:	e5d33000 	ldrb	r3, [r3]
 c101dac:	e2833001 	add	r3, r3, #1
 c101db0:	e20320ff 	and	r2, r3, #255	; 0xff
 c101db4:	e59f3044 	ldr	r3, [pc, #68]	; c101e00 <OS_TCBInit+0x2dc>
 c101db8:	e5c32000 	strb	r2, [r3]
        OS_EXIT_CRITICAL();
 c101dbc:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 c101dc0:	e121f000 	msr	CPSR_c, r0
        return (OS_NO_ERR);
 c101dc4:	e3a03000 	mov	r3, #0
 c101dc8:	ea000002 	b	c101dd8 <OS_TCBInit+0x2b4>
    }
    OS_EXIT_CRITICAL();
 c101dcc:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 c101dd0:	e121f000 	msr	CPSR_c, r0
    return (OS_NO_MORE_TCB);
 c101dd4:	e3a03046 	mov	r3, #70	; 0x46
}
 c101dd8:	e1a00003 	mov	r0, r3
 c101ddc:	e24bd00c 	sub	sp, fp, #12
 c101de0:	e89d6800 	ldm	sp, {fp, sp, lr}
 c101de4:	e12fff1e 	bx	lr
 c101de8:	0c119c24 	.word	0x0c119c24
 c101dec:	0c10e3d4 	.word	0x0c10e3d4
 c101df0:	0c11af8c 	.word	0x0c11af8c
 c101df4:	0c119310 	.word	0x0c119310
 c101df8:	0c119c98 	.word	0x0c119c98
 c101dfc:	0c119c9c 	.word	0x0c119c9c
 c101e00:	0c119c29 	.word	0x0c119c29

0c101e04 <OSDebugInit>:
*********************************************************************************************************
*/

#if OS_VERSION >= 270 && OS_DEBUG_EN > 0
void  OSDebugInit (void)
{
 c101e04:	e1a0c00d 	mov	ip, sp
 c101e08:	e92dd800 	push	{fp, ip, lr, pc}
 c101e0c:	e24cb004 	sub	fp, ip, #4
 c101e10:	e24dd008 	sub	sp, sp, #8
    void  *ptemp;

    
    ptemp = (void *)&OSDebugEn;
 c101e14:	e59f316c 	ldr	r3, [pc, #364]	; c101f88 <OSDebugInit+0x184>
 c101e18:	e50b3010 	str	r3, [fp, #-16]

    ptemp = (void *)&OSEndiannessTest;
 c101e1c:	e59f3168 	ldr	r3, [pc, #360]	; c101f8c <OSDebugInit+0x188>
 c101e20:	e50b3010 	str	r3, [fp, #-16]

    ptemp = (void *)&OSEventMax;
 c101e24:	e59f3164 	ldr	r3, [pc, #356]	; c101f90 <OSDebugInit+0x18c>
 c101e28:	e50b3010 	str	r3, [fp, #-16]
    ptemp = (void *)&OSEventNameSize;
 c101e2c:	e59f3160 	ldr	r3, [pc, #352]	; c101f94 <OSDebugInit+0x190>
 c101e30:	e50b3010 	str	r3, [fp, #-16]
    ptemp = (void *)&OSEventEn;
 c101e34:	e59f315c 	ldr	r3, [pc, #348]	; c101f98 <OSDebugInit+0x194>
 c101e38:	e50b3010 	str	r3, [fp, #-16]
    ptemp = (void *)&OSEventSize;
 c101e3c:	e59f3158 	ldr	r3, [pc, #344]	; c101f9c <OSDebugInit+0x198>
 c101e40:	e50b3010 	str	r3, [fp, #-16]
    ptemp = (void *)&OSEventTblSize;
 c101e44:	e59f3154 	ldr	r3, [pc, #340]	; c101fa0 <OSDebugInit+0x19c>
 c101e48:	e50b3010 	str	r3, [fp, #-16]

    ptemp = (void *)&OSFlagEn;
 c101e4c:	e59f3150 	ldr	r3, [pc, #336]	; c101fa4 <OSDebugInit+0x1a0>
 c101e50:	e50b3010 	str	r3, [fp, #-16]
    ptemp = (void *)&OSFlagGrpSize;
 c101e54:	e59f314c 	ldr	r3, [pc, #332]	; c101fa8 <OSDebugInit+0x1a4>
 c101e58:	e50b3010 	str	r3, [fp, #-16]
    ptemp = (void *)&OSFlagNodeSize;
 c101e5c:	e59f3148 	ldr	r3, [pc, #328]	; c101fac <OSDebugInit+0x1a8>
 c101e60:	e50b3010 	str	r3, [fp, #-16]
    ptemp = (void *)&OSFlagWidth;
 c101e64:	e59f3144 	ldr	r3, [pc, #324]	; c101fb0 <OSDebugInit+0x1ac>
 c101e68:	e50b3010 	str	r3, [fp, #-16]
    ptemp = (void *)&OSFlagMax;
 c101e6c:	e59f3140 	ldr	r3, [pc, #320]	; c101fb4 <OSDebugInit+0x1b0>
 c101e70:	e50b3010 	str	r3, [fp, #-16]
    ptemp = (void *)&OSFlagNameSize;
 c101e74:	e59f313c 	ldr	r3, [pc, #316]	; c101fb8 <OSDebugInit+0x1b4>
 c101e78:	e50b3010 	str	r3, [fp, #-16]

    ptemp = (void *)&OSLowestPrio;
 c101e7c:	e59f3138 	ldr	r3, [pc, #312]	; c101fbc <OSDebugInit+0x1b8>
 c101e80:	e50b3010 	str	r3, [fp, #-16]

    ptemp = (void *)&OSMboxEn;
 c101e84:	e59f3134 	ldr	r3, [pc, #308]	; c101fc0 <OSDebugInit+0x1bc>
 c101e88:	e50b3010 	str	r3, [fp, #-16]

    ptemp = (void *)&OSMemEn;
 c101e8c:	e59f3130 	ldr	r3, [pc, #304]	; c101fc4 <OSDebugInit+0x1c0>
 c101e90:	e50b3010 	str	r3, [fp, #-16]
    ptemp = (void *)&OSMemMax;
 c101e94:	e59f312c 	ldr	r3, [pc, #300]	; c101fc8 <OSDebugInit+0x1c4>
 c101e98:	e50b3010 	str	r3, [fp, #-16]
    ptemp = (void *)&OSMemNameSize;
 c101e9c:	e59f3128 	ldr	r3, [pc, #296]	; c101fcc <OSDebugInit+0x1c8>
 c101ea0:	e50b3010 	str	r3, [fp, #-16]
    ptemp = (void *)&OSMemSize;
 c101ea4:	e59f3124 	ldr	r3, [pc, #292]	; c101fd0 <OSDebugInit+0x1cc>
 c101ea8:	e50b3010 	str	r3, [fp, #-16]
    ptemp = (void *)&OSMemTblSize;
 c101eac:	e59f3120 	ldr	r3, [pc, #288]	; c101fd4 <OSDebugInit+0x1d0>
 c101eb0:	e50b3010 	str	r3, [fp, #-16]

    ptemp = (void *)&OSMutexEn;
 c101eb4:	e59f311c 	ldr	r3, [pc, #284]	; c101fd8 <OSDebugInit+0x1d4>
 c101eb8:	e50b3010 	str	r3, [fp, #-16]

    ptemp = (void *)&OSPtrSize;
 c101ebc:	e59f3118 	ldr	r3, [pc, #280]	; c101fdc <OSDebugInit+0x1d8>
 c101ec0:	e50b3010 	str	r3, [fp, #-16]

    ptemp = (void *)&OSQEn;
 c101ec4:	e59f3114 	ldr	r3, [pc, #276]	; c101fe0 <OSDebugInit+0x1dc>
 c101ec8:	e50b3010 	str	r3, [fp, #-16]
    ptemp = (void *)&OSQMax;
 c101ecc:	e59f3110 	ldr	r3, [pc, #272]	; c101fe4 <OSDebugInit+0x1e0>
 c101ed0:	e50b3010 	str	r3, [fp, #-16]
    ptemp = (void *)&OSQSize;
 c101ed4:	e59f310c 	ldr	r3, [pc, #268]	; c101fe8 <OSDebugInit+0x1e4>
 c101ed8:	e50b3010 	str	r3, [fp, #-16]

    ptemp = (void *)&OSRdyTblSize;
 c101edc:	e59f3108 	ldr	r3, [pc, #264]	; c101fec <OSDebugInit+0x1e8>
 c101ee0:	e50b3010 	str	r3, [fp, #-16]

    ptemp = (void *)&OSSemEn;
 c101ee4:	e59f3104 	ldr	r3, [pc, #260]	; c101ff0 <OSDebugInit+0x1ec>
 c101ee8:	e50b3010 	str	r3, [fp, #-16]

    ptemp = (void *)&OSStkWidth;
 c101eec:	e59f3100 	ldr	r3, [pc, #256]	; c101ff4 <OSDebugInit+0x1f0>
 c101ef0:	e50b3010 	str	r3, [fp, #-16]

    ptemp = (void *)&OSTaskCreateEn;
 c101ef4:	e59f30fc 	ldr	r3, [pc, #252]	; c101ff8 <OSDebugInit+0x1f4>
 c101ef8:	e50b3010 	str	r3, [fp, #-16]
    ptemp = (void *)&OSTaskCreateExtEn;
 c101efc:	e59f30f8 	ldr	r3, [pc, #248]	; c101ffc <OSDebugInit+0x1f8>
 c101f00:	e50b3010 	str	r3, [fp, #-16]
    ptemp = (void *)&OSTaskDelEn;
 c101f04:	e59f30f4 	ldr	r3, [pc, #244]	; c102000 <OSDebugInit+0x1fc>
 c101f08:	e50b3010 	str	r3, [fp, #-16]
    ptemp = (void *)&OSTaskIdleStkSize;
 c101f0c:	e59f30f0 	ldr	r3, [pc, #240]	; c102004 <OSDebugInit+0x200>
 c101f10:	e50b3010 	str	r3, [fp, #-16]
    ptemp = (void *)&OSTaskProfileEn;
 c101f14:	e59f30ec 	ldr	r3, [pc, #236]	; c102008 <OSDebugInit+0x204>
 c101f18:	e50b3010 	str	r3, [fp, #-16]
    ptemp = (void *)&OSTaskMax;
 c101f1c:	e59f30e8 	ldr	r3, [pc, #232]	; c10200c <OSDebugInit+0x208>
 c101f20:	e50b3010 	str	r3, [fp, #-16]
    ptemp = (void *)&OSTaskNameSize;
 c101f24:	e59f30e4 	ldr	r3, [pc, #228]	; c102010 <OSDebugInit+0x20c>
 c101f28:	e50b3010 	str	r3, [fp, #-16]
    ptemp = (void *)&OSTaskStatEn;
 c101f2c:	e59f30e0 	ldr	r3, [pc, #224]	; c102014 <OSDebugInit+0x210>
 c101f30:	e50b3010 	str	r3, [fp, #-16]
    ptemp = (void *)&OSTaskStatStkSize;
 c101f34:	e59f30dc 	ldr	r3, [pc, #220]	; c102018 <OSDebugInit+0x214>
 c101f38:	e50b3010 	str	r3, [fp, #-16]
    ptemp = (void *)&OSTaskStatStkChkEn;
 c101f3c:	e59f30d8 	ldr	r3, [pc, #216]	; c10201c <OSDebugInit+0x218>
 c101f40:	e50b3010 	str	r3, [fp, #-16]
    ptemp = (void *)&OSTaskSwHookEn;
 c101f44:	e59f30d4 	ldr	r3, [pc, #212]	; c102020 <OSDebugInit+0x21c>
 c101f48:	e50b3010 	str	r3, [fp, #-16]

    ptemp = (void *)&OSTCBPrioTblMax;
 c101f4c:	e59f30d0 	ldr	r3, [pc, #208]	; c102024 <OSDebugInit+0x220>
 c101f50:	e50b3010 	str	r3, [fp, #-16]
    ptemp = (void *)&OSTCBSize;
 c101f54:	e59f30cc 	ldr	r3, [pc, #204]	; c102028 <OSDebugInit+0x224>
 c101f58:	e50b3010 	str	r3, [fp, #-16]

    ptemp = (void *)&OSTicksPerSec;
 c101f5c:	e59f30c8 	ldr	r3, [pc, #200]	; c10202c <OSDebugInit+0x228>
 c101f60:	e50b3010 	str	r3, [fp, #-16]
    ptemp = (void *)&OSTimeTickHookEn;
 c101f64:	e59f30c4 	ldr	r3, [pc, #196]	; c102030 <OSDebugInit+0x22c>
 c101f68:	e50b3010 	str	r3, [fp, #-16]

    ptemp = (void *)&OSVersionNbr;
 c101f6c:	e59f30c0 	ldr	r3, [pc, #192]	; c102034 <OSDebugInit+0x230>
 c101f70:	e50b3010 	str	r3, [fp, #-16]

    ptemp = (void *)&OSDataSize;
 c101f74:	e59f30bc 	ldr	r3, [pc, #188]	; c102038 <OSDebugInit+0x234>
 c101f78:	e50b3010 	str	r3, [fp, #-16]

    ptemp = ptemp;                             /* Prevent compiler warning for 'ptemp' not being used! */
}
 c101f7c:	e24bd00c 	sub	sp, fp, #12
 c101f80:	e89d6800 	ldm	sp, {fp, sp, lr}
 c101f84:	e12fff1e 	bx	lr
 c101f88:	0c10e4dc 	.word	0x0c10e4dc
 c101f8c:	0c10e4e0 	.word	0x0c10e4e0
 c101f90:	0c10e4e6 	.word	0x0c10e4e6
 c101f94:	0c10e4e8 	.word	0x0c10e4e8
 c101f98:	0c10e4e4 	.word	0x0c10e4e4
 c101f9c:	0c10e4ea 	.word	0x0c10e4ea
 c101fa0:	0c10e4ec 	.word	0x0c10e4ec
 c101fa4:	0c10e4ee 	.word	0x0c10e4ee
 c101fa8:	0c10e4f0 	.word	0x0c10e4f0
 c101fac:	0c10e4f2 	.word	0x0c10e4f2
 c101fb0:	0c10e4f4 	.word	0x0c10e4f4
 c101fb4:	0c10e4f6 	.word	0x0c10e4f6
 c101fb8:	0c10e4f8 	.word	0x0c10e4f8
 c101fbc:	0c10e4fa 	.word	0x0c10e4fa
 c101fc0:	0c10e4fc 	.word	0x0c10e4fc
 c101fc4:	0c10e4fe 	.word	0x0c10e4fe
 c101fc8:	0c10e500 	.word	0x0c10e500
 c101fcc:	0c10e502 	.word	0x0c10e502
 c101fd0:	0c10e504 	.word	0x0c10e504
 c101fd4:	0c10e506 	.word	0x0c10e506
 c101fd8:	0c10e508 	.word	0x0c10e508
 c101fdc:	0c10e50a 	.word	0x0c10e50a
 c101fe0:	0c10e50c 	.word	0x0c10e50c
 c101fe4:	0c10e50e 	.word	0x0c10e50e
 c101fe8:	0c10e510 	.word	0x0c10e510
 c101fec:	0c10e512 	.word	0x0c10e512
 c101ff0:	0c10e514 	.word	0x0c10e514
 c101ff4:	0c10e516 	.word	0x0c10e516
 c101ff8:	0c10e518 	.word	0x0c10e518
 c101ffc:	0c10e51a 	.word	0x0c10e51a
 c102000:	0c10e51c 	.word	0x0c10e51c
 c102004:	0c10e51e 	.word	0x0c10e51e
 c102008:	0c10e520 	.word	0x0c10e520
 c10200c:	0c10e522 	.word	0x0c10e522
 c102010:	0c10e524 	.word	0x0c10e524
 c102014:	0c10e526 	.word	0x0c10e526
 c102018:	0c10e528 	.word	0x0c10e528
 c10201c:	0c10e52a 	.word	0x0c10e52a
 c102020:	0c10e52c 	.word	0x0c10e52c
 c102024:	0c10e52e 	.word	0x0c10e52e
 c102028:	0c10e530 	.word	0x0c10e530
 c10202c:	0c10e532 	.word	0x0c10e532
 c102030:	0c10e534 	.word	0x0c10e534
 c102034:	0c10e536 	.word	0x0c10e536
 c102038:	0c10e538 	.word	0x0c10e538

0c10203c <OSFlagAccept>:
*********************************************************************************************************
*/

#if OS_FLAG_ACCEPT_EN > 0
OS_FLAGS  OSFlagAccept (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT8U *err)
{
 c10203c:	e1a0c00d 	mov	ip, sp
 c102040:	e92dd800 	push	{fp, ip, lr, pc}
 c102044:	e24cb004 	sub	fp, ip, #4
 c102048:	e24dd018 	sub	sp, sp, #24
 c10204c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
 c102050:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
 c102054:	e14b11ba 	strh	r1, [fp, #-26]	; 0xffffffe6
 c102058:	e1a03002 	mov	r3, r2
 c10205c:	e54b301b 	strb	r3, [fp, #-27]	; 0xffffffe5


    cpu_sr = 0;                                            /* Prevent compiler warning                 */
#endif    
#if OS_ARG_CHK_EN > 0
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
 c102060:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c102064:	e3530000 	cmp	r3, #0
 c102068:	1a000004 	bne	c102080 <OSFlagAccept+0x44>
        *err = OS_FLAG_INVALID_PGRP;
 c10206c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c102070:	e3e02069 	mvn	r2, #105	; 0x69
 c102074:	e5c32000 	strb	r2, [r3]
        return ((OS_FLAGS)0);
 c102078:	e3a03000 	mov	r3, #0
 c10207c:	ea0000b3 	b	c102350 <OSFlagAccept+0x314>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
 c102080:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c102084:	e5d33000 	ldrb	r3, [r3]
 c102088:	e3530005 	cmp	r3, #5
 c10208c:	0a000004 	beq	c1020a4 <OSFlagAccept+0x68>
        *err = OS_ERR_EVENT_TYPE;
 c102090:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c102094:	e3a02001 	mov	r2, #1
 c102098:	e5c32000 	strb	r2, [r3]
        return ((OS_FLAGS)0);
 c10209c:	e3a03000 	mov	r3, #0
 c1020a0:	ea0000aa 	b	c102350 <OSFlagAccept+0x314>
    }
    if (wait_type & OS_FLAG_CONSUME) {                     /* See if we need to consume the flags      */
 c1020a4:	e55b301b 	ldrb	r3, [fp, #-27]	; 0xffffffe5
 c1020a8:	e1a03c03 	lsl	r3, r3, #24
 c1020ac:	e1a03c43 	asr	r3, r3, #24
 c1020b0:	e3530000 	cmp	r3, #0
 c1020b4:	aa000005 	bge	c1020d0 <OSFlagAccept+0x94>
        wait_type &= ~OS_FLAG_CONSUME;
 c1020b8:	e55b301b 	ldrb	r3, [fp, #-27]	; 0xffffffe5
 c1020bc:	e203307f 	and	r3, r3, #127	; 0x7f
 c1020c0:	e54b301b 	strb	r3, [fp, #-27]	; 0xffffffe5
        consume    = TRUE;
 c1020c4:	e3a03001 	mov	r3, #1
 c1020c8:	e54b300f 	strb	r3, [fp, #-15]
 c1020cc:	ea000001 	b	c1020d8 <OSFlagAccept+0x9c>
    } else {
        consume    = FALSE;
 c1020d0:	e3a03000 	mov	r3, #0
 c1020d4:	e54b300f 	strb	r3, [fp, #-15]
    }
/*$PAGE*/
    *err = OS_NO_ERR;                                      /* Assume NO error until proven otherwise.  */
 c1020d8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c1020dc:	e3a02000 	mov	r2, #0
 c1020e0:	e5c32000 	strb	r2, [r3]
    OS_ENTER_CRITICAL();
 c1020e4:	e10f0000 	mrs	r0, CPSR
 c1020e8:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
 c1020ec:	e38000c0 	orr	r0, r0, #192	; 0xc0
 c1020f0:	e121f000 	msr	CPSR_c, r0
    switch (wait_type) {
 c1020f4:	e55b301b 	ldrb	r3, [fp, #-27]	; 0xffffffe5
 c1020f8:	e3530003 	cmp	r3, #3
 c1020fc:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
 c102100:	ea000089 	b	c10232c <OSFlagAccept+0x2f0>
 c102104:	0c102220 	.word	0x0c102220
 c102108:	0c1022a8 	.word	0x0c1022a8
 c10210c:	0c102114 	.word	0x0c102114
 c102110:	0c10219c 	.word	0x0c10219c
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = pgrp->OSFlagFlags & flags;        /* Extract only the bits we want            */
 c102114:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c102118:	e1d320b8 	ldrh	r2, [r3, #8]
 c10211c:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
 c102120:	e0023003 	and	r3, r2, r3
 c102124:	e14b30be 	strh	r3, [fp, #-14]
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
 c102128:	e15b20be 	ldrh	r2, [fp, #-14]
 c10212c:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
 c102130:	e1520003 	cmp	r2, r3
 c102134:	1a000012 	bne	c102184 <OSFlagAccept+0x148>
                 if (consume == TRUE) {                    /* See if we need to consume the flags      */
 c102138:	e55b300f 	ldrb	r3, [fp, #-15]
 c10213c:	e3530001 	cmp	r3, #1
 c102140:	1a000012 	bne	c102190 <OSFlagAccept+0x154>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
 c102144:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c102148:	e1d330b8 	ldrh	r3, [r3, #8]
 c10214c:	e1a03803 	lsl	r3, r3, #16
 c102150:	e1a02823 	lsr	r2, r3, #16
 c102154:	e15b30be 	ldrh	r3, [fp, #-14]
 c102158:	e1e03003 	mvn	r3, r3
 c10215c:	e1a03803 	lsl	r3, r3, #16
 c102160:	e1a03823 	lsr	r3, r3, #16
 c102164:	e0023003 	and	r3, r2, r3
 c102168:	e1a03803 	lsl	r3, r3, #16
 c10216c:	e1a03823 	lsr	r3, r3, #16
 c102170:	e1a03803 	lsl	r3, r3, #16
 c102174:	e1a02823 	lsr	r2, r3, #16
 c102178:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c10217c:	e1c320b8 	strh	r2, [r3, #8]
 c102180:	ea000002 	b	c102190 <OSFlagAccept+0x154>
                 }
             } else {
                 *err  = OS_FLAG_ERR_NOT_RDY;
 c102184:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c102188:	e3e02067 	mvn	r2, #103	; 0x67
 c10218c:	e5c32000 	strb	r2, [r3]
             }
             OS_EXIT_CRITICAL();
 c102190:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 c102194:	e121f000 	msr	CPSR_c, r0
             break;
 c102198:	ea00006b 	b	c10234c <OSFlagAccept+0x310>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = pgrp->OSFlagFlags & flags;        /* Extract only the bits we want            */
 c10219c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c1021a0:	e1d320b8 	ldrh	r2, [r3, #8]
 c1021a4:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
 c1021a8:	e0023003 	and	r3, r2, r3
 c1021ac:	e14b30be 	strh	r3, [fp, #-14]
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
 c1021b0:	e15b30be 	ldrh	r3, [fp, #-14]
 c1021b4:	e3530000 	cmp	r3, #0
 c1021b8:	0a000012 	beq	c102208 <OSFlagAccept+0x1cc>
                 if (consume == TRUE) {                    /* See if we need to consume the flags      */
 c1021bc:	e55b300f 	ldrb	r3, [fp, #-15]
 c1021c0:	e3530001 	cmp	r3, #1
 c1021c4:	1a000012 	bne	c102214 <OSFlagAccept+0x1d8>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
 c1021c8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c1021cc:	e1d330b8 	ldrh	r3, [r3, #8]
 c1021d0:	e1a03803 	lsl	r3, r3, #16
 c1021d4:	e1a02823 	lsr	r2, r3, #16
 c1021d8:	e15b30be 	ldrh	r3, [fp, #-14]
 c1021dc:	e1e03003 	mvn	r3, r3
 c1021e0:	e1a03803 	lsl	r3, r3, #16
 c1021e4:	e1a03823 	lsr	r3, r3, #16
 c1021e8:	e0023003 	and	r3, r2, r3
 c1021ec:	e1a03803 	lsl	r3, r3, #16
 c1021f0:	e1a03823 	lsr	r3, r3, #16
 c1021f4:	e1a03803 	lsl	r3, r3, #16
 c1021f8:	e1a02823 	lsr	r2, r3, #16
 c1021fc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c102200:	e1c320b8 	strh	r2, [r3, #8]
 c102204:	ea000002 	b	c102214 <OSFlagAccept+0x1d8>
                 }
             } else {
                 *err  = OS_FLAG_ERR_NOT_RDY;
 c102208:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c10220c:	e3e02067 	mvn	r2, #103	; 0x67
 c102210:	e5c32000 	strb	r2, [r3]
             }
             OS_EXIT_CRITICAL();
 c102214:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 c102218:	e121f000 	msr	CPSR_c, r0
             break;
 c10221c:	ea00004a 	b	c10234c <OSFlagAccept+0x310>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = ~pgrp->OSFlagFlags & flags;       /* Extract only the bits we want            */
 c102220:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c102224:	e1d330b8 	ldrh	r3, [r3, #8]
 c102228:	e1a03803 	lsl	r3, r3, #16
 c10222c:	e1a03823 	lsr	r3, r3, #16
 c102230:	e1e03003 	mvn	r3, r3
 c102234:	e1a03803 	lsl	r3, r3, #16
 c102238:	e1a02823 	lsr	r2, r3, #16
 c10223c:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
 c102240:	e0023003 	and	r3, r2, r3
 c102244:	e1a03803 	lsl	r3, r3, #16
 c102248:	e1a03823 	lsr	r3, r3, #16
 c10224c:	e14b30be 	strh	r3, [fp, #-14]
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
 c102250:	e15b20be 	ldrh	r2, [fp, #-14]
 c102254:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
 c102258:	e1520003 	cmp	r2, r3
 c10225c:	1a00000b 	bne	c102290 <OSFlagAccept+0x254>
                 if (consume == TRUE) {                    /* See if we need to consume the flags      */
 c102260:	e55b300f 	ldrb	r3, [fp, #-15]
 c102264:	e3530001 	cmp	r3, #1
 c102268:	1a00000b 	bne	c10229c <OSFlagAccept+0x260>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
 c10226c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c102270:	e1d320b8 	ldrh	r2, [r3, #8]
 c102274:	e15b30be 	ldrh	r3, [fp, #-14]
 c102278:	e1823003 	orr	r3, r2, r3
 c10227c:	e1a03803 	lsl	r3, r3, #16
 c102280:	e1a02823 	lsr	r2, r3, #16
 c102284:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c102288:	e1c320b8 	strh	r2, [r3, #8]
 c10228c:	ea000002 	b	c10229c <OSFlagAccept+0x260>
                 }
             } else {
                 *err  = OS_FLAG_ERR_NOT_RDY;
 c102290:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c102294:	e3e02067 	mvn	r2, #103	; 0x67
 c102298:	e5c32000 	strb	r2, [r3]
             }
             OS_EXIT_CRITICAL();
 c10229c:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 c1022a0:	e121f000 	msr	CPSR_c, r0
             break;
 c1022a4:	ea000028 	b	c10234c <OSFlagAccept+0x310>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = ~pgrp->OSFlagFlags & flags;       /* Extract only the bits we want            */
 c1022a8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c1022ac:	e1d330b8 	ldrh	r3, [r3, #8]
 c1022b0:	e1a03803 	lsl	r3, r3, #16
 c1022b4:	e1a03823 	lsr	r3, r3, #16
 c1022b8:	e1e03003 	mvn	r3, r3
 c1022bc:	e1a03803 	lsl	r3, r3, #16
 c1022c0:	e1a02823 	lsr	r2, r3, #16
 c1022c4:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
 c1022c8:	e0023003 	and	r3, r2, r3
 c1022cc:	e1a03803 	lsl	r3, r3, #16
 c1022d0:	e1a03823 	lsr	r3, r3, #16
 c1022d4:	e14b30be 	strh	r3, [fp, #-14]
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
 c1022d8:	e15b30be 	ldrh	r3, [fp, #-14]
 c1022dc:	e3530000 	cmp	r3, #0
 c1022e0:	0a00000b 	beq	c102314 <OSFlagAccept+0x2d8>
                 if (consume == TRUE) {                    /* See if we need to consume the flags      */
 c1022e4:	e55b300f 	ldrb	r3, [fp, #-15]
 c1022e8:	e3530001 	cmp	r3, #1
 c1022ec:	1a00000b 	bne	c102320 <OSFlagAccept+0x2e4>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
 c1022f0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c1022f4:	e1d320b8 	ldrh	r2, [r3, #8]
 c1022f8:	e15b30be 	ldrh	r3, [fp, #-14]
 c1022fc:	e1823003 	orr	r3, r2, r3
 c102300:	e1a03803 	lsl	r3, r3, #16
 c102304:	e1a02823 	lsr	r2, r3, #16
 c102308:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c10230c:	e1c320b8 	strh	r2, [r3, #8]
 c102310:	ea000002 	b	c102320 <OSFlagAccept+0x2e4>
                 }
             } else {
                 *err  = OS_FLAG_ERR_NOT_RDY;
 c102314:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c102318:	e3e02067 	mvn	r2, #103	; 0x67
 c10231c:	e5c32000 	strb	r2, [r3]
             }
             OS_EXIT_CRITICAL();
 c102320:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 c102324:	e121f000 	msr	CPSR_c, r0
             break;
 c102328:	ea000007 	b	c10234c <OSFlagAccept+0x310>
#endif

        default:
             OS_EXIT_CRITICAL();
 c10232c:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 c102330:	e121f000 	msr	CPSR_c, r0
             flags_rdy = (OS_FLAGS)0;
 c102334:	e3a03000 	mov	r3, #0
 c102338:	e14b30be 	strh	r3, [fp, #-14]
             *err      = OS_FLAG_ERR_WAIT_TYPE;
 c10233c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c102340:	e3e02068 	mvn	r2, #104	; 0x68
 c102344:	e5c32000 	strb	r2, [r3]
             break;
 c102348:	e1a00000 	nop			; (mov r0, r0)
    }
    return (flags_rdy);
 c10234c:	e15b30be 	ldrh	r3, [fp, #-14]
}
 c102350:	e1a00003 	mov	r0, r3
 c102354:	e24bd00c 	sub	sp, fp, #12
 c102358:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10235c:	e12fff1e 	bx	lr

0c102360 <OSFlagCreate>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAG_GRP  *OSFlagCreate (OS_FLAGS flags, INT8U *err)
{
 c102360:	e1a0c00d 	mov	ip, sp
 c102364:	e92dd800 	push	{fp, ip, lr, pc}
 c102368:	e24cb004 	sub	fp, ip, #4
 c10236c:	e24dd010 	sub	sp, sp, #16
 c102370:	e1a03000 	mov	r3, r0
 c102374:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
 c102378:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea



    cpu_sr = 0;                                     /* Prevent compiler warning                        */
#endif    
    if (OSIntNesting > 0) {                         /* See if called from ISR ...                      */
 c10237c:	e59f30d8 	ldr	r3, [pc, #216]	; c10245c <OSFlagCreate+0xfc>
 c102380:	e5d33000 	ldrb	r3, [r3]
 c102384:	e3530000 	cmp	r3, #0
 c102388:	0a000004 	beq	c1023a0 <OSFlagCreate+0x40>
        *err = OS_ERR_CREATE_ISR;                   /* ... can't CREATE from an ISR                    */
 c10238c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 c102390:	e3e02072 	mvn	r2, #114	; 0x72
 c102394:	e5c32000 	strb	r2, [r3]
        return ((OS_FLAG_GRP *)0);
 c102398:	e3a03000 	mov	r3, #0
 c10239c:	ea00002a 	b	c10244c <OSFlagCreate+0xec>
    }
    OS_ENTER_CRITICAL();
 c1023a0:	e10f0000 	mrs	r0, CPSR
 c1023a4:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
 c1023a8:	e38000c0 	orr	r0, r0, #192	; 0xc0
 c1023ac:	e121f000 	msr	CPSR_c, r0
    pgrp = OSFlagFreeList;                          /* Get next free event flag                        */
 c1023b0:	e59f30a8 	ldr	r3, [pc, #168]	; c102460 <OSFlagCreate+0x100>
 c1023b4:	e5933000 	ldr	r3, [r3]
 c1023b8:	e50b3010 	str	r3, [fp, #-16]
    if (pgrp != (OS_FLAG_GRP *)0) {                 /* See if we have event flag groups available      */
 c1023bc:	e51b3010 	ldr	r3, [fp, #-16]
 c1023c0:	e3530000 	cmp	r3, #0
 c1023c4:	0a00001a 	beq	c102434 <OSFlagCreate+0xd4>
                                                    /* Adjust free list                                */
        OSFlagFreeList       = (OS_FLAG_GRP *)OSFlagFreeList->OSFlagWaitList;
 c1023c8:	e59f3090 	ldr	r3, [pc, #144]	; c102460 <OSFlagCreate+0x100>
 c1023cc:	e5933000 	ldr	r3, [r3]
 c1023d0:	e5933004 	ldr	r3, [r3, #4]
 c1023d4:	e1a02003 	mov	r2, r3
 c1023d8:	e59f3080 	ldr	r3, [pc, #128]	; c102460 <OSFlagCreate+0x100>
 c1023dc:	e5832000 	str	r2, [r3]
        pgrp->OSFlagType     = OS_EVENT_TYPE_FLAG;  /* Set to event flag group type                    */
 c1023e0:	e51b3010 	ldr	r3, [fp, #-16]
 c1023e4:	e3a02005 	mov	r2, #5
 c1023e8:	e5c32000 	strb	r2, [r3]
        pgrp->OSFlagFlags    = flags;               /* Set to desired initial value                    */
 c1023ec:	e51b3010 	ldr	r3, [fp, #-16]
 c1023f0:	e15b21b6 	ldrh	r2, [fp, #-22]	; 0xffffffea
 c1023f4:	e1c320b8 	strh	r2, [r3, #8]
        pgrp->OSFlagWaitList = (void *)0;           /* Clear list of tasks waiting on flags            */
 c1023f8:	e51b3010 	ldr	r3, [fp, #-16]
 c1023fc:	e3a02000 	mov	r2, #0
 c102400:	e5832004 	str	r2, [r3, #4]
#if OS_FLAG_NAME_SIZE > 1
        pgrp->OSFlagName[0]  = '?';
 c102404:	e51b3010 	ldr	r3, [fp, #-16]
 c102408:	e3a0203f 	mov	r2, #63	; 0x3f
 c10240c:	e5c3200a 	strb	r2, [r3, #10]
        pgrp->OSFlagName[1]  = OS_ASCII_NUL;
 c102410:	e51b3010 	ldr	r3, [fp, #-16]
 c102414:	e3a02000 	mov	r2, #0
 c102418:	e5c3200b 	strb	r2, [r3, #11]
#endif
        OS_EXIT_CRITICAL();
 c10241c:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 c102420:	e121f000 	msr	CPSR_c, r0
        *err                 = OS_NO_ERR;
 c102424:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 c102428:	e3a02000 	mov	r2, #0
 c10242c:	e5c32000 	strb	r2, [r3]
 c102430:	ea000004 	b	c102448 <OSFlagCreate+0xe8>
    } else {
        OS_EXIT_CRITICAL();
 c102434:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 c102438:	e121f000 	msr	CPSR_c, r0
        *err                 = OS_FLAG_GRP_DEPLETED;
 c10243c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 c102440:	e3e02065 	mvn	r2, #101	; 0x65
 c102444:	e5c32000 	strb	r2, [r3]
    }
    return (pgrp);                                  /* Return pointer to event flag group              */
 c102448:	e51b3010 	ldr	r3, [fp, #-16]
}
 c10244c:	e1a00003 	mov	r0, r3
 c102450:	e24bd00c 	sub	sp, fp, #12
 c102454:	e89d6800 	ldm	sp, {fp, sp, lr}
 c102458:	e12fff1e 	bx	lr
 c10245c:	0c119ca8 	.word	0x0c119ca8
 c102460:	0c11af84 	.word	0x0c11af84

0c102464 <OSFlagDel>:
*********************************************************************************************************
*/

#if OS_FLAG_DEL_EN > 0
OS_FLAG_GRP  *OSFlagDel (OS_FLAG_GRP *pgrp, INT8U opt, INT8U *err)
{
 c102464:	e1a0c00d 	mov	ip, sp
 c102468:	e92dd800 	push	{fp, ip, lr, pc}
 c10246c:	e24cb004 	sub	fp, ip, #4
 c102470:	e24dd018 	sub	sp, sp, #24
 c102474:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
 c102478:	e1a03001 	mov	r3, r1
 c10247c:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
 c102480:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7



    cpu_sr = 0;                                            /* Prevent compiler warning                 */
#endif    
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 c102484:	e59f3210 	ldr	r3, [pc, #528]	; c10269c <OSFlagDel+0x238>
 c102488:	e5d33000 	ldrb	r3, [r3]
 c10248c:	e3530000 	cmp	r3, #0
 c102490:	0a000004 	beq	c1024a8 <OSFlagDel+0x44>
        *err = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
 c102494:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c102498:	e3e02073 	mvn	r2, #115	; 0x73
 c10249c:	e5c32000 	strb	r2, [r3]
        return (pgrp);
 c1024a0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c1024a4:	ea000078 	b	c10268c <OSFlagDel+0x228>
    }
#if OS_ARG_CHK_EN > 0
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
 c1024a8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c1024ac:	e3530000 	cmp	r3, #0
 c1024b0:	1a000004 	bne	c1024c8 <OSFlagDel+0x64>
        *err = OS_FLAG_INVALID_PGRP;
 c1024b4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c1024b8:	e3e02069 	mvn	r2, #105	; 0x69
 c1024bc:	e5c32000 	strb	r2, [r3]
        return (pgrp);
 c1024c0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c1024c4:	ea000070 	b	c10268c <OSFlagDel+0x228>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event group type                */
 c1024c8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c1024cc:	e5d33000 	ldrb	r3, [r3]
 c1024d0:	e3530005 	cmp	r3, #5
 c1024d4:	0a000004 	beq	c1024ec <OSFlagDel+0x88>
        *err = OS_ERR_EVENT_TYPE;
 c1024d8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c1024dc:	e3a02001 	mov	r2, #1
 c1024e0:	e5c32000 	strb	r2, [r3]
        return (pgrp);
 c1024e4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c1024e8:	ea000067 	b	c10268c <OSFlagDel+0x228>
    }
    OS_ENTER_CRITICAL();
 c1024ec:	e10f0000 	mrs	r0, CPSR
 c1024f0:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
 c1024f4:	e38000c0 	orr	r0, r0, #192	; 0xc0
 c1024f8:	e121f000 	msr	CPSR_c, r0
    if (pgrp->OSFlagWaitList != (void *)0) {               /* See if any tasks waiting on event flags  */
 c1024fc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c102500:	e5933004 	ldr	r3, [r3, #4]
 c102504:	e3530000 	cmp	r3, #0
 c102508:	0a000002 	beq	c102518 <OSFlagDel+0xb4>
        tasks_waiting = TRUE;                              /* Yes                                      */
 c10250c:	e3a03001 	mov	r3, #1
 c102510:	e54b300d 	strb	r3, [fp, #-13]
 c102514:	ea000001 	b	c102520 <OSFlagDel+0xbc>
    } else {
        tasks_waiting = FALSE;                             /* No                                       */
 c102518:	e3a03000 	mov	r3, #0
 c10251c:	e54b300d 	strb	r3, [fp, #-13]
    }
    switch (opt) {
 c102520:	e55b3019 	ldrb	r3, [fp, #-25]	; 0xffffffe7
 c102524:	e3530000 	cmp	r3, #0
 c102528:	0a000002 	beq	c102538 <OSFlagDel+0xd4>
 c10252c:	e3530001 	cmp	r3, #1
 c102530:	0a000024 	beq	c1025c8 <OSFlagDel+0x164>
 c102534:	ea00004e 	b	c102674 <OSFlagDel+0x210>
        case OS_DEL_NO_PEND:                               /* Delete group if no task waiting          */
             if (tasks_waiting == FALSE) {
 c102538:	e55b300d 	ldrb	r3, [fp, #-13]
 c10253c:	e3530000 	cmp	r3, #0
 c102540:	1a000019 	bne	c1025ac <OSFlagDel+0x148>
#if OS_FLAG_NAME_SIZE > 1
                 pgrp->OSFlagName[0]  = '?';               /* Unknown name                             */
 c102544:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c102548:	e3a0203f 	mov	r2, #63	; 0x3f
 c10254c:	e5c3200a 	strb	r2, [r3, #10]
                 pgrp->OSFlagName[1]  = OS_ASCII_NUL;
 c102550:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c102554:	e3a02000 	mov	r2, #0
 c102558:	e5c3200b 	strb	r2, [r3, #11]
#endif
                 pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 c10255c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c102560:	e3a02000 	mov	r2, #0
 c102564:	e5c32000 	strb	r2, [r3]
                 pgrp->OSFlagWaitList = (void *)OSFlagFreeList; /* Return group to free list           */
 c102568:	e59f3130 	ldr	r3, [pc, #304]	; c1026a0 <OSFlagDel+0x23c>
 c10256c:	e5932000 	ldr	r2, [r3]
 c102570:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c102574:	e5832004 	str	r2, [r3, #4]
                 pgrp->OSFlagFlags    = (OS_FLAGS)0;
 c102578:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c10257c:	e3a02000 	mov	r2, #0
 c102580:	e1c320b8 	strh	r2, [r3, #8]
                 OSFlagFreeList       = pgrp;
 c102584:	e59f3114 	ldr	r3, [pc, #276]	; c1026a0 <OSFlagDel+0x23c>
 c102588:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
 c10258c:	e5832000 	str	r2, [r3]
                 OS_EXIT_CRITICAL();
 c102590:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 c102594:	e121f000 	msr	CPSR_c, r0
                 *err                 = OS_NO_ERR;
 c102598:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c10259c:	e3a02000 	mov	r2, #0
 c1025a0:	e5c32000 	strb	r2, [r3]
                 return ((OS_FLAG_GRP *)0);                /* Event Flag Group has been deleted        */
 c1025a4:	e3a03000 	mov	r3, #0
 c1025a8:	ea000037 	b	c10268c <OSFlagDel+0x228>
             } else {
                 OS_EXIT_CRITICAL();
 c1025ac:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 c1025b0:	e121f000 	msr	CPSR_c, r0
                 *err                 = OS_ERR_TASK_WAITING;
 c1025b4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c1025b8:	e3a02008 	mov	r2, #8
 c1025bc:	e5c32000 	strb	r2, [r3]
                 return (pgrp);
 c1025c0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c1025c4:	ea000030 	b	c10268c <OSFlagDel+0x228>
             }

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
 c1025c8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c1025cc:	e5933004 	ldr	r3, [r3, #4]
 c1025d0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
 c1025d4:	ea000005 	b	c1025f0 <OSFlagDel+0x18c>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
 c1025d8:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
 c1025dc:	e3a01000 	mov	r1, #0
 c1025e0:	eb0003dc 	bl	c103558 <OS_FlagTaskRdy>
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
 c1025e4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c1025e8:	e5933000 	ldr	r3, [r3]
 c1025ec:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
                 return (pgrp);
             }

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
 c1025f0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c1025f4:	e3530000 	cmp	r3, #0
 c1025f8:	1afffff6 	bne	c1025d8 <OSFlagDel+0x174>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
             }
#if OS_EVENT_NAME_SIZE > 1
             pgrp->OSFlagName[0]  = '?';                   /* Unknown name                             */
 c1025fc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c102600:	e3a0203f 	mov	r2, #63	; 0x3f
 c102604:	e5c3200a 	strb	r2, [r3, #10]
             pgrp->OSFlagName[1]  = OS_ASCII_NUL;
 c102608:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c10260c:	e3a02000 	mov	r2, #0
 c102610:	e5c3200b 	strb	r2, [r3, #11]
#endif
             pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 c102614:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c102618:	e3a02000 	mov	r2, #0
 c10261c:	e5c32000 	strb	r2, [r3]
             pgrp->OSFlagWaitList = (void *)OSFlagFreeList;/* Return group to free list                */
 c102620:	e59f3078 	ldr	r3, [pc, #120]	; c1026a0 <OSFlagDel+0x23c>
 c102624:	e5932000 	ldr	r2, [r3]
 c102628:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c10262c:	e5832004 	str	r2, [r3, #4]
             pgrp->OSFlagFlags    = (OS_FLAGS)0;
 c102630:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c102634:	e3a02000 	mov	r2, #0
 c102638:	e1c320b8 	strh	r2, [r3, #8]
             OSFlagFreeList       = pgrp;
 c10263c:	e59f305c 	ldr	r3, [pc, #92]	; c1026a0 <OSFlagDel+0x23c>
 c102640:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
 c102644:	e5832000 	str	r2, [r3]
             OS_EXIT_CRITICAL();
 c102648:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 c10264c:	e121f000 	msr	CPSR_c, r0
             if (tasks_waiting == TRUE) {                  /* Reschedule only if task(s) were waiting  */
 c102650:	e55b300d 	ldrb	r3, [fp, #-13]
 c102654:	e3530001 	cmp	r3, #1
 c102658:	1a000000 	bne	c102660 <OSFlagDel+0x1fc>
                 OS_Sched();                               /* Find highest priority task ready to run  */
 c10265c:	ebfffc20 	bl	c1016e4 <OS_Sched>
             }
             *err = OS_NO_ERR;
 c102660:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c102664:	e3a02000 	mov	r2, #0
 c102668:	e5c32000 	strb	r2, [r3]
             return ((OS_FLAG_GRP *)0);                    /* Event Flag Group has been deleted        */
 c10266c:	e3a03000 	mov	r3, #0
 c102670:	ea000005 	b	c10268c <OSFlagDel+0x228>

        default:
             OS_EXIT_CRITICAL();
 c102674:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 c102678:	e121f000 	msr	CPSR_c, r0
             *err = OS_ERR_INVALID_OPT;
 c10267c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c102680:	e3a02007 	mov	r2, #7
 c102684:	e5c32000 	strb	r2, [r3]
             return (pgrp);
 c102688:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
    }
}
 c10268c:	e1a00003 	mov	r0, r3
 c102690:	e24bd00c 	sub	sp, fp, #12
 c102694:	e89d6800 	ldm	sp, {fp, sp, lr}
 c102698:	e12fff1e 	bx	lr
 c10269c:	0c119ca8 	.word	0x0c119ca8
 c1026a0:	0c11af84 	.word	0x0c11af84

0c1026a4 <OSFlagNameGet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
INT8U  OSFlagNameGet (OS_FLAG_GRP *pgrp, char *pname, INT8U *err)
{
 c1026a4:	e1a0c00d 	mov	ip, sp
 c1026a8:	e92dd800 	push	{fp, ip, lr, pc}
 c1026ac:	e24cb004 	sub	fp, ip, #4
 c1026b0:	e24dd018 	sub	sp, sp, #24
 c1026b4:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
 c1026b8:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
 c1026bc:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0



    cpu_sr = 0;                                  /* Prevent compiler warning                           */
#endif    
    OS_ENTER_CRITICAL();
 c1026c0:	e10f0000 	mrs	r0, CPSR
 c1026c4:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
 c1026c8:	e38000c0 	orr	r0, r0, #192	; 0xc0
 c1026cc:	e121f000 	msr	CPSR_c, r0
#if OS_ARG_CHK_EN > 0
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
 c1026d0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c1026d4:	e3530000 	cmp	r3, #0
 c1026d8:	1a000006 	bne	c1026f8 <OSFlagNameGet+0x54>
        OS_EXIT_CRITICAL();                      /* Yes                                                */
 c1026dc:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 c1026e0:	e121f000 	msr	CPSR_c, r0
        *err = OS_FLAG_INVALID_PGRP;
 c1026e4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c1026e8:	e3e02069 	mvn	r2, #105	; 0x69
 c1026ec:	e5c32000 	strb	r2, [r3]
        return (0);
 c1026f0:	e3a03000 	mov	r3, #0
 c1026f4:	ea000021 	b	c102780 <OSFlagNameGet+0xdc>
    }
    if (pname == (char *)0) {                    /* Is 'pname' a NULL pointer?                         */
 c1026f8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 c1026fc:	e3530000 	cmp	r3, #0
 c102700:	1a000006 	bne	c102720 <OSFlagNameGet+0x7c>
        OS_EXIT_CRITICAL();                      /* Yes                                                */
 c102704:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 c102708:	e121f000 	msr	CPSR_c, r0
        *err = OS_ERR_PNAME_NULL;
 c10270c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c102710:	e3a0200f 	mov	r2, #15
 c102714:	e5c32000 	strb	r2, [r3]
        return (0);
 c102718:	e3a03000 	mov	r3, #0
 c10271c:	ea000017 	b	c102780 <OSFlagNameGet+0xdc>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
 c102720:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c102724:	e5d33000 	ldrb	r3, [r3]
 c102728:	e3530005 	cmp	r3, #5
 c10272c:	0a000006 	beq	c10274c <OSFlagNameGet+0xa8>
        OS_EXIT_CRITICAL();
 c102730:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 c102734:	e121f000 	msr	CPSR_c, r0
        *err = OS_ERR_EVENT_TYPE;
 c102738:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c10273c:	e3a02001 	mov	r2, #1
 c102740:	e5c32000 	strb	r2, [r3]
        return (0);
 c102744:	e3a03000 	mov	r3, #0
 c102748:	ea00000c 	b	c102780 <OSFlagNameGet+0xdc>
    }
    len  = OS_StrCopy(pname, pgrp->OSFlagName);  /* Copy name from OS_FLAG_GRP                         */
 c10274c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c102750:	e283300a 	add	r3, r3, #10
 c102754:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
 c102758:	e1a01003 	mov	r1, r3
 c10275c:	ebfffc28 	bl	c101804 <OS_StrCopy>
 c102760:	e1a03000 	mov	r3, r0
 c102764:	e54b300d 	strb	r3, [fp, #-13]
    OS_EXIT_CRITICAL();
 c102768:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 c10276c:	e121f000 	msr	CPSR_c, r0
    *err = OS_NO_ERR;
 c102770:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c102774:	e3a02000 	mov	r2, #0
 c102778:	e5c32000 	strb	r2, [r3]
    return (len);
 c10277c:	e55b300d 	ldrb	r3, [fp, #-13]
}
 c102780:	e1a00003 	mov	r0, r3
 c102784:	e24bd00c 	sub	sp, fp, #12
 c102788:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10278c:	e12fff1e 	bx	lr

0c102790 <OSFlagNameSet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
void  OSFlagNameSet (OS_FLAG_GRP *pgrp, char *pname, INT8U *err)
{
 c102790:	e1a0c00d 	mov	ip, sp
 c102794:	e92dd800 	push	{fp, ip, lr, pc}
 c102798:	e24cb004 	sub	fp, ip, #4
 c10279c:	e24dd018 	sub	sp, sp, #24
 c1027a0:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
 c1027a4:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
 c1027a8:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0



    cpu_sr = 0;                                  /* Prevent compiler warning                           */
#endif    
    OS_ENTER_CRITICAL();
 c1027ac:	e10f0000 	mrs	r0, CPSR
 c1027b0:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
 c1027b4:	e38000c0 	orr	r0, r0, #192	; 0xc0
 c1027b8:	e121f000 	msr	CPSR_c, r0
#if OS_ARG_CHK_EN > 0
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
 c1027bc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c1027c0:	e3530000 	cmp	r3, #0
 c1027c4:	1a000005 	bne	c1027e0 <OSFlagNameSet+0x50>
        OS_EXIT_CRITICAL();                      /* Yes                                                */
 c1027c8:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 c1027cc:	e121f000 	msr	CPSR_c, r0
        *err = OS_FLAG_INVALID_PGRP;
 c1027d0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c1027d4:	e3e02069 	mvn	r2, #105	; 0x69
 c1027d8:	e5c32000 	strb	r2, [r3]
        return;
 c1027dc:	ea00002a 	b	c10288c <OSFlagNameSet+0xfc>
    }
    if (pname == (char *)0) {                    /* Is 'pname' a NULL pointer?                         */
 c1027e0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 c1027e4:	e3530000 	cmp	r3, #0
 c1027e8:	1a000005 	bne	c102804 <OSFlagNameSet+0x74>
        OS_EXIT_CRITICAL();                      /* Yes                                                */
 c1027ec:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 c1027f0:	e121f000 	msr	CPSR_c, r0
        *err = OS_ERR_PNAME_NULL;
 c1027f4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c1027f8:	e3a0200f 	mov	r2, #15
 c1027fc:	e5c32000 	strb	r2, [r3]
        return;
 c102800:	ea000021 	b	c10288c <OSFlagNameSet+0xfc>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
 c102804:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c102808:	e5d33000 	ldrb	r3, [r3]
 c10280c:	e3530005 	cmp	r3, #5
 c102810:	0a000005 	beq	c10282c <OSFlagNameSet+0x9c>
        OS_EXIT_CRITICAL();
 c102814:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 c102818:	e121f000 	msr	CPSR_c, r0
        *err = OS_ERR_EVENT_TYPE;
 c10281c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c102820:	e3a02001 	mov	r2, #1
 c102824:	e5c32000 	strb	r2, [r3]
        return;
 c102828:	ea000017 	b	c10288c <OSFlagNameSet+0xfc>
    }
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
 c10282c:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
 c102830:	ebfffc15 	bl	c10188c <OS_StrLen>
 c102834:	e1a03000 	mov	r3, r0
 c102838:	e54b300d 	strb	r3, [fp, #-13]
    if (len > (OS_FLAG_NAME_SIZE - 1)) {         /* No                                                 */
 c10283c:	e55b300d 	ldrb	r3, [fp, #-13]
 c102840:	e353001f 	cmp	r3, #31
 c102844:	9a000005 	bls	c102860 <OSFlagNameSet+0xd0>
        OS_EXIT_CRITICAL();
 c102848:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 c10284c:	e121f000 	msr	CPSR_c, r0
        *err = OS_ERR_FLAG_NAME_TOO_LONG;
 c102850:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c102854:	e3a0200d 	mov	r2, #13
 c102858:	e5c32000 	strb	r2, [r3]
        return;
 c10285c:	ea00000a 	b	c10288c <OSFlagNameSet+0xfc>
    } 
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
 c102860:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c102864:	e283300a 	add	r3, r3, #10
 c102868:	e1a00003 	mov	r0, r3
 c10286c:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
 c102870:	ebfffbe3 	bl	c101804 <OS_StrCopy>
    OS_EXIT_CRITICAL();
 c102874:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 c102878:	e121f000 	msr	CPSR_c, r0
    *err = OS_NO_ERR;
 c10287c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c102880:	e3a02000 	mov	r2, #0
 c102884:	e5c32000 	strb	r2, [r3]
    return;
 c102888:	e1a00000 	nop			; (mov r0, r0)
}
 c10288c:	e24bd00c 	sub	sp, fp, #12
 c102890:	e89d6800 	ldm	sp, {fp, sp, lr}
 c102894:	e12fff1e 	bx	lr

0c102898 <OSFlagPend>:
*                 event flags.
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPend (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT16U timeout, INT8U *err)
{
 c102898:	e1a0c00d 	mov	ip, sp
 c10289c:	e92dd800 	push	{fp, ip, lr, pc}
 c1028a0:	e24cb004 	sub	fp, ip, #4
 c1028a4:	e24dd030 	sub	sp, sp, #48	; 0x30
 c1028a8:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
 c1028ac:	e14b12ba 	strh	r1, [fp, #-42]	; 0xffffffd6
 c1028b0:	e54b202b 	strb	r2, [fp, #-43]	; 0xffffffd5
 c1028b4:	e14b32be 	strh	r3, [fp, #-46]	; 0xffffffd2



    cpu_sr = 0;                                            /* Prevent compiler warning                 */
#endif    
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 c1028b8:	e59f353c 	ldr	r3, [pc, #1340]	; c102dfc <OSFlagPend+0x564>
 c1028bc:	e5d33000 	ldrb	r3, [r3]
 c1028c0:	e3530000 	cmp	r3, #0
 c1028c4:	0a000004 	beq	c1028dc <OSFlagPend+0x44>
        *err = OS_ERR_PEND_ISR;                            /* ... can't PEND from an ISR               */
 c1028c8:	e59b3004 	ldr	r3, [fp, #4]
 c1028cc:	e3a02002 	mov	r2, #2
 c1028d0:	e5c32000 	strb	r2, [r3]
        return ((OS_FLAGS)0);
 c1028d4:	e3a03000 	mov	r3, #0
 c1028d8:	ea000143 	b	c102dec <OSFlagPend+0x554>
    }
#if OS_ARG_CHK_EN > 0
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
 c1028dc:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
 c1028e0:	e3530000 	cmp	r3, #0
 c1028e4:	1a000004 	bne	c1028fc <OSFlagPend+0x64>
        *err = OS_FLAG_INVALID_PGRP;
 c1028e8:	e59b3004 	ldr	r3, [fp, #4]
 c1028ec:	e3e02069 	mvn	r2, #105	; 0x69
 c1028f0:	e5c32000 	strb	r2, [r3]
        return ((OS_FLAGS)0);
 c1028f4:	e3a03000 	mov	r3, #0
 c1028f8:	ea00013b 	b	c102dec <OSFlagPend+0x554>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
 c1028fc:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
 c102900:	e5d33000 	ldrb	r3, [r3]
 c102904:	e3530005 	cmp	r3, #5
 c102908:	0a000004 	beq	c102920 <OSFlagPend+0x88>
        *err = OS_ERR_EVENT_TYPE;
 c10290c:	e59b3004 	ldr	r3, [fp, #4]
 c102910:	e3a02001 	mov	r2, #1
 c102914:	e5c32000 	strb	r2, [r3]
        return ((OS_FLAGS)0);
 c102918:	e3a03000 	mov	r3, #0
 c10291c:	ea000132 	b	c102dec <OSFlagPend+0x554>
    }
    if (wait_type & OS_FLAG_CONSUME) {                     /* See if we need to consume the flags      */
 c102920:	e55b302b 	ldrb	r3, [fp, #-43]	; 0xffffffd5
 c102924:	e1a03c03 	lsl	r3, r3, #24
 c102928:	e1a03c43 	asr	r3, r3, #24
 c10292c:	e3530000 	cmp	r3, #0
 c102930:	aa000005 	bge	c10294c <OSFlagPend+0xb4>
        wait_type &= ~OS_FLAG_CONSUME;
 c102934:	e55b302b 	ldrb	r3, [fp, #-43]	; 0xffffffd5
 c102938:	e203307f 	and	r3, r3, #127	; 0x7f
 c10293c:	e54b302b 	strb	r3, [fp, #-43]	; 0xffffffd5
        consume    = TRUE;
 c102940:	e3a03001 	mov	r3, #1
 c102944:	e54b300d 	strb	r3, [fp, #-13]
 c102948:	ea000001 	b	c102954 <OSFlagPend+0xbc>
    } else {
        consume    = FALSE;
 c10294c:	e3a03000 	mov	r3, #0
 c102950:	e54b300d 	strb	r3, [fp, #-13]
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
 c102954:	e10f0000 	mrs	r0, CPSR
 c102958:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
 c10295c:	e38000c0 	orr	r0, r0, #192	; 0xc0
 c102960:	e121f000 	msr	CPSR_c, r0
    switch (wait_type) {
 c102964:	e55b302b 	ldrb	r3, [fp, #-43]	; 0xffffffd5
 c102968:	e3530003 	cmp	r3, #3
 c10296c:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
 c102970:	ea0000c1 	b	c102c7c <OSFlagPend+0x3e4>
 c102974:	0c102b00 	.word	0x0c102b00
 c102978:	0c102bc0 	.word	0x0c102bc0
 c10297c:	0c102984 	.word	0x0c102984
 c102980:	0c102a44 	.word	0x0c102a44
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = pgrp->OSFlagFlags & flags;        /* Extract only the bits we want            */
 c102984:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
 c102988:	e1d320b8 	ldrh	r2, [r3, #8]
 c10298c:	e15b32ba 	ldrh	r3, [fp, #-42]	; 0xffffffd6
 c102990:	e0023003 	and	r3, r2, r3
 c102994:	e14b31b0 	strh	r3, [fp, #-16]
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
 c102998:	e15b21b0 	ldrh	r2, [fp, #-16]
 c10299c:	e15b32ba 	ldrh	r3, [fp, #-42]	; 0xffffffd6
 c1029a0:	e1520003 	cmp	r2, r3
 c1029a4:	1a00001c 	bne	c102a1c <OSFlagPend+0x184>
                 if (consume == TRUE) {                    /* See if we need to consume the flags      */
 c1029a8:	e55b300d 	ldrb	r3, [fp, #-13]
 c1029ac:	e3530001 	cmp	r3, #1
 c1029b0:	1a00000e 	bne	c1029f0 <OSFlagPend+0x158>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
 c1029b4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
 c1029b8:	e1d330b8 	ldrh	r3, [r3, #8]
 c1029bc:	e1a03803 	lsl	r3, r3, #16
 c1029c0:	e1a02823 	lsr	r2, r3, #16
 c1029c4:	e15b31b0 	ldrh	r3, [fp, #-16]
 c1029c8:	e1e03003 	mvn	r3, r3
 c1029cc:	e1a03803 	lsl	r3, r3, #16
 c1029d0:	e1a03823 	lsr	r3, r3, #16
 c1029d4:	e0023003 	and	r3, r2, r3
 c1029d8:	e1a03803 	lsl	r3, r3, #16
 c1029dc:	e1a03823 	lsr	r3, r3, #16
 c1029e0:	e1a03803 	lsl	r3, r3, #16
 c1029e4:	e1a02823 	lsr	r2, r3, #16
 c1029e8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
 c1029ec:	e1c320b8 	strh	r2, [r3, #8]
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
 c1029f0:	e59f3408 	ldr	r3, [pc, #1032]	; c102e00 <OSFlagPend+0x568>
 c1029f4:	e5933000 	ldr	r3, [r3]
 c1029f8:	e15b21b0 	ldrh	r2, [fp, #-16]
 c1029fc:	e1c322b8 	strh	r2, [r3, #40]	; 0x28
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
 c102a00:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 c102a04:	e121f000 	msr	CPSR_c, r0
                 *err                    = OS_NO_ERR;
 c102a08:	e59b3004 	ldr	r3, [fp, #4]
 c102a0c:	e3a02000 	mov	r2, #0
 c102a10:	e5c32000 	strb	r2, [r3]
                 return (flags_rdy);
 c102a14:	e15b31b0 	ldrh	r3, [fp, #-16]
 c102a18:	ea0000f3 	b	c102dec <OSFlagPend+0x554>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
 c102a1c:	e24b1024 	sub	r1, fp, #36	; 0x24
 c102a20:	e15b22ba 	ldrh	r2, [fp, #-42]	; 0xffffffd6
 c102a24:	e55b302b 	ldrb	r3, [fp, #-43]	; 0xffffffd5
 c102a28:	e15b02be 	ldrh	r0, [fp, #-46]	; 0xffffffd2
 c102a2c:	e58d0000 	str	r0, [sp]
 c102a30:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
 c102a34:	eb00021e 	bl	c1032b4 <OS_FlagBlock>
                 OS_EXIT_CRITICAL();
 c102a38:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 c102a3c:	e121f000 	msr	CPSR_c, r0
             }
             break;
 c102a40:	ea000096 	b	c102ca0 <OSFlagPend+0x408>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = pgrp->OSFlagFlags & flags;        /* Extract only the bits we want            */
 c102a44:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
 c102a48:	e1d320b8 	ldrh	r2, [r3, #8]
 c102a4c:	e15b32ba 	ldrh	r3, [fp, #-42]	; 0xffffffd6
 c102a50:	e0023003 	and	r3, r2, r3
 c102a54:	e14b31b0 	strh	r3, [fp, #-16]
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
 c102a58:	e15b31b0 	ldrh	r3, [fp, #-16]
 c102a5c:	e3530000 	cmp	r3, #0
 c102a60:	0a00001c 	beq	c102ad8 <OSFlagPend+0x240>
                 if (consume == TRUE) {                    /* See if we need to consume the flags      */
 c102a64:	e55b300d 	ldrb	r3, [fp, #-13]
 c102a68:	e3530001 	cmp	r3, #1
 c102a6c:	1a00000e 	bne	c102aac <OSFlagPend+0x214>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
 c102a70:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
 c102a74:	e1d330b8 	ldrh	r3, [r3, #8]
 c102a78:	e1a03803 	lsl	r3, r3, #16
 c102a7c:	e1a02823 	lsr	r2, r3, #16
 c102a80:	e15b31b0 	ldrh	r3, [fp, #-16]
 c102a84:	e1e03003 	mvn	r3, r3
 c102a88:	e1a03803 	lsl	r3, r3, #16
 c102a8c:	e1a03823 	lsr	r3, r3, #16
 c102a90:	e0023003 	and	r3, r2, r3
 c102a94:	e1a03803 	lsl	r3, r3, #16
 c102a98:	e1a03823 	lsr	r3, r3, #16
 c102a9c:	e1a03803 	lsl	r3, r3, #16
 c102aa0:	e1a02823 	lsr	r2, r3, #16
 c102aa4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
 c102aa8:	e1c320b8 	strh	r2, [r3, #8]
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
 c102aac:	e59f334c 	ldr	r3, [pc, #844]	; c102e00 <OSFlagPend+0x568>
 c102ab0:	e5933000 	ldr	r3, [r3]
 c102ab4:	e15b21b0 	ldrh	r2, [fp, #-16]
 c102ab8:	e1c322b8 	strh	r2, [r3, #40]	; 0x28
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
 c102abc:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 c102ac0:	e121f000 	msr	CPSR_c, r0
                 *err                    = OS_NO_ERR;
 c102ac4:	e59b3004 	ldr	r3, [fp, #4]
 c102ac8:	e3a02000 	mov	r2, #0
 c102acc:	e5c32000 	strb	r2, [r3]
                 return (flags_rdy);
 c102ad0:	e15b31b0 	ldrh	r3, [fp, #-16]
 c102ad4:	ea0000c4 	b	c102dec <OSFlagPend+0x554>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
 c102ad8:	e24b1024 	sub	r1, fp, #36	; 0x24
 c102adc:	e15b22ba 	ldrh	r2, [fp, #-42]	; 0xffffffd6
 c102ae0:	e55b302b 	ldrb	r3, [fp, #-43]	; 0xffffffd5
 c102ae4:	e15b02be 	ldrh	r0, [fp, #-46]	; 0xffffffd2
 c102ae8:	e58d0000 	str	r0, [sp]
 c102aec:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
 c102af0:	eb0001ef 	bl	c1032b4 <OS_FlagBlock>
                 OS_EXIT_CRITICAL();
 c102af4:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 c102af8:	e121f000 	msr	CPSR_c, r0
             }
             break;
 c102afc:	ea000067 	b	c102ca0 <OSFlagPend+0x408>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = ~pgrp->OSFlagFlags & flags;       /* Extract only the bits we want            */
 c102b00:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
 c102b04:	e1d330b8 	ldrh	r3, [r3, #8]
 c102b08:	e1a03803 	lsl	r3, r3, #16
 c102b0c:	e1a03823 	lsr	r3, r3, #16
 c102b10:	e1e03003 	mvn	r3, r3
 c102b14:	e1a03803 	lsl	r3, r3, #16
 c102b18:	e1a02823 	lsr	r2, r3, #16
 c102b1c:	e15b32ba 	ldrh	r3, [fp, #-42]	; 0xffffffd6
 c102b20:	e0023003 	and	r3, r2, r3
 c102b24:	e1a03803 	lsl	r3, r3, #16
 c102b28:	e1a03823 	lsr	r3, r3, #16
 c102b2c:	e14b31b0 	strh	r3, [fp, #-16]
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
 c102b30:	e15b21b0 	ldrh	r2, [fp, #-16]
 c102b34:	e15b32ba 	ldrh	r3, [fp, #-42]	; 0xffffffd6
 c102b38:	e1520003 	cmp	r2, r3
 c102b3c:	1a000015 	bne	c102b98 <OSFlagPend+0x300>
                 if (consume == TRUE) {                    /* See if we need to consume the flags      */
 c102b40:	e55b300d 	ldrb	r3, [fp, #-13]
 c102b44:	e3530001 	cmp	r3, #1
 c102b48:	1a000007 	bne	c102b6c <OSFlagPend+0x2d4>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
 c102b4c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
 c102b50:	e1d320b8 	ldrh	r2, [r3, #8]
 c102b54:	e15b31b0 	ldrh	r3, [fp, #-16]
 c102b58:	e1823003 	orr	r3, r2, r3
 c102b5c:	e1a03803 	lsl	r3, r3, #16
 c102b60:	e1a02823 	lsr	r2, r3, #16
 c102b64:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
 c102b68:	e1c320b8 	strh	r2, [r3, #8]
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
 c102b6c:	e59f328c 	ldr	r3, [pc, #652]	; c102e00 <OSFlagPend+0x568>
 c102b70:	e5933000 	ldr	r3, [r3]
 c102b74:	e15b21b0 	ldrh	r2, [fp, #-16]
 c102b78:	e1c322b8 	strh	r2, [r3, #40]	; 0x28
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
 c102b7c:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 c102b80:	e121f000 	msr	CPSR_c, r0
                 *err                    = OS_NO_ERR;
 c102b84:	e59b3004 	ldr	r3, [fp, #4]
 c102b88:	e3a02000 	mov	r2, #0
 c102b8c:	e5c32000 	strb	r2, [r3]
                 return (flags_rdy);
 c102b90:	e15b31b0 	ldrh	r3, [fp, #-16]
 c102b94:	ea000094 	b	c102dec <OSFlagPend+0x554>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
 c102b98:	e24b1024 	sub	r1, fp, #36	; 0x24
 c102b9c:	e15b22ba 	ldrh	r2, [fp, #-42]	; 0xffffffd6
 c102ba0:	e55b302b 	ldrb	r3, [fp, #-43]	; 0xffffffd5
 c102ba4:	e15b02be 	ldrh	r0, [fp, #-46]	; 0xffffffd2
 c102ba8:	e58d0000 	str	r0, [sp]
 c102bac:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
 c102bb0:	eb0001bf 	bl	c1032b4 <OS_FlagBlock>
                 OS_EXIT_CRITICAL();
 c102bb4:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 c102bb8:	e121f000 	msr	CPSR_c, r0
             }
             break;
 c102bbc:	ea000037 	b	c102ca0 <OSFlagPend+0x408>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = ~pgrp->OSFlagFlags & flags;       /* Extract only the bits we want            */
 c102bc0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
 c102bc4:	e1d330b8 	ldrh	r3, [r3, #8]
 c102bc8:	e1a03803 	lsl	r3, r3, #16
 c102bcc:	e1a03823 	lsr	r3, r3, #16
 c102bd0:	e1e03003 	mvn	r3, r3
 c102bd4:	e1a03803 	lsl	r3, r3, #16
 c102bd8:	e1a02823 	lsr	r2, r3, #16
 c102bdc:	e15b32ba 	ldrh	r3, [fp, #-42]	; 0xffffffd6
 c102be0:	e0023003 	and	r3, r2, r3
 c102be4:	e1a03803 	lsl	r3, r3, #16
 c102be8:	e1a03823 	lsr	r3, r3, #16
 c102bec:	e14b31b0 	strh	r3, [fp, #-16]
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
 c102bf0:	e15b31b0 	ldrh	r3, [fp, #-16]
 c102bf4:	e3530000 	cmp	r3, #0
 c102bf8:	0a000015 	beq	c102c54 <OSFlagPend+0x3bc>
                 if (consume == TRUE) {                    /* See if we need to consume the flags      */
 c102bfc:	e55b300d 	ldrb	r3, [fp, #-13]
 c102c00:	e3530001 	cmp	r3, #1
 c102c04:	1a000007 	bne	c102c28 <OSFlagPend+0x390>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
 c102c08:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
 c102c0c:	e1d320b8 	ldrh	r2, [r3, #8]
 c102c10:	e15b31b0 	ldrh	r3, [fp, #-16]
 c102c14:	e1823003 	orr	r3, r2, r3
 c102c18:	e1a03803 	lsl	r3, r3, #16
 c102c1c:	e1a02823 	lsr	r2, r3, #16
 c102c20:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
 c102c24:	e1c320b8 	strh	r2, [r3, #8]
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
 c102c28:	e59f31d0 	ldr	r3, [pc, #464]	; c102e00 <OSFlagPend+0x568>
 c102c2c:	e5933000 	ldr	r3, [r3]
 c102c30:	e15b21b0 	ldrh	r2, [fp, #-16]
 c102c34:	e1c322b8 	strh	r2, [r3, #40]	; 0x28
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
 c102c38:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 c102c3c:	e121f000 	msr	CPSR_c, r0
                 *err                    = OS_NO_ERR;
 c102c40:	e59b3004 	ldr	r3, [fp, #4]
 c102c44:	e3a02000 	mov	r2, #0
 c102c48:	e5c32000 	strb	r2, [r3]
                 return (flags_rdy);
 c102c4c:	e15b31b0 	ldrh	r3, [fp, #-16]
 c102c50:	ea000065 	b	c102dec <OSFlagPend+0x554>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
 c102c54:	e24b1024 	sub	r1, fp, #36	; 0x24
 c102c58:	e15b22ba 	ldrh	r2, [fp, #-42]	; 0xffffffd6
 c102c5c:	e55b302b 	ldrb	r3, [fp, #-43]	; 0xffffffd5
 c102c60:	e15b02be 	ldrh	r0, [fp, #-46]	; 0xffffffd2
 c102c64:	e58d0000 	str	r0, [sp]
 c102c68:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
 c102c6c:	eb000190 	bl	c1032b4 <OS_FlagBlock>
                 OS_EXIT_CRITICAL();
 c102c70:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 c102c74:	e121f000 	msr	CPSR_c, r0
             }
             break;
 c102c78:	ea000008 	b	c102ca0 <OSFlagPend+0x408>
#endif

        default:
             OS_EXIT_CRITICAL();
 c102c7c:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 c102c80:	e121f000 	msr	CPSR_c, r0
             flags_rdy = (OS_FLAGS)0;
 c102c84:	e3a03000 	mov	r3, #0
 c102c88:	e14b31b0 	strh	r3, [fp, #-16]
             *err      = OS_FLAG_ERR_WAIT_TYPE;
 c102c8c:	e59b3004 	ldr	r3, [fp, #4]
 c102c90:	e3e02068 	mvn	r2, #104	; 0x68
 c102c94:	e5c32000 	strb	r2, [r3]
             return (flags_rdy);
 c102c98:	e15b31b0 	ldrh	r3, [fp, #-16]
 c102c9c:	ea000052 	b	c102dec <OSFlagPend+0x554>
    }
    OS_Sched();                                            /* Find next HPT ready to run               */
 c102ca0:	ebfffa8f 	bl	c1016e4 <OS_Sched>
    OS_ENTER_CRITICAL();
 c102ca4:	e10f0000 	mrs	r0, CPSR
 c102ca8:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
 c102cac:	e38000c0 	orr	r0, r0, #192	; 0xc0
 c102cb0:	e121f000 	msr	CPSR_c, r0
    if (OSTCBCur->OSTCBPendTO == TRUE) {                   /* Have we timed-out?                       */
 c102cb4:	e59f3144 	ldr	r3, [pc, #324]	; c102e00 <OSFlagPend+0x568>
 c102cb8:	e5933000 	ldr	r3, [r3]
 c102cbc:	e5d3302d 	ldrb	r3, [r3, #45]	; 0x2d
 c102cc0:	e3530001 	cmp	r3, #1
 c102cc4:	1a000013 	bne	c102d18 <OSFlagPend+0x480>
        OSTCBCur->OSTCBPendTO = FALSE;
 c102cc8:	e59f3130 	ldr	r3, [pc, #304]	; c102e00 <OSFlagPend+0x568>
 c102ccc:	e5933000 	ldr	r3, [r3]
 c102cd0:	e3a02000 	mov	r2, #0
 c102cd4:	e5c3202d 	strb	r2, [r3, #45]	; 0x2d
        OS_FlagUnlink(&node);
 c102cd8:	e24b3024 	sub	r3, fp, #36	; 0x24
 c102cdc:	e1a00003 	mov	r0, r3
 c102ce0:	eb00025b 	bl	c103654 <OS_FlagUnlink>
        OSTCBCur->OSTCBStat   = OS_STAT_RDY;               /* Yes, make task ready-to-run              */
 c102ce4:	e59f3114 	ldr	r3, [pc, #276]	; c102e00 <OSFlagPend+0x568>
 c102ce8:	e5933000 	ldr	r3, [r3]
 c102cec:	e3a02000 	mov	r2, #0
 c102cf0:	e5c3202c 	strb	r2, [r3, #44]	; 0x2c
        OS_EXIT_CRITICAL();
 c102cf4:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 c102cf8:	e121f000 	msr	CPSR_c, r0
        flags_rdy             = (OS_FLAGS)0;
 c102cfc:	e3a03000 	mov	r3, #0
 c102d00:	e14b31b0 	strh	r3, [fp, #-16]
        *err                  = OS_TIMEOUT;                /* Indicate that we timed-out waiting       */
 c102d04:	e59b3004 	ldr	r3, [fp, #4]
 c102d08:	e3a0200a 	mov	r2, #10
 c102d0c:	e5c32000 	strb	r2, [r3]
        return (flags_rdy);
 c102d10:	e15b31b0 	ldrh	r3, [fp, #-16]
 c102d14:	ea000034 	b	c102dec <OSFlagPend+0x554>
    } 
    flags_rdy = OSTCBCur->OSTCBFlagsRdy;
 c102d18:	e59f30e0 	ldr	r3, [pc, #224]	; c102e00 <OSFlagPend+0x568>
 c102d1c:	e5933000 	ldr	r3, [r3]
 c102d20:	e1d332b8 	ldrh	r3, [r3, #40]	; 0x28
 c102d24:	e14b31b0 	strh	r3, [fp, #-16]
    if (consume == TRUE) {                                 /* See if we need to consume the flags      */
 c102d28:	e55b300d 	ldrb	r3, [fp, #-13]
 c102d2c:	e3530001 	cmp	r3, #1
 c102d30:	1a000027 	bne	c102dd4 <OSFlagPend+0x53c>
        switch (wait_type) {
 c102d34:	e55b302b 	ldrb	r3, [fp, #-43]	; 0xffffffd5
 c102d38:	e3530003 	cmp	r3, #3
 c102d3c:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
 c102d40:	ea00001c 	b	c102db8 <OSFlagPend+0x520>
 c102d44:	0c102d94 	.word	0x0c102d94
 c102d48:	0c102d94 	.word	0x0c102d94
 c102d4c:	0c102d54 	.word	0x0c102d54
 c102d50:	0c102d54 	.word	0x0c102d54
            case OS_FLAG_WAIT_SET_ALL:
            case OS_FLAG_WAIT_SET_ANY:                     /* Clear ONLY the flags we got              */
                 pgrp->OSFlagFlags &= ~flags_rdy;
 c102d54:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
 c102d58:	e1d330b8 	ldrh	r3, [r3, #8]
 c102d5c:	e1a03803 	lsl	r3, r3, #16
 c102d60:	e1a02823 	lsr	r2, r3, #16
 c102d64:	e15b31b0 	ldrh	r3, [fp, #-16]
 c102d68:	e1e03003 	mvn	r3, r3
 c102d6c:	e1a03803 	lsl	r3, r3, #16
 c102d70:	e1a03823 	lsr	r3, r3, #16
 c102d74:	e0023003 	and	r3, r2, r3
 c102d78:	e1a03803 	lsl	r3, r3, #16
 c102d7c:	e1a03823 	lsr	r3, r3, #16
 c102d80:	e1a03803 	lsl	r3, r3, #16
 c102d84:	e1a02823 	lsr	r2, r3, #16
 c102d88:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
 c102d8c:	e1c320b8 	strh	r2, [r3, #8]
                 break;
 c102d90:	ea00000f 	b	c102dd4 <OSFlagPend+0x53c>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:
            case OS_FLAG_WAIT_CLR_ANY:                     /* Set   ONLY the flags we got              */
                 pgrp->OSFlagFlags |=  flags_rdy;
 c102d94:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
 c102d98:	e1d320b8 	ldrh	r2, [r3, #8]
 c102d9c:	e15b31b0 	ldrh	r3, [fp, #-16]
 c102da0:	e1823003 	orr	r3, r2, r3
 c102da4:	e1a03803 	lsl	r3, r3, #16
 c102da8:	e1a02823 	lsr	r2, r3, #16
 c102dac:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
 c102db0:	e1c320b8 	strh	r2, [r3, #8]
                 break;
 c102db4:	ea000006 	b	c102dd4 <OSFlagPend+0x53c>
#endif
            default:
                 OS_EXIT_CRITICAL();
 c102db8:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 c102dbc:	e121f000 	msr	CPSR_c, r0
                 *err = OS_FLAG_ERR_WAIT_TYPE;
 c102dc0:	e59b3004 	ldr	r3, [fp, #4]
 c102dc4:	e3e02068 	mvn	r2, #104	; 0x68
 c102dc8:	e5c32000 	strb	r2, [r3]
                 return ((OS_FLAGS)0);
 c102dcc:	e3a03000 	mov	r3, #0
 c102dd0:	ea000005 	b	c102dec <OSFlagPend+0x554>
        }
    }
    OS_EXIT_CRITICAL();
 c102dd4:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 c102dd8:	e121f000 	msr	CPSR_c, r0
    *err = OS_NO_ERR;                                      /* Event(s) must have occurred              */
 c102ddc:	e59b3004 	ldr	r3, [fp, #4]
 c102de0:	e3a02000 	mov	r2, #0
 c102de4:	e5c32000 	strb	r2, [r3]
    return (flags_rdy);
 c102de8:	e15b31b0 	ldrh	r3, [fp, #-16]
}
 c102dec:	e1a00003 	mov	r0, r3
 c102df0:	e24bd00c 	sub	sp, fp, #12
 c102df4:	e89d6800 	ldm	sp, {fp, sp, lr}
 c102df8:	e12fff1e 	bx	lr
 c102dfc:	0c119ca8 	.word	0x0c119ca8
 c102e00:	0c119cac 	.word	0x0c119cac

0c102e04 <OSFlagPendGetFlagsRdy>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPendGetFlagsRdy (void)
{
 c102e04:	e1a0c00d 	mov	ip, sp
 c102e08:	e92dd800 	push	{fp, ip, lr, pc}
 c102e0c:	e24cb004 	sub	fp, ip, #4
 c102e10:	e24dd008 	sub	sp, sp, #8



    cpu_sr = 0;                                            /* Prevent compiler warning                 */
#endif    
    OS_ENTER_CRITICAL();
 c102e14:	e10f0000 	mrs	r0, CPSR
 c102e18:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
 c102e1c:	e38000c0 	orr	r0, r0, #192	; 0xc0
 c102e20:	e121f000 	msr	CPSR_c, r0
    flags = OSTCBCur->OSTCBFlagsRdy;
 c102e24:	e59f3024 	ldr	r3, [pc, #36]	; c102e50 <OSFlagPendGetFlagsRdy+0x4c>
 c102e28:	e5933000 	ldr	r3, [r3]
 c102e2c:	e1d332b8 	ldrh	r3, [r3, #40]	; 0x28
 c102e30:	e14b30be 	strh	r3, [fp, #-14]
    OS_EXIT_CRITICAL();
 c102e34:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 c102e38:	e121f000 	msr	CPSR_c, r0
    return (flags);
 c102e3c:	e15b30be 	ldrh	r3, [fp, #-14]
}
 c102e40:	e1a00003 	mov	r0, r3
 c102e44:	e24bd00c 	sub	sp, fp, #12
 c102e48:	e89d6800 	ldm	sp, {fp, sp, lr}
 c102e4c:	e12fff1e 	bx	lr
 c102e50:	0c119cac 	.word	0x0c119cac

0c102e54 <OSFlagPost>:
*              2) The amount of time interrupts are DISABLED depends on the number of tasks waiting on
*                 the event flag group.
*********************************************************************************************************
*/
OS_FLAGS  OSFlagPost (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U opt, INT8U *err)
{
 c102e54:	e1a0c00d 	mov	ip, sp
 c102e58:	e92dd800 	push	{fp, ip, lr, pc}
 c102e5c:	e24cb004 	sub	fp, ip, #4
 c102e60:	e24dd020 	sub	sp, sp, #32
 c102e64:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
 c102e68:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
 c102e6c:	e14b12b2 	strh	r1, [fp, #-34]	; 0xffffffde
 c102e70:	e1a03002 	mov	r3, r2
 c102e74:	e54b3023 	strb	r3, [fp, #-35]	; 0xffffffdd


    cpu_sr = 0;                                      /* Prevent compiler warning                       */
#endif    
#if OS_ARG_CHK_EN > 0
    if (pgrp == (OS_FLAG_GRP *)0) {                  /* Validate 'pgrp'                                */
 c102e78:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c102e7c:	e3530000 	cmp	r3, #0
 c102e80:	1a000004 	bne	c102e98 <OSFlagPost+0x44>
        *err = OS_FLAG_INVALID_PGRP;
 c102e84:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
 c102e88:	e3e02069 	mvn	r2, #105	; 0x69
 c102e8c:	e5c32000 	strb	r2, [r3]
        return ((OS_FLAGS)0);
 c102e90:	e3a03000 	mov	r3, #0
 c102e94:	ea0000da 	b	c103204 <OSFlagPost+0x3b0>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {    /* Make sure we are pointing to an event flag grp */
 c102e98:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c102e9c:	e5d33000 	ldrb	r3, [r3]
 c102ea0:	e3530005 	cmp	r3, #5
 c102ea4:	0a000004 	beq	c102ebc <OSFlagPost+0x68>
        *err = OS_ERR_EVENT_TYPE;
 c102ea8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
 c102eac:	e3a02001 	mov	r2, #1
 c102eb0:	e5c32000 	strb	r2, [r3]
        return ((OS_FLAGS)0);
 c102eb4:	e3a03000 	mov	r3, #0
 c102eb8:	ea0000d1 	b	c103204 <OSFlagPost+0x3b0>
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
 c102ebc:	e10f0000 	mrs	r0, CPSR
 c102ec0:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
 c102ec4:	e38000c0 	orr	r0, r0, #192	; 0xc0
 c102ec8:	e121f000 	msr	CPSR_c, r0
    switch (opt) {
 c102ecc:	e55b3023 	ldrb	r3, [fp, #-35]	; 0xffffffdd
 c102ed0:	e3530000 	cmp	r3, #0
 c102ed4:	0a000002 	beq	c102ee4 <OSFlagPost+0x90>
 c102ed8:	e3530001 	cmp	r3, #1
 c102edc:	0a000010 	beq	c102f24 <OSFlagPost+0xd0>
 c102ee0:	ea000018 	b	c102f48 <OSFlagPost+0xf4>
        case OS_FLAG_CLR:
             pgrp->OSFlagFlags &= ~flags;            /* Clear the flags specified in the group         */
 c102ee4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c102ee8:	e1d330b8 	ldrh	r3, [r3, #8]
 c102eec:	e1a03803 	lsl	r3, r3, #16
 c102ef0:	e1a02823 	lsr	r2, r3, #16
 c102ef4:	e15b32b2 	ldrh	r3, [fp, #-34]	; 0xffffffde
 c102ef8:	e1e03003 	mvn	r3, r3
 c102efc:	e1a03803 	lsl	r3, r3, #16
 c102f00:	e1a03823 	lsr	r3, r3, #16
 c102f04:	e0023003 	and	r3, r2, r3
 c102f08:	e1a03803 	lsl	r3, r3, #16
 c102f0c:	e1a03823 	lsr	r3, r3, #16
 c102f10:	e1a03803 	lsl	r3, r3, #16
 c102f14:	e1a02823 	lsr	r2, r3, #16
 c102f18:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c102f1c:	e1c320b8 	strh	r2, [r3, #8]
             break;
 c102f20:	ea00000f 	b	c102f64 <OSFlagPost+0x110>

        case OS_FLAG_SET:
             pgrp->OSFlagFlags |=  flags;            /* Set   the flags specified in the group         */
 c102f24:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c102f28:	e1d320b8 	ldrh	r2, [r3, #8]
 c102f2c:	e15b32b2 	ldrh	r3, [fp, #-34]	; 0xffffffde
 c102f30:	e1823003 	orr	r3, r2, r3
 c102f34:	e1a03803 	lsl	r3, r3, #16
 c102f38:	e1a02823 	lsr	r2, r3, #16
 c102f3c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c102f40:	e1c320b8 	strh	r2, [r3, #8]
             break;
 c102f44:	ea000006 	b	c102f64 <OSFlagPost+0x110>

        default:
             OS_EXIT_CRITICAL();                     /* INVALID option                                 */
 c102f48:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 c102f4c:	e121f000 	msr	CPSR_c, r0
             *err = OS_FLAG_INVALID_OPT;
 c102f50:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
 c102f54:	e3e02066 	mvn	r2, #102	; 0x66
 c102f58:	e5c32000 	strb	r2, [r3]
             return ((OS_FLAGS)0);
 c102f5c:	e3a03000 	mov	r3, #0
 c102f60:	ea0000a7 	b	c103204 <OSFlagPost+0x3b0>
    }
    sched = FALSE;                                   /* Indicate that we don't need rescheduling       */
 c102f64:	e3a03000 	mov	r3, #0
 c102f68:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
 c102f6c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c102f70:	e5933004 	ldr	r3, [r3, #4]
 c102f74:	e50b3010 	str	r3, [fp, #-16]
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
 c102f78:	ea00008b 	b	c1031ac <OSFlagPost+0x358>
        switch (pnode->OSFlagNodeWaitType) {
 c102f7c:	e51b3010 	ldr	r3, [fp, #-16]
 c102f80:	e5d33012 	ldrb	r3, [r3, #18]
 c102f84:	e3530003 	cmp	r3, #3
 c102f88:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
 c102f8c:	ea00006d 	b	c103148 <OSFlagPost+0x2f4>
 c102f90:	0c103050 	.word	0x0c103050
 c102f94:	0c1030d0 	.word	0x0c1030d0
 c102f98:	0c102fa0 	.word	0x0c102fa0
 c102f9c:	0c102ffc 	.word	0x0c102ffc
            case OS_FLAG_WAIT_SET_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = pgrp->OSFlagFlags & pnode->OSFlagNodeFlags;
 c102fa0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c102fa4:	e1d320b8 	ldrh	r2, [r3, #8]
 c102fa8:	e51b3010 	ldr	r3, [fp, #-16]
 c102fac:	e1d331b0 	ldrh	r3, [r3, #16]
 c102fb0:	e0023003 	and	r3, r2, r3
 c102fb4:	e14b31b4 	strh	r3, [fp, #-20]	; 0xffffffec
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
 c102fb8:	e51b3010 	ldr	r3, [fp, #-16]
 c102fbc:	e1d331b0 	ldrh	r3, [r3, #16]
 c102fc0:	e15b21b4 	ldrh	r2, [fp, #-20]	; 0xffffffec
 c102fc4:	e1520003 	cmp	r2, r3
 c102fc8:	1a000065 	bne	c103164 <OSFlagPost+0x310>
				     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
 c102fcc:	e15b31b4 	ldrh	r3, [fp, #-20]	; 0xffffffec
 c102fd0:	e51b0010 	ldr	r0, [fp, #-16]
 c102fd4:	e1a01003 	mov	r1, r3
 c102fd8:	eb00015e 	bl	c103558 <OS_FlagTaskRdy>
 c102fdc:	e1a03000 	mov	r3, r0
 c102fe0:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
                     if (rdy == TRUE) {                     
 c102fe4:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
 c102fe8:	e3530001 	cmp	r3, #1
 c102fec:	1a00005e 	bne	c10316c <OSFlagPost+0x318>
                         sched = TRUE;                        /* When done we will reschedule          */
 c102ff0:	e3a03001 	mov	r3, #1
 c102ff4:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
                     }
                 }
                 break;
 c102ff8:	ea000068 	b	c1031a0 <OSFlagPost+0x34c>

            case OS_FLAG_WAIT_SET_ANY:               /* See if any flag set                            */
                 flags_rdy = pgrp->OSFlagFlags & pnode->OSFlagNodeFlags;
 c102ffc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c103000:	e1d320b8 	ldrh	r2, [r3, #8]
 c103004:	e51b3010 	ldr	r3, [fp, #-16]
 c103008:	e1d331b0 	ldrh	r3, [r3, #16]
 c10300c:	e0023003 	and	r3, r2, r3
 c103010:	e14b31b4 	strh	r3, [fp, #-20]	; 0xffffffec
                 if (flags_rdy != (OS_FLAGS)0) {
 c103014:	e15b31b4 	ldrh	r3, [fp, #-20]	; 0xffffffec
 c103018:	e3530000 	cmp	r3, #0
 c10301c:	0a000054 	beq	c103174 <OSFlagPost+0x320>
				     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
 c103020:	e15b31b4 	ldrh	r3, [fp, #-20]	; 0xffffffec
 c103024:	e51b0010 	ldr	r0, [fp, #-16]
 c103028:	e1a01003 	mov	r1, r3
 c10302c:	eb000149 	bl	c103558 <OS_FlagTaskRdy>
 c103030:	e1a03000 	mov	r3, r0
 c103034:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
                     if (rdy == TRUE) {                      
 c103038:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
 c10303c:	e3530001 	cmp	r3, #1
 c103040:	1a00004d 	bne	c10317c <OSFlagPost+0x328>
                         sched = TRUE;                        /* When done we will reschedule          */
 c103044:	e3a03001 	mov	r3, #1
 c103048:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
                     }
                 }
                 break;
 c10304c:	ea000053 	b	c1031a0 <OSFlagPost+0x34c>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = ~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags;
 c103050:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c103054:	e1d330b8 	ldrh	r3, [r3, #8]
 c103058:	e1a03803 	lsl	r3, r3, #16
 c10305c:	e1a03823 	lsr	r3, r3, #16
 c103060:	e1e03003 	mvn	r3, r3
 c103064:	e1a03803 	lsl	r3, r3, #16
 c103068:	e1a02823 	lsr	r2, r3, #16
 c10306c:	e51b3010 	ldr	r3, [fp, #-16]
 c103070:	e1d331b0 	ldrh	r3, [r3, #16]
 c103074:	e1a03803 	lsl	r3, r3, #16
 c103078:	e1a03823 	lsr	r3, r3, #16
 c10307c:	e0023003 	and	r3, r2, r3
 c103080:	e1a03803 	lsl	r3, r3, #16
 c103084:	e1a03823 	lsr	r3, r3, #16
 c103088:	e14b31b4 	strh	r3, [fp, #-20]	; 0xffffffec
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
 c10308c:	e51b3010 	ldr	r3, [fp, #-16]
 c103090:	e1d331b0 	ldrh	r3, [r3, #16]
 c103094:	e15b21b4 	ldrh	r2, [fp, #-20]	; 0xffffffec
 c103098:	e1520003 	cmp	r2, r3
 c10309c:	1a000038 	bne	c103184 <OSFlagPost+0x330>
				     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
 c1030a0:	e15b31b4 	ldrh	r3, [fp, #-20]	; 0xffffffec
 c1030a4:	e51b0010 	ldr	r0, [fp, #-16]
 c1030a8:	e1a01003 	mov	r1, r3
 c1030ac:	eb000129 	bl	c103558 <OS_FlagTaskRdy>
 c1030b0:	e1a03000 	mov	r3, r0
 c1030b4:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
                     if (rdy == TRUE) {                       
 c1030b8:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
 c1030bc:	e3530001 	cmp	r3, #1
 c1030c0:	1a000031 	bne	c10318c <OSFlagPost+0x338>
                         sched = TRUE;                        /* When done we will reschedule          */
 c1030c4:	e3a03001 	mov	r3, #1
 c1030c8:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
                     }
                 }
                 break;
 c1030cc:	ea000033 	b	c1031a0 <OSFlagPost+0x34c>

            case OS_FLAG_WAIT_CLR_ANY:               /* See if any flag set                            */
                 flags_rdy = ~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags;
 c1030d0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c1030d4:	e1d330b8 	ldrh	r3, [r3, #8]
 c1030d8:	e1a03803 	lsl	r3, r3, #16
 c1030dc:	e1a03823 	lsr	r3, r3, #16
 c1030e0:	e1e03003 	mvn	r3, r3
 c1030e4:	e1a03803 	lsl	r3, r3, #16
 c1030e8:	e1a02823 	lsr	r2, r3, #16
 c1030ec:	e51b3010 	ldr	r3, [fp, #-16]
 c1030f0:	e1d331b0 	ldrh	r3, [r3, #16]
 c1030f4:	e1a03803 	lsl	r3, r3, #16
 c1030f8:	e1a03823 	lsr	r3, r3, #16
 c1030fc:	e0023003 	and	r3, r2, r3
 c103100:	e1a03803 	lsl	r3, r3, #16
 c103104:	e1a03823 	lsr	r3, r3, #16
 c103108:	e14b31b4 	strh	r3, [fp, #-20]	; 0xffffffec
                 if (flags_rdy != (OS_FLAGS)0) {
 c10310c:	e15b31b4 	ldrh	r3, [fp, #-20]	; 0xffffffec
 c103110:	e3530000 	cmp	r3, #0
 c103114:	0a00001e 	beq	c103194 <OSFlagPost+0x340>
				     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
 c103118:	e15b31b4 	ldrh	r3, [fp, #-20]	; 0xffffffec
 c10311c:	e51b0010 	ldr	r0, [fp, #-16]
 c103120:	e1a01003 	mov	r1, r3
 c103124:	eb00010b 	bl	c103558 <OS_FlagTaskRdy>
 c103128:	e1a03000 	mov	r3, r0
 c10312c:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
                     if (rdy == TRUE) {                       
 c103130:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
 c103134:	e3530001 	cmp	r3, #1
 c103138:	1a000017 	bne	c10319c <OSFlagPost+0x348>
                         sched = TRUE;                        /* When done we will reschedule          */
 c10313c:	e3a03001 	mov	r3, #1
 c103140:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
                     }
                 }
                 break;
 c103144:	ea000015 	b	c1031a0 <OSFlagPost+0x34c>
#endif
            default:
                 OS_EXIT_CRITICAL();
 c103148:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 c10314c:	e121f000 	msr	CPSR_c, r0
                 *err = OS_FLAG_ERR_WAIT_TYPE;
 c103150:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
 c103154:	e3e02068 	mvn	r2, #104	; 0x68
 c103158:	e5c32000 	strb	r2, [r3]
                 return ((OS_FLAGS)0);
 c10315c:	e3a03000 	mov	r3, #0
 c103160:	ea000027 	b	c103204 <OSFlagPost+0x3b0>
				     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == TRUE) {                     
                         sched = TRUE;                        /* When done we will reschedule          */
                     }
                 }
                 break;
 c103164:	e1a00000 	nop			; (mov r0, r0)
 c103168:	ea00000c 	b	c1031a0 <OSFlagPost+0x34c>
 c10316c:	e1a00000 	nop			; (mov r0, r0)
 c103170:	ea00000a 	b	c1031a0 <OSFlagPost+0x34c>
				     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == TRUE) {                      
                         sched = TRUE;                        /* When done we will reschedule          */
                     }
                 }
                 break;
 c103174:	e1a00000 	nop			; (mov r0, r0)
 c103178:	ea000008 	b	c1031a0 <OSFlagPost+0x34c>
 c10317c:	e1a00000 	nop			; (mov r0, r0)
 c103180:	ea000006 	b	c1031a0 <OSFlagPost+0x34c>
				     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == TRUE) {                       
                         sched = TRUE;                        /* When done we will reschedule          */
                     }
                 }
                 break;
 c103184:	e1a00000 	nop			; (mov r0, r0)
 c103188:	ea000004 	b	c1031a0 <OSFlagPost+0x34c>
 c10318c:	e1a00000 	nop			; (mov r0, r0)
 c103190:	ea000002 	b	c1031a0 <OSFlagPost+0x34c>
				     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == TRUE) {                       
                         sched = TRUE;                        /* When done we will reschedule          */
                     }
                 }
                 break;
 c103194:	e1a00000 	nop			; (mov r0, r0)
 c103198:	ea000000 	b	c1031a0 <OSFlagPost+0x34c>
 c10319c:	e1a00000 	nop			; (mov r0, r0)
            default:
                 OS_EXIT_CRITICAL();
                 *err = OS_FLAG_ERR_WAIT_TYPE;
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
 c1031a0:	e51b3010 	ldr	r3, [fp, #-16]
 c1031a4:	e5933000 	ldr	r3, [r3]
 c1031a8:	e50b3010 	str	r3, [fp, #-16]
             *err = OS_FLAG_INVALID_OPT;
             return ((OS_FLAGS)0);
    }
    sched = FALSE;                                   /* Indicate that we don't need rescheduling       */
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
 c1031ac:	e51b3010 	ldr	r3, [fp, #-16]
 c1031b0:	e3530000 	cmp	r3, #0
 c1031b4:	1affff70 	bne	c102f7c <OSFlagPost+0x128>
                 *err = OS_FLAG_ERR_WAIT_TYPE;
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
    }
    OS_EXIT_CRITICAL();
 c1031b8:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 c1031bc:	e121f000 	msr	CPSR_c, r0
    if (sched == TRUE) {
 c1031c0:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c1031c4:	e3530001 	cmp	r3, #1
 c1031c8:	1a000000 	bne	c1031d0 <OSFlagPost+0x37c>
        OS_Sched();
 c1031cc:	ebfff944 	bl	c1016e4 <OS_Sched>
    }
    OS_ENTER_CRITICAL();
 c1031d0:	e10f0000 	mrs	r0, CPSR
 c1031d4:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
 c1031d8:	e38000c0 	orr	r0, r0, #192	; 0xc0
 c1031dc:	e121f000 	msr	CPSR_c, r0
    flags_cur = pgrp->OSFlagFlags;
 c1031e0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c1031e4:	e1d330b8 	ldrh	r3, [r3, #8]
 c1031e8:	e14b31b8 	strh	r3, [fp, #-24]	; 0xffffffe8
    OS_EXIT_CRITICAL();
 c1031ec:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 c1031f0:	e121f000 	msr	CPSR_c, r0
    *err      = OS_NO_ERR;
 c1031f4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
 c1031f8:	e3a02000 	mov	r2, #0
 c1031fc:	e5c32000 	strb	r2, [r3]
    return (flags_cur);
 c103200:	e15b31b8 	ldrh	r3, [fp, #-24]	; 0xffffffe8
}
 c103204:	e1a00003 	mov	r0, r3
 c103208:	e24bd00c 	sub	sp, fp, #12
 c10320c:	e89d6800 	ldm	sp, {fp, sp, lr}
 c103210:	e12fff1e 	bx	lr

0c103214 <OSFlagQuery>:
*********************************************************************************************************
*/

#if OS_FLAG_QUERY_EN > 0
OS_FLAGS  OSFlagQuery (OS_FLAG_GRP *pgrp, INT8U *err)
{
 c103214:	e1a0c00d 	mov	ip, sp
 c103218:	e92dd800 	push	{fp, ip, lr, pc}
 c10321c:	e24cb004 	sub	fp, ip, #4
 c103220:	e24dd010 	sub	sp, sp, #16
 c103224:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
 c103228:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4


    cpu_sr = 0;                                   /* Prevent compiler warning                          */
#endif    
#if OS_ARG_CHK_EN > 0
    if (pgrp == (OS_FLAG_GRP *)0) {               /* Validate 'pgrp'                                   */
 c10322c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c103230:	e3530000 	cmp	r3, #0
 c103234:	1a000004 	bne	c10324c <OSFlagQuery+0x38>
        *err = OS_FLAG_INVALID_PGRP;
 c103238:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 c10323c:	e3e02069 	mvn	r2, #105	; 0x69
 c103240:	e5c32000 	strb	r2, [r3]
        return ((OS_FLAGS)0);
 c103244:	e3a03000 	mov	r3, #0
 c103248:	ea000015 	b	c1032a4 <OSFlagQuery+0x90>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) { /* Validate event block type                         */
 c10324c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c103250:	e5d33000 	ldrb	r3, [r3]
 c103254:	e3530005 	cmp	r3, #5
 c103258:	0a000004 	beq	c103270 <OSFlagQuery+0x5c>
        *err = OS_ERR_EVENT_TYPE;
 c10325c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 c103260:	e3a02001 	mov	r2, #1
 c103264:	e5c32000 	strb	r2, [r3]
        return ((OS_FLAGS)0);
 c103268:	e3a03000 	mov	r3, #0
 c10326c:	ea00000c 	b	c1032a4 <OSFlagQuery+0x90>
    }
    OS_ENTER_CRITICAL();
 c103270:	e10f0000 	mrs	r0, CPSR
 c103274:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
 c103278:	e38000c0 	orr	r0, r0, #192	; 0xc0
 c10327c:	e121f000 	msr	CPSR_c, r0
    flags = pgrp->OSFlagFlags;
 c103280:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c103284:	e1d330b8 	ldrh	r3, [r3, #8]
 c103288:	e14b30be 	strh	r3, [fp, #-14]
    OS_EXIT_CRITICAL();
 c10328c:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 c103290:	e121f000 	msr	CPSR_c, r0
    *err = OS_NO_ERR;
 c103294:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 c103298:	e3a02000 	mov	r2, #0
 c10329c:	e5c32000 	strb	r2, [r3]
    return (flags);                               /* Return the current value of the event flags       */
 c1032a0:	e15b30be 	ldrh	r3, [fp, #-14]
}
 c1032a4:	e1a00003 	mov	r0, r3
 c1032a8:	e24bd00c 	sub	sp, fp, #12
 c1032ac:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1032b0:	e12fff1e 	bx	lr

0c1032b4 <OS_FlagBlock>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  void  OS_FlagBlock (OS_FLAG_GRP *pgrp, OS_FLAG_NODE *pnode, OS_FLAGS flags, INT8U wait_type, INT16U timeout)
{
 c1032b4:	e1a0c00d 	mov	ip, sp
 c1032b8:	e92dd800 	push	{fp, ip, lr, pc}
 c1032bc:	e24cb004 	sub	fp, ip, #4
 c1032c0:	e24dd018 	sub	sp, sp, #24
 c1032c4:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
 c1032c8:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
 c1032cc:	e14b21be 	strh	r2, [fp, #-30]	; 0xffffffe2
 c1032d0:	e54b301f 	strb	r3, [fp, #-31]	; 0xffffffe1
    OS_FLAG_NODE  *pnode_next;
	INT8U          y;


    OSTCBCur->OSTCBStat      |= OS_STAT_FLAG;
 c1032d4:	e59f3180 	ldr	r3, [pc, #384]	; c10345c <OS_FlagBlock+0x1a8>
 c1032d8:	e5933000 	ldr	r3, [r3]
 c1032dc:	e59f2178 	ldr	r2, [pc, #376]	; c10345c <OS_FlagBlock+0x1a8>
 c1032e0:	e5922000 	ldr	r2, [r2]
 c1032e4:	e5d2202c 	ldrb	r2, [r2, #44]	; 0x2c
 c1032e8:	e3822020 	orr	r2, r2, #32
 c1032ec:	e20220ff 	and	r2, r2, #255	; 0xff
 c1032f0:	e5c3202c 	strb	r2, [r3, #44]	; 0x2c
    OSTCBCur->OSTCBPendTO     = FALSE;
 c1032f4:	e59f3160 	ldr	r3, [pc, #352]	; c10345c <OS_FlagBlock+0x1a8>
 c1032f8:	e5933000 	ldr	r3, [r3]
 c1032fc:	e3a02000 	mov	r2, #0
 c103300:	e5c3202d 	strb	r2, [r3, #45]	; 0x2d
    OSTCBCur->OSTCBDly        = timeout;              /* Store timeout in task's TCB                   */
 c103304:	e59f3150 	ldr	r3, [pc, #336]	; c10345c <OS_FlagBlock+0x1a8>
 c103308:	e5933000 	ldr	r3, [r3]
 c10330c:	e1db20b4 	ldrh	r2, [fp, #4]
 c103310:	e1c322ba 	strh	r2, [r3, #42]	; 0x2a
    OSTCBCur->OSTCBEventPtr   = (OS_EVENT *)0;
 c103314:	e59f3140 	ldr	r3, [pc, #320]	; c10345c <OS_FlagBlock+0x1a8>
 c103318:	e5933000 	ldr	r3, [r3]
 c10331c:	e3a02000 	mov	r2, #0
 c103320:	e583201c 	str	r2, [r3, #28]
#if OS_TASK_DEL_EN > 0
    OSTCBCur->OSTCBFlagNode   = pnode;                /* TCB to link to node                           */
 c103324:	e59f3130 	ldr	r3, [pc, #304]	; c10345c <OS_FlagBlock+0x1a8>
 c103328:	e5933000 	ldr	r3, [r3]
 c10332c:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
 c103330:	e5832024 	str	r2, [r3, #36]	; 0x24
#endif
    pnode->OSFlagNodeFlags    = flags;                /* Save the flags that we need to wait for       */
 c103334:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 c103338:	e15b21be 	ldrh	r2, [fp, #-30]	; 0xffffffe2
 c10333c:	e1c321b0 	strh	r2, [r3, #16]
    pnode->OSFlagNodeWaitType = wait_type;            /* Save the type of wait we are doing            */
 c103340:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 c103344:	e55b201f 	ldrb	r2, [fp, #-31]	; 0xffffffe1
 c103348:	e5c32012 	strb	r2, [r3, #18]
    pnode->OSFlagNodeTCB      = (void *)OSTCBCur;     /* Link to task's TCB                            */
 c10334c:	e59f3108 	ldr	r3, [pc, #264]	; c10345c <OS_FlagBlock+0x1a8>
 c103350:	e5932000 	ldr	r2, [r3]
 c103354:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 c103358:	e5832008 	str	r2, [r3, #8]
    pnode->OSFlagNodeNext     = pgrp->OSFlagWaitList; /* Add node at beginning of event flag wait list */
 c10335c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c103360:	e5932004 	ldr	r2, [r3, #4]
 c103364:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 c103368:	e5832000 	str	r2, [r3]
    pnode->OSFlagNodePrev     = (void *)0;
 c10336c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 c103370:	e3a02000 	mov	r2, #0
 c103374:	e5832004 	str	r2, [r3, #4]
    pnode->OSFlagNodeFlagGrp  = (void *)pgrp;         /* Link to Event Flag Group                      */
 c103378:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 c10337c:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
 c103380:	e583200c 	str	r2, [r3, #12]
    pnode_next                = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
 c103384:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c103388:	e5933004 	ldr	r3, [r3, #4]
 c10338c:	e50b3010 	str	r3, [fp, #-16]
    if (pnode_next != (void *)0) {                    /* Is this the first NODE to insert?             */
 c103390:	e51b3010 	ldr	r3, [fp, #-16]
 c103394:	e3530000 	cmp	r3, #0
 c103398:	0a000002 	beq	c1033a8 <OS_FlagBlock+0xf4>
        pnode_next->OSFlagNodePrev = pnode;           /* No, link in doubly linked list                */
 c10339c:	e51b3010 	ldr	r3, [fp, #-16]
 c1033a0:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
 c1033a4:	e5832004 	str	r2, [r3, #4]
    }
    pgrp->OSFlagWaitList = (void *)pnode;
 c1033a8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c1033ac:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
 c1033b0:	e5832004 	str	r2, [r3, #4]
                                                      
    y            =  OSTCBCur->OSTCBY;		 	      /* Suspend current task until flag(s) received   */
 c1033b4:	e59f30a0 	ldr	r3, [pc, #160]	; c10345c <OS_FlagBlock+0x1a8>
 c1033b8:	e5933000 	ldr	r3, [r3]
 c1033bc:	e5d33030 	ldrb	r3, [r3, #48]	; 0x30
 c1033c0:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
	OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
 c1033c4:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c1033c8:	e55b2011 	ldrb	r2, [fp, #-17]	; 0xffffffef
 c1033cc:	e59f108c 	ldr	r1, [pc, #140]	; c103460 <OS_FlagBlock+0x1ac>
 c1033d0:	e7d12002 	ldrb	r2, [r1, r2]
 c1033d4:	e20210ff 	and	r1, r2, #255	; 0xff
 c1033d8:	e59f207c 	ldr	r2, [pc, #124]	; c10345c <OS_FlagBlock+0x1a8>
 c1033dc:	e5922000 	ldr	r2, [r2]
 c1033e0:	e5d22031 	ldrb	r2, [r2, #49]	; 0x31
 c1033e4:	e20220ff 	and	r2, r2, #255	; 0xff
 c1033e8:	e1e02002 	mvn	r2, r2
 c1033ec:	e20220ff 	and	r2, r2, #255	; 0xff
 c1033f0:	e0012002 	and	r2, r1, r2
 c1033f4:	e20220ff 	and	r2, r2, #255	; 0xff
 c1033f8:	e20210ff 	and	r1, r2, #255	; 0xff
 c1033fc:	e59f205c 	ldr	r2, [pc, #92]	; c103460 <OS_FlagBlock+0x1ac>
 c103400:	e7c21003 	strb	r1, [r2, r3]
    if (OSRdyTbl[y] == 0x00) {
 c103404:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c103408:	e59f2050 	ldr	r2, [pc, #80]	; c103460 <OS_FlagBlock+0x1ac>
 c10340c:	e7d23003 	ldrb	r3, [r2, r3]
 c103410:	e3530000 	cmp	r3, #0
 c103414:	1a00000d 	bne	c103450 <OS_FlagBlock+0x19c>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
 c103418:	e59f303c 	ldr	r3, [pc, #60]	; c10345c <OS_FlagBlock+0x1a8>
 c10341c:	e5933000 	ldr	r3, [r3]
 c103420:	e5d33032 	ldrb	r3, [r3, #50]	; 0x32
 c103424:	e20330ff 	and	r3, r3, #255	; 0xff
 c103428:	e1e03003 	mvn	r3, r3
 c10342c:	e20320ff 	and	r2, r3, #255	; 0xff
 c103430:	e59f302c 	ldr	r3, [pc, #44]	; c103464 <OS_FlagBlock+0x1b0>
 c103434:	e5d33000 	ldrb	r3, [r3]
 c103438:	e20330ff 	and	r3, r3, #255	; 0xff
 c10343c:	e0023003 	and	r3, r2, r3
 c103440:	e20330ff 	and	r3, r3, #255	; 0xff
 c103444:	e20320ff 	and	r2, r3, #255	; 0xff
 c103448:	e59f3014 	ldr	r3, [pc, #20]	; c103464 <OS_FlagBlock+0x1b0>
 c10344c:	e5c32000 	strb	r2, [r3]
    }
}
 c103450:	e24bd00c 	sub	sp, fp, #12
 c103454:	e89d6800 	ldm	sp, {fp, sp, lr}
 c103458:	e12fff1e 	bx	lr
 c10345c:	0c119cac 	.word	0x0c119cac
 c103460:	0c119c9c 	.word	0x0c119c9c
 c103464:	0c119c98 	.word	0x0c119c98

0c103468 <OS_FlagInit>:
* WARNING    : You MUST NOT call this function from your code.  This is an INTERNAL function to uC/OS-II.
*********************************************************************************************************
*/

void  OS_FlagInit (void)
{
 c103468:	e1a0c00d 	mov	ip, sp
 c10346c:	e92dd800 	push	{fp, ip, lr, pc}
 c103470:	e24cb004 	sub	fp, ip, #4
 c103474:	e24dd010 	sub	sp, sp, #16
    INT16U       i;
    OS_FLAG_GRP *pgrp1;
    OS_FLAG_GRP *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
 c103478:	e59f30cc 	ldr	r3, [pc, #204]	; c10354c <OS_FlagInit+0xe4>
 c10347c:	e1a00003 	mov	r0, r3
 c103480:	e3a010dc 	mov	r1, #220	; 0xdc
 c103484:	ebfff863 	bl	c101618 <OS_MemClr>
    pgrp1 = &OSFlagTbl[0];
 c103488:	e59f30bc 	ldr	r3, [pc, #188]	; c10354c <OS_FlagInit+0xe4>
 c10348c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    pgrp2 = &OSFlagTbl[1];
 c103490:	e59f30b8 	ldr	r3, [pc, #184]	; c103550 <OS_FlagInit+0xe8>
 c103494:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
 c103498:	e3a03000 	mov	r3, #0
 c10349c:	e14b30be 	strh	r3, [fp, #-14]
 c1034a0:	ea000014 	b	c1034f8 <OS_FlagInit+0x90>
        pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 c1034a4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c1034a8:	e3a02000 	mov	r2, #0
 c1034ac:	e5c32000 	strb	r2, [r3]
        pgrp1->OSFlagWaitList = (void *)pgrp2;
 c1034b0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c1034b4:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
 c1034b8:	e5832004 	str	r2, [r3, #4]
#if OS_FLAG_NAME_SIZE > 1
        pgrp1->OSFlagName[0]  = '?';                                /* Unknown name                    */
 c1034bc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c1034c0:	e3a0203f 	mov	r2, #63	; 0x3f
 c1034c4:	e5c3200a 	strb	r2, [r3, #10]
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
 c1034c8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c1034cc:	e3a02000 	mov	r2, #0
 c1034d0:	e5c3200b 	strb	r2, [r3, #11]
#endif
        pgrp1++;
 c1034d4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c1034d8:	e283302c 	add	r3, r3, #44	; 0x2c
 c1034dc:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
        pgrp2++;
 c1034e0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c1034e4:	e283302c 	add	r3, r3, #44	; 0x2c
 c1034e8:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    pgrp1 = &OSFlagTbl[0];
    pgrp2 = &OSFlagTbl[1];
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
 c1034ec:	e15b30be 	ldrh	r3, [fp, #-14]
 c1034f0:	e2833001 	add	r3, r3, #1
 c1034f4:	e14b30be 	strh	r3, [fp, #-14]
 c1034f8:	e15b30be 	ldrh	r3, [fp, #-14]
 c1034fc:	e3530003 	cmp	r3, #3
 c103500:	9affffe7 	bls	c1034a4 <OS_FlagInit+0x3c>
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
#endif
        pgrp1++;
        pgrp2++;
    }
    pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 c103504:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c103508:	e3a02000 	mov	r2, #0
 c10350c:	e5c32000 	strb	r2, [r3]
    pgrp1->OSFlagWaitList = (void *)0;
 c103510:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c103514:	e3a02000 	mov	r2, #0
 c103518:	e5832004 	str	r2, [r3, #4]
#if OS_FLAG_NAME_SIZE > 1
    pgrp1->OSFlagName[0]  = '?';                                    /* Unknown name                    */
 c10351c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c103520:	e3a0203f 	mov	r2, #63	; 0x3f
 c103524:	e5c3200a 	strb	r2, [r3, #10]
    pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
 c103528:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c10352c:	e3a02000 	mov	r2, #0
 c103530:	e5c3200b 	strb	r2, [r3, #11]
#endif
    OSFlagFreeList        = (OS_FLAG_GRP *)&OSFlagTbl[0];
 c103534:	e59f3018 	ldr	r3, [pc, #24]	; c103554 <OS_FlagInit+0xec>
 c103538:	e59f200c 	ldr	r2, [pc, #12]	; c10354c <OS_FlagInit+0xe4>
 c10353c:	e5832000 	str	r2, [r3]
#endif
}
 c103540:	e24bd00c 	sub	sp, fp, #12
 c103544:	e89d6800 	ldm	sp, {fp, sp, lr}
 c103548:	e12fff1e 	bx	lr
 c10354c:	0c119230 	.word	0x0c119230
 c103550:	0c11925c 	.word	0x0c11925c
 c103554:	0c11af84 	.word	0x0c11af84

0c103558 <OS_FlagTaskRdy>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  BOOLEAN  OS_FlagTaskRdy (OS_FLAG_NODE *pnode, OS_FLAGS flags_rdy)
{
 c103558:	e1a0c00d 	mov	ip, sp
 c10355c:	e92dd800 	push	{fp, ip, lr, pc}
 c103560:	e24cb004 	sub	fp, ip, #4
 c103564:	e24dd010 	sub	sp, sp, #16
 c103568:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
 c10356c:	e1a03001 	mov	r3, r1
 c103570:	e14b31ba 	strh	r3, [fp, #-26]	; 0xffffffe6
    OS_TCB   *ptcb;
    BOOLEAN   sched;


    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;  /* Point to TCB of waiting task             */
 c103574:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c103578:	e5933008 	ldr	r3, [r3, #8]
 c10357c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    ptcb->OSTCBDly      = 0;
 c103580:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c103584:	e3a02000 	mov	r2, #0
 c103588:	e1c322ba 	strh	r2, [r3, #42]	; 0x2a
    ptcb->OSTCBFlagsRdy = flags_rdy;
 c10358c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c103590:	e15b21ba 	ldrh	r2, [fp, #-26]	; 0xffffffe6
 c103594:	e1c322b8 	strh	r2, [r3, #40]	; 0x28
    ptcb->OSTCBStat    &= ~OS_STAT_FLAG;
 c103598:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c10359c:	e5d3302c 	ldrb	r3, [r3, #44]	; 0x2c
 c1035a0:	e3c33020 	bic	r3, r3, #32
 c1035a4:	e20320ff 	and	r2, r3, #255	; 0xff
 c1035a8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c1035ac:	e5c3202c 	strb	r2, [r3, #44]	; 0x2c
    ptcb->OSTCBPendTO   = FALSE;
 c1035b0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c1035b4:	e3a02000 	mov	r2, #0
 c1035b8:	e5c3202d 	strb	r2, [r3, #45]	; 0x2d
    if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                          */
 c1035bc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c1035c0:	e5d3302c 	ldrb	r3, [r3, #44]	; 0x2c
 c1035c4:	e3530000 	cmp	r3, #0
 c1035c8:	1a000016 	bne	c103628 <OS_FlagTaskRdy+0xd0>
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Put task into ready list                 */
 c1035cc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c1035d0:	e5d32032 	ldrb	r2, [r3, #50]	; 0x32
 c1035d4:	e59f3070 	ldr	r3, [pc, #112]	; c10364c <OS_FlagTaskRdy+0xf4>
 c1035d8:	e5d33000 	ldrb	r3, [r3]
 c1035dc:	e1823003 	orr	r3, r2, r3
 c1035e0:	e20320ff 	and	r2, r3, #255	; 0xff
 c1035e4:	e59f3060 	ldr	r3, [pc, #96]	; c10364c <OS_FlagTaskRdy+0xf4>
 c1035e8:	e5c32000 	strb	r2, [r3]
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 c1035ec:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c1035f0:	e5d33030 	ldrb	r3, [r3, #48]	; 0x30
 c1035f4:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
 c1035f8:	e5d22030 	ldrb	r2, [r2, #48]	; 0x30
 c1035fc:	e59f104c 	ldr	r1, [pc, #76]	; c103650 <OS_FlagTaskRdy+0xf8>
 c103600:	e7d11002 	ldrb	r1, [r1, r2]
 c103604:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
 c103608:	e5d22031 	ldrb	r2, [r2, #49]	; 0x31
 c10360c:	e1812002 	orr	r2, r1, r2
 c103610:	e20210ff 	and	r1, r2, #255	; 0xff
 c103614:	e59f2034 	ldr	r2, [pc, #52]	; c103650 <OS_FlagTaskRdy+0xf8>
 c103618:	e7c21003 	strb	r1, [r2, r3]
        sched                   = TRUE;
 c10361c:	e3a03001 	mov	r3, #1
 c103620:	e54b300d 	strb	r3, [fp, #-13]
 c103624:	ea000001 	b	c103630 <OS_FlagTaskRdy+0xd8>
    } else {
        sched                   = FALSE;
 c103628:	e3a03000 	mov	r3, #0
 c10362c:	e54b300d 	strb	r3, [fp, #-13]
    }
    OS_FlagUnlink(pnode);
 c103630:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
 c103634:	eb000006 	bl	c103654 <OS_FlagUnlink>
    return (sched);
 c103638:	e55b300d 	ldrb	r3, [fp, #-13]
}
 c10363c:	e1a00003 	mov	r0, r3
 c103640:	e24bd00c 	sub	sp, fp, #12
 c103644:	e89d6800 	ldm	sp, {fp, sp, lr}
 c103648:	e12fff1e 	bx	lr
 c10364c:	0c119c98 	.word	0x0c119c98
 c103650:	0c119c9c 	.word	0x0c119c9c

0c103654 <OS_FlagUnlink>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_FlagUnlink (OS_FLAG_NODE *pnode)
{
 c103654:	e1a0c00d 	mov	ip, sp
 c103658:	e92dd800 	push	{fp, ip, lr, pc}
 c10365c:	e24cb004 	sub	fp, ip, #4
 c103660:	e24dd018 	sub	sp, sp, #24
 c103664:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
    OS_FLAG_GRP  *pgrp;
    OS_FLAG_NODE *pnode_prev;
    OS_FLAG_NODE *pnode_next;


    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
 c103668:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c10366c:	e5933004 	ldr	r3, [r3, #4]
 c103670:	e50b3010 	str	r3, [fp, #-16]
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
 c103674:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c103678:	e5933000 	ldr	r3, [r3]
 c10367c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
 c103680:	e51b3010 	ldr	r3, [fp, #-16]
 c103684:	e3530000 	cmp	r3, #0
 c103688:	1a00000c 	bne	c1036c0 <OS_FlagUnlink+0x6c>
        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
 c10368c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c103690:	e593300c 	ldr	r3, [r3, #12]
 c103694:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
 c103698:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c10369c:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
 c1036a0:	e5832004 	str	r2, [r3, #4]
        if (pnode_next != (OS_FLAG_NODE *)0) {
 c1036a4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c1036a8:	e3530000 	cmp	r3, #0
 c1036ac:	0a00000c 	beq	c1036e4 <OS_FlagUnlink+0x90>
            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
 c1036b0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c1036b4:	e3a02000 	mov	r2, #0
 c1036b8:	e5832004 	str	r2, [r3, #4]
 c1036bc:	ea000008 	b	c1036e4 <OS_FlagUnlink+0x90>
        }
    } else {                                                    /* No,  A node somewhere in the list   */
        pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
 c1036c0:	e51b3010 	ldr	r3, [fp, #-16]
 c1036c4:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
 c1036c8:	e5832000 	str	r2, [r3]
        if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
 c1036cc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c1036d0:	e3530000 	cmp	r3, #0
 c1036d4:	0a000002 	beq	c1036e4 <OS_FlagUnlink+0x90>
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
 c1036d8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c1036dc:	e51b2010 	ldr	r2, [fp, #-16]
 c1036e0:	e5832004 	str	r2, [r3, #4]
        }
    }
#if OS_TASK_DEL_EN > 0
    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
 c1036e4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c1036e8:	e5933008 	ldr	r3, [r3, #8]
 c1036ec:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
 c1036f0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 c1036f4:	e3a02000 	mov	r2, #0
 c1036f8:	e5832024 	str	r2, [r3, #36]	; 0x24
#endif
}
 c1036fc:	e24bd00c 	sub	sp, fp, #12
 c103700:	e89d6800 	ldm	sp, {fp, sp, lr}
 c103704:	e12fff1e 	bx	lr

0c103708 <OSMboxAccept>:
*********************************************************************************************************
*/

#if OS_MBOX_ACCEPT_EN > 0
void  *OSMboxAccept (OS_EVENT *pevent)
{
 c103708:	e1a0c00d 	mov	ip, sp
 c10370c:	e92dd800 	push	{fp, ip, lr, pc}
 c103710:	e24cb004 	sub	fp, ip, #4
 c103714:	e24dd010 	sub	sp, sp, #16
 c103718:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8


    cpu_sr = 0;                                           /* Prevent compiler warning                  */
#endif    
#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                        /* Validate 'pevent'                         */
 c10371c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c103720:	e3530000 	cmp	r3, #0
 c103724:	1a000001 	bne	c103730 <OSMboxAccept+0x28>
        return ((void *)0);
 c103728:	e3a03000 	mov	r3, #0
 c10372c:	ea000012 	b	c10377c <OSMboxAccept+0x74>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {      /* Validate event block type                 */
 c103730:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c103734:	e5d33000 	ldrb	r3, [r3]
 c103738:	e3530001 	cmp	r3, #1
 c10373c:	0a000001 	beq	c103748 <OSMboxAccept+0x40>
        return ((void *)0);
 c103740:	e3a03000 	mov	r3, #0
 c103744:	ea00000c 	b	c10377c <OSMboxAccept+0x74>
    }
    OS_ENTER_CRITICAL();
 c103748:	e10f0000 	mrs	r0, CPSR
 c10374c:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
 c103750:	e38000c0 	orr	r0, r0, #192	; 0xc0
 c103754:	e121f000 	msr	CPSR_c, r0
    msg                = pevent->OSEventPtr;
 c103758:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c10375c:	e5933004 	ldr	r3, [r3, #4]
 c103760:	e50b3010 	str	r3, [fp, #-16]
    pevent->OSEventPtr = (void *)0;                       /* Clear the mailbox                         */
 c103764:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c103768:	e3a02000 	mov	r2, #0
 c10376c:	e5832004 	str	r2, [r3, #4]
    OS_EXIT_CRITICAL();
 c103770:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 c103774:	e121f000 	msr	CPSR_c, r0
    return (msg);                                         /* Return the message received (or NULL)     */
 c103778:	e51b3010 	ldr	r3, [fp, #-16]
}
 c10377c:	e1a00003 	mov	r0, r3
 c103780:	e24bd00c 	sub	sp, fp, #12
 c103784:	e89d6800 	ldm	sp, {fp, sp, lr}
 c103788:	e12fff1e 	bx	lr

0c10378c <OSMboxCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSMboxCreate (void *msg)
{
 c10378c:	e1a0c00d 	mov	ip, sp
 c103790:	e92dd800 	push	{fp, ip, lr, pc}
 c103794:	e24cb004 	sub	fp, ip, #4
 c103798:	e24dd010 	sub	sp, sp, #16
 c10379c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8



    cpu_sr = 0;                                  /* Prevent compiler warning                           */
#endif    
    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
 c1037a0:	e59f30c0 	ldr	r3, [pc, #192]	; c103868 <OSMboxCreate+0xdc>
 c1037a4:	e5d33000 	ldrb	r3, [r3]
 c1037a8:	e3530000 	cmp	r3, #0
 c1037ac:	0a000001 	beq	c1037b8 <OSMboxCreate+0x2c>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
 c1037b0:	e3a03000 	mov	r3, #0
 c1037b4:	ea000027 	b	c103858 <OSMboxCreate+0xcc>
    }
    OS_ENTER_CRITICAL();
 c1037b8:	e10f0000 	mrs	r0, CPSR
 c1037bc:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
 c1037c0:	e38000c0 	orr	r0, r0, #192	; 0xc0
 c1037c4:	e121f000 	msr	CPSR_c, r0
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
 c1037c8:	e59f309c 	ldr	r3, [pc, #156]	; c10386c <OSMboxCreate+0xe0>
 c1037cc:	e5933000 	ldr	r3, [r3]
 c1037d0:	e50b3010 	str	r3, [fp, #-16]
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
 c1037d4:	e59f3090 	ldr	r3, [pc, #144]	; c10386c <OSMboxCreate+0xe0>
 c1037d8:	e5933000 	ldr	r3, [r3]
 c1037dc:	e3530000 	cmp	r3, #0
 c1037e0:	0a000005 	beq	c1037fc <OSMboxCreate+0x70>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
 c1037e4:	e59f3080 	ldr	r3, [pc, #128]	; c10386c <OSMboxCreate+0xe0>
 c1037e8:	e5933000 	ldr	r3, [r3]
 c1037ec:	e5933004 	ldr	r3, [r3, #4]
 c1037f0:	e1a02003 	mov	r2, r3
 c1037f4:	e59f3070 	ldr	r3, [pc, #112]	; c10386c <OSMboxCreate+0xe0>
 c1037f8:	e5832000 	str	r2, [r3]
    }
    OS_EXIT_CRITICAL();
 c1037fc:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 c103800:	e121f000 	msr	CPSR_c, r0
    if (pevent != (OS_EVENT *)0) {
 c103804:	e51b3010 	ldr	r3, [fp, #-16]
 c103808:	e3530000 	cmp	r3, #0
 c10380c:	0a000010 	beq	c103854 <OSMboxCreate+0xc8>
        pevent->OSEventType    = OS_EVENT_TYPE_MBOX;
 c103810:	e51b3010 	ldr	r3, [fp, #-16]
 c103814:	e3a02001 	mov	r2, #1
 c103818:	e5c32000 	strb	r2, [r3]
        pevent->OSEventCnt     = 0;
 c10381c:	e51b3010 	ldr	r3, [fp, #-16]
 c103820:	e3a02000 	mov	r2, #0
 c103824:	e1c320b2 	strh	r2, [r3, #2]
        pevent->OSEventPtr     = msg;            /* Deposit message in event control block             */
 c103828:	e51b3010 	ldr	r3, [fp, #-16]
 c10382c:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
 c103830:	e5832004 	str	r2, [r3, #4]
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';
 c103834:	e51b3010 	ldr	r3, [fp, #-16]
 c103838:	e3a0203f 	mov	r2, #63	; 0x3f
 c10383c:	e5c32010 	strb	r2, [r3, #16]
        pevent->OSEventName[1] = OS_ASCII_NUL;
 c103840:	e51b3010 	ldr	r3, [fp, #-16]
 c103844:	e3a02000 	mov	r2, #0
 c103848:	e5c32011 	strb	r2, [r3, #17]
#endif
        OS_EventWaitListInit(pevent);
 c10384c:	e51b0010 	ldr	r0, [fp, #-16]
 c103850:	ebfff62b 	bl	c101104 <OS_EventWaitListInit>
    }
    return (pevent);                             /* Return pointer to event control block              */
 c103854:	e51b3010 	ldr	r3, [fp, #-16]
}
 c103858:	e1a00003 	mov	r0, r3
 c10385c:	e24bd00c 	sub	sp, fp, #12
 c103860:	e89d6800 	ldm	sp, {fp, sp, lr}
 c103864:	e12fff1e 	bx	lr
 c103868:	0c119ca8 	.word	0x0c119ca8
 c10386c:	0c119ca4 	.word	0x0c119ca4

0c103870 <OSMboxDel>:
*********************************************************************************************************
*/

#if OS_MBOX_DEL_EN > 0
OS_EVENT  *OSMboxDel (OS_EVENT *pevent, INT8U opt, INT8U *err)
{
 c103870:	e1a0c00d 	mov	ip, sp
 c103874:	e92dd800 	push	{fp, ip, lr, pc}
 c103878:	e24cb004 	sub	fp, ip, #4
 c10387c:	e24dd018 	sub	sp, sp, #24
 c103880:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
 c103884:	e1a03001 	mov	r3, r1
 c103888:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
 c10388c:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7



    cpu_sr = 0;                                            /* Prevent compiler warning                 */
#endif    
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 c103890:	e59f3204 	ldr	r3, [pc, #516]	; c103a9c <OSMboxDel+0x22c>
 c103894:	e5d33000 	ldrb	r3, [r3]
 c103898:	e3530000 	cmp	r3, #0
 c10389c:	0a000004 	beq	c1038b4 <OSMboxDel+0x44>
        *err = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
 c1038a0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c1038a4:	e3e02073 	mvn	r2, #115	; 0x73
 c1038a8:	e5c32000 	strb	r2, [r3]
        return (pevent);
 c1038ac:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c1038b0:	ea000075 	b	c103a8c <OSMboxDel+0x21c>
    }
#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 c1038b4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c1038b8:	e3530000 	cmp	r3, #0
 c1038bc:	1a000004 	bne	c1038d4 <OSMboxDel+0x64>
        *err = OS_ERR_PEVENT_NULL;
 c1038c0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c1038c4:	e3a02004 	mov	r2, #4
 c1038c8:	e5c32000 	strb	r2, [r3]
        return (pevent);
 c1038cc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c1038d0:	ea00006d 	b	c103a8c <OSMboxDel+0x21c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {       /* Validate event block type                */
 c1038d4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c1038d8:	e5d33000 	ldrb	r3, [r3]
 c1038dc:	e3530001 	cmp	r3, #1
 c1038e0:	0a000004 	beq	c1038f8 <OSMboxDel+0x88>
        *err = OS_ERR_EVENT_TYPE;
 c1038e4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c1038e8:	e3a02001 	mov	r2, #1
 c1038ec:	e5c32000 	strb	r2, [r3]
        return (pevent);
 c1038f0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c1038f4:	ea000064 	b	c103a8c <OSMboxDel+0x21c>
    }
    OS_ENTER_CRITICAL();
 c1038f8:	e10f0000 	mrs	r0, CPSR
 c1038fc:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
 c103900:	e38000c0 	orr	r0, r0, #192	; 0xc0
 c103904:	e121f000 	msr	CPSR_c, r0
    if (pevent->OSEventGrp != 0x00) {                      /* See if any tasks waiting on mailbox      */
 c103908:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c10390c:	e5d33001 	ldrb	r3, [r3, #1]
 c103910:	e3530000 	cmp	r3, #0
 c103914:	0a000002 	beq	c103924 <OSMboxDel+0xb4>
        tasks_waiting = TRUE;                              /* Yes                                      */
 c103918:	e3a03001 	mov	r3, #1
 c10391c:	e54b300d 	strb	r3, [fp, #-13]
 c103920:	ea000001 	b	c10392c <OSMboxDel+0xbc>
    } else {
        tasks_waiting = FALSE;                             /* No                                       */
 c103924:	e3a03000 	mov	r3, #0
 c103928:	e54b300d 	strb	r3, [fp, #-13]
    }
    switch (opt) {
 c10392c:	e55b3019 	ldrb	r3, [fp, #-25]	; 0xffffffe7
 c103930:	e3530000 	cmp	r3, #0
 c103934:	0a000002 	beq	c103944 <OSMboxDel+0xd4>
 c103938:	e3530001 	cmp	r3, #1
 c10393c:	0a000029 	beq	c1039e8 <OSMboxDel+0x178>
 c103940:	ea00004b 	b	c103a74 <OSMboxDel+0x204>
        case OS_DEL_NO_PEND:                               /* Delete mailbox only if no task waiting   */
             if (tasks_waiting == FALSE) {
 c103944:	e55b300d 	ldrb	r3, [fp, #-13]
 c103948:	e3530000 	cmp	r3, #0
 c10394c:	1a000019 	bne	c1039b8 <OSMboxDel+0x148>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
 c103950:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c103954:	e3a0203f 	mov	r2, #63	; 0x3f
 c103958:	e5c32010 	strb	r2, [r3, #16]
                 pevent->OSEventName[1] = OS_ASCII_NUL;
 c10395c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c103960:	e3a02000 	mov	r2, #0
 c103964:	e5c32011 	strb	r2, [r3, #17]
#endif
                 pevent->OSEventType = OS_EVENT_TYPE_UNUSED;
 c103968:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c10396c:	e3a02000 	mov	r2, #0
 c103970:	e5c32000 	strb	r2, [r3]
                 pevent->OSEventPtr  = OSEventFreeList;    /* Return Event Control Block to free list  */
 c103974:	e59f3124 	ldr	r3, [pc, #292]	; c103aa0 <OSMboxDel+0x230>
 c103978:	e5932000 	ldr	r2, [r3]
 c10397c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c103980:	e5832004 	str	r2, [r3, #4]
                 pevent->OSEventCnt  = 0;
 c103984:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c103988:	e3a02000 	mov	r2, #0
 c10398c:	e1c320b2 	strh	r2, [r3, #2]
                 OSEventFreeList     = pevent;             /* Get next free event control block        */
 c103990:	e59f3108 	ldr	r3, [pc, #264]	; c103aa0 <OSMboxDel+0x230>
 c103994:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
 c103998:	e5832000 	str	r2, [r3]
                 OS_EXIT_CRITICAL();
 c10399c:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 c1039a0:	e121f000 	msr	CPSR_c, r0
                 *err                = OS_NO_ERR;
 c1039a4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c1039a8:	e3a02000 	mov	r2, #0
 c1039ac:	e5c32000 	strb	r2, [r3]
                 return ((OS_EVENT *)0);                   /* Mailbox has been deleted                 */
 c1039b0:	e3a03000 	mov	r3, #0
 c1039b4:	ea000034 	b	c103a8c <OSMboxDel+0x21c>
             } else {
                 OS_EXIT_CRITICAL();
 c1039b8:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 c1039bc:	e121f000 	msr	CPSR_c, r0
                 *err                = OS_ERR_TASK_WAITING;
 c1039c0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c1039c4:	e3a02008 	mov	r2, #8
 c1039c8:	e5c32000 	strb	r2, [r3]
                 return (pevent);
 c1039cc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c1039d0:	ea00002d 	b	c103a8c <OSMboxDel+0x21c>
             }

        case OS_DEL_ALWAYS:                                /* Always delete the mailbox                */
             while (pevent->OSEventGrp != 0x00) {          /* Ready ALL tasks waiting for mailbox      */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX);
 c1039d4:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
 c1039d8:	e3a01000 	mov	r1, #0
 c1039dc:	e3a02002 	mov	r2, #2
 c1039e0:	ebfff4a9 	bl	c100c8c <OS_EventTaskRdy>
 c1039e4:	ea000000 	b	c1039ec <OSMboxDel+0x17c>
                 *err                = OS_ERR_TASK_WAITING;
                 return (pevent);
             }

        case OS_DEL_ALWAYS:                                /* Always delete the mailbox                */
             while (pevent->OSEventGrp != 0x00) {          /* Ready ALL tasks waiting for mailbox      */
 c1039e8:	e1a00000 	nop			; (mov r0, r0)
 c1039ec:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c1039f0:	e5d33001 	ldrb	r3, [r3, #1]
 c1039f4:	e3530000 	cmp	r3, #0
 c1039f8:	1afffff5 	bne	c1039d4 <OSMboxDel+0x164>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
 c1039fc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c103a00:	e3a0203f 	mov	r2, #63	; 0x3f
 c103a04:	e5c32010 	strb	r2, [r3, #16]
             pevent->OSEventName[1] = OS_ASCII_NUL;
 c103a08:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c103a0c:	e3a02000 	mov	r2, #0
 c103a10:	e5c32011 	strb	r2, [r3, #17]
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
 c103a14:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c103a18:	e3a02000 	mov	r2, #0
 c103a1c:	e5c32000 	strb	r2, [r3]
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
 c103a20:	e59f3078 	ldr	r3, [pc, #120]	; c103aa0 <OSMboxDel+0x230>
 c103a24:	e5932000 	ldr	r2, [r3]
 c103a28:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c103a2c:	e5832004 	str	r2, [r3, #4]
             pevent->OSEventCnt     = 0;
 c103a30:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c103a34:	e3a02000 	mov	r2, #0
 c103a38:	e1c320b2 	strh	r2, [r3, #2]
             OSEventFreeList        = pevent;              /* Get next free event control block        */
 c103a3c:	e59f305c 	ldr	r3, [pc, #92]	; c103aa0 <OSMboxDel+0x230>
 c103a40:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
 c103a44:	e5832000 	str	r2, [r3]
             OS_EXIT_CRITICAL();
 c103a48:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 c103a4c:	e121f000 	msr	CPSR_c, r0
             if (tasks_waiting == TRUE) {                  /* Reschedule only if task(s) were waiting  */
 c103a50:	e55b300d 	ldrb	r3, [fp, #-13]
 c103a54:	e3530001 	cmp	r3, #1
 c103a58:	1a000000 	bne	c103a60 <OSMboxDel+0x1f0>
                 OS_Sched();                               /* Find highest priority task ready to run  */
 c103a5c:	ebfff720 	bl	c1016e4 <OS_Sched>
             }
             *err = OS_NO_ERR;
 c103a60:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c103a64:	e3a02000 	mov	r2, #0
 c103a68:	e5c32000 	strb	r2, [r3]
             return ((OS_EVENT *)0);                       /* Mailbox has been deleted                 */
 c103a6c:	e3a03000 	mov	r3, #0
 c103a70:	ea000005 	b	c103a8c <OSMboxDel+0x21c>

        default:
             OS_EXIT_CRITICAL();
 c103a74:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 c103a78:	e121f000 	msr	CPSR_c, r0
             *err = OS_ERR_INVALID_OPT;
 c103a7c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c103a80:	e3a02007 	mov	r2, #7
 c103a84:	e5c32000 	strb	r2, [r3]
             return (pevent);
 c103a88:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
    }
}
 c103a8c:	e1a00003 	mov	r0, r3
 c103a90:	e24bd00c 	sub	sp, fp, #12
 c103a94:	e89d6800 	ldm	sp, {fp, sp, lr}
 c103a98:	e12fff1e 	bx	lr
 c103a9c:	0c119ca8 	.word	0x0c119ca8
 c103aa0:	0c119ca4 	.word	0x0c119ca4

0c103aa4 <OSMboxPend>:
*                            if you didn't pass the proper pointer to the event control block.
*********************************************************************************************************
*/

void  *OSMboxPend (OS_EVENT *pevent, INT16U timeout, INT8U *err)
{
 c103aa4:	e1a0c00d 	mov	ip, sp
 c103aa8:	e92dd800 	push	{fp, ip, lr, pc}
 c103aac:	e24cb004 	sub	fp, ip, #4
 c103ab0:	e24dd018 	sub	sp, sp, #24
 c103ab4:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
 c103ab8:	e1a03001 	mov	r3, r1
 c103abc:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
 c103ac0:	e14b31ba 	strh	r3, [fp, #-26]	; 0xffffffe6



    cpu_sr = 0;                                       /* Prevent compiler warning                      */
#endif    
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
 c103ac4:	e59f31b4 	ldr	r3, [pc, #436]	; c103c80 <OSMboxPend+0x1dc>
 c103ac8:	e5d33000 	ldrb	r3, [r3]
 c103acc:	e3530000 	cmp	r3, #0
 c103ad0:	0a000004 	beq	c103ae8 <OSMboxPend+0x44>
        *err = OS_ERR_PEND_ISR;                       /* ... can't PEND from an ISR                    */
 c103ad4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c103ad8:	e3a02002 	mov	r2, #2
 c103adc:	e5c32000 	strb	r2, [r3]
        return ((void *)0);
 c103ae0:	e3a03000 	mov	r3, #0
 c103ae4:	ea000061 	b	c103c70 <OSMboxPend+0x1cc>
    }
#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 c103ae8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c103aec:	e3530000 	cmp	r3, #0
 c103af0:	1a000004 	bne	c103b08 <OSMboxPend+0x64>
        *err = OS_ERR_PEVENT_NULL;
 c103af4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c103af8:	e3a02004 	mov	r2, #4
 c103afc:	e5c32000 	strb	r2, [r3]
        return ((void *)0);
 c103b00:	e3a03000 	mov	r3, #0
 c103b04:	ea000059 	b	c103c70 <OSMboxPend+0x1cc>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {  /* Validate event block type                     */
 c103b08:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c103b0c:	e5d33000 	ldrb	r3, [r3]
 c103b10:	e3530001 	cmp	r3, #1
 c103b14:	0a000004 	beq	c103b2c <OSMboxPend+0x88>
        *err = OS_ERR_EVENT_TYPE;
 c103b18:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c103b1c:	e3a02001 	mov	r2, #1
 c103b20:	e5c32000 	strb	r2, [r3]
        return ((void *)0);
 c103b24:	e3a03000 	mov	r3, #0
 c103b28:	ea000050 	b	c103c70 <OSMboxPend+0x1cc>
    }
    OS_ENTER_CRITICAL();
 c103b2c:	e10f0000 	mrs	r0, CPSR
 c103b30:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
 c103b34:	e38000c0 	orr	r0, r0, #192	; 0xc0
 c103b38:	e121f000 	msr	CPSR_c, r0
    msg = pevent->OSEventPtr;
 c103b3c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c103b40:	e5933004 	ldr	r3, [r3, #4]
 c103b44:	e50b3010 	str	r3, [fp, #-16]
    if (msg != (void *)0) {                           /* See if there is already a message             */
 c103b48:	e51b3010 	ldr	r3, [fp, #-16]
 c103b4c:	e3530000 	cmp	r3, #0
 c103b50:	0a000009 	beq	c103b7c <OSMboxPend+0xd8>
        pevent->OSEventPtr = (void *)0;               /* Clear the mailbox                             */
 c103b54:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c103b58:	e3a02000 	mov	r2, #0
 c103b5c:	e5832004 	str	r2, [r3, #4]
        OS_EXIT_CRITICAL();
 c103b60:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 c103b64:	e121f000 	msr	CPSR_c, r0
        *err = OS_NO_ERR;
 c103b68:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c103b6c:	e3a02000 	mov	r2, #0
 c103b70:	e5c32000 	strb	r2, [r3]
        return (msg);                                 /* Return the message received (or NULL)         */
 c103b74:	e51b3010 	ldr	r3, [fp, #-16]
 c103b78:	ea00003c 	b	c103c70 <OSMboxPend+0x1cc>
    }
    OSTCBCur->OSTCBStat  |= OS_STAT_MBOX;             /* Message not available, task will pend         */
 c103b7c:	e59f3100 	ldr	r3, [pc, #256]	; c103c84 <OSMboxPend+0x1e0>
 c103b80:	e5933000 	ldr	r3, [r3]
 c103b84:	e59f20f8 	ldr	r2, [pc, #248]	; c103c84 <OSMboxPend+0x1e0>
 c103b88:	e5922000 	ldr	r2, [r2]
 c103b8c:	e5d2202c 	ldrb	r2, [r2, #44]	; 0x2c
 c103b90:	e3822002 	orr	r2, r2, #2
 c103b94:	e20220ff 	and	r2, r2, #255	; 0xff
 c103b98:	e5c3202c 	strb	r2, [r3, #44]	; 0x2c
    OSTCBCur->OSTCBPendTO = FALSE;
 c103b9c:	e59f30e0 	ldr	r3, [pc, #224]	; c103c84 <OSMboxPend+0x1e0>
 c103ba0:	e5933000 	ldr	r3, [r3]
 c103ba4:	e3a02000 	mov	r2, #0
 c103ba8:	e5c3202d 	strb	r2, [r3, #45]	; 0x2d
    OSTCBCur->OSTCBDly    = timeout;                  /* Load timeout in TCB                           */
 c103bac:	e59f30d0 	ldr	r3, [pc, #208]	; c103c84 <OSMboxPend+0x1e0>
 c103bb0:	e5933000 	ldr	r3, [r3]
 c103bb4:	e15b21ba 	ldrh	r2, [fp, #-26]	; 0xffffffe6
 c103bb8:	e1c322ba 	strh	r2, [r3, #42]	; 0x2a
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
 c103bbc:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
 c103bc0:	ebfff4b4 	bl	c100e98 <OS_EventTaskWait>
    OS_EXIT_CRITICAL();
 c103bc4:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 c103bc8:	e121f000 	msr	CPSR_c, r0
    OS_Sched();                                       /* Find next highest priority task ready to run  */
 c103bcc:	ebfff6c4 	bl	c1016e4 <OS_Sched>
    OS_ENTER_CRITICAL();
 c103bd0:	e10f0000 	mrs	r0, CPSR
 c103bd4:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
 c103bd8:	e38000c0 	orr	r0, r0, #192	; 0xc0
 c103bdc:	e121f000 	msr	CPSR_c, r0
    if (OSTCBCur->OSTCBPendTO == TRUE) {              /* See if we were given the message              */
 c103be0:	e59f309c 	ldr	r3, [pc, #156]	; c103c84 <OSMboxPend+0x1e0>
 c103be4:	e5933000 	ldr	r3, [r3]
 c103be8:	e5d3302d 	ldrb	r3, [r3, #45]	; 0x2d
 c103bec:	e3530001 	cmp	r3, #1
 c103bf0:	1a000008 	bne	c103c18 <OSMboxPend+0x174>
        OS_EventTO(pevent);                           /* Timed out, Make task ready                    */
 c103bf4:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
 c103bf8:	ebfff4fc 	bl	c100ff0 <OS_EventTO>
        OS_EXIT_CRITICAL();
 c103bfc:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 c103c00:	e121f000 	msr	CPSR_c, r0
        *err = OS_TIMEOUT;                            /* Indicate that a timeout occured               */
 c103c04:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c103c08:	e3a0200a 	mov	r2, #10
 c103c0c:	e5c32000 	strb	r2, [r3]
        return ((void *)0);                           /* Return a NULL message                         */
 c103c10:	e3a03000 	mov	r3, #0
 c103c14:	ea000015 	b	c103c70 <OSMboxPend+0x1cc>
    }
    msg                     = OSTCBCur->OSTCBMsg;
 c103c18:	e59f3064 	ldr	r3, [pc, #100]	; c103c84 <OSMboxPend+0x1e0>
 c103c1c:	e5933000 	ldr	r3, [r3]
 c103c20:	e5933020 	ldr	r3, [r3, #32]
 c103c24:	e50b3010 	str	r3, [fp, #-16]
    OSTCBCur->OSTCBMsg      = (void *)0;              /* Yes, clear message received                   */
 c103c28:	e59f3054 	ldr	r3, [pc, #84]	; c103c84 <OSMboxPend+0x1e0>
 c103c2c:	e5933000 	ldr	r3, [r3]
 c103c30:	e3a02000 	mov	r2, #0
 c103c34:	e5832020 	str	r2, [r3, #32]
    OSTCBCur->OSTCBStat     = OS_STAT_RDY;
 c103c38:	e59f3044 	ldr	r3, [pc, #68]	; c103c84 <OSMboxPend+0x1e0>
 c103c3c:	e5933000 	ldr	r3, [r3]
 c103c40:	e3a02000 	mov	r2, #0
 c103c44:	e5c3202c 	strb	r2, [r3, #44]	; 0x2c
    OSTCBCur->OSTCBEventPtr = (OS_EVENT *)0;          /* No longer waiting for event                   */
 c103c48:	e59f3034 	ldr	r3, [pc, #52]	; c103c84 <OSMboxPend+0x1e0>
 c103c4c:	e5933000 	ldr	r3, [r3]
 c103c50:	e3a02000 	mov	r2, #0
 c103c54:	e583201c 	str	r2, [r3, #28]
    OS_EXIT_CRITICAL();
 c103c58:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 c103c5c:	e121f000 	msr	CPSR_c, r0
    *err                    = OS_NO_ERR;
 c103c60:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c103c64:	e3a02000 	mov	r2, #0
 c103c68:	e5c32000 	strb	r2, [r3]
    return (msg);                                     /* Return the message received                   */
 c103c6c:	e51b3010 	ldr	r3, [fp, #-16]
}
 c103c70:	e1a00003 	mov	r0, r3
 c103c74:	e24bd00c 	sub	sp, fp, #12
 c103c78:	e89d6800 	ldm	sp, {fp, sp, lr}
 c103c7c:	e12fff1e 	bx	lr
 c103c80:	0c119ca8 	.word	0x0c119ca8
 c103c84:	0c119cac 	.word	0x0c119cac

0c103c88 <OSMboxPost>:
*********************************************************************************************************
*/

#if OS_MBOX_POST_EN > 0
INT8U  OSMboxPost (OS_EVENT *pevent, void *msg)
{
 c103c88:	e1a0c00d 	mov	ip, sp
 c103c8c:	e92dd800 	push	{fp, ip, lr, pc}
 c103c90:	e24cb004 	sub	fp, ip, #4
 c103c94:	e24dd008 	sub	sp, sp, #8
 c103c98:	e50b0010 	str	r0, [fp, #-16]
 c103c9c:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec

    
    cpu_sr = 0;                                       /* Prevent compiler warning                      */
#endif    
#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 c103ca0:	e51b3010 	ldr	r3, [fp, #-16]
 c103ca4:	e3530000 	cmp	r3, #0
 c103ca8:	1a000001 	bne	c103cb4 <OSMboxPost+0x2c>
        return (OS_ERR_PEVENT_NULL);
 c103cac:	e3a03004 	mov	r3, #4
 c103cb0:	ea000029 	b	c103d5c <OSMboxPost+0xd4>
    }
    if (msg == (void *)0) {                           /* Make sure we are not posting a NULL pointer   */
 c103cb4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c103cb8:	e3530000 	cmp	r3, #0
 c103cbc:	1a000001 	bne	c103cc8 <OSMboxPost+0x40>
        return (OS_ERR_POST_NULL_PTR);
 c103cc0:	e3a03003 	mov	r3, #3
 c103cc4:	ea000024 	b	c103d5c <OSMboxPost+0xd4>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {  /* Validate event block type                     */
 c103cc8:	e51b3010 	ldr	r3, [fp, #-16]
 c103ccc:	e5d33000 	ldrb	r3, [r3]
 c103cd0:	e3530001 	cmp	r3, #1
 c103cd4:	0a000001 	beq	c103ce0 <OSMboxPost+0x58>
        return (OS_ERR_EVENT_TYPE);
 c103cd8:	e3a03001 	mov	r3, #1
 c103cdc:	ea00001e 	b	c103d5c <OSMboxPost+0xd4>
    }
    OS_ENTER_CRITICAL();
 c103ce0:	e10f0000 	mrs	r0, CPSR
 c103ce4:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
 c103ce8:	e38000c0 	orr	r0, r0, #192	; 0xc0
 c103cec:	e121f000 	msr	CPSR_c, r0
    if (pevent->OSEventGrp != 0x00) {                     /* See if any task pending on mailbox        */
 c103cf0:	e51b3010 	ldr	r3, [fp, #-16]
 c103cf4:	e5d33001 	ldrb	r3, [r3, #1]
 c103cf8:	e3530000 	cmp	r3, #0
 c103cfc:	0a000008 	beq	c103d24 <OSMboxPost+0x9c>
        (void)OS_EventTaskRdy(pevent, msg, OS_STAT_MBOX); /* Ready HPT waiting on event                */
 c103d00:	e51b0010 	ldr	r0, [fp, #-16]
 c103d04:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
 c103d08:	e3a02002 	mov	r2, #2
 c103d0c:	ebfff3de 	bl	c100c8c <OS_EventTaskRdy>
        OS_EXIT_CRITICAL();
 c103d10:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 c103d14:	e121f000 	msr	CPSR_c, r0
        OS_Sched();                                   /* Find highest priority task ready to run       */
 c103d18:	ebfff671 	bl	c1016e4 <OS_Sched>
        return (OS_NO_ERR);
 c103d1c:	e3a03000 	mov	r3, #0
 c103d20:	ea00000d 	b	c103d5c <OSMboxPost+0xd4>
    }
    if (pevent->OSEventPtr != (void *)0) {            /* Make sure mailbox doesn't already have a msg  */
 c103d24:	e51b3010 	ldr	r3, [fp, #-16]
 c103d28:	e5933004 	ldr	r3, [r3, #4]
 c103d2c:	e3530000 	cmp	r3, #0
 c103d30:	0a000003 	beq	c103d44 <OSMboxPost+0xbc>
        OS_EXIT_CRITICAL();
 c103d34:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 c103d38:	e121f000 	msr	CPSR_c, r0
        return (OS_MBOX_FULL);
 c103d3c:	e3a03014 	mov	r3, #20
 c103d40:	ea000005 	b	c103d5c <OSMboxPost+0xd4>
    }
    pevent->OSEventPtr = msg;                         /* Place message in mailbox                      */
 c103d44:	e51b3010 	ldr	r3, [fp, #-16]
 c103d48:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
 c103d4c:	e5832004 	str	r2, [r3, #4]
    OS_EXIT_CRITICAL();
 c103d50:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 c103d54:	e121f000 	msr	CPSR_c, r0
    return (OS_NO_ERR);
 c103d58:	e3a03000 	mov	r3, #0
}
 c103d5c:	e1a00003 	mov	r0, r3
 c103d60:	e24bd00c 	sub	sp, fp, #12
 c103d64:	e89d6800 	ldm	sp, {fp, sp, lr}
 c103d68:	e12fff1e 	bx	lr

0c103d6c <OSMboxPostOpt>:
*********************************************************************************************************
*/

#if OS_MBOX_POST_OPT_EN > 0
INT8U  OSMboxPostOpt (OS_EVENT *pevent, void *msg, INT8U opt)
{
 c103d6c:	e1a0c00d 	mov	ip, sp
 c103d70:	e92dd800 	push	{fp, ip, lr, pc}
 c103d74:	e24cb004 	sub	fp, ip, #4
 c103d78:	e24dd010 	sub	sp, sp, #16
 c103d7c:	e50b0010 	str	r0, [fp, #-16]
 c103d80:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
 c103d84:	e1a03002 	mov	r3, r2
 c103d88:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
    

    cpu_sr = 0;                                       /* Prevent compiler warning                      */
#endif    
#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 c103d8c:	e51b3010 	ldr	r3, [fp, #-16]
 c103d90:	e3530000 	cmp	r3, #0
 c103d94:	1a000001 	bne	c103da0 <OSMboxPostOpt+0x34>
        return (OS_ERR_PEVENT_NULL);
 c103d98:	e3a03004 	mov	r3, #4
 c103d9c:	ea000038 	b	c103e84 <OSMboxPostOpt+0x118>
    }
    if (msg == (void *)0) {                           /* Make sure we are not posting a NULL pointer   */
 c103da0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c103da4:	e3530000 	cmp	r3, #0
 c103da8:	1a000001 	bne	c103db4 <OSMboxPostOpt+0x48>
        return (OS_ERR_POST_NULL_PTR);
 c103dac:	e3a03003 	mov	r3, #3
 c103db0:	ea000033 	b	c103e84 <OSMboxPostOpt+0x118>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {  /* Validate event block type                     */
 c103db4:	e51b3010 	ldr	r3, [fp, #-16]
 c103db8:	e5d33000 	ldrb	r3, [r3]
 c103dbc:	e3530001 	cmp	r3, #1
 c103dc0:	0a000001 	beq	c103dcc <OSMboxPostOpt+0x60>
        return (OS_ERR_EVENT_TYPE);
 c103dc4:	e3a03001 	mov	r3, #1
 c103dc8:	ea00002d 	b	c103e84 <OSMboxPostOpt+0x118>
    }
    OS_ENTER_CRITICAL();
 c103dcc:	e10f0000 	mrs	r0, CPSR
 c103dd0:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
 c103dd4:	e38000c0 	orr	r0, r0, #192	; 0xc0
 c103dd8:	e121f000 	msr	CPSR_c, r0
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on mailbox            */
 c103ddc:	e51b3010 	ldr	r3, [fp, #-16]
 c103de0:	e5d33001 	ldrb	r3, [r3, #1]
 c103de4:	e3530000 	cmp	r3, #0
 c103de8:	0a000017 	beq	c103e4c <OSMboxPostOpt+0xe0>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
 c103dec:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
 c103df0:	e2033001 	and	r3, r3, #1
 c103df4:	e20330ff 	and	r3, r3, #255	; 0xff
 c103df8:	e3530000 	cmp	r3, #0
 c103dfc:	0a000009 	beq	c103e28 <OSMboxPostOpt+0xbc>
            while (pevent->OSEventGrp != 0x00) {      /* Yes, Post to ALL tasks waiting on mailbox     */           
 c103e00:	ea000003 	b	c103e14 <OSMboxPostOpt+0xa8>
                (void)OS_EventTaskRdy(pevent, msg, OS_STAT_MBOX);    
 c103e04:	e51b0010 	ldr	r0, [fp, #-16]
 c103e08:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
 c103e0c:	e3a02002 	mov	r2, #2
 c103e10:	ebfff39d 	bl	c100c8c <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on mailbox            */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0x00) {      /* Yes, Post to ALL tasks waiting on mailbox     */           
 c103e14:	e51b3010 	ldr	r3, [fp, #-16]
 c103e18:	e5d33001 	ldrb	r3, [r3, #1]
 c103e1c:	e3530000 	cmp	r3, #0
 c103e20:	1afffff7 	bne	c103e04 <OSMboxPostOpt+0x98>
 c103e24:	ea000003 	b	c103e38 <OSMboxPostOpt+0xcc>
                (void)OS_EventTaskRdy(pevent, msg, OS_STAT_MBOX);    
            }
        } else {
            (void)OS_EventTaskRdy(pevent, msg, OS_STAT_MBOX);  /* No,  Post to HPT waiting on mbox     */
 c103e28:	e51b0010 	ldr	r0, [fp, #-16]
 c103e2c:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
 c103e30:	e3a02002 	mov	r2, #2
 c103e34:	ebfff394 	bl	c100c8c <OS_EventTaskRdy>
        }
        OS_EXIT_CRITICAL();
 c103e38:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 c103e3c:	e121f000 	msr	CPSR_c, r0
        OS_Sched();                                            /* Find HPT ready to run                */
 c103e40:	ebfff627 	bl	c1016e4 <OS_Sched>
        return (OS_NO_ERR);
 c103e44:	e3a03000 	mov	r3, #0
 c103e48:	ea00000d 	b	c103e84 <OSMboxPostOpt+0x118>
    }
    if (pevent->OSEventPtr != (void *)0) {            /* Make sure mailbox doesn't already have a msg  */
 c103e4c:	e51b3010 	ldr	r3, [fp, #-16]
 c103e50:	e5933004 	ldr	r3, [r3, #4]
 c103e54:	e3530000 	cmp	r3, #0
 c103e58:	0a000003 	beq	c103e6c <OSMboxPostOpt+0x100>
        OS_EXIT_CRITICAL();
 c103e5c:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 c103e60:	e121f000 	msr	CPSR_c, r0
        return (OS_MBOX_FULL);
 c103e64:	e3a03014 	mov	r3, #20
 c103e68:	ea000005 	b	c103e84 <OSMboxPostOpt+0x118>
    }
    pevent->OSEventPtr = msg;                         /* Place message in mailbox                      */
 c103e6c:	e51b3010 	ldr	r3, [fp, #-16]
 c103e70:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
 c103e74:	e5832004 	str	r2, [r3, #4]
    OS_EXIT_CRITICAL();
 c103e78:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 c103e7c:	e121f000 	msr	CPSR_c, r0
    return (OS_NO_ERR);
 c103e80:	e3a03000 	mov	r3, #0
}
 c103e84:	e1a00003 	mov	r0, r3
 c103e88:	e24bd00c 	sub	sp, fp, #12
 c103e8c:	e89d6800 	ldm	sp, {fp, sp, lr}
 c103e90:	e12fff1e 	bx	lr

0c103e94 <OSMboxQuery>:
*********************************************************************************************************
*/

#if OS_MBOX_QUERY_EN > 0
INT8U  OSMboxQuery (OS_EVENT *pevent, OS_MBOX_DATA *p_mbox_data)
{
 c103e94:	e1a0c00d 	mov	ip, sp
 c103e98:	e92dd800 	push	{fp, ip, lr, pc}
 c103e9c:	e24cb004 	sub	fp, ip, #4
 c103ea0:	e24dd010 	sub	sp, sp, #16
 c103ea4:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
 c103ea8:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4


    cpu_sr = 0;                                            /* Prevent compiler warning                 */
#endif    
#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 c103eac:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c103eb0:	e3530000 	cmp	r3, #0
 c103eb4:	1a000001 	bne	c103ec0 <OSMboxQuery+0x2c>
        return (OS_ERR_PEVENT_NULL);
 c103eb8:	e3a03004 	mov	r3, #4
 c103ebc:	ea000064 	b	c104054 <OSMboxQuery+0x1c0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {       /* Validate event block type                */
 c103ec0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c103ec4:	e5d33000 	ldrb	r3, [r3]
 c103ec8:	e3530001 	cmp	r3, #1
 c103ecc:	0a000001 	beq	c103ed8 <OSMboxQuery+0x44>
        return (OS_ERR_EVENT_TYPE);
 c103ed0:	e3a03001 	mov	r3, #1
 c103ed4:	ea00005e 	b	c104054 <OSMboxQuery+0x1c0>
    }
    OS_ENTER_CRITICAL();
 c103ed8:	e10f0000 	mrs	r0, CPSR
 c103edc:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
 c103ee0:	e38000c0 	orr	r0, r0, #192	; 0xc0
 c103ee4:	e121f000 	msr	CPSR_c, r0
    p_mbox_data->OSEventGrp = pevent->OSEventGrp;          /* Copy message mailbox wait list           */
 c103ee8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c103eec:	e5d32001 	ldrb	r2, [r3, #1]
 c103ef0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 c103ef4:	e5c3200c 	strb	r2, [r3, #12]
    psrc                    = &pevent->OSEventTbl[0];
 c103ef8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c103efc:	e2833008 	add	r3, r3, #8
 c103f00:	e50b3010 	str	r3, [fp, #-16]
    pdest                   = &p_mbox_data->OSEventTbl[0];
 c103f04:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 c103f08:	e2833004 	add	r3, r3, #4
 c103f0c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

#if OS_EVENT_TBL_SIZE > 0
    *pdest++ = *psrc++;
 c103f10:	e51b3010 	ldr	r3, [fp, #-16]
 c103f14:	e5d32000 	ldrb	r2, [r3]
 c103f18:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c103f1c:	e5c32000 	strb	r2, [r3]
 c103f20:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c103f24:	e2833001 	add	r3, r3, #1
 c103f28:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
 c103f2c:	e51b3010 	ldr	r3, [fp, #-16]
 c103f30:	e2833001 	add	r3, r3, #1
 c103f34:	e50b3010 	str	r3, [fp, #-16]
#endif

#if OS_EVENT_TBL_SIZE > 1
    *pdest++ = *psrc++;
 c103f38:	e51b3010 	ldr	r3, [fp, #-16]
 c103f3c:	e5d32000 	ldrb	r2, [r3]
 c103f40:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c103f44:	e5c32000 	strb	r2, [r3]
 c103f48:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c103f4c:	e2833001 	add	r3, r3, #1
 c103f50:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
 c103f54:	e51b3010 	ldr	r3, [fp, #-16]
 c103f58:	e2833001 	add	r3, r3, #1
 c103f5c:	e50b3010 	str	r3, [fp, #-16]
#endif

#if OS_EVENT_TBL_SIZE > 2
    *pdest++ = *psrc++;
 c103f60:	e51b3010 	ldr	r3, [fp, #-16]
 c103f64:	e5d32000 	ldrb	r2, [r3]
 c103f68:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c103f6c:	e5c32000 	strb	r2, [r3]
 c103f70:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c103f74:	e2833001 	add	r3, r3, #1
 c103f78:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
 c103f7c:	e51b3010 	ldr	r3, [fp, #-16]
 c103f80:	e2833001 	add	r3, r3, #1
 c103f84:	e50b3010 	str	r3, [fp, #-16]
#endif

#if OS_EVENT_TBL_SIZE > 3
    *pdest++ = *psrc++;
 c103f88:	e51b3010 	ldr	r3, [fp, #-16]
 c103f8c:	e5d32000 	ldrb	r2, [r3]
 c103f90:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c103f94:	e5c32000 	strb	r2, [r3]
 c103f98:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c103f9c:	e2833001 	add	r3, r3, #1
 c103fa0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
 c103fa4:	e51b3010 	ldr	r3, [fp, #-16]
 c103fa8:	e2833001 	add	r3, r3, #1
 c103fac:	e50b3010 	str	r3, [fp, #-16]
#endif

#if OS_EVENT_TBL_SIZE > 4
    *pdest++ = *psrc++;
 c103fb0:	e51b3010 	ldr	r3, [fp, #-16]
 c103fb4:	e5d32000 	ldrb	r2, [r3]
 c103fb8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c103fbc:	e5c32000 	strb	r2, [r3]
 c103fc0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c103fc4:	e2833001 	add	r3, r3, #1
 c103fc8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
 c103fcc:	e51b3010 	ldr	r3, [fp, #-16]
 c103fd0:	e2833001 	add	r3, r3, #1
 c103fd4:	e50b3010 	str	r3, [fp, #-16]
#endif

#if OS_EVENT_TBL_SIZE > 5
    *pdest++ = *psrc++;
 c103fd8:	e51b3010 	ldr	r3, [fp, #-16]
 c103fdc:	e5d32000 	ldrb	r2, [r3]
 c103fe0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c103fe4:	e5c32000 	strb	r2, [r3]
 c103fe8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c103fec:	e2833001 	add	r3, r3, #1
 c103ff0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
 c103ff4:	e51b3010 	ldr	r3, [fp, #-16]
 c103ff8:	e2833001 	add	r3, r3, #1
 c103ffc:	e50b3010 	str	r3, [fp, #-16]
#endif

#if OS_EVENT_TBL_SIZE > 6
    *pdest++ = *psrc++;
 c104000:	e51b3010 	ldr	r3, [fp, #-16]
 c104004:	e5d32000 	ldrb	r2, [r3]
 c104008:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c10400c:	e5c32000 	strb	r2, [r3]
 c104010:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c104014:	e2833001 	add	r3, r3, #1
 c104018:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
 c10401c:	e51b3010 	ldr	r3, [fp, #-16]
 c104020:	e2833001 	add	r3, r3, #1
 c104024:	e50b3010 	str	r3, [fp, #-16]
#endif

#if OS_EVENT_TBL_SIZE > 7
    *pdest   = *psrc;
 c104028:	e51b3010 	ldr	r3, [fp, #-16]
 c10402c:	e5d32000 	ldrb	r2, [r3]
 c104030:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c104034:	e5c32000 	strb	r2, [r3]
#endif
    p_mbox_data->OSMsg = pevent->OSEventPtr;               /* Get message from mailbox                 */
 c104038:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c10403c:	e5932004 	ldr	r2, [r3, #4]
 c104040:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 c104044:	e5832000 	str	r2, [r3]
    OS_EXIT_CRITICAL();
 c104048:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 c10404c:	e121f000 	msr	CPSR_c, r0
    return (OS_NO_ERR);
 c104050:	e3a03000 	mov	r3, #0
}
 c104054:	e1a00003 	mov	r0, r3
 c104058:	e24bd00c 	sub	sp, fp, #12
 c10405c:	e89d6800 	ldm	sp, {fp, sp, lr}
 c104060:	e12fff1e 	bx	lr

0c104064 <OSMemCreate>:
*                              free partition is available.
*********************************************************************************************************
*/

OS_MEM  *OSMemCreate (void *addr, INT32U nblks, INT32U blksize, INT8U *err)
{
 c104064:	e1a0c00d 	mov	ip, sp
 c104068:	e92dd800 	push	{fp, ip, lr, pc}
 c10406c:	e24cb004 	sub	fp, ip, #4
 c104070:	e24dd020 	sub	sp, sp, #32
 c104074:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
 c104078:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
 c10407c:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
 c104080:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4


    cpu_sr = 0;                                       /* Prevent compiler warning                       */
#endif    
#if OS_ARG_CHK_EN > 0
    if (addr == (void *)0) {                          /* Must pass a valid address for the memory part. */
 c104084:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c104088:	e3530000 	cmp	r3, #0
 c10408c:	1a000004 	bne	c1040a4 <OSMemCreate+0x40>
        *err = OS_MEM_INVALID_ADDR;
 c104090:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
 c104094:	e3a02076 	mov	r2, #118	; 0x76
 c104098:	e5c32000 	strb	r2, [r3]
        return ((OS_MEM *)0);
 c10409c:	e3a03000 	mov	r3, #0
 c1040a0:	ea00005a 	b	c104210 <OSMemCreate+0x1ac>
    }
    if (nblks < 2) {                                  /* Must have at least 2 blocks per partition      */
 c1040a4:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
 c1040a8:	e3530001 	cmp	r3, #1
 c1040ac:	8a000004 	bhi	c1040c4 <OSMemCreate+0x60>
        *err = OS_MEM_INVALID_BLKS;
 c1040b0:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
 c1040b4:	e3a0206f 	mov	r2, #111	; 0x6f
 c1040b8:	e5c32000 	strb	r2, [r3]
        return ((OS_MEM *)0);
 c1040bc:	e3a03000 	mov	r3, #0
 c1040c0:	ea000052 	b	c104210 <OSMemCreate+0x1ac>
    }
    if (blksize < sizeof(void *)) {                   /* Must contain space for at least a pointer      */
 c1040c4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
 c1040c8:	e3530003 	cmp	r3, #3
 c1040cc:	8a000004 	bhi	c1040e4 <OSMemCreate+0x80>
        *err = OS_MEM_INVALID_SIZE;
 c1040d0:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
 c1040d4:	e3a02070 	mov	r2, #112	; 0x70
 c1040d8:	e5c32000 	strb	r2, [r3]
        return ((OS_MEM *)0);
 c1040dc:	e3a03000 	mov	r3, #0
 c1040e0:	ea00004a 	b	c104210 <OSMemCreate+0x1ac>
    }
#endif
    OS_ENTER_CRITICAL();
 c1040e4:	e10f0000 	mrs	r0, CPSR
 c1040e8:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
 c1040ec:	e38000c0 	orr	r0, r0, #192	; 0xc0
 c1040f0:	e121f000 	msr	CPSR_c, r0
    pmem = OSMemFreeList;                             /* Get next free memory partition                */
 c1040f4:	e59f3124 	ldr	r3, [pc, #292]	; c104220 <OSMemCreate+0x1bc>
 c1040f8:	e5933000 	ldr	r3, [r3]
 c1040fc:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    if (OSMemFreeList != (OS_MEM *)0) {               /* See if pool of free partitions was empty      */
 c104100:	e59f3118 	ldr	r3, [pc, #280]	; c104220 <OSMemCreate+0x1bc>
 c104104:	e5933000 	ldr	r3, [r3]
 c104108:	e3530000 	cmp	r3, #0
 c10410c:	0a000005 	beq	c104128 <OSMemCreate+0xc4>
        OSMemFreeList = (OS_MEM *)OSMemFreeList->OSMemFreeList;
 c104110:	e59f3108 	ldr	r3, [pc, #264]	; c104220 <OSMemCreate+0x1bc>
 c104114:	e5933000 	ldr	r3, [r3]
 c104118:	e5933004 	ldr	r3, [r3, #4]
 c10411c:	e1a02003 	mov	r2, r3
 c104120:	e59f30f8 	ldr	r3, [pc, #248]	; c104220 <OSMemCreate+0x1bc>
 c104124:	e5832000 	str	r2, [r3]
    }
    OS_EXIT_CRITICAL();
 c104128:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 c10412c:	e121f000 	msr	CPSR_c, r0
    if (pmem == (OS_MEM *)0) {                        /* See if we have a memory partition             */
 c104130:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 c104134:	e3530000 	cmp	r3, #0
 c104138:	1a000004 	bne	c104150 <OSMemCreate+0xec>
        *err = OS_MEM_INVALID_PART;
 c10413c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
 c104140:	e3a0206e 	mov	r2, #110	; 0x6e
 c104144:	e5c32000 	strb	r2, [r3]
        return ((OS_MEM *)0);
 c104148:	e3a03000 	mov	r3, #0
 c10414c:	ea00002f 	b	c104210 <OSMemCreate+0x1ac>
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
 c104150:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c104154:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    pblk  = (INT8U *)((INT32U)addr + blksize);
 c104158:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
 c10415c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
 c104160:	e0823003 	add	r3, r2, r3
 c104164:	e50b3010 	str	r3, [fp, #-16]
    for (i = 0; i < (nblks - 1); i++) {
 c104168:	e3a03000 	mov	r3, #0
 c10416c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
 c104170:	ea00000b 	b	c1041a4 <OSMemCreate+0x140>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
 c104174:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c104178:	e51b2010 	ldr	r2, [fp, #-16]
 c10417c:	e5832000 	str	r2, [r3]
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
 c104180:	e51b3010 	ldr	r3, [fp, #-16]
 c104184:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
 c104188:	e51b2010 	ldr	r2, [fp, #-16]
 c10418c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
 c104190:	e0823003 	add	r3, r2, r3
 c104194:	e50b3010 	str	r3, [fp, #-16]
        *err = OS_MEM_INVALID_PART;
        return ((OS_MEM *)0);
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
    pblk  = (INT8U *)((INT32U)addr + blksize);
    for (i = 0; i < (nblks - 1); i++) {
 c104198:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c10419c:	e2833001 	add	r3, r3, #1
 c1041a0:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
 c1041a4:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
 c1041a8:	e2432001 	sub	r2, r3, #1
 c1041ac:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c1041b0:	e1520003 	cmp	r2, r3
 c1041b4:	8affffee 	bhi	c104174 <OSMemCreate+0x110>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
    }
    *plink              = (void *)0;                  /* Last memory block points to NULL              */
 c1041b8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c1041bc:	e3a02000 	mov	r2, #0
 c1041c0:	e5832000 	str	r2, [r3]
    pmem->OSMemAddr     = addr;                       /* Store start address of memory partition       */
 c1041c4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 c1041c8:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
 c1041cc:	e5832000 	str	r2, [r3]
    pmem->OSMemFreeList = addr;                       /* Initialize pointer to pool of free blocks     */
 c1041d0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 c1041d4:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
 c1041d8:	e5832004 	str	r2, [r3, #4]
    pmem->OSMemNFree    = nblks;                      /* Store number of free blocks in MCB            */
 c1041dc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 c1041e0:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
 c1041e4:	e5832010 	str	r2, [r3, #16]
    pmem->OSMemNBlks    = nblks;
 c1041e8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 c1041ec:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
 c1041f0:	e583200c 	str	r2, [r3, #12]
    pmem->OSMemBlkSize  = blksize;                    /* Store block size of each memory blocks        */
 c1041f4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 c1041f8:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
 c1041fc:	e5832008 	str	r2, [r3, #8]
    *err                = OS_NO_ERR;
 c104200:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
 c104204:	e3a02000 	mov	r2, #0
 c104208:	e5c32000 	strb	r2, [r3]
    return (pmem);
 c10420c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
}
 c104210:	e1a00003 	mov	r0, r3
 c104214:	e24bd00c 	sub	sp, fp, #12
 c104218:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10421c:	e12fff1e 	bx	lr
 c104220:	0c119c2c 	.word	0x0c119c2c

0c104224 <OSMemGet>:
*               A pointer to NULL if an error is detected
*********************************************************************************************************
*/

void  *OSMemGet (OS_MEM *pmem, INT8U *err)
{
 c104224:	e1a0c00d 	mov	ip, sp
 c104228:	e92dd800 	push	{fp, ip, lr, pc}
 c10422c:	e24cb004 	sub	fp, ip, #4
 c104230:	e24dd010 	sub	sp, sp, #16
 c104234:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
 c104238:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4


    cpu_sr = 0;                                       /* Prevent compiler warning                       */
#endif    
#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                        /* Must point to a valid memory partition         */
 c10423c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c104240:	e3530000 	cmp	r3, #0
 c104244:	1a000004 	bne	c10425c <OSMemGet+0x38>
        *err = OS_MEM_INVALID_PMEM;
 c104248:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 c10424c:	e3a02074 	mov	r2, #116	; 0x74
 c104250:	e5c32000 	strb	r2, [r3]
        return ((OS_MEM *)0);
 c104254:	e3a03000 	mov	r3, #0
 c104258:	ea000020 	b	c1042e0 <OSMemGet+0xbc>
    }
#endif
    OS_ENTER_CRITICAL();
 c10425c:	e10f0000 	mrs	r0, CPSR
 c104260:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
 c104264:	e38000c0 	orr	r0, r0, #192	; 0xc0
 c104268:	e121f000 	msr	CPSR_c, r0
    if (pmem->OSMemNFree > 0) {                       /* See if there are any free memory blocks       */
 c10426c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c104270:	e5933010 	ldr	r3, [r3, #16]
 c104274:	e3530000 	cmp	r3, #0
 c104278:	0a000012 	beq	c1042c8 <OSMemGet+0xa4>
        pblk                = pmem->OSMemFreeList;    /* Yes, point to next free memory block          */
 c10427c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c104280:	e5933004 	ldr	r3, [r3, #4]
 c104284:	e50b3010 	str	r3, [fp, #-16]
        pmem->OSMemFreeList = *(void **)pblk;         /*      Adjust pointer to new free list          */
 c104288:	e51b3010 	ldr	r3, [fp, #-16]
 c10428c:	e5932000 	ldr	r2, [r3]
 c104290:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c104294:	e5832004 	str	r2, [r3, #4]
        pmem->OSMemNFree--;                           /*      One less memory block in this partition  */
 c104298:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c10429c:	e5933010 	ldr	r3, [r3, #16]
 c1042a0:	e2432001 	sub	r2, r3, #1
 c1042a4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c1042a8:	e5832010 	str	r2, [r3, #16]
        OS_EXIT_CRITICAL();
 c1042ac:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 c1042b0:	e121f000 	msr	CPSR_c, r0
        *err = OS_NO_ERR;                             /*      No error                                 */
 c1042b4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 c1042b8:	e3a02000 	mov	r2, #0
 c1042bc:	e5c32000 	strb	r2, [r3]
        return (pblk);                                /*      Return memory block to caller            */
 c1042c0:	e51b3010 	ldr	r3, [fp, #-16]
 c1042c4:	ea000005 	b	c1042e0 <OSMemGet+0xbc>
    }
    OS_EXIT_CRITICAL();
 c1042c8:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 c1042cc:	e121f000 	msr	CPSR_c, r0
    *err = OS_MEM_NO_FREE_BLKS;                       /* No,  Notify caller of empty memory partition  */
 c1042d0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 c1042d4:	e3a02071 	mov	r2, #113	; 0x71
 c1042d8:	e5c32000 	strb	r2, [r3]
    return ((void *)0);                               /*      Return NULL pointer to caller            */
 c1042dc:	e3a03000 	mov	r3, #0
}
 c1042e0:	e1a00003 	mov	r0, r3
 c1042e4:	e24bd00c 	sub	sp, fp, #12
 c1042e8:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1042ec:	e12fff1e 	bx	lr

0c1042f0 <OSMemNameGet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
INT8U  OSMemNameGet (OS_MEM *pmem, char *pname, INT8U *err)
{
 c1042f0:	e1a0c00d 	mov	ip, sp
 c1042f4:	e92dd800 	push	{fp, ip, lr, pc}
 c1042f8:	e24cb004 	sub	fp, ip, #4
 c1042fc:	e24dd018 	sub	sp, sp, #24
 c104300:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
 c104304:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
 c104308:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0



    cpu_sr = 0;                                  /* Prevent compiler warning                           */
#endif    
    OS_ENTER_CRITICAL();
 c10430c:	e10f0000 	mrs	r0, CPSR
 c104310:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
 c104314:	e38000c0 	orr	r0, r0, #192	; 0xc0
 c104318:	e121f000 	msr	CPSR_c, r0
#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
 c10431c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c104320:	e3530000 	cmp	r3, #0
 c104324:	1a000006 	bne	c104344 <OSMemNameGet+0x54>
        OS_EXIT_CRITICAL();                      /* Yes                                                */
 c104328:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 c10432c:	e121f000 	msr	CPSR_c, r0
        *err = OS_MEM_INVALID_PMEM;
 c104330:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c104334:	e3a02074 	mov	r2, #116	; 0x74
 c104338:	e5c32000 	strb	r2, [r3]
        return (0);
 c10433c:	e3a03000 	mov	r3, #0
 c104340:	ea000016 	b	c1043a0 <OSMemNameGet+0xb0>
    }
    if (pname == (char *)0) {                    /* Is 'pname' a NULL pointer?                         */
 c104344:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 c104348:	e3530000 	cmp	r3, #0
 c10434c:	1a000006 	bne	c10436c <OSMemNameGet+0x7c>
        OS_EXIT_CRITICAL();                      /* Yes                                                */
 c104350:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 c104354:	e121f000 	msr	CPSR_c, r0
        *err = OS_ERR_PNAME_NULL;
 c104358:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c10435c:	e3a0200f 	mov	r2, #15
 c104360:	e5c32000 	strb	r2, [r3]
        return (0);
 c104364:	e3a03000 	mov	r3, #0
 c104368:	ea00000c 	b	c1043a0 <OSMemNameGet+0xb0>
    }
#endif
    len  = OS_StrCopy(pname, pmem->OSMemName);   /* Copy name from OS_MEM                              */
 c10436c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c104370:	e2833014 	add	r3, r3, #20
 c104374:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
 c104378:	e1a01003 	mov	r1, r3
 c10437c:	ebfff520 	bl	c101804 <OS_StrCopy>
 c104380:	e1a03000 	mov	r3, r0
 c104384:	e54b300d 	strb	r3, [fp, #-13]
    OS_EXIT_CRITICAL();
 c104388:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 c10438c:	e121f000 	msr	CPSR_c, r0
    *err = OS_NO_ERR;
 c104390:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c104394:	e3a02000 	mov	r2, #0
 c104398:	e5c32000 	strb	r2, [r3]
    return (len);
 c10439c:	e55b300d 	ldrb	r3, [fp, #-13]
}
 c1043a0:	e1a00003 	mov	r0, r3
 c1043a4:	e24bd00c 	sub	sp, fp, #12
 c1043a8:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1043ac:	e12fff1e 	bx	lr

0c1043b0 <OSMemNameSet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
void  OSMemNameSet (OS_MEM *pmem, char *pname, INT8U *err)
{
 c1043b0:	e1a0c00d 	mov	ip, sp
 c1043b4:	e92dd800 	push	{fp, ip, lr, pc}
 c1043b8:	e24cb004 	sub	fp, ip, #4
 c1043bc:	e24dd018 	sub	sp, sp, #24
 c1043c0:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
 c1043c4:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
 c1043c8:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0



    cpu_sr = 0;                                  /* Prevent compiler warning                           */
#endif    
    OS_ENTER_CRITICAL();
 c1043cc:	e10f0000 	mrs	r0, CPSR
 c1043d0:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
 c1043d4:	e38000c0 	orr	r0, r0, #192	; 0xc0
 c1043d8:	e121f000 	msr	CPSR_c, r0
#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
 c1043dc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c1043e0:	e3530000 	cmp	r3, #0
 c1043e4:	1a000005 	bne	c104400 <OSMemNameSet+0x50>
        OS_EXIT_CRITICAL();                      /* Yes                                                */
 c1043e8:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 c1043ec:	e121f000 	msr	CPSR_c, r0
        *err = OS_MEM_INVALID_PMEM;
 c1043f0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c1043f4:	e3a02074 	mov	r2, #116	; 0x74
 c1043f8:	e5c32000 	strb	r2, [r3]
        return;
 c1043fc:	ea00001f 	b	c104480 <OSMemNameSet+0xd0>
    }
    if (pname == (char *)0) {                    /* Is 'pname' a NULL pointer?                         */
 c104400:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 c104404:	e3530000 	cmp	r3, #0
 c104408:	1a000005 	bne	c104424 <OSMemNameSet+0x74>
        OS_EXIT_CRITICAL();                      /* Yes                                                */
 c10440c:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 c104410:	e121f000 	msr	CPSR_c, r0
        *err = OS_ERR_PNAME_NULL;
 c104414:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c104418:	e3a0200f 	mov	r2, #15
 c10441c:	e5c32000 	strb	r2, [r3]
        return;
 c104420:	ea000016 	b	c104480 <OSMemNameSet+0xd0>
    }
#endif
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
 c104424:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
 c104428:	ebfff517 	bl	c10188c <OS_StrLen>
 c10442c:	e1a03000 	mov	r3, r0
 c104430:	e54b300d 	strb	r3, [fp, #-13]
    if (len > (OS_MEM_NAME_SIZE - 1)) {          /* No                                                 */
 c104434:	e55b300d 	ldrb	r3, [fp, #-13]
 c104438:	e353001f 	cmp	r3, #31
 c10443c:	9a000005 	bls	c104458 <OSMemNameSet+0xa8>
        OS_EXIT_CRITICAL();
 c104440:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 c104444:	e121f000 	msr	CPSR_c, r0
        *err = OS_MEM_NAME_TOO_LONG;
 c104448:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c10444c:	e3a02077 	mov	r2, #119	; 0x77
 c104450:	e5c32000 	strb	r2, [r3]
        return;
 c104454:	ea000009 	b	c104480 <OSMemNameSet+0xd0>
    } 
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
 c104458:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c10445c:	e2833014 	add	r3, r3, #20
 c104460:	e1a00003 	mov	r0, r3
 c104464:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
 c104468:	ebfff4e5 	bl	c101804 <OS_StrCopy>
    OS_EXIT_CRITICAL();
 c10446c:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 c104470:	e121f000 	msr	CPSR_c, r0
    *err = OS_NO_ERR;
 c104474:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c104478:	e3a02000 	mov	r2, #0
 c10447c:	e5c32000 	strb	r2, [r3]
}
 c104480:	e24bd00c 	sub	sp, fp, #12
 c104484:	e89d6800 	ldm	sp, {fp, sp, lr}
 c104488:	e12fff1e 	bx	lr

0c10448c <OSMemPut>:
*               OS_MEM_INVALID_PBLK  if you passed a NULL pointer for the block to release.
*********************************************************************************************************
*/

INT8U  OSMemPut (OS_MEM *pmem, void *pblk)
{
 c10448c:	e1a0c00d 	mov	ip, sp
 c104490:	e92dd800 	push	{fp, ip, lr, pc}
 c104494:	e24cb004 	sub	fp, ip, #4
 c104498:	e24dd008 	sub	sp, sp, #8
 c10449c:	e50b0010 	str	r0, [fp, #-16]
 c1044a0:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    

    cpu_sr = 0;                                  /* Prevent compiler warning                           */
#endif    
#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
 c1044a4:	e51b3010 	ldr	r3, [fp, #-16]
 c1044a8:	e3530000 	cmp	r3, #0
 c1044ac:	1a000001 	bne	c1044b8 <OSMemPut+0x2c>
        return (OS_MEM_INVALID_PMEM);
 c1044b0:	e3a03074 	mov	r3, #116	; 0x74
 c1044b4:	ea000021 	b	c104540 <OSMemPut+0xb4>
    }
    if (pblk == (void *)0) {                     /* Must release a valid block                         */
 c1044b8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c1044bc:	e3530000 	cmp	r3, #0
 c1044c0:	1a000001 	bne	c1044cc <OSMemPut+0x40>
        return (OS_MEM_INVALID_PBLK);
 c1044c4:	e3a03073 	mov	r3, #115	; 0x73
 c1044c8:	ea00001c 	b	c104540 <OSMemPut+0xb4>
    }
#endif
    OS_ENTER_CRITICAL();
 c1044cc:	e10f0000 	mrs	r0, CPSR
 c1044d0:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
 c1044d4:	e38000c0 	orr	r0, r0, #192	; 0xc0
 c1044d8:	e121f000 	msr	CPSR_c, r0
    if (pmem->OSMemNFree >= pmem->OSMemNBlks) {  /* Make sure all blocks not already returned          */
 c1044dc:	e51b3010 	ldr	r3, [fp, #-16]
 c1044e0:	e5932010 	ldr	r2, [r3, #16]
 c1044e4:	e51b3010 	ldr	r3, [fp, #-16]
 c1044e8:	e593300c 	ldr	r3, [r3, #12]
 c1044ec:	e1520003 	cmp	r2, r3
 c1044f0:	3a000003 	bcc	c104504 <OSMemPut+0x78>
        OS_EXIT_CRITICAL();
 c1044f4:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 c1044f8:	e121f000 	msr	CPSR_c, r0
        return (OS_MEM_FULL);
 c1044fc:	e3a03072 	mov	r3, #114	; 0x72
 c104500:	ea00000e 	b	c104540 <OSMemPut+0xb4>
    }
    *(void **)pblk      = pmem->OSMemFreeList;   /* Insert released block into free block list         */
 c104504:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c104508:	e51b2010 	ldr	r2, [fp, #-16]
 c10450c:	e5922004 	ldr	r2, [r2, #4]
 c104510:	e5832000 	str	r2, [r3]
    pmem->OSMemFreeList = pblk;
 c104514:	e51b3010 	ldr	r3, [fp, #-16]
 c104518:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
 c10451c:	e5832004 	str	r2, [r3, #4]
    pmem->OSMemNFree++;                          /* One more memory block in this partition            */
 c104520:	e51b3010 	ldr	r3, [fp, #-16]
 c104524:	e5933010 	ldr	r3, [r3, #16]
 c104528:	e2832001 	add	r2, r3, #1
 c10452c:	e51b3010 	ldr	r3, [fp, #-16]
 c104530:	e5832010 	str	r2, [r3, #16]
    OS_EXIT_CRITICAL();
 c104534:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 c104538:	e121f000 	msr	CPSR_c, r0
    return (OS_NO_ERR);                          /* Notify caller that memory block was released       */
 c10453c:	e3a03000 	mov	r3, #0
}
 c104540:	e1a00003 	mov	r0, r3
 c104544:	e24bd00c 	sub	sp, fp, #12
 c104548:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10454c:	e12fff1e 	bx	lr

0c104550 <OSMemQuery>:
*********************************************************************************************************
*/

#if OS_MEM_QUERY_EN > 0
INT8U  OSMemQuery (OS_MEM *pmem, OS_MEM_DATA *p_mem_data)
{
 c104550:	e1a0c00d 	mov	ip, sp
 c104554:	e92dd800 	push	{fp, ip, lr, pc}
 c104558:	e24cb004 	sub	fp, ip, #4
 c10455c:	e24dd008 	sub	sp, sp, #8
 c104560:	e50b0010 	str	r0, [fp, #-16]
 c104564:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    

    cpu_sr = 0;                                  /* Prevent compiler warning                           */
#endif    
#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
 c104568:	e51b3010 	ldr	r3, [fp, #-16]
 c10456c:	e3530000 	cmp	r3, #0
 c104570:	1a000001 	bne	c10457c <OSMemQuery+0x2c>
        return (OS_MEM_INVALID_PMEM);
 c104574:	e3a03074 	mov	r3, #116	; 0x74
 c104578:	ea000026 	b	c104618 <OSMemQuery+0xc8>
    }
    if (p_mem_data == (OS_MEM_DATA *)0) {        /* Must release a valid storage area for the data     */
 c10457c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c104580:	e3530000 	cmp	r3, #0
 c104584:	1a000001 	bne	c104590 <OSMemQuery+0x40>
        return (OS_MEM_INVALID_PDATA);
 c104588:	e3a03075 	mov	r3, #117	; 0x75
 c10458c:	ea000021 	b	c104618 <OSMemQuery+0xc8>
    }
#endif
    OS_ENTER_CRITICAL();
 c104590:	e10f0000 	mrs	r0, CPSR
 c104594:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
 c104598:	e38000c0 	orr	r0, r0, #192	; 0xc0
 c10459c:	e121f000 	msr	CPSR_c, r0
    p_mem_data->OSAddr     = pmem->OSMemAddr;
 c1045a0:	e51b3010 	ldr	r3, [fp, #-16]
 c1045a4:	e5932000 	ldr	r2, [r3]
 c1045a8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c1045ac:	e5832000 	str	r2, [r3]
    p_mem_data->OSFreeList = pmem->OSMemFreeList;
 c1045b0:	e51b3010 	ldr	r3, [fp, #-16]
 c1045b4:	e5932004 	ldr	r2, [r3, #4]
 c1045b8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c1045bc:	e5832004 	str	r2, [r3, #4]
    p_mem_data->OSBlkSize  = pmem->OSMemBlkSize;
 c1045c0:	e51b3010 	ldr	r3, [fp, #-16]
 c1045c4:	e5932008 	ldr	r2, [r3, #8]
 c1045c8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c1045cc:	e5832008 	str	r2, [r3, #8]
    p_mem_data->OSNBlks    = pmem->OSMemNBlks;
 c1045d0:	e51b3010 	ldr	r3, [fp, #-16]
 c1045d4:	e593200c 	ldr	r2, [r3, #12]
 c1045d8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c1045dc:	e583200c 	str	r2, [r3, #12]
    p_mem_data->OSNFree    = pmem->OSMemNFree;
 c1045e0:	e51b3010 	ldr	r3, [fp, #-16]
 c1045e4:	e5932010 	ldr	r2, [r3, #16]
 c1045e8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c1045ec:	e5832010 	str	r2, [r3, #16]
    OS_EXIT_CRITICAL();
 c1045f0:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 c1045f4:	e121f000 	msr	CPSR_c, r0
    p_mem_data->OSNUsed    = p_mem_data->OSNBlks - p_mem_data->OSNFree;
 c1045f8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c1045fc:	e593200c 	ldr	r2, [r3, #12]
 c104600:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c104604:	e5933010 	ldr	r3, [r3, #16]
 c104608:	e0632002 	rsb	r2, r3, r2
 c10460c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c104610:	e5832014 	str	r2, [r3, #20]
    return (OS_NO_ERR);
 c104614:	e3a03000 	mov	r3, #0
}
 c104618:	e1a00003 	mov	r0, r3
 c10461c:	e24bd00c 	sub	sp, fp, #12
 c104620:	e89d6800 	ldm	sp, {fp, sp, lr}
 c104624:	e12fff1e 	bx	lr

0c104628 <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_MemInit (void)
{
 c104628:	e1a0c00d 	mov	ip, sp
 c10462c:	e92dd800 	push	{fp, ip, lr, pc}
 c104630:	e24cb004 	sub	fp, ip, #4
 c104634:	e24dd008 	sub	sp, sp, #8
#if OS_MAX_MEM_PART >= 2
    OS_MEM  *pmem;
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl)); /* Clear the memory partition table            */
 c104638:	e59f30c8 	ldr	r3, [pc, #200]	; c104708 <OS_MemInit+0xe0>
 c10463c:	e1a00003 	mov	r0, r3
 c104640:	e3a01f41 	mov	r1, #260	; 0x104
 c104644:	ebfff3f3 	bl	c101618 <OS_MemClr>
    pmem = (OS_MEM *)&OSMemTbl[0];                      /* Point to memory control block (MCB)         */
 c104648:	e59f30b8 	ldr	r3, [pc, #184]	; c104708 <OS_MemInit+0xe0>
 c10464c:	e50b3010 	str	r3, [fp, #-16]
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {       /* Init. list of free memory partitions        */
 c104650:	e3a03000 	mov	r3, #0
 c104654:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
 c104658:	ea000018 	b	c1046c0 <OS_MemInit+0x98>
        pmem->OSMemFreeList = (void *)&OSMemTbl[i+1];   /* Chain list of free partitions               */
 c10465c:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
 c104660:	e2832001 	add	r2, r3, #1
 c104664:	e1a03002 	mov	r3, r2
 c104668:	e1a03083 	lsl	r3, r3, #1
 c10466c:	e0833002 	add	r3, r3, r2
 c104670:	e1a03103 	lsl	r3, r3, #2
 c104674:	e0833002 	add	r3, r3, r2
 c104678:	e1a03103 	lsl	r3, r3, #2
 c10467c:	e1a02003 	mov	r2, r3
 c104680:	e59f3080 	ldr	r3, [pc, #128]	; c104708 <OS_MemInit+0xe0>
 c104684:	e0822003 	add	r2, r2, r3
 c104688:	e51b3010 	ldr	r3, [fp, #-16]
 c10468c:	e5832004 	str	r2, [r3, #4]
#if OS_MEM_NAME_SIZE > 1
        pmem->OSMemName[0]  = '?';                      /* Unknown name                                */
 c104690:	e51b3010 	ldr	r3, [fp, #-16]
 c104694:	e3a0203f 	mov	r2, #63	; 0x3f
 c104698:	e5c32014 	strb	r2, [r3, #20]
        pmem->OSMemName[1]  = OS_ASCII_NUL;
 c10469c:	e51b3010 	ldr	r3, [fp, #-16]
 c1046a0:	e3a02000 	mov	r2, #0
 c1046a4:	e5c32015 	strb	r2, [r3, #21]
#endif
        pmem++;
 c1046a8:	e51b3010 	ldr	r3, [fp, #-16]
 c1046ac:	e2833034 	add	r3, r3, #52	; 0x34
 c1046b0:	e50b3010 	str	r3, [fp, #-16]
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl)); /* Clear the memory partition table            */
    pmem = (OS_MEM *)&OSMemTbl[0];                      /* Point to memory control block (MCB)         */
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {       /* Init. list of free memory partitions        */
 c1046b4:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
 c1046b8:	e2833001 	add	r3, r3, #1
 c1046bc:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
 c1046c0:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
 c1046c4:	e3530003 	cmp	r3, #3
 c1046c8:	9affffe3 	bls	c10465c <OS_MemInit+0x34>
        pmem->OSMemName[0]  = '?';                      /* Unknown name                                */
        pmem->OSMemName[1]  = OS_ASCII_NUL;
#endif
        pmem++;
    }
    pmem->OSMemFreeList = (void *)0;                    /* Initialize last node                        */
 c1046cc:	e51b3010 	ldr	r3, [fp, #-16]
 c1046d0:	e3a02000 	mov	r2, #0
 c1046d4:	e5832004 	str	r2, [r3, #4]
#if OS_MEM_NAME_SIZE > 1
    pmem->OSMemName[0]  = '?';                          /* Unknown name                                */
 c1046d8:	e51b3010 	ldr	r3, [fp, #-16]
 c1046dc:	e3a0203f 	mov	r2, #63	; 0x3f
 c1046e0:	e5c32014 	strb	r2, [r3, #20]
    pmem->OSMemName[1]  = OS_ASCII_NUL;
 c1046e4:	e51b3010 	ldr	r3, [fp, #-16]
 c1046e8:	e3a02000 	mov	r2, #0
 c1046ec:	e5c32015 	strb	r2, [r3, #21]
#endif

    OSMemFreeList       = (OS_MEM *)&OSMemTbl[0];       /* Point to beginning of free list             */
 c1046f0:	e59f3014 	ldr	r3, [pc, #20]	; c10470c <OS_MemInit+0xe4>
 c1046f4:	e59f200c 	ldr	r2, [pc, #12]	; c104708 <OS_MemInit+0xe0>
 c1046f8:	e5832000 	str	r2, [r3]
#endif
}
 c1046fc:	e24bd00c 	sub	sp, fp, #12
 c104700:	e89d6800 	ldm	sp, {fp, sp, lr}
 c104704:	e12fff1e 	bx	lr
 c104708:	0c119314 	.word	0x0c119314
 c10470c:	0c119c2c 	.word	0x0c119c2c

0c104710 <OSMutexAccept>:
*********************************************************************************************************
*/

#if OS_MUTEX_ACCEPT_EN > 0
INT8U  OSMutexAccept (OS_EVENT *pevent, INT8U *err)
{
 c104710:	e1a0c00d 	mov	ip, sp
 c104714:	e92dd800 	push	{fp, ip, lr, pc}
 c104718:	e24cb004 	sub	fp, ip, #4
 c10471c:	e24dd008 	sub	sp, sp, #8
 c104720:	e50b0010 	str	r0, [fp, #-16]
 c104724:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec

    
    
    cpu_sr = 0;                                        /* Prevent compiler warning                     */
#endif    
    if (OSIntNesting > 0) {                            /* Make sure it's not called from an ISR        */
 c104728:	e59f311c 	ldr	r3, [pc, #284]	; c10484c <OSMutexAccept+0x13c>
 c10472c:	e5d33000 	ldrb	r3, [r3]
 c104730:	e3530000 	cmp	r3, #0
 c104734:	0a000004 	beq	c10474c <OSMutexAccept+0x3c>
        *err = OS_ERR_PEND_ISR;
 c104738:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c10473c:	e3a02002 	mov	r2, #2
 c104740:	e5c32000 	strb	r2, [r3]
        return (0);
 c104744:	e3a03000 	mov	r3, #0
 c104748:	ea00003b 	b	c10483c <OSMutexAccept+0x12c>
    }
#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
 c10474c:	e51b3010 	ldr	r3, [fp, #-16]
 c104750:	e3530000 	cmp	r3, #0
 c104754:	1a000004 	bne	c10476c <OSMutexAccept+0x5c>
        *err = OS_ERR_PEVENT_NULL;
 c104758:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c10475c:	e3a02004 	mov	r2, #4
 c104760:	e5c32000 	strb	r2, [r3]
        return (0);
 c104764:	e3a03000 	mov	r3, #0
 c104768:	ea000033 	b	c10483c <OSMutexAccept+0x12c>
    }
#endif                                                     
    if (pevent->OSEventType != OS_EVENT_TYPE_MUTEX) {  /* Validate event block type                    */
 c10476c:	e51b3010 	ldr	r3, [fp, #-16]
 c104770:	e5d33000 	ldrb	r3, [r3]
 c104774:	e3530004 	cmp	r3, #4
 c104778:	0a000004 	beq	c104790 <OSMutexAccept+0x80>
        *err = OS_ERR_EVENT_TYPE;
 c10477c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c104780:	e3a02001 	mov	r2, #1
 c104784:	e5c32000 	strb	r2, [r3]
        return (0);
 c104788:	e3a03000 	mov	r3, #0
 c10478c:	ea00002a 	b	c10483c <OSMutexAccept+0x12c>
    }
    OS_ENTER_CRITICAL();							   /* Get value (0 or 1) of Mutex                  */
 c104790:	e10f0000 	mrs	r0, CPSR
 c104794:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
 c104798:	e38000c0 	orr	r0, r0, #192	; 0xc0
 c10479c:	e121f000 	msr	CPSR_c, r0
    if ((pevent->OSEventCnt & OS_MUTEX_KEEP_LOWER_8) == OS_MUTEX_AVAILABLE) {     
 c1047a0:	e51b3010 	ldr	r3, [fp, #-16]
 c1047a4:	e1d330b2 	ldrh	r3, [r3, #2]
 c1047a8:	e20330ff 	and	r3, r3, #255	; 0xff
 c1047ac:	e35300ff 	cmp	r3, #255	; 0xff
 c1047b0:	1a00001b 	bne	c104824 <OSMutexAccept+0x114>
        pevent->OSEventCnt &= OS_MUTEX_KEEP_UPPER_8;   /*      Mask off LSByte (Acquire Mutex)         */
 c1047b4:	e51b3010 	ldr	r3, [fp, #-16]
 c1047b8:	e1d330b2 	ldrh	r3, [r3, #2]
 c1047bc:	e3c330ff 	bic	r3, r3, #255	; 0xff
 c1047c0:	e1a03803 	lsl	r3, r3, #16
 c1047c4:	e1a02823 	lsr	r2, r3, #16
 c1047c8:	e51b3010 	ldr	r3, [fp, #-16]
 c1047cc:	e1c320b2 	strh	r2, [r3, #2]
        pevent->OSEventCnt |= OSTCBCur->OSTCBPrio;     /*      Save current task priority in LSByte    */
 c1047d0:	e51b3010 	ldr	r3, [fp, #-16]
 c1047d4:	e1d320b2 	ldrh	r2, [r3, #2]
 c1047d8:	e59f3070 	ldr	r3, [pc, #112]	; c104850 <OSMutexAccept+0x140>
 c1047dc:	e5933000 	ldr	r3, [r3]
 c1047e0:	e5d3302e 	ldrb	r3, [r3, #46]	; 0x2e
 c1047e4:	e1823003 	orr	r3, r2, r3
 c1047e8:	e1a03803 	lsl	r3, r3, #16
 c1047ec:	e1a02823 	lsr	r2, r3, #16
 c1047f0:	e51b3010 	ldr	r3, [fp, #-16]
 c1047f4:	e1c320b2 	strh	r2, [r3, #2]
        pevent->OSEventPtr  = (void *)OSTCBCur;        /*      Link TCB of task owning Mutex           */
 c1047f8:	e59f3050 	ldr	r3, [pc, #80]	; c104850 <OSMutexAccept+0x140>
 c1047fc:	e5932000 	ldr	r2, [r3]
 c104800:	e51b3010 	ldr	r3, [fp, #-16]
 c104804:	e5832004 	str	r2, [r3, #4]
        OS_EXIT_CRITICAL();
 c104808:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 c10480c:	e121f000 	msr	CPSR_c, r0
        *err = OS_NO_ERR;
 c104810:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c104814:	e3a02000 	mov	r2, #0
 c104818:	e5c32000 	strb	r2, [r3]
        return (1);
 c10481c:	e3a03001 	mov	r3, #1
 c104820:	ea000005 	b	c10483c <OSMutexAccept+0x12c>
    }
    OS_EXIT_CRITICAL();
 c104824:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 c104828:	e121f000 	msr	CPSR_c, r0
    *err = OS_NO_ERR;
 c10482c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c104830:	e3a02000 	mov	r2, #0
 c104834:	e5c32000 	strb	r2, [r3]
    return (0);
 c104838:	e3a03000 	mov	r3, #0
}
 c10483c:	e1a00003 	mov	r0, r3
 c104840:	e24bd00c 	sub	sp, fp, #12
 c104844:	e89d6800 	ldm	sp, {fp, sp, lr}
 c104848:	e12fff1e 	bx	lr
 c10484c:	0c119ca8 	.word	0x0c119ca8
 c104850:	0c119cac 	.word	0x0c119cac

0c104854 <OSMutexCreate>:
*                 to use to reduce priority inversion.
*********************************************************************************************************
*/

OS_EVENT  *OSMutexCreate (INT8U prio, INT8U *err)
{
 c104854:	e1a0c00d 	mov	ip, sp
 c104858:	e92dd800 	push	{fp, ip, lr, pc}
 c10485c:	e24cb004 	sub	fp, ip, #4
 c104860:	e24dd010 	sub	sp, sp, #16
 c104864:	e1a03000 	mov	r3, r0
 c104868:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
 c10486c:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb



    cpu_sr = 0;                                            /* Prevent compiler warning                 */
#endif    
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 c104870:	e59f3174 	ldr	r3, [pc, #372]	; c1049ec <OSMutexCreate+0x198>
 c104874:	e5d33000 	ldrb	r3, [r3]
 c104878:	e3530000 	cmp	r3, #0
 c10487c:	0a000004 	beq	c104894 <OSMutexCreate+0x40>
        *err = OS_ERR_CREATE_ISR;                          /* ... can't CREATE mutex from an ISR       */
 c104880:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 c104884:	e3e02072 	mvn	r2, #114	; 0x72
 c104888:	e5c32000 	strb	r2, [r3]
        return ((OS_EVENT *)0);
 c10488c:	e3a03000 	mov	r3, #0
 c104890:	ea000051 	b	c1049dc <OSMutexCreate+0x188>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                          /* Validate PIP                             */
 c104894:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
 c104898:	e353003e 	cmp	r3, #62	; 0x3e
 c10489c:	9a000004 	bls	c1048b4 <OSMutexCreate+0x60>
        *err = OS_PRIO_INVALID;
 c1048a0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 c1048a4:	e3a0202a 	mov	r2, #42	; 0x2a
 c1048a8:	e5c32000 	strb	r2, [r3]
        return ((OS_EVENT *)0);
 c1048ac:	e3a03000 	mov	r3, #0
 c1048b0:	ea000049 	b	c1049dc <OSMutexCreate+0x188>
    }
#endif
    OS_ENTER_CRITICAL();
 c1048b4:	e10f0000 	mrs	r0, CPSR
 c1048b8:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
 c1048bc:	e38000c0 	orr	r0, r0, #192	; 0xc0
 c1048c0:	e121f000 	msr	CPSR_c, r0
    if (OSTCBPrioTbl[prio] != (OS_TCB *)0) {               /* Mutex priority must not already exist    */
 c1048c4:	e55b2015 	ldrb	r2, [fp, #-21]	; 0xffffffeb
 c1048c8:	e59f3120 	ldr	r3, [pc, #288]	; c1049f0 <OSMutexCreate+0x19c>
 c1048cc:	e7933102 	ldr	r3, [r3, r2, lsl #2]
 c1048d0:	e3530000 	cmp	r3, #0
 c1048d4:	0a000006 	beq	c1048f4 <OSMutexCreate+0xa0>
        OS_EXIT_CRITICAL();                                /* Task already exist at priority ...       */
 c1048d8:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 c1048dc:	e121f000 	msr	CPSR_c, r0
        *err = OS_PRIO_EXIST;                              /* ... inheritance priority                 */
 c1048e0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 c1048e4:	e3a02028 	mov	r2, #40	; 0x28
 c1048e8:	e5c32000 	strb	r2, [r3]
        return ((OS_EVENT *)0);                            
 c1048ec:	e3a03000 	mov	r3, #0
 c1048f0:	ea000039 	b	c1049dc <OSMutexCreate+0x188>
    }
    OSTCBPrioTbl[prio] = (OS_TCB *)1;                      /* Reserve the table entry                  */
 c1048f4:	e55b2015 	ldrb	r2, [fp, #-21]	; 0xffffffeb
 c1048f8:	e59f30f0 	ldr	r3, [pc, #240]	; c1049f0 <OSMutexCreate+0x19c>
 c1048fc:	e3a01001 	mov	r1, #1
 c104900:	e7831102 	str	r1, [r3, r2, lsl #2]
    pevent             = OSEventFreeList;                  /* Get next free event control block        */
 c104904:	e59f30e8 	ldr	r3, [pc, #232]	; c1049f4 <OSMutexCreate+0x1a0>
 c104908:	e5933000 	ldr	r3, [r3]
 c10490c:	e50b3010 	str	r3, [fp, #-16]
    if (pevent == (OS_EVENT *)0) {                         /* See if an ECB was available              */
 c104910:	e51b3010 	ldr	r3, [fp, #-16]
 c104914:	e3530000 	cmp	r3, #0
 c104918:	1a00000a 	bne	c104948 <OSMutexCreate+0xf4>
        OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* No, Release the table entry              */
 c10491c:	e55b2015 	ldrb	r2, [fp, #-21]	; 0xffffffeb
 c104920:	e59f30c8 	ldr	r3, [pc, #200]	; c1049f0 <OSMutexCreate+0x19c>
 c104924:	e3a01000 	mov	r1, #0
 c104928:	e7831102 	str	r1, [r3, r2, lsl #2]
        OS_EXIT_CRITICAL();
 c10492c:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 c104930:	e121f000 	msr	CPSR_c, r0
        *err               = OS_ERR_PEVENT_NULL;           /* No more event control blocks             */
 c104934:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 c104938:	e3a02004 	mov	r2, #4
 c10493c:	e5c32000 	strb	r2, [r3]
        return (pevent);
 c104940:	e51b3010 	ldr	r3, [fp, #-16]
 c104944:	ea000024 	b	c1049dc <OSMutexCreate+0x188>
    }
    OSEventFreeList        = (OS_EVENT *)OSEventFreeList->OSEventPtr;   /* Adjust the free list        */
 c104948:	e59f30a4 	ldr	r3, [pc, #164]	; c1049f4 <OSMutexCreate+0x1a0>
 c10494c:	e5933000 	ldr	r3, [r3]
 c104950:	e5933004 	ldr	r3, [r3, #4]
 c104954:	e1a02003 	mov	r2, r3
 c104958:	e59f3094 	ldr	r3, [pc, #148]	; c1049f4 <OSMutexCreate+0x1a0>
 c10495c:	e5832000 	str	r2, [r3]
    OS_EXIT_CRITICAL();
 c104960:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 c104964:	e121f000 	msr	CPSR_c, r0
    pevent->OSEventType    = OS_EVENT_TYPE_MUTEX;
 c104968:	e51b3010 	ldr	r3, [fp, #-16]
 c10496c:	e3a02004 	mov	r2, #4
 c104970:	e5c32000 	strb	r2, [r3]
    pevent->OSEventCnt     = ((INT16U)prio << 8) | OS_MUTEX_AVAILABLE;  /* Resource is available       */
 c104974:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
 c104978:	e1a03403 	lsl	r3, r3, #8
 c10497c:	e1a03803 	lsl	r3, r3, #16
 c104980:	e1a03823 	lsr	r3, r3, #16
 c104984:	e38330ff 	orr	r3, r3, #255	; 0xff
 c104988:	e1a03803 	lsl	r3, r3, #16
 c10498c:	e1a03823 	lsr	r3, r3, #16
 c104990:	e1a03803 	lsl	r3, r3, #16
 c104994:	e1a02823 	lsr	r2, r3, #16
 c104998:	e51b3010 	ldr	r3, [fp, #-16]
 c10499c:	e1c320b2 	strh	r2, [r3, #2]
    pevent->OSEventPtr     = (void *)0;                                 /* No task owning the mutex    */
 c1049a0:	e51b3010 	ldr	r3, [fp, #-16]
 c1049a4:	e3a02000 	mov	r2, #0
 c1049a8:	e5832004 	str	r2, [r3, #4]
#if OS_EVENT_NAME_SIZE > 1
    pevent->OSEventName[0] = '?';
 c1049ac:	e51b3010 	ldr	r3, [fp, #-16]
 c1049b0:	e3a0203f 	mov	r2, #63	; 0x3f
 c1049b4:	e5c32010 	strb	r2, [r3, #16]
    pevent->OSEventName[1] = OS_ASCII_NUL;
 c1049b8:	e51b3010 	ldr	r3, [fp, #-16]
 c1049bc:	e3a02000 	mov	r2, #0
 c1049c0:	e5c32011 	strb	r2, [r3, #17]
#endif
    OS_EventWaitListInit(pevent);
 c1049c4:	e51b0010 	ldr	r0, [fp, #-16]
 c1049c8:	ebfff1cd 	bl	c101104 <OS_EventWaitListInit>
    *err                   = OS_NO_ERR;
 c1049cc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 c1049d0:	e3a02000 	mov	r2, #0
 c1049d4:	e5c32000 	strb	r2, [r3]
    return (pevent);
 c1049d8:	e51b3010 	ldr	r3, [fp, #-16]
}
 c1049dc:	e1a00003 	mov	r0, r3
 c1049e0:	e24bd00c 	sub	sp, fp, #12
 c1049e4:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1049e8:	e12fff1e 	bx	lr
 c1049ec:	0c119ca8 	.word	0x0c119ca8
 c1049f0:	0c11af8c 	.word	0x0c11af8c
 c1049f4:	0c119ca4 	.word	0x0c119ca4

0c1049f8 <OSMutexDel>:
*********************************************************************************************************
*/

#if OS_MUTEX_DEL_EN
OS_EVENT  *OSMutexDel (OS_EVENT *pevent, INT8U opt, INT8U *err)
{
 c1049f8:	e1a0c00d 	mov	ip, sp
 c1049fc:	e92dd800 	push	{fp, ip, lr, pc}
 c104a00:	e24cb004 	sub	fp, ip, #4
 c104a04:	e24dd018 	sub	sp, sp, #24
 c104a08:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
 c104a0c:	e1a03001 	mov	r3, r1
 c104a10:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
 c104a14:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7



    cpu_sr = 0;                                            /* Prevent compiler warning                 */
#endif    
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 c104a18:	e59f3254 	ldr	r3, [pc, #596]	; c104c74 <OSMutexDel+0x27c>
 c104a1c:	e5d33000 	ldrb	r3, [r3]
 c104a20:	e3530000 	cmp	r3, #0
 c104a24:	0a000004 	beq	c104a3c <OSMutexDel+0x44>
        *err = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
 c104a28:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c104a2c:	e3e02073 	mvn	r2, #115	; 0x73
 c104a30:	e5c32000 	strb	r2, [r3]
        return (pevent);
 c104a34:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c104a38:	ea000089 	b	c104c64 <OSMutexDel+0x26c>
    }
#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 c104a3c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c104a40:	e3530000 	cmp	r3, #0
 c104a44:	1a000004 	bne	c104a5c <OSMutexDel+0x64>
        *err = OS_ERR_PEVENT_NULL;
 c104a48:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c104a4c:	e3a02004 	mov	r2, #4
 c104a50:	e5c32000 	strb	r2, [r3]
        return ((OS_EVENT *)0);
 c104a54:	e3a03000 	mov	r3, #0
 c104a58:	ea000081 	b	c104c64 <OSMutexDel+0x26c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MUTEX) {      /* Validate event block type                */
 c104a5c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c104a60:	e5d33000 	ldrb	r3, [r3]
 c104a64:	e3530004 	cmp	r3, #4
 c104a68:	0a000004 	beq	c104a80 <OSMutexDel+0x88>
        *err = OS_ERR_EVENT_TYPE;
 c104a6c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c104a70:	e3a02001 	mov	r2, #1
 c104a74:	e5c32000 	strb	r2, [r3]
        return (pevent);
 c104a78:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c104a7c:	ea000078 	b	c104c64 <OSMutexDel+0x26c>
    }
    OS_ENTER_CRITICAL();
 c104a80:	e10f0000 	mrs	r0, CPSR
 c104a84:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
 c104a88:	e38000c0 	orr	r0, r0, #192	; 0xc0
 c104a8c:	e121f000 	msr	CPSR_c, r0
    if (pevent->OSEventGrp != 0x00) {                      /* See if any tasks waiting on mutex        */
 c104a90:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c104a94:	e5d33001 	ldrb	r3, [r3, #1]
 c104a98:	e3530000 	cmp	r3, #0
 c104a9c:	0a000002 	beq	c104aac <OSMutexDel+0xb4>
        tasks_waiting = TRUE;                              /* Yes                                      */
 c104aa0:	e3a03001 	mov	r3, #1
 c104aa4:	e54b300d 	strb	r3, [fp, #-13]
 c104aa8:	ea000001 	b	c104ab4 <OSMutexDel+0xbc>
    } else {
        tasks_waiting = FALSE;                             /* No                                       */
 c104aac:	e3a03000 	mov	r3, #0
 c104ab0:	e54b300d 	strb	r3, [fp, #-13]
    }
    switch (opt) {
 c104ab4:	e55b3019 	ldrb	r3, [fp, #-25]	; 0xffffffe7
 c104ab8:	e3530000 	cmp	r3, #0
 c104abc:	0a000002 	beq	c104acc <OSMutexDel+0xd4>
 c104ac0:	e3530001 	cmp	r3, #1
 c104ac4:	0a000033 	beq	c104b98 <OSMutexDel+0x1a0>
 c104ac8:	ea00005f 	b	c104c4c <OSMutexDel+0x254>
        case OS_DEL_NO_PEND:                               /* Delete mutex only if no task waiting     */
             if (tasks_waiting == FALSE) {
 c104acc:	e55b300d 	ldrb	r3, [fp, #-13]
 c104ad0:	e3530000 	cmp	r3, #0
 c104ad4:	1a000023 	bne	c104b68 <OSMutexDel+0x170>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
 c104ad8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c104adc:	e3a0203f 	mov	r2, #63	; 0x3f
 c104ae0:	e5c32010 	strb	r2, [r3, #16]
                 pevent->OSEventName[1] = OS_ASCII_NUL;
 c104ae4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c104ae8:	e3a02000 	mov	r2, #0
 c104aec:	e5c32011 	strb	r2, [r3, #17]
#endif
                 pip                 = (INT8U)(pevent->OSEventCnt >> 8);
 c104af0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c104af4:	e1d330b2 	ldrh	r3, [r3, #2]
 c104af8:	e1a03423 	lsr	r3, r3, #8
 c104afc:	e1a03803 	lsl	r3, r3, #16
 c104b00:	e1a03823 	lsr	r3, r3, #16
 c104b04:	e54b300e 	strb	r3, [fp, #-14]
                 OSTCBPrioTbl[pip]   = (OS_TCB *)0;        /* Free up the PIP                          */
 c104b08:	e55b200e 	ldrb	r2, [fp, #-14]
 c104b0c:	e59f3164 	ldr	r3, [pc, #356]	; c104c78 <OSMutexDel+0x280>
 c104b10:	e3a01000 	mov	r1, #0
 c104b14:	e7831102 	str	r1, [r3, r2, lsl #2]
                 pevent->OSEventType = OS_EVENT_TYPE_UNUSED;
 c104b18:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c104b1c:	e3a02000 	mov	r2, #0
 c104b20:	e5c32000 	strb	r2, [r3]
                 pevent->OSEventPtr  = OSEventFreeList;    /* Return Event Control Block to free list  */
 c104b24:	e59f3150 	ldr	r3, [pc, #336]	; c104c7c <OSMutexDel+0x284>
 c104b28:	e5932000 	ldr	r2, [r3]
 c104b2c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c104b30:	e5832004 	str	r2, [r3, #4]
                 pevent->OSEventCnt  = 0;
 c104b34:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c104b38:	e3a02000 	mov	r2, #0
 c104b3c:	e1c320b2 	strh	r2, [r3, #2]
                 OSEventFreeList     = pevent;
 c104b40:	e59f3134 	ldr	r3, [pc, #308]	; c104c7c <OSMutexDel+0x284>
 c104b44:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
 c104b48:	e5832000 	str	r2, [r3]
                 OS_EXIT_CRITICAL();
 c104b4c:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 c104b50:	e121f000 	msr	CPSR_c, r0
                 *err                = OS_NO_ERR;
 c104b54:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c104b58:	e3a02000 	mov	r2, #0
 c104b5c:	e5c32000 	strb	r2, [r3]
                 return ((OS_EVENT *)0);                   /* Mutex has been deleted                   */
 c104b60:	e3a03000 	mov	r3, #0
 c104b64:	ea00003e 	b	c104c64 <OSMutexDel+0x26c>
             } else {
                 OS_EXIT_CRITICAL();
 c104b68:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 c104b6c:	e121f000 	msr	CPSR_c, r0
                 *err                = OS_ERR_TASK_WAITING;
 c104b70:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c104b74:	e3a02008 	mov	r2, #8
 c104b78:	e5c32000 	strb	r2, [r3]
                 return (pevent);
 c104b7c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c104b80:	ea000037 	b	c104c64 <OSMutexDel+0x26c>
             }

        case OS_DEL_ALWAYS:                                /* Always delete the mutex                  */
             while (pevent->OSEventGrp != 0x00) {          /* Ready ALL tasks waiting for mutex        */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MUTEX);
 c104b84:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
 c104b88:	e3a01000 	mov	r1, #0
 c104b8c:	e3a02010 	mov	r2, #16
 c104b90:	ebfff03d 	bl	c100c8c <OS_EventTaskRdy>
 c104b94:	ea000000 	b	c104b9c <OSMutexDel+0x1a4>
                 *err                = OS_ERR_TASK_WAITING;
                 return (pevent);
             }

        case OS_DEL_ALWAYS:                                /* Always delete the mutex                  */
             while (pevent->OSEventGrp != 0x00) {          /* Ready ALL tasks waiting for mutex        */
 c104b98:	e1a00000 	nop			; (mov r0, r0)
 c104b9c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c104ba0:	e5d33001 	ldrb	r3, [r3, #1]
 c104ba4:	e3530000 	cmp	r3, #0
 c104ba8:	1afffff5 	bne	c104b84 <OSMutexDel+0x18c>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MUTEX);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
 c104bac:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c104bb0:	e3a0203f 	mov	r2, #63	; 0x3f
 c104bb4:	e5c32010 	strb	r2, [r3, #16]
             pevent->OSEventName[1] = OS_ASCII_NUL;
 c104bb8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c104bbc:	e3a02000 	mov	r2, #0
 c104bc0:	e5c32011 	strb	r2, [r3, #17]
#endif
             pip                 = (INT8U)(pevent->OSEventCnt >> 8);
 c104bc4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c104bc8:	e1d330b2 	ldrh	r3, [r3, #2]
 c104bcc:	e1a03423 	lsr	r3, r3, #8
 c104bd0:	e1a03803 	lsl	r3, r3, #16
 c104bd4:	e1a03823 	lsr	r3, r3, #16
 c104bd8:	e54b300e 	strb	r3, [fp, #-14]
             OSTCBPrioTbl[pip]   = (OS_TCB *)0;            /* Free up the PIP                          */
 c104bdc:	e55b200e 	ldrb	r2, [fp, #-14]
 c104be0:	e59f3090 	ldr	r3, [pc, #144]	; c104c78 <OSMutexDel+0x280>
 c104be4:	e3a01000 	mov	r1, #0
 c104be8:	e7831102 	str	r1, [r3, r2, lsl #2]
             pevent->OSEventType = OS_EVENT_TYPE_UNUSED;
 c104bec:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c104bf0:	e3a02000 	mov	r2, #0
 c104bf4:	e5c32000 	strb	r2, [r3]
             pevent->OSEventPtr  = OSEventFreeList;        /* Return Event Control Block to free list  */
 c104bf8:	e59f307c 	ldr	r3, [pc, #124]	; c104c7c <OSMutexDel+0x284>
 c104bfc:	e5932000 	ldr	r2, [r3]
 c104c00:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c104c04:	e5832004 	str	r2, [r3, #4]
             pevent->OSEventCnt  = 0;
 c104c08:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c104c0c:	e3a02000 	mov	r2, #0
 c104c10:	e1c320b2 	strh	r2, [r3, #2]
             OSEventFreeList     = pevent;                 /* Get next free event control block        */
 c104c14:	e59f3060 	ldr	r3, [pc, #96]	; c104c7c <OSMutexDel+0x284>
 c104c18:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
 c104c1c:	e5832000 	str	r2, [r3]
             OS_EXIT_CRITICAL();
 c104c20:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 c104c24:	e121f000 	msr	CPSR_c, r0
             if (tasks_waiting == TRUE) {                  /* Reschedule only if task(s) were waiting  */
 c104c28:	e55b300d 	ldrb	r3, [fp, #-13]
 c104c2c:	e3530001 	cmp	r3, #1
 c104c30:	1a000000 	bne	c104c38 <OSMutexDel+0x240>
                 OS_Sched();                               /* Find highest priority task ready to run  */
 c104c34:	ebfff2aa 	bl	c1016e4 <OS_Sched>
             }
             *err = OS_NO_ERR;
 c104c38:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c104c3c:	e3a02000 	mov	r2, #0
 c104c40:	e5c32000 	strb	r2, [r3]
             return ((OS_EVENT *)0);                       /* Mutex has been deleted                   */
 c104c44:	e3a03000 	mov	r3, #0
 c104c48:	ea000005 	b	c104c64 <OSMutexDel+0x26c>

        default:
             OS_EXIT_CRITICAL();
 c104c4c:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 c104c50:	e121f000 	msr	CPSR_c, r0
             *err = OS_ERR_INVALID_OPT;
 c104c54:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c104c58:	e3a02007 	mov	r2, #7
 c104c5c:	e5c32000 	strb	r2, [r3]
             return (pevent);
 c104c60:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
    }
}
 c104c64:	e1a00003 	mov	r0, r3
 c104c68:	e24bd00c 	sub	sp, fp, #12
 c104c6c:	e89d6800 	ldm	sp, {fp, sp, lr}
 c104c70:	e12fff1e 	bx	lr
 c104c74:	0c119ca8 	.word	0x0c119ca8
 c104c78:	0c11af8c 	.word	0x0c11af8c
 c104c7c:	0c119ca4 	.word	0x0c119ca4

0c104c80 <OSMutexPend>:
* Note(s)    : 1) The task that owns the Mutex MUST NOT pend on any other event while it owns the mutex.
*              2) You MUST NOT change the priority of the task that owns the mutex
*********************************************************************************************************
*/
void  OSMutexPend (OS_EVENT *pevent, INT16U timeout, INT8U *err)
{
 c104c80:	e1a0c00d 	mov	ip, sp
 c104c84:	e92dd800 	push	{fp, ip, lr, pc}
 c104c88:	e24cb004 	sub	fp, ip, #4
 c104c8c:	e24dd020 	sub	sp, sp, #32
 c104c90:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
 c104c94:	e1a03001 	mov	r3, r1
 c104c98:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
 c104c9c:	e14b32b2 	strh	r3, [fp, #-34]	; 0xffffffde



    cpu_sr = 0;                                            /* Prevent compiler warning                 */
#endif    
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 c104ca0:	e59f34fc 	ldr	r3, [pc, #1276]	; c1051a4 <OSMutexPend+0x524>
 c104ca4:	e5d33000 	ldrb	r3, [r3]
 c104ca8:	e3530000 	cmp	r3, #0
 c104cac:	0a000003 	beq	c104cc0 <OSMutexPend+0x40>
        *err = OS_ERR_PEND_ISR;                            /* ... can't PEND from an ISR               */
 c104cb0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
 c104cb4:	e3a02002 	mov	r2, #2
 c104cb8:	e5c32000 	strb	r2, [r3]
        return;
 c104cbc:	ea000135 	b	c105198 <OSMutexPend+0x518>
    }
#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 c104cc0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c104cc4:	e3530000 	cmp	r3, #0
 c104cc8:	1a000003 	bne	c104cdc <OSMutexPend+0x5c>
        *err = OS_ERR_PEVENT_NULL;
 c104ccc:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
 c104cd0:	e3a02004 	mov	r2, #4
 c104cd4:	e5c32000 	strb	r2, [r3]
        return;
 c104cd8:	ea00012e 	b	c105198 <OSMutexPend+0x518>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MUTEX) {      /* Validate event block type                */
 c104cdc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c104ce0:	e5d33000 	ldrb	r3, [r3]
 c104ce4:	e3530004 	cmp	r3, #4
 c104ce8:	0a000003 	beq	c104cfc <OSMutexPend+0x7c>
        *err = OS_ERR_EVENT_TYPE;
 c104cec:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
 c104cf0:	e3a02001 	mov	r2, #1
 c104cf4:	e5c32000 	strb	r2, [r3]
        return;
 c104cf8:	ea000126 	b	c105198 <OSMutexPend+0x518>
    }
    OS_ENTER_CRITICAL();								   /* Is Mutex available?                      */
 c104cfc:	e10f0000 	mrs	r0, CPSR
 c104d00:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
 c104d04:	e38000c0 	orr	r0, r0, #192	; 0xc0
 c104d08:	e121f000 	msr	CPSR_c, r0
    if ((INT8U)(pevent->OSEventCnt & OS_MUTEX_KEEP_LOWER_8) == OS_MUTEX_AVAILABLE) {
 c104d0c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c104d10:	e1d330b2 	ldrh	r3, [r3, #2]
 c104d14:	e20330ff 	and	r3, r3, #255	; 0xff
 c104d18:	e35300ff 	cmp	r3, #255	; 0xff
 c104d1c:	1a00001a 	bne	c104d8c <OSMutexPend+0x10c>
        pevent->OSEventCnt &= OS_MUTEX_KEEP_UPPER_8;       /* Yes, Acquire the resource                */
 c104d20:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c104d24:	e1d330b2 	ldrh	r3, [r3, #2]
 c104d28:	e3c330ff 	bic	r3, r3, #255	; 0xff
 c104d2c:	e1a03803 	lsl	r3, r3, #16
 c104d30:	e1a02823 	lsr	r2, r3, #16
 c104d34:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c104d38:	e1c320b2 	strh	r2, [r3, #2]
        pevent->OSEventCnt |= OSTCBCur->OSTCBPrio;         /*      Save priority of owning task        */
 c104d3c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c104d40:	e1d320b2 	ldrh	r2, [r3, #2]
 c104d44:	e59f345c 	ldr	r3, [pc, #1116]	; c1051a8 <OSMutexPend+0x528>
 c104d48:	e5933000 	ldr	r3, [r3]
 c104d4c:	e5d3302e 	ldrb	r3, [r3, #46]	; 0x2e
 c104d50:	e1823003 	orr	r3, r2, r3
 c104d54:	e1a03803 	lsl	r3, r3, #16
 c104d58:	e1a02823 	lsr	r2, r3, #16
 c104d5c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c104d60:	e1c320b2 	strh	r2, [r3, #2]
        pevent->OSEventPtr  = (void *)OSTCBCur;            /*      Point to owning task's OS_TCB       */
 c104d64:	e59f343c 	ldr	r3, [pc, #1084]	; c1051a8 <OSMutexPend+0x528>
 c104d68:	e5932000 	ldr	r2, [r3]
 c104d6c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c104d70:	e5832004 	str	r2, [r3, #4]
        OS_EXIT_CRITICAL();
 c104d74:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 c104d78:	e121f000 	msr	CPSR_c, r0
        *err  = OS_NO_ERR;
 c104d7c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
 c104d80:	e3a02000 	mov	r2, #0
 c104d84:	e5c32000 	strb	r2, [r3]
        return;
 c104d88:	ea000102 	b	c105198 <OSMutexPend+0x518>
    }
    pip   = (INT8U)(pevent->OSEventCnt >> 8);                     /* No, Get PIP from mutex            */
 c104d8c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c104d90:	e1d330b2 	ldrh	r3, [r3, #2]
 c104d94:	e1a03423 	lsr	r3, r3, #8
 c104d98:	e1a03803 	lsl	r3, r3, #16
 c104d9c:	e1a03823 	lsr	r3, r3, #16
 c104da0:	e54b300e 	strb	r3, [fp, #-14]
    mprio = (INT8U)(pevent->OSEventCnt & OS_MUTEX_KEEP_LOWER_8);  /*     Get priority of mutex owner   */
 c104da4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c104da8:	e1d330b2 	ldrh	r3, [r3, #2]
 c104dac:	e54b300f 	strb	r3, [fp, #-15]
    ptcb  = (OS_TCB *)(pevent->OSEventPtr);                       /*     Point to TCB of mutex owner   */
 c104db0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c104db4:	e5933004 	ldr	r3, [r3, #4]
 c104db8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    if (ptcb->OSTCBPrio != pip) {                                 /*     Need to promote prio of owner?*/
 c104dbc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c104dc0:	e5d3302e 	ldrb	r3, [r3, #46]	; 0x2e
 c104dc4:	e55b200e 	ldrb	r2, [fp, #-14]
 c104dc8:	e1520003 	cmp	r2, r3
 c104dcc:	0a0000c2 	beq	c1050dc <OSMutexPend+0x45c>
        if (mprio > OSTCBCur->OSTCBPrio) {  
 c104dd0:	e59f33d0 	ldr	r3, [pc, #976]	; c1051a8 <OSMutexPend+0x528>
 c104dd4:	e5933000 	ldr	r3, [r3]
 c104dd8:	e5d3302e 	ldrb	r3, [r3, #46]	; 0x2e
 c104ddc:	e55b200f 	ldrb	r2, [fp, #-15]
 c104de0:	e1520003 	cmp	r2, r3
 c104de4:	9a0000bc 	bls	c1050dc <OSMutexPend+0x45c>
            y = ptcb->OSTCBY;                          
 c104de8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c104dec:	e5d33030 	ldrb	r3, [r3, #48]	; 0x30
 c104df0:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
            if ((OSRdyTbl[y] & ptcb->OSTCBBitX) != 0x00) {        /*     See if mutex owner is ready   */
 c104df4:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
 c104df8:	e59f23ac 	ldr	r2, [pc, #940]	; c1051ac <OSMutexPend+0x52c>
 c104dfc:	e7d22003 	ldrb	r2, [r2, r3]
 c104e00:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c104e04:	e5d33031 	ldrb	r3, [r3, #49]	; 0x31
 c104e08:	e0023003 	and	r3, r2, r3
 c104e0c:	e20330ff 	and	r3, r3, #255	; 0xff
 c104e10:	e3530000 	cmp	r3, #0
 c104e14:	0a000023 	beq	c104ea8 <OSMutexPend+0x228>
                OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                  /*     Yes, Remove owner from Rdy ...*/
 c104e18:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
 c104e1c:	e55b2015 	ldrb	r2, [fp, #-21]	; 0xffffffeb
 c104e20:	e59f1384 	ldr	r1, [pc, #900]	; c1051ac <OSMutexPend+0x52c>
 c104e24:	e7d12002 	ldrb	r2, [r1, r2]
 c104e28:	e20210ff 	and	r1, r2, #255	; 0xff
 c104e2c:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
 c104e30:	e5d22031 	ldrb	r2, [r2, #49]	; 0x31
 c104e34:	e20220ff 	and	r2, r2, #255	; 0xff
 c104e38:	e1e02002 	mvn	r2, r2
 c104e3c:	e20220ff 	and	r2, r2, #255	; 0xff
 c104e40:	e0012002 	and	r2, r1, r2
 c104e44:	e20220ff 	and	r2, r2, #255	; 0xff
 c104e48:	e20210ff 	and	r1, r2, #255	; 0xff
 c104e4c:	e59f2358 	ldr	r2, [pc, #856]	; c1051ac <OSMutexPend+0x52c>
 c104e50:	e7c21003 	strb	r1, [r2, r3]
                if (OSRdyTbl[y] == 0x00) {                        /*          ... list at current prio */
 c104e54:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
 c104e58:	e59f234c 	ldr	r2, [pc, #844]	; c1051ac <OSMutexPend+0x52c>
 c104e5c:	e7d23003 	ldrb	r3, [r2, r3]
 c104e60:	e3530000 	cmp	r3, #0
 c104e64:	1a00000c 	bne	c104e9c <OSMutexPend+0x21c>
                    OSRdyGrp &= ~ptcb->OSTCBBitY;
 c104e68:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c104e6c:	e5d33032 	ldrb	r3, [r3, #50]	; 0x32
 c104e70:	e20330ff 	and	r3, r3, #255	; 0xff
 c104e74:	e1e03003 	mvn	r3, r3
 c104e78:	e20320ff 	and	r2, r3, #255	; 0xff
 c104e7c:	e59f332c 	ldr	r3, [pc, #812]	; c1051b0 <OSMutexPend+0x530>
 c104e80:	e5d33000 	ldrb	r3, [r3]
 c104e84:	e20330ff 	and	r3, r3, #255	; 0xff
 c104e88:	e0023003 	and	r3, r2, r3
 c104e8c:	e20330ff 	and	r3, r3, #255	; 0xff
 c104e90:	e20320ff 	and	r2, r3, #255	; 0xff
 c104e94:	e59f3314 	ldr	r3, [pc, #788]	; c1051b0 <OSMutexPend+0x530>
 c104e98:	e5c32000 	strb	r2, [r3]
                }
                rdy = TRUE;
 c104e9c:	e3a03001 	mov	r3, #1
 c104ea0:	e54b300d 	strb	r3, [fp, #-13]
 c104ea4:	ea000033 	b	c104f78 <OSMutexPend+0x2f8>
            } else {
                pevent2 = ptcb->OSTCBEventPtr;
 c104ea8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c104eac:	e593301c 	ldr	r3, [r3, #28]
 c104eb0:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
                if (pevent2 != (OS_EVENT *)0) {                   /* Remove from event wait list       */
 c104eb4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 c104eb8:	e3530000 	cmp	r3, #0
 c104ebc:	0a00002b 	beq	c104f70 <OSMutexPend+0x2f0>
                    if ((pevent2->OSEventTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX) == 0) {
 c104ec0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c104ec4:	e5d33030 	ldrb	r3, [r3, #48]	; 0x30
 c104ec8:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
 c104ecc:	e5d22030 	ldrb	r2, [r2, #48]	; 0x30
 c104ed0:	e1a01002 	mov	r1, r2
 c104ed4:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
 c104ed8:	e3a02008 	mov	r2, #8
 c104edc:	e0801001 	add	r1, r0, r1
 c104ee0:	e0812002 	add	r2, r1, r2
 c104ee4:	e5d22000 	ldrb	r2, [r2]
 c104ee8:	e20210ff 	and	r1, r2, #255	; 0xff
 c104eec:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
 c104ef0:	e5d22031 	ldrb	r2, [r2, #49]	; 0x31
 c104ef4:	e20220ff 	and	r2, r2, #255	; 0xff
 c104ef8:	e1e02002 	mvn	r2, r2
 c104efc:	e20220ff 	and	r2, r2, #255	; 0xff
 c104f00:	e0012002 	and	r2, r1, r2
 c104f04:	e20220ff 	and	r2, r2, #255	; 0xff
 c104f08:	e20210ff 	and	r1, r2, #255	; 0xff
 c104f0c:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
 c104f10:	e3a02008 	mov	r2, #8
 c104f14:	e0800003 	add	r0, r0, r3
 c104f18:	e0802002 	add	r2, r0, r2
 c104f1c:	e5c21000 	strb	r1, [r2]
 c104f20:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
 c104f24:	e3a02008 	mov	r2, #8
 c104f28:	e0813003 	add	r3, r1, r3
 c104f2c:	e0833002 	add	r3, r3, r2
 c104f30:	e5d33000 	ldrb	r3, [r3]
 c104f34:	e3530000 	cmp	r3, #0
 c104f38:	1a00000c 	bne	c104f70 <OSMutexPend+0x2f0>
                        pevent2->OSEventGrp &= ~ptcb->OSTCBBitY;
 c104f3c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 c104f40:	e5d33001 	ldrb	r3, [r3, #1]
 c104f44:	e20320ff 	and	r2, r3, #255	; 0xff
 c104f48:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c104f4c:	e5d33032 	ldrb	r3, [r3, #50]	; 0x32
 c104f50:	e20330ff 	and	r3, r3, #255	; 0xff
 c104f54:	e1e03003 	mvn	r3, r3
 c104f58:	e20330ff 	and	r3, r3, #255	; 0xff
 c104f5c:	e0023003 	and	r3, r2, r3
 c104f60:	e20330ff 	and	r3, r3, #255	; 0xff
 c104f64:	e20320ff 	and	r2, r3, #255	; 0xff
 c104f68:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 c104f6c:	e5c32001 	strb	r2, [r3, #1]
                    }
                }
                rdy = FALSE;                               /* No                                       */
 c104f70:	e3a03000 	mov	r3, #0
 c104f74:	e54b300d 	strb	r3, [fp, #-13]
            }
            ptcb->OSTCBPrio = pip;                         /* Change owner task prio to PIP            */
 c104f78:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c104f7c:	e55b200e 	ldrb	r2, [fp, #-14]
 c104f80:	e5c3202e 	strb	r2, [r3, #46]	; 0x2e
            ptcb->OSTCBY    = ptcb->OSTCBPrio >> 3;
 c104f84:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c104f88:	e5d3302e 	ldrb	r3, [r3, #46]	; 0x2e
 c104f8c:	e1a031a3 	lsr	r3, r3, #3
 c104f90:	e20320ff 	and	r2, r3, #255	; 0xff
 c104f94:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c104f98:	e5c32030 	strb	r2, [r3, #48]	; 0x30
            ptcb->OSTCBBitY = OSMapTbl[ptcb->OSTCBY];
 c104f9c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c104fa0:	e5d33030 	ldrb	r3, [r3, #48]	; 0x30
 c104fa4:	e59f2208 	ldr	r2, [pc, #520]	; c1051b4 <OSMutexPend+0x534>
 c104fa8:	e7d22003 	ldrb	r2, [r2, r3]
 c104fac:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c104fb0:	e5c32032 	strb	r2, [r3, #50]	; 0x32
            ptcb->OSTCBX    = ptcb->OSTCBPrio & 0x07;
 c104fb4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c104fb8:	e5d3302e 	ldrb	r3, [r3, #46]	; 0x2e
 c104fbc:	e2033007 	and	r3, r3, #7
 c104fc0:	e20320ff 	and	r2, r3, #255	; 0xff
 c104fc4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c104fc8:	e5c3202f 	strb	r2, [r3, #47]	; 0x2f
            ptcb->OSTCBBitX = OSMapTbl[ptcb->OSTCBX];
 c104fcc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c104fd0:	e5d3302f 	ldrb	r3, [r3, #47]	; 0x2f
 c104fd4:	e59f21d8 	ldr	r2, [pc, #472]	; c1051b4 <OSMutexPend+0x534>
 c104fd8:	e7d22003 	ldrb	r2, [r2, r3]
 c104fdc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c104fe0:	e5c32031 	strb	r2, [r3, #49]	; 0x31
            if (rdy == TRUE) {                             /* If task was ready at owner's priority ...*/
 c104fe4:	e55b300d 	ldrb	r3, [fp, #-13]
 c104fe8:	e3530001 	cmp	r3, #1
 c104fec:	1a000014 	bne	c105044 <OSMutexPend+0x3c4>
                OSRdyGrp               |= ptcb->OSTCBBitY; /* ... make it ready at new priority.       */
 c104ff0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c104ff4:	e5d32032 	ldrb	r2, [r3, #50]	; 0x32
 c104ff8:	e59f31b0 	ldr	r3, [pc, #432]	; c1051b0 <OSMutexPend+0x530>
 c104ffc:	e5d33000 	ldrb	r3, [r3]
 c105000:	e1823003 	orr	r3, r2, r3
 c105004:	e20320ff 	and	r2, r3, #255	; 0xff
 c105008:	e59f31a0 	ldr	r3, [pc, #416]	; c1051b0 <OSMutexPend+0x530>
 c10500c:	e5c32000 	strb	r2, [r3]
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 c105010:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c105014:	e5d33030 	ldrb	r3, [r3, #48]	; 0x30
 c105018:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
 c10501c:	e5d22030 	ldrb	r2, [r2, #48]	; 0x30
 c105020:	e59f1184 	ldr	r1, [pc, #388]	; c1051ac <OSMutexPend+0x52c>
 c105024:	e7d11002 	ldrb	r1, [r1, r2]
 c105028:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
 c10502c:	e5d22031 	ldrb	r2, [r2, #49]	; 0x31
 c105030:	e1812002 	orr	r2, r1, r2
 c105034:	e20210ff 	and	r1, r2, #255	; 0xff
 c105038:	e59f216c 	ldr	r2, [pc, #364]	; c1051ac <OSMutexPend+0x52c>
 c10503c:	e7c21003 	strb	r1, [r2, r3]
 c105040:	ea000021 	b	c1050cc <OSMutexPend+0x44c>
            } else {
                pevent2 = ptcb->OSTCBEventPtr;
 c105044:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c105048:	e593301c 	ldr	r3, [r3, #28]
 c10504c:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
                if (pevent2 != (OS_EVENT *)0) {            /* Remove from event wait list              */
 c105050:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 c105054:	e3530000 	cmp	r3, #0
 c105058:	0a00001b 	beq	c1050cc <OSMutexPend+0x44c>
                    pevent2->OSEventGrp               |= ptcb->OSTCBBitY;
 c10505c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 c105060:	e5d32001 	ldrb	r2, [r3, #1]
 c105064:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c105068:	e5d33032 	ldrb	r3, [r3, #50]	; 0x32
 c10506c:	e1823003 	orr	r3, r2, r3
 c105070:	e20320ff 	and	r2, r3, #255	; 0xff
 c105074:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 c105078:	e5c32001 	strb	r2, [r3, #1]
                    pevent2->OSEventTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 c10507c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c105080:	e5d33030 	ldrb	r3, [r3, #48]	; 0x30
 c105084:	e1a01003 	mov	r1, r3
 c105088:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c10508c:	e5d33030 	ldrb	r3, [r3, #48]	; 0x30
 c105090:	e1a02003 	mov	r2, r3
 c105094:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
 c105098:	e3a03008 	mov	r3, #8
 c10509c:	e0802002 	add	r2, r0, r2
 c1050a0:	e0823003 	add	r3, r2, r3
 c1050a4:	e5d32000 	ldrb	r2, [r3]
 c1050a8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c1050ac:	e5d33031 	ldrb	r3, [r3, #49]	; 0x31
 c1050b0:	e1823003 	orr	r3, r2, r3
 c1050b4:	e20320ff 	and	r2, r3, #255	; 0xff
 c1050b8:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
 c1050bc:	e3a03008 	mov	r3, #8
 c1050c0:	e0801001 	add	r1, r0, r1
 c1050c4:	e0813003 	add	r3, r1, r3
 c1050c8:	e5c32000 	strb	r2, [r3]
                }
            }
            OSTCBPrioTbl[pip] = (OS_TCB *)ptcb;
 c1050cc:	e55b200e 	ldrb	r2, [fp, #-14]
 c1050d0:	e59f30e0 	ldr	r3, [pc, #224]	; c1051b8 <OSMutexPend+0x538>
 c1050d4:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
 c1050d8:	e7831102 	str	r1, [r3, r2, lsl #2]
        }
    }
    OSTCBCur->OSTCBStat   |= OS_STAT_MUTEX;           /* Mutex not available, pend current task        */
 c1050dc:	e59f30c4 	ldr	r3, [pc, #196]	; c1051a8 <OSMutexPend+0x528>
 c1050e0:	e5933000 	ldr	r3, [r3]
 c1050e4:	e59f20bc 	ldr	r2, [pc, #188]	; c1051a8 <OSMutexPend+0x528>
 c1050e8:	e5922000 	ldr	r2, [r2]
 c1050ec:	e5d2202c 	ldrb	r2, [r2, #44]	; 0x2c
 c1050f0:	e3822010 	orr	r2, r2, #16
 c1050f4:	e20220ff 	and	r2, r2, #255	; 0xff
 c1050f8:	e5c3202c 	strb	r2, [r3, #44]	; 0x2c
    OSTCBCur->OSTCBPendTO  = FALSE;
 c1050fc:	e59f30a4 	ldr	r3, [pc, #164]	; c1051a8 <OSMutexPend+0x528>
 c105100:	e5933000 	ldr	r3, [r3]
 c105104:	e3a02000 	mov	r2, #0
 c105108:	e5c3202d 	strb	r2, [r3, #45]	; 0x2d
    OSTCBCur->OSTCBDly     = timeout;                 /* Store timeout in current task's TCB           */
 c10510c:	e59f3094 	ldr	r3, [pc, #148]	; c1051a8 <OSMutexPend+0x528>
 c105110:	e5933000 	ldr	r3, [r3]
 c105114:	e15b22b2 	ldrh	r2, [fp, #-34]	; 0xffffffde
 c105118:	e1c322ba 	strh	r2, [r3, #42]	; 0x2a
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
 c10511c:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
 c105120:	ebffef5c 	bl	c100e98 <OS_EventTaskWait>
    OS_EXIT_CRITICAL();
 c105124:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 c105128:	e121f000 	msr	CPSR_c, r0
    OS_Sched();                                       /* Find next highest priority task ready         */
 c10512c:	ebfff16c 	bl	c1016e4 <OS_Sched>
    OS_ENTER_CRITICAL();
 c105130:	e10f0000 	mrs	r0, CPSR
 c105134:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
 c105138:	e38000c0 	orr	r0, r0, #192	; 0xc0
 c10513c:	e121f000 	msr	CPSR_c, r0
    if (OSTCBCur->OSTCBPendTO == TRUE) {              /* See if we timed out during the pend           */
 c105140:	e59f3060 	ldr	r3, [pc, #96]	; c1051a8 <OSMutexPend+0x528>
 c105144:	e5933000 	ldr	r3, [r3]
 c105148:	e5d3302d 	ldrb	r3, [r3, #45]	; 0x2d
 c10514c:	e3530001 	cmp	r3, #1
 c105150:	1a000007 	bne	c105174 <OSMutexPend+0x4f4>
        OS_EventTO(pevent);
 c105154:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
 c105158:	ebffefa4 	bl	c100ff0 <OS_EventTO>
        OS_EXIT_CRITICAL();
 c10515c:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 c105160:	e121f000 	msr	CPSR_c, r0
        *err = OS_TIMEOUT;                            /* Indicate that we didn't get mutex within TO   */
 c105164:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
 c105168:	e3a0200a 	mov	r2, #10
 c10516c:	e5c32000 	strb	r2, [r3]
        return;
 c105170:	ea000008 	b	c105198 <OSMutexPend+0x518>
    }
    OSTCBCur->OSTCBEventPtr = (OS_EVENT *)0;
 c105174:	e59f302c 	ldr	r3, [pc, #44]	; c1051a8 <OSMutexPend+0x528>
 c105178:	e5933000 	ldr	r3, [r3]
 c10517c:	e3a02000 	mov	r2, #0
 c105180:	e583201c 	str	r2, [r3, #28]
    OS_EXIT_CRITICAL();
 c105184:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 c105188:	e121f000 	msr	CPSR_c, r0
    *err = OS_NO_ERR;
 c10518c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
 c105190:	e3a02000 	mov	r2, #0
 c105194:	e5c32000 	strb	r2, [r3]
}
 c105198:	e24bd00c 	sub	sp, fp, #12
 c10519c:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1051a0:	e12fff1e 	bx	lr
 c1051a4:	0c119ca8 	.word	0x0c119ca8
 c1051a8:	0c119cac 	.word	0x0c119cac
 c1051ac:	0c119c9c 	.word	0x0c119c9c
 c1051b0:	0c119c98 	.word	0x0c119c98
 c1051b4:	0c10e3d4 	.word	0x0c10e3d4
 c1051b8:	0c11af8c 	.word	0x0c11af8c

0c1051bc <OSMutexPost>:
*              OS_ERR_NOT_MUTEX_OWNER  The task that did the post is NOT the owner of the MUTEX.
*********************************************************************************************************
*/

INT8U  OSMutexPost (OS_EVENT *pevent)
{
 c1051bc:	e1a0c00d 	mov	ip, sp
 c1051c0:	e92dd800 	push	{fp, ip, lr, pc}
 c1051c4:	e24cb004 	sub	fp, ip, #4
 c1051c8:	e24dd010 	sub	sp, sp, #16
 c1051cc:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8



    cpu_sr = 0;                                       /* Prevent compiler warning                      */
#endif    
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
 c1051d0:	e59f332c 	ldr	r3, [pc, #812]	; c105504 <OSMutexPost+0x348>
 c1051d4:	e5d33000 	ldrb	r3, [r3]
 c1051d8:	e3530000 	cmp	r3, #0
 c1051dc:	0a000001 	beq	c1051e8 <OSMutexPost+0x2c>
        return (OS_ERR_POST_ISR);                     /* ... can't POST mutex from an ISR              */
 c1051e0:	e3a03005 	mov	r3, #5
 c1051e4:	ea0000c2 	b	c1054f4 <OSMutexPost+0x338>
    }
#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 c1051e8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c1051ec:	e3530000 	cmp	r3, #0
 c1051f0:	1a000001 	bne	c1051fc <OSMutexPost+0x40>
        return (OS_ERR_PEVENT_NULL);
 c1051f4:	e3a03004 	mov	r3, #4
 c1051f8:	ea0000bd 	b	c1054f4 <OSMutexPost+0x338>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MUTEX) { /* Validate event block type                     */
 c1051fc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c105200:	e5d33000 	ldrb	r3, [r3]
 c105204:	e3530004 	cmp	r3, #4
 c105208:	0a000001 	beq	c105214 <OSMutexPost+0x58>
        return (OS_ERR_EVENT_TYPE);
 c10520c:	e3a03001 	mov	r3, #1
 c105210:	ea0000b7 	b	c1054f4 <OSMutexPost+0x338>
    }                                                 
    OS_ENTER_CRITICAL();
 c105214:	e10f0000 	mrs	r0, CPSR
 c105218:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
 c10521c:	e38000c0 	orr	r0, r0, #192	; 0xc0
 c105220:	e121f000 	msr	CPSR_c, r0
    pip  = (INT8U)(pevent->OSEventCnt >> 8);          /* Get priority inheritance priority of mutex    */
 c105224:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c105228:	e1d330b2 	ldrh	r3, [r3, #2]
 c10522c:	e1a03423 	lsr	r3, r3, #8
 c105230:	e1a03803 	lsl	r3, r3, #16
 c105234:	e1a03823 	lsr	r3, r3, #16
 c105238:	e54b300d 	strb	r3, [fp, #-13]
    prio = (INT8U)(pevent->OSEventCnt & OS_MUTEX_KEEP_LOWER_8);  /* Get owner's original priority      */
 c10523c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c105240:	e1d330b2 	ldrh	r3, [r3, #2]
 c105244:	e54b300e 	strb	r3, [fp, #-14]
    if (OSTCBCur != (OS_TCB *)pevent->OSEventPtr) {   /* See if posting task owns the MUTEX            */
 c105248:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c10524c:	e5933004 	ldr	r3, [r3, #4]
 c105250:	e1a02003 	mov	r2, r3
 c105254:	e59f32ac 	ldr	r3, [pc, #684]	; c105508 <OSMutexPost+0x34c>
 c105258:	e5933000 	ldr	r3, [r3]
 c10525c:	e1520003 	cmp	r2, r3
 c105260:	0a000003 	beq	c105274 <OSMutexPost+0xb8>
        OS_EXIT_CRITICAL();
 c105264:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 c105268:	e121f000 	msr	CPSR_c, r0
        return (OS_ERR_NOT_MUTEX_OWNER);
 c10526c:	e3a03078 	mov	r3, #120	; 0x78
 c105270:	ea00009f 	b	c1054f4 <OSMutexPost+0x338>
    }
    if (OSTCBCur->OSTCBPrio == pip) {                 /* Did we have to raise current task's priority? */
 c105274:	e59f328c 	ldr	r3, [pc, #652]	; c105508 <OSMutexPost+0x34c>
 c105278:	e5933000 	ldr	r3, [r3]
 c10527c:	e5d3302e 	ldrb	r3, [r3, #46]	; 0x2e
 c105280:	e55b200d 	ldrb	r2, [fp, #-13]
 c105284:	e1520003 	cmp	r2, r3
 c105288:	1a000063 	bne	c10541c <OSMutexPost+0x260>
        y            = OSTCBCur->OSTCBY;              /* Yes, Return to original priority              */
 c10528c:	e59f3274 	ldr	r3, [pc, #628]	; c105508 <OSMutexPost+0x34c>
 c105290:	e5933000 	ldr	r3, [r3]
 c105294:	e5d33030 	ldrb	r3, [r3, #48]	; 0x30
 c105298:	e54b300f 	strb	r3, [fp, #-15]
        OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;          /*      Remove owner from ready list at 'pip'    */
 c10529c:	e55b300f 	ldrb	r3, [fp, #-15]
 c1052a0:	e55b200f 	ldrb	r2, [fp, #-15]
 c1052a4:	e59f1260 	ldr	r1, [pc, #608]	; c10550c <OSMutexPost+0x350>
 c1052a8:	e7d12002 	ldrb	r2, [r1, r2]
 c1052ac:	e20210ff 	and	r1, r2, #255	; 0xff
 c1052b0:	e59f2250 	ldr	r2, [pc, #592]	; c105508 <OSMutexPost+0x34c>
 c1052b4:	e5922000 	ldr	r2, [r2]
 c1052b8:	e5d22031 	ldrb	r2, [r2, #49]	; 0x31
 c1052bc:	e20220ff 	and	r2, r2, #255	; 0xff
 c1052c0:	e1e02002 	mvn	r2, r2
 c1052c4:	e20220ff 	and	r2, r2, #255	; 0xff
 c1052c8:	e0012002 	and	r2, r1, r2
 c1052cc:	e20220ff 	and	r2, r2, #255	; 0xff
 c1052d0:	e20210ff 	and	r1, r2, #255	; 0xff
 c1052d4:	e59f2230 	ldr	r2, [pc, #560]	; c10550c <OSMutexPost+0x350>
 c1052d8:	e7c21003 	strb	r1, [r2, r3]
        if (OSRdyTbl[y] == 0) {
 c1052dc:	e55b300f 	ldrb	r3, [fp, #-15]
 c1052e0:	e59f2224 	ldr	r2, [pc, #548]	; c10550c <OSMutexPost+0x350>
 c1052e4:	e7d23003 	ldrb	r3, [r2, r3]
 c1052e8:	e3530000 	cmp	r3, #0
 c1052ec:	1a00000d 	bne	c105328 <OSMutexPost+0x16c>
            OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
 c1052f0:	e59f3210 	ldr	r3, [pc, #528]	; c105508 <OSMutexPost+0x34c>
 c1052f4:	e5933000 	ldr	r3, [r3]
 c1052f8:	e5d33032 	ldrb	r3, [r3, #50]	; 0x32
 c1052fc:	e20330ff 	and	r3, r3, #255	; 0xff
 c105300:	e1e03003 	mvn	r3, r3
 c105304:	e20320ff 	and	r2, r3, #255	; 0xff
 c105308:	e59f3200 	ldr	r3, [pc, #512]	; c105510 <OSMutexPost+0x354>
 c10530c:	e5d33000 	ldrb	r3, [r3]
 c105310:	e20330ff 	and	r3, r3, #255	; 0xff
 c105314:	e0023003 	and	r3, r2, r3
 c105318:	e20330ff 	and	r3, r3, #255	; 0xff
 c10531c:	e20320ff 	and	r2, r3, #255	; 0xff
 c105320:	e59f31e8 	ldr	r3, [pc, #488]	; c105510 <OSMutexPost+0x354>
 c105324:	e5c32000 	strb	r2, [r3]
        }
        OSTCBCur->OSTCBPrio         = prio;
 c105328:	e59f31d8 	ldr	r3, [pc, #472]	; c105508 <OSMutexPost+0x34c>
 c10532c:	e5933000 	ldr	r3, [r3]
 c105330:	e55b200e 	ldrb	r2, [fp, #-14]
 c105334:	e5c3202e 	strb	r2, [r3, #46]	; 0x2e
        OSTCBCur->OSTCBY            = prio >> 3;
 c105338:	e59f31c8 	ldr	r3, [pc, #456]	; c105508 <OSMutexPost+0x34c>
 c10533c:	e5933000 	ldr	r3, [r3]
 c105340:	e55b200e 	ldrb	r2, [fp, #-14]
 c105344:	e1a021a2 	lsr	r2, r2, #3
 c105348:	e20220ff 	and	r2, r2, #255	; 0xff
 c10534c:	e5c32030 	strb	r2, [r3, #48]	; 0x30
        OSTCBCur->OSTCBBitY         = OSMapTbl[OSTCBCur->OSTCBY];
 c105350:	e59f31b0 	ldr	r3, [pc, #432]	; c105508 <OSMutexPost+0x34c>
 c105354:	e5933000 	ldr	r3, [r3]
 c105358:	e59f21a8 	ldr	r2, [pc, #424]	; c105508 <OSMutexPost+0x34c>
 c10535c:	e5922000 	ldr	r2, [r2]
 c105360:	e5d22030 	ldrb	r2, [r2, #48]	; 0x30
 c105364:	e59f11a8 	ldr	r1, [pc, #424]	; c105514 <OSMutexPost+0x358>
 c105368:	e7d12002 	ldrb	r2, [r1, r2]
 c10536c:	e5c32032 	strb	r2, [r3, #50]	; 0x32
        OSTCBCur->OSTCBX            = prio & 0x07;
 c105370:	e59f3190 	ldr	r3, [pc, #400]	; c105508 <OSMutexPost+0x34c>
 c105374:	e5933000 	ldr	r3, [r3]
 c105378:	e55b200e 	ldrb	r2, [fp, #-14]
 c10537c:	e2022007 	and	r2, r2, #7
 c105380:	e20220ff 	and	r2, r2, #255	; 0xff
 c105384:	e5c3202f 	strb	r2, [r3, #47]	; 0x2f
        OSTCBCur->OSTCBBitX         = OSMapTbl[OSTCBCur->OSTCBX];
 c105388:	e59f3178 	ldr	r3, [pc, #376]	; c105508 <OSMutexPost+0x34c>
 c10538c:	e5933000 	ldr	r3, [r3]
 c105390:	e59f2170 	ldr	r2, [pc, #368]	; c105508 <OSMutexPost+0x34c>
 c105394:	e5922000 	ldr	r2, [r2]
 c105398:	e5d2202f 	ldrb	r2, [r2, #47]	; 0x2f
 c10539c:	e59f1170 	ldr	r1, [pc, #368]	; c105514 <OSMutexPost+0x358>
 c1053a0:	e7d12002 	ldrb	r2, [r1, r2]
 c1053a4:	e5c32031 	strb	r2, [r3, #49]	; 0x31
        OSRdyGrp                   |= OSTCBCur->OSTCBBitY;
 c1053a8:	e59f3158 	ldr	r3, [pc, #344]	; c105508 <OSMutexPost+0x34c>
 c1053ac:	e5933000 	ldr	r3, [r3]
 c1053b0:	e5d32032 	ldrb	r2, [r3, #50]	; 0x32
 c1053b4:	e59f3154 	ldr	r3, [pc, #340]	; c105510 <OSMutexPost+0x354>
 c1053b8:	e5d33000 	ldrb	r3, [r3]
 c1053bc:	e1823003 	orr	r3, r2, r3
 c1053c0:	e20320ff 	and	r2, r3, #255	; 0xff
 c1053c4:	e59f3144 	ldr	r3, [pc, #324]	; c105510 <OSMutexPost+0x354>
 c1053c8:	e5c32000 	strb	r2, [r3]
        OSRdyTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;
 c1053cc:	e59f3134 	ldr	r3, [pc, #308]	; c105508 <OSMutexPost+0x34c>
 c1053d0:	e5933000 	ldr	r3, [r3]
 c1053d4:	e5d33030 	ldrb	r3, [r3, #48]	; 0x30
 c1053d8:	e59f2128 	ldr	r2, [pc, #296]	; c105508 <OSMutexPost+0x34c>
 c1053dc:	e5922000 	ldr	r2, [r2]
 c1053e0:	e5d22030 	ldrb	r2, [r2, #48]	; 0x30
 c1053e4:	e59f1120 	ldr	r1, [pc, #288]	; c10550c <OSMutexPost+0x350>
 c1053e8:	e7d11002 	ldrb	r1, [r1, r2]
 c1053ec:	e59f2114 	ldr	r2, [pc, #276]	; c105508 <OSMutexPost+0x34c>
 c1053f0:	e5922000 	ldr	r2, [r2]
 c1053f4:	e5d22031 	ldrb	r2, [r2, #49]	; 0x31
 c1053f8:	e1812002 	orr	r2, r1, r2
 c1053fc:	e20210ff 	and	r1, r2, #255	; 0xff
 c105400:	e59f2104 	ldr	r2, [pc, #260]	; c10550c <OSMutexPost+0x350>
 c105404:	e7c21003 	strb	r1, [r2, r3]
        OSTCBPrioTbl[prio]          = (OS_TCB *)OSTCBCur;
 c105408:	e55b200e 	ldrb	r2, [fp, #-14]
 c10540c:	e59f30f4 	ldr	r3, [pc, #244]	; c105508 <OSMutexPost+0x34c>
 c105410:	e5931000 	ldr	r1, [r3]
 c105414:	e59f30fc 	ldr	r3, [pc, #252]	; c105518 <OSMutexPost+0x35c>
 c105418:	e7831102 	str	r1, [r3, r2, lsl #2]
    }
    OSTCBPrioTbl[pip] = (OS_TCB *)1;                  /* Reserve table entry                           */
 c10541c:	e55b200d 	ldrb	r2, [fp, #-13]
 c105420:	e59f30f0 	ldr	r3, [pc, #240]	; c105518 <OSMutexPost+0x35c>
 c105424:	e3a01001 	mov	r1, #1
 c105428:	e7831102 	str	r1, [r3, r2, lsl #2]
    if (pevent->OSEventGrp != 0x00) {                 /* Any task waiting for the mutex?               */
 c10542c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c105430:	e5d33001 	ldrb	r3, [r3, #1]
 c105434:	e3530000 	cmp	r3, #0
 c105438:	0a000020 	beq	c1054c0 <OSMutexPost+0x304>
                                                      /* Yes, Make HPT waiting for mutex ready         */
        prio                = OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MUTEX);
 c10543c:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
 c105440:	e3a01000 	mov	r1, #0
 c105444:	e3a02010 	mov	r2, #16
 c105448:	ebffee0f 	bl	c100c8c <OS_EventTaskRdy>
 c10544c:	e1a03000 	mov	r3, r0
 c105450:	e54b300e 	strb	r3, [fp, #-14]
        pevent->OSEventCnt &= OS_MUTEX_KEEP_UPPER_8;  /*      Save priority of mutex's new owner       */
 c105454:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c105458:	e1d330b2 	ldrh	r3, [r3, #2]
 c10545c:	e3c330ff 	bic	r3, r3, #255	; 0xff
 c105460:	e1a03803 	lsl	r3, r3, #16
 c105464:	e1a02823 	lsr	r2, r3, #16
 c105468:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c10546c:	e1c320b2 	strh	r2, [r3, #2]
        pevent->OSEventCnt |= prio;
 c105470:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c105474:	e1d320b2 	ldrh	r2, [r3, #2]
 c105478:	e55b300e 	ldrb	r3, [fp, #-14]
 c10547c:	e1a03803 	lsl	r3, r3, #16
 c105480:	e1a03823 	lsr	r3, r3, #16
 c105484:	e1823003 	orr	r3, r2, r3
 c105488:	e1a03803 	lsl	r3, r3, #16
 c10548c:	e1a02823 	lsr	r2, r3, #16
 c105490:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c105494:	e1c320b2 	strh	r2, [r3, #2]
        pevent->OSEventPtr  = OSTCBPrioTbl[prio];     /*      Link to mutex owner's OS_TCB             */
 c105498:	e55b200e 	ldrb	r2, [fp, #-14]
 c10549c:	e59f3074 	ldr	r3, [pc, #116]	; c105518 <OSMutexPost+0x35c>
 c1054a0:	e7932102 	ldr	r2, [r3, r2, lsl #2]
 c1054a4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c1054a8:	e5832004 	str	r2, [r3, #4]
        OS_EXIT_CRITICAL();
 c1054ac:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 c1054b0:	e121f000 	msr	CPSR_c, r0
        OS_Sched();                                   /*      Find highest priority task ready to run  */
 c1054b4:	ebfff08a 	bl	c1016e4 <OS_Sched>
        return (OS_NO_ERR);
 c1054b8:	e3a03000 	mov	r3, #0
 c1054bc:	ea00000c 	b	c1054f4 <OSMutexPost+0x338>
    }
    pevent->OSEventCnt |= OS_MUTEX_AVAILABLE;         /* No,  Mutex is now available                   */
 c1054c0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c1054c4:	e1d330b2 	ldrh	r3, [r3, #2]
 c1054c8:	e38330ff 	orr	r3, r3, #255	; 0xff
 c1054cc:	e1a03803 	lsl	r3, r3, #16
 c1054d0:	e1a02823 	lsr	r2, r3, #16
 c1054d4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c1054d8:	e1c320b2 	strh	r2, [r3, #2]
    pevent->OSEventPtr  = (void *)0;
 c1054dc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c1054e0:	e3a02000 	mov	r2, #0
 c1054e4:	e5832004 	str	r2, [r3, #4]
    OS_EXIT_CRITICAL();
 c1054e8:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 c1054ec:	e121f000 	msr	CPSR_c, r0
    return (OS_NO_ERR);
 c1054f0:	e3a03000 	mov	r3, #0
}
 c1054f4:	e1a00003 	mov	r0, r3
 c1054f8:	e24bd00c 	sub	sp, fp, #12
 c1054fc:	e89d6800 	ldm	sp, {fp, sp, lr}
 c105500:	e12fff1e 	bx	lr
 c105504:	0c119ca8 	.word	0x0c119ca8
 c105508:	0c119cac 	.word	0x0c119cac
 c10550c:	0c119c9c 	.word	0x0c119c9c
 c105510:	0c119c98 	.word	0x0c119c98
 c105514:	0c10e3d4 	.word	0x0c10e3d4
 c105518:	0c11af8c 	.word	0x0c11af8c

0c10551c <OSMutexQuery>:
*********************************************************************************************************
*/

#if OS_MUTEX_QUERY_EN > 0
INT8U  OSMutexQuery (OS_EVENT *pevent, OS_MUTEX_DATA *p_mutex_data)
{
 c10551c:	e1a0c00d 	mov	ip, sp
 c105520:	e92dd800 	push	{fp, ip, lr, pc}
 c105524:	e24cb004 	sub	fp, ip, #4
 c105528:	e24dd010 	sub	sp, sp, #16
 c10552c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
 c105530:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4



    cpu_sr = 0;                                            /* Prevent compiler warning                 */
#endif    
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 c105534:	e59f3214 	ldr	r3, [pc, #532]	; c105750 <OSMutexQuery+0x234>
 c105538:	e5d33000 	ldrb	r3, [r3]
 c10553c:	e3530000 	cmp	r3, #0
 c105540:	0a000001 	beq	c10554c <OSMutexQuery+0x30>
        return (OS_ERR_QUERY_ISR);                         /* ... can't QUERY mutex from an ISR        */
 c105544:	e3a03006 	mov	r3, #6
 c105548:	ea00007c 	b	c105740 <OSMutexQuery+0x224>
    }
#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 c10554c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c105550:	e3530000 	cmp	r3, #0
 c105554:	1a000001 	bne	c105560 <OSMutexQuery+0x44>
        return (OS_ERR_PEVENT_NULL);
 c105558:	e3a03004 	mov	r3, #4
 c10555c:	ea000077 	b	c105740 <OSMutexQuery+0x224>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MUTEX) {      /* Validate event block type                */
 c105560:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c105564:	e5d33000 	ldrb	r3, [r3]
 c105568:	e3530004 	cmp	r3, #4
 c10556c:	0a000001 	beq	c105578 <OSMutexQuery+0x5c>
        return (OS_ERR_EVENT_TYPE);
 c105570:	e3a03001 	mov	r3, #1
 c105574:	ea000071 	b	c105740 <OSMutexQuery+0x224>
    }
    OS_ENTER_CRITICAL();
 c105578:	e10f0000 	mrs	r0, CPSR
 c10557c:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
 c105580:	e38000c0 	orr	r0, r0, #192	; 0xc0
 c105584:	e121f000 	msr	CPSR_c, r0
    p_mutex_data->OSMutexPIP  = (INT8U)(pevent->OSEventCnt >> 8);
 c105588:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c10558c:	e1d330b2 	ldrh	r3, [r3, #2]
 c105590:	e1a03423 	lsr	r3, r3, #8
 c105594:	e1a03803 	lsl	r3, r3, #16
 c105598:	e1a03823 	lsr	r3, r3, #16
 c10559c:	e20320ff 	and	r2, r3, #255	; 0xff
 c1055a0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 c1055a4:	e5c3200b 	strb	r2, [r3, #11]
    p_mutex_data->OSOwnerPrio = (INT8U)(pevent->OSEventCnt & OS_MUTEX_KEEP_LOWER_8);
 c1055a8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c1055ac:	e1d330b2 	ldrh	r3, [r3, #2]
 c1055b0:	e20320ff 	and	r2, r3, #255	; 0xff
 c1055b4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 c1055b8:	e5c3200a 	strb	r2, [r3, #10]
    if (p_mutex_data->OSOwnerPrio == 0xFF) {
 c1055bc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 c1055c0:	e5d3300a 	ldrb	r3, [r3, #10]
 c1055c4:	e35300ff 	cmp	r3, #255	; 0xff
 c1055c8:	1a000003 	bne	c1055dc <OSMutexQuery+0xc0>
        p_mutex_data->OSValue = 1;
 c1055cc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 c1055d0:	e3a02001 	mov	r2, #1
 c1055d4:	e5c32009 	strb	r2, [r3, #9]
 c1055d8:	ea000002 	b	c1055e8 <OSMutexQuery+0xcc>
    } else {
        p_mutex_data->OSValue = 0;
 c1055dc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 c1055e0:	e3a02000 	mov	r2, #0
 c1055e4:	e5c32009 	strb	r2, [r3, #9]
    }
    p_mutex_data->OSEventGrp  = pevent->OSEventGrp;        /* Copy wait list                           */
 c1055e8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c1055ec:	e5d32001 	ldrb	r2, [r3, #1]
 c1055f0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 c1055f4:	e5c32008 	strb	r2, [r3, #8]
    psrc                      = &pevent->OSEventTbl[0];
 c1055f8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c1055fc:	e2833008 	add	r3, r3, #8
 c105600:	e50b3010 	str	r3, [fp, #-16]
    pdest                     = &p_mutex_data->OSEventTbl[0];
 c105604:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 c105608:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
#if OS_EVENT_TBL_SIZE > 0
    *pdest++ = *psrc++;
 c10560c:	e51b3010 	ldr	r3, [fp, #-16]
 c105610:	e5d32000 	ldrb	r2, [r3]
 c105614:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c105618:	e5c32000 	strb	r2, [r3]
 c10561c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c105620:	e2833001 	add	r3, r3, #1
 c105624:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
 c105628:	e51b3010 	ldr	r3, [fp, #-16]
 c10562c:	e2833001 	add	r3, r3, #1
 c105630:	e50b3010 	str	r3, [fp, #-16]
#endif

#if OS_EVENT_TBL_SIZE > 1
    *pdest++ = *psrc++;
 c105634:	e51b3010 	ldr	r3, [fp, #-16]
 c105638:	e5d32000 	ldrb	r2, [r3]
 c10563c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c105640:	e5c32000 	strb	r2, [r3]
 c105644:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c105648:	e2833001 	add	r3, r3, #1
 c10564c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
 c105650:	e51b3010 	ldr	r3, [fp, #-16]
 c105654:	e2833001 	add	r3, r3, #1
 c105658:	e50b3010 	str	r3, [fp, #-16]
#endif

#if OS_EVENT_TBL_SIZE > 2
    *pdest++ = *psrc++;
 c10565c:	e51b3010 	ldr	r3, [fp, #-16]
 c105660:	e5d32000 	ldrb	r2, [r3]
 c105664:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c105668:	e5c32000 	strb	r2, [r3]
 c10566c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c105670:	e2833001 	add	r3, r3, #1
 c105674:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
 c105678:	e51b3010 	ldr	r3, [fp, #-16]
 c10567c:	e2833001 	add	r3, r3, #1
 c105680:	e50b3010 	str	r3, [fp, #-16]
#endif

#if OS_EVENT_TBL_SIZE > 3
    *pdest++ = *psrc++;
 c105684:	e51b3010 	ldr	r3, [fp, #-16]
 c105688:	e5d32000 	ldrb	r2, [r3]
 c10568c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c105690:	e5c32000 	strb	r2, [r3]
 c105694:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c105698:	e2833001 	add	r3, r3, #1
 c10569c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
 c1056a0:	e51b3010 	ldr	r3, [fp, #-16]
 c1056a4:	e2833001 	add	r3, r3, #1
 c1056a8:	e50b3010 	str	r3, [fp, #-16]
#endif

#if OS_EVENT_TBL_SIZE > 4
    *pdest++ = *psrc++;
 c1056ac:	e51b3010 	ldr	r3, [fp, #-16]
 c1056b0:	e5d32000 	ldrb	r2, [r3]
 c1056b4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c1056b8:	e5c32000 	strb	r2, [r3]
 c1056bc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c1056c0:	e2833001 	add	r3, r3, #1
 c1056c4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
 c1056c8:	e51b3010 	ldr	r3, [fp, #-16]
 c1056cc:	e2833001 	add	r3, r3, #1
 c1056d0:	e50b3010 	str	r3, [fp, #-16]
#endif

#if OS_EVENT_TBL_SIZE > 5
    *pdest++ = *psrc++;
 c1056d4:	e51b3010 	ldr	r3, [fp, #-16]
 c1056d8:	e5d32000 	ldrb	r2, [r3]
 c1056dc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c1056e0:	e5c32000 	strb	r2, [r3]
 c1056e4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c1056e8:	e2833001 	add	r3, r3, #1
 c1056ec:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
 c1056f0:	e51b3010 	ldr	r3, [fp, #-16]
 c1056f4:	e2833001 	add	r3, r3, #1
 c1056f8:	e50b3010 	str	r3, [fp, #-16]
#endif

#if OS_EVENT_TBL_SIZE > 6
    *pdest++ = *psrc++;
 c1056fc:	e51b3010 	ldr	r3, [fp, #-16]
 c105700:	e5d32000 	ldrb	r2, [r3]
 c105704:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c105708:	e5c32000 	strb	r2, [r3]
 c10570c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c105710:	e2833001 	add	r3, r3, #1
 c105714:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
 c105718:	e51b3010 	ldr	r3, [fp, #-16]
 c10571c:	e2833001 	add	r3, r3, #1
 c105720:	e50b3010 	str	r3, [fp, #-16]
#endif

#if OS_EVENT_TBL_SIZE > 7
    *pdest   = *psrc;
 c105724:	e51b3010 	ldr	r3, [fp, #-16]
 c105728:	e5d32000 	ldrb	r2, [r3]
 c10572c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c105730:	e5c32000 	strb	r2, [r3]
#endif
    OS_EXIT_CRITICAL();
 c105734:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 c105738:	e121f000 	msr	CPSR_c, r0
    return (OS_NO_ERR);
 c10573c:	e3a03000 	mov	r3, #0
}
 c105740:	e1a00003 	mov	r0, r3
 c105744:	e24bd00c 	sub	sp, fp, #12
 c105748:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10574c:	e12fff1e 	bx	lr
 c105750:	0c119ca8 	.word	0x0c119ca8

0c105754 <OSQAccept>:
*********************************************************************************************************
*/

#if OS_Q_ACCEPT_EN > 0
void  *OSQAccept (OS_EVENT *pevent, INT8U *err)
{
 c105754:	e1a0c00d 	mov	ip, sp
 c105758:	e92dd800 	push	{fp, ip, lr, pc}
 c10575c:	e24cb004 	sub	fp, ip, #4
 c105760:	e24dd010 	sub	sp, sp, #16
 c105764:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
 c105768:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4


    cpu_sr = 0;                                  /* Prevent compiler warning                           */
#endif    
#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
 c10576c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c105770:	e3530000 	cmp	r3, #0
 c105774:	1a000004 	bne	c10578c <OSQAccept+0x38>
        *err = OS_ERR_PEVENT_NULL;
 c105778:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 c10577c:	e3a02004 	mov	r2, #4
 c105780:	e5c32000 	strb	r2, [r3]
        return ((void *)0);
 c105784:	e3a03000 	mov	r3, #0
 c105788:	ea000037 	b	c10586c <OSQAccept+0x118>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
 c10578c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c105790:	e5d33000 	ldrb	r3, [r3]
 c105794:	e3530002 	cmp	r3, #2
 c105798:	0a000004 	beq	c1057b0 <OSQAccept+0x5c>
        *err = OS_ERR_EVENT_TYPE;
 c10579c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 c1057a0:	e3a02001 	mov	r2, #1
 c1057a4:	e5c32000 	strb	r2, [r3]
        return ((void *)0);
 c1057a8:	e3a03000 	mov	r3, #0
 c1057ac:	ea00002e 	b	c10586c <OSQAccept+0x118>
    }
    OS_ENTER_CRITICAL();
 c1057b0:	e10f0000 	mrs	r0, CPSR
 c1057b4:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
 c1057b8:	e38000c0 	orr	r0, r0, #192	; 0xc0
 c1057bc:	e121f000 	msr	CPSR_c, r0
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
 c1057c0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c1057c4:	e5933004 	ldr	r3, [r3, #4]
 c1057c8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
 c1057cc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c1057d0:	e1d331b6 	ldrh	r3, [r3, #22]
 c1057d4:	e3530000 	cmp	r3, #0
 c1057d8:	0a00001b 	beq	c10584c <OSQAccept+0xf8>
        msg = *pq->OSQOut++;                     /* Yes, extract oldest message from the queue         */
 c1057dc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c1057e0:	e5933010 	ldr	r3, [r3, #16]
 c1057e4:	e5932000 	ldr	r2, [r3]
 c1057e8:	e50b2010 	str	r2, [fp, #-16]
 c1057ec:	e2832004 	add	r2, r3, #4
 c1057f0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c1057f4:	e5832010 	str	r2, [r3, #16]
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
 c1057f8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c1057fc:	e1d331b6 	ldrh	r3, [r3, #22]
 c105800:	e2433001 	sub	r3, r3, #1
 c105804:	e1a03803 	lsl	r3, r3, #16
 c105808:	e1a02823 	lsr	r2, r3, #16
 c10580c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c105810:	e1c321b6 	strh	r2, [r3, #22]
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
 c105814:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c105818:	e5932010 	ldr	r2, [r3, #16]
 c10581c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c105820:	e5933008 	ldr	r3, [r3, #8]
 c105824:	e1520003 	cmp	r2, r3
 c105828:	1a000003 	bne	c10583c <OSQAccept+0xe8>
            pq->OSQOut = pq->OSQStart;
 c10582c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c105830:	e5932004 	ldr	r2, [r3, #4]
 c105834:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c105838:	e5832010 	str	r2, [r3, #16]
        }
        *err = OS_NO_ERR;
 c10583c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 c105840:	e3a02000 	mov	r2, #0
 c105844:	e5c32000 	strb	r2, [r3]
 c105848:	ea000004 	b	c105860 <OSQAccept+0x10c>
    } else {
        *err = OS_Q_EMPTY;
 c10584c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 c105850:	e3a0201f 	mov	r2, #31
 c105854:	e5c32000 	strb	r2, [r3]
        msg  = (void *)0;                        /* Queue is empty                                     */
 c105858:	e3a03000 	mov	r3, #0
 c10585c:	e50b3010 	str	r3, [fp, #-16]
    }
    OS_EXIT_CRITICAL();
 c105860:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 c105864:	e121f000 	msr	CPSR_c, r0
    return (msg);                                /* Return message received (or NULL)                  */
 c105868:	e51b3010 	ldr	r3, [fp, #-16]
}
 c10586c:	e1a00003 	mov	r0, r3
 c105870:	e24bd00c 	sub	sp, fp, #12
 c105874:	e89d6800 	ldm	sp, {fp, sp, lr}
 c105878:	e12fff1e 	bx	lr

0c10587c <OSQCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available or an error was detected
*********************************************************************************************************
*/

OS_EVENT  *OSQCreate (void **start, INT16U size)
{
 c10587c:	e1a0c00d 	mov	ip, sp
 c105880:	e92dd800 	push	{fp, ip, lr, pc}
 c105884:	e24cb004 	sub	fp, ip, #4
 c105888:	e24dd010 	sub	sp, sp, #16
 c10588c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
 c105890:	e1a03001 	mov	r3, r1
 c105894:	e14b31ba 	strh	r3, [fp, #-26]	; 0xffffffe6



    cpu_sr = 0;                                  /* Prevent compiler warning                           */
#endif    
    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
 c105898:	e59f3188 	ldr	r3, [pc, #392]	; c105a28 <OSQCreate+0x1ac>
 c10589c:	e5d33000 	ldrb	r3, [r3]
 c1058a0:	e3530000 	cmp	r3, #0
 c1058a4:	0a000001 	beq	c1058b0 <OSQCreate+0x34>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
 c1058a8:	e3a03000 	mov	r3, #0
 c1058ac:	ea000059 	b	c105a18 <OSQCreate+0x19c>
    }
    OS_ENTER_CRITICAL();
 c1058b0:	e10f0000 	mrs	r0, CPSR
 c1058b4:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
 c1058b8:	e38000c0 	orr	r0, r0, #192	; 0xc0
 c1058bc:	e121f000 	msr	CPSR_c, r0
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
 c1058c0:	e59f3164 	ldr	r3, [pc, #356]	; c105a2c <OSQCreate+0x1b0>
 c1058c4:	e5933000 	ldr	r3, [r3]
 c1058c8:	e50b3010 	str	r3, [fp, #-16]
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
 c1058cc:	e59f3158 	ldr	r3, [pc, #344]	; c105a2c <OSQCreate+0x1b0>
 c1058d0:	e5933000 	ldr	r3, [r3]
 c1058d4:	e3530000 	cmp	r3, #0
 c1058d8:	0a000005 	beq	c1058f4 <OSQCreate+0x78>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
 c1058dc:	e59f3148 	ldr	r3, [pc, #328]	; c105a2c <OSQCreate+0x1b0>
 c1058e0:	e5933000 	ldr	r3, [r3]
 c1058e4:	e5933004 	ldr	r3, [r3, #4]
 c1058e8:	e1a02003 	mov	r2, r3
 c1058ec:	e59f3138 	ldr	r3, [pc, #312]	; c105a2c <OSQCreate+0x1b0>
 c1058f0:	e5832000 	str	r2, [r3]
    }
    OS_EXIT_CRITICAL();
 c1058f4:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 c1058f8:	e121f000 	msr	CPSR_c, r0
    if (pevent != (OS_EVENT *)0) {               /* See if we have an event control block              */
 c1058fc:	e51b3010 	ldr	r3, [fp, #-16]
 c105900:	e3530000 	cmp	r3, #0
 c105904:	0a000042 	beq	c105a14 <OSQCreate+0x198>
        OS_ENTER_CRITICAL();
 c105908:	e10f0000 	mrs	r0, CPSR
 c10590c:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
 c105910:	e38000c0 	orr	r0, r0, #192	; 0xc0
 c105914:	e121f000 	msr	CPSR_c, r0
        pq = OSQFreeList;                        /* Get a free queue control block                     */
 c105918:	e59f3110 	ldr	r3, [pc, #272]	; c105a30 <OSQCreate+0x1b4>
 c10591c:	e5933000 	ldr	r3, [r3]
 c105920:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
        if (pq != (OS_Q *)0) {                   /* Were we able to get a queue control block ?        */
 c105924:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c105928:	e3530000 	cmp	r3, #0
 c10592c:	0a00002d 	beq	c1059e8 <OSQCreate+0x16c>
            OSQFreeList            = OSQFreeList->OSQPtr; /* Yes, Adjust free list pointer to next free*/
 c105930:	e59f30f8 	ldr	r3, [pc, #248]	; c105a30 <OSQCreate+0x1b4>
 c105934:	e5933000 	ldr	r3, [r3]
 c105938:	e5932000 	ldr	r2, [r3]
 c10593c:	e59f30ec 	ldr	r3, [pc, #236]	; c105a30 <OSQCreate+0x1b4>
 c105940:	e5832000 	str	r2, [r3]
            OS_EXIT_CRITICAL();
 c105944:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 c105948:	e121f000 	msr	CPSR_c, r0
            pq->OSQStart           = start;               /*      Initialize the queue                 */
 c10594c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c105950:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
 c105954:	e5832004 	str	r2, [r3, #4]
            pq->OSQEnd             = &start[size];
 c105958:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
 c10595c:	e1a03103 	lsl	r3, r3, #2
 c105960:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
 c105964:	e0822003 	add	r2, r2, r3
 c105968:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c10596c:	e5832008 	str	r2, [r3, #8]
            pq->OSQIn              = start;
 c105970:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c105974:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
 c105978:	e583200c 	str	r2, [r3, #12]
            pq->OSQOut             = start;
 c10597c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c105980:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
 c105984:	e5832010 	str	r2, [r3, #16]
            pq->OSQSize            = size;
 c105988:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c10598c:	e15b21ba 	ldrh	r2, [fp, #-26]	; 0xffffffe6
 c105990:	e1c321b4 	strh	r2, [r3, #20]
            pq->OSQEntries         = 0;
 c105994:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c105998:	e3a02000 	mov	r2, #0
 c10599c:	e1c321b6 	strh	r2, [r3, #22]
            pevent->OSEventType    = OS_EVENT_TYPE_Q;
 c1059a0:	e51b3010 	ldr	r3, [fp, #-16]
 c1059a4:	e3a02002 	mov	r2, #2
 c1059a8:	e5c32000 	strb	r2, [r3]
            pevent->OSEventCnt     = 0;
 c1059ac:	e51b3010 	ldr	r3, [fp, #-16]
 c1059b0:	e3a02000 	mov	r2, #0
 c1059b4:	e1c320b2 	strh	r2, [r3, #2]
            pevent->OSEventPtr     = pq;
 c1059b8:	e51b3010 	ldr	r3, [fp, #-16]
 c1059bc:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
 c1059c0:	e5832004 	str	r2, [r3, #4]
#if OS_EVENT_NAME_SIZE > 1
            pevent->OSEventName[0] = '?';                  /* Unknown name                             */
 c1059c4:	e51b3010 	ldr	r3, [fp, #-16]
 c1059c8:	e3a0203f 	mov	r2, #63	; 0x3f
 c1059cc:	e5c32010 	strb	r2, [r3, #16]
            pevent->OSEventName[1] = OS_ASCII_NUL;
 c1059d0:	e51b3010 	ldr	r3, [fp, #-16]
 c1059d4:	e3a02000 	mov	r2, #0
 c1059d8:	e5c32011 	strb	r2, [r3, #17]
#endif
            OS_EventWaitListInit(pevent);                 /*      Initalize the wait list              */
 c1059dc:	e51b0010 	ldr	r0, [fp, #-16]
 c1059e0:	ebffedc7 	bl	c101104 <OS_EventWaitListInit>
 c1059e4:	ea00000a 	b	c105a14 <OSQCreate+0x198>
        } else {
            pevent->OSEventPtr = (void *)OSEventFreeList; /* No,  Return event control block on error  */
 c1059e8:	e59f303c 	ldr	r3, [pc, #60]	; c105a2c <OSQCreate+0x1b0>
 c1059ec:	e5932000 	ldr	r2, [r3]
 c1059f0:	e51b3010 	ldr	r3, [fp, #-16]
 c1059f4:	e5832004 	str	r2, [r3, #4]
            OSEventFreeList    = pevent;
 c1059f8:	e59f302c 	ldr	r3, [pc, #44]	; c105a2c <OSQCreate+0x1b0>
 c1059fc:	e51b2010 	ldr	r2, [fp, #-16]
 c105a00:	e5832000 	str	r2, [r3]
            OS_EXIT_CRITICAL();
 c105a04:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 c105a08:	e121f000 	msr	CPSR_c, r0
            pevent = (OS_EVENT *)0;
 c105a0c:	e3a03000 	mov	r3, #0
 c105a10:	e50b3010 	str	r3, [fp, #-16]
        }
    }
    return (pevent);
 c105a14:	e51b3010 	ldr	r3, [fp, #-16]
}
 c105a18:	e1a00003 	mov	r0, r3
 c105a1c:	e24bd00c 	sub	sp, fp, #12
 c105a20:	e89d6800 	ldm	sp, {fp, sp, lr}
 c105a24:	e12fff1e 	bx	lr
 c105a28:	0c119ca8 	.word	0x0c119ca8
 c105a2c:	0c119ca4 	.word	0x0c119ca4
 c105a30:	0c119c94 	.word	0x0c119c94

0c105a34 <OSQDel>:
*********************************************************************************************************
*/

#if OS_Q_DEL_EN > 0
OS_EVENT  *OSQDel (OS_EVENT *pevent, INT8U opt, INT8U *err)
{
 c105a34:	e1a0c00d 	mov	ip, sp
 c105a38:	e92dd800 	push	{fp, ip, lr, pc}
 c105a3c:	e24cb004 	sub	fp, ip, #4
 c105a40:	e24dd018 	sub	sp, sp, #24
 c105a44:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
 c105a48:	e1a03001 	mov	r3, r1
 c105a4c:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
 c105a50:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7



    cpu_sr = 0;                                            /* Prevent compiler warning                 */
#endif    
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 c105a54:	e59f3254 	ldr	r3, [pc, #596]	; c105cb0 <OSQDel+0x27c>
 c105a58:	e5d33000 	ldrb	r3, [r3]
 c105a5c:	e3530000 	cmp	r3, #0
 c105a60:	0a000004 	beq	c105a78 <OSQDel+0x44>
        *err = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
 c105a64:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c105a68:	e3e02073 	mvn	r2, #115	; 0x73
 c105a6c:	e5c32000 	strb	r2, [r3]
        return (pevent);
 c105a70:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c105a74:	ea000089 	b	c105ca0 <OSQDel+0x26c>
    }
#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 c105a78:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c105a7c:	e3530000 	cmp	r3, #0
 c105a80:	1a000004 	bne	c105a98 <OSQDel+0x64>
        *err = OS_ERR_PEVENT_NULL;
 c105a84:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c105a88:	e3a02004 	mov	r2, #4
 c105a8c:	e5c32000 	strb	r2, [r3]
        return (pevent);
 c105a90:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c105a94:	ea000081 	b	c105ca0 <OSQDel+0x26c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
 c105a98:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c105a9c:	e5d33000 	ldrb	r3, [r3]
 c105aa0:	e3530002 	cmp	r3, #2
 c105aa4:	0a000004 	beq	c105abc <OSQDel+0x88>
        *err = OS_ERR_EVENT_TYPE;
 c105aa8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c105aac:	e3a02001 	mov	r2, #1
 c105ab0:	e5c32000 	strb	r2, [r3]
        return (pevent);
 c105ab4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c105ab8:	ea000078 	b	c105ca0 <OSQDel+0x26c>
    }
    OS_ENTER_CRITICAL();
 c105abc:	e10f0000 	mrs	r0, CPSR
 c105ac0:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
 c105ac4:	e38000c0 	orr	r0, r0, #192	; 0xc0
 c105ac8:	e121f000 	msr	CPSR_c, r0
    if (pevent->OSEventGrp != 0x00) {                      /* See if any tasks waiting on queue        */
 c105acc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c105ad0:	e5d33001 	ldrb	r3, [r3, #1]
 c105ad4:	e3530000 	cmp	r3, #0
 c105ad8:	0a000002 	beq	c105ae8 <OSQDel+0xb4>
        tasks_waiting = TRUE;                              /* Yes                                      */
 c105adc:	e3a03001 	mov	r3, #1
 c105ae0:	e54b300d 	strb	r3, [fp, #-13]
 c105ae4:	ea000001 	b	c105af0 <OSQDel+0xbc>
    } else {
        tasks_waiting = FALSE;                             /* No                                       */
 c105ae8:	e3a03000 	mov	r3, #0
 c105aec:	e54b300d 	strb	r3, [fp, #-13]
    }
    switch (opt) {
 c105af0:	e55b3019 	ldrb	r3, [fp, #-25]	; 0xffffffe7
 c105af4:	e3530000 	cmp	r3, #0
 c105af8:	0a000002 	beq	c105b08 <OSQDel+0xd4>
 c105afc:	e3530001 	cmp	r3, #1
 c105b00:	0a000033 	beq	c105bd4 <OSQDel+0x1a0>
 c105b04:	ea00005f 	b	c105c88 <OSQDel+0x254>
        case OS_DEL_NO_PEND:                               /* Delete queue only if no task waiting     */
             if (tasks_waiting == FALSE) {
 c105b08:	e55b300d 	ldrb	r3, [fp, #-13]
 c105b0c:	e3530000 	cmp	r3, #0
 c105b10:	1a000023 	bne	c105ba4 <OSQDel+0x170>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
 c105b14:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c105b18:	e3a0203f 	mov	r2, #63	; 0x3f
 c105b1c:	e5c32010 	strb	r2, [r3, #16]
                 pevent->OSEventName[1] = OS_ASCII_NUL;
 c105b20:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c105b24:	e3a02000 	mov	r2, #0
 c105b28:	e5c32011 	strb	r2, [r3, #17]
#endif
                 pq                     = (OS_Q *)pevent->OSEventPtr;  /* Return OS_Q to free list     */
 c105b2c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c105b30:	e5933004 	ldr	r3, [r3, #4]
 c105b34:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
                 pq->OSQPtr             = OSQFreeList;
 c105b38:	e59f3174 	ldr	r3, [pc, #372]	; c105cb4 <OSQDel+0x280>
 c105b3c:	e5932000 	ldr	r2, [r3]
 c105b40:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c105b44:	e5832000 	str	r2, [r3]
                 OSQFreeList            = pq;
 c105b48:	e59f3164 	ldr	r3, [pc, #356]	; c105cb4 <OSQDel+0x280>
 c105b4c:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
 c105b50:	e5832000 	str	r2, [r3]
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
 c105b54:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c105b58:	e3a02000 	mov	r2, #0
 c105b5c:	e5c32000 	strb	r2, [r3]
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
 c105b60:	e59f3150 	ldr	r3, [pc, #336]	; c105cb8 <OSQDel+0x284>
 c105b64:	e5932000 	ldr	r2, [r3]
 c105b68:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c105b6c:	e5832004 	str	r2, [r3, #4]
                 pevent->OSEventCnt     = 0;
 c105b70:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c105b74:	e3a02000 	mov	r2, #0
 c105b78:	e1c320b2 	strh	r2, [r3, #2]
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
 c105b7c:	e59f3134 	ldr	r3, [pc, #308]	; c105cb8 <OSQDel+0x284>
 c105b80:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
 c105b84:	e5832000 	str	r2, [r3]
                 OS_EXIT_CRITICAL();
 c105b88:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 c105b8c:	e121f000 	msr	CPSR_c, r0
                 *err                   = OS_NO_ERR;
 c105b90:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c105b94:	e3a02000 	mov	r2, #0
 c105b98:	e5c32000 	strb	r2, [r3]
                 return ((OS_EVENT *)0);                   /* Queue has been deleted                   */
 c105b9c:	e3a03000 	mov	r3, #0
 c105ba0:	ea00003e 	b	c105ca0 <OSQDel+0x26c>
             } else {
                 OS_EXIT_CRITICAL();
 c105ba4:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 c105ba8:	e121f000 	msr	CPSR_c, r0
                 *err                   = OS_ERR_TASK_WAITING;
 c105bac:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c105bb0:	e3a02008 	mov	r2, #8
 c105bb4:	e5c32000 	strb	r2, [r3]
                 return (pevent);
 c105bb8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c105bbc:	ea000037 	b	c105ca0 <OSQDel+0x26c>
             }

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0x00) {          /* Ready ALL tasks waiting for queue        */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q);
 c105bc0:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
 c105bc4:	e3a01000 	mov	r1, #0
 c105bc8:	e3a02004 	mov	r2, #4
 c105bcc:	ebffec2e 	bl	c100c8c <OS_EventTaskRdy>
 c105bd0:	ea000000 	b	c105bd8 <OSQDel+0x1a4>
                 *err                   = OS_ERR_TASK_WAITING;
                 return (pevent);
             }

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0x00) {          /* Ready ALL tasks waiting for queue        */
 c105bd4:	e1a00000 	nop			; (mov r0, r0)
 c105bd8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c105bdc:	e5d33001 	ldrb	r3, [r3, #1]
 c105be0:	e3530000 	cmp	r3, #0
 c105be4:	1afffff5 	bne	c105bc0 <OSQDel+0x18c>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
 c105be8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c105bec:	e3a0203f 	mov	r2, #63	; 0x3f
 c105bf0:	e5c32010 	strb	r2, [r3, #16]
             pevent->OSEventName[1] = OS_ASCII_NUL;
 c105bf4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c105bf8:	e3a02000 	mov	r2, #0
 c105bfc:	e5c32011 	strb	r2, [r3, #17]
#endif
             pq                     = (OS_Q *)pevent->OSEventPtr;   /* Return OS_Q to free list        */
 c105c00:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c105c04:	e5933004 	ldr	r3, [r3, #4]
 c105c08:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
             pq->OSQPtr             = OSQFreeList;
 c105c0c:	e59f30a0 	ldr	r3, [pc, #160]	; c105cb4 <OSQDel+0x280>
 c105c10:	e5932000 	ldr	r2, [r3]
 c105c14:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c105c18:	e5832000 	str	r2, [r3]
             OSQFreeList            = pq;
 c105c1c:	e59f3090 	ldr	r3, [pc, #144]	; c105cb4 <OSQDel+0x280>
 c105c20:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
 c105c24:	e5832000 	str	r2, [r3]
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
 c105c28:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c105c2c:	e3a02000 	mov	r2, #0
 c105c30:	e5c32000 	strb	r2, [r3]
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
 c105c34:	e59f307c 	ldr	r3, [pc, #124]	; c105cb8 <OSQDel+0x284>
 c105c38:	e5932000 	ldr	r2, [r3]
 c105c3c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c105c40:	e5832004 	str	r2, [r3, #4]
             pevent->OSEventCnt     = 0;
 c105c44:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c105c48:	e3a02000 	mov	r2, #0
 c105c4c:	e1c320b2 	strh	r2, [r3, #2]
             OSEventFreeList        = pevent;              /* Get next free event control block        */
 c105c50:	e59f3060 	ldr	r3, [pc, #96]	; c105cb8 <OSQDel+0x284>
 c105c54:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
 c105c58:	e5832000 	str	r2, [r3]
             OS_EXIT_CRITICAL();
 c105c5c:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 c105c60:	e121f000 	msr	CPSR_c, r0
             if (tasks_waiting == TRUE) {                  /* Reschedule only if task(s) were waiting  */
 c105c64:	e55b300d 	ldrb	r3, [fp, #-13]
 c105c68:	e3530001 	cmp	r3, #1
 c105c6c:	1a000000 	bne	c105c74 <OSQDel+0x240>
                 OS_Sched();                               /* Find highest priority task ready to run  */
 c105c70:	ebffee9b 	bl	c1016e4 <OS_Sched>
             }
             *err = OS_NO_ERR;
 c105c74:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c105c78:	e3a02000 	mov	r2, #0
 c105c7c:	e5c32000 	strb	r2, [r3]
             return ((OS_EVENT *)0);                       /* Queue has been deleted                   */
 c105c80:	e3a03000 	mov	r3, #0
 c105c84:	ea000005 	b	c105ca0 <OSQDel+0x26c>

        default:
             OS_EXIT_CRITICAL();
 c105c88:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 c105c8c:	e121f000 	msr	CPSR_c, r0
             *err = OS_ERR_INVALID_OPT;
 c105c90:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c105c94:	e3a02007 	mov	r2, #7
 c105c98:	e5c32000 	strb	r2, [r3]
             return (pevent);
 c105c9c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
    }
}
 c105ca0:	e1a00003 	mov	r0, r3
 c105ca4:	e24bd00c 	sub	sp, fp, #12
 c105ca8:	e89d6800 	ldm	sp, {fp, sp, lr}
 c105cac:	e12fff1e 	bx	lr
 c105cb0:	0c119ca8 	.word	0x0c119ca8
 c105cb4:	0c119c94 	.word	0x0c119c94
 c105cb8:	0c119ca4 	.word	0x0c119ca4

0c105cbc <OSQFlush>:
*********************************************************************************************************
*/

#if OS_Q_FLUSH_EN > 0
INT8U  OSQFlush (OS_EVENT *pevent)
{
 c105cbc:	e1a0c00d 	mov	ip, sp
 c105cc0:	e92dd800 	push	{fp, ip, lr, pc}
 c105cc4:	e24cb004 	sub	fp, ip, #4
 c105cc8:	e24dd010 	sub	sp, sp, #16
 c105ccc:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8


    cpu_sr = 0;                                       /* Prevent compiler warning                      */
#endif    
#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 c105cd0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c105cd4:	e3530000 	cmp	r3, #0
 c105cd8:	1a000001 	bne	c105ce4 <OSQFlush+0x28>
        return (OS_ERR_PEVENT_NULL);
 c105cdc:	e3a03004 	mov	r3, #4
 c105ce0:	ea00001a 	b	c105d50 <OSQFlush+0x94>
    }
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
 c105ce4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c105ce8:	e5d33000 	ldrb	r3, [r3]
 c105cec:	e3530002 	cmp	r3, #2
 c105cf0:	0a000001 	beq	c105cfc <OSQFlush+0x40>
        return (OS_ERR_EVENT_TYPE);
 c105cf4:	e3a03001 	mov	r3, #1
 c105cf8:	ea000014 	b	c105d50 <OSQFlush+0x94>
    }
#endif
    OS_ENTER_CRITICAL();
 c105cfc:	e10f0000 	mrs	r0, CPSR
 c105d00:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
 c105d04:	e38000c0 	orr	r0, r0, #192	; 0xc0
 c105d08:	e121f000 	msr	CPSR_c, r0
    pq             = (OS_Q *)pevent->OSEventPtr;      /* Point to queue storage structure              */
 c105d0c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c105d10:	e5933004 	ldr	r3, [r3, #4]
 c105d14:	e50b3010 	str	r3, [fp, #-16]
    pq->OSQIn      = pq->OSQStart;
 c105d18:	e51b3010 	ldr	r3, [fp, #-16]
 c105d1c:	e5932004 	ldr	r2, [r3, #4]
 c105d20:	e51b3010 	ldr	r3, [fp, #-16]
 c105d24:	e583200c 	str	r2, [r3, #12]
    pq->OSQOut     = pq->OSQStart;
 c105d28:	e51b3010 	ldr	r3, [fp, #-16]
 c105d2c:	e5932004 	ldr	r2, [r3, #4]
 c105d30:	e51b3010 	ldr	r3, [fp, #-16]
 c105d34:	e5832010 	str	r2, [r3, #16]
    pq->OSQEntries = 0;
 c105d38:	e51b3010 	ldr	r3, [fp, #-16]
 c105d3c:	e3a02000 	mov	r2, #0
 c105d40:	e1c321b6 	strh	r2, [r3, #22]
    OS_EXIT_CRITICAL();
 c105d44:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 c105d48:	e121f000 	msr	CPSR_c, r0
    return (OS_NO_ERR);
 c105d4c:	e3a03000 	mov	r3, #0
}
 c105d50:	e1a00003 	mov	r0, r3
 c105d54:	e24bd00c 	sub	sp, fp, #12
 c105d58:	e89d6800 	ldm	sp, {fp, sp, lr}
 c105d5c:	e12fff1e 	bx	lr

0c105d60 <OSQPend>:
* Note(s)    : As of V2.60, this function allows you to receive NULL pointer messages.
*********************************************************************************************************
*/

void  *OSQPend (OS_EVENT *pevent, INT16U timeout, INT8U *err)
{
 c105d60:	e1a0c00d 	mov	ip, sp
 c105d64:	e92dd800 	push	{fp, ip, lr, pc}
 c105d68:	e24cb004 	sub	fp, ip, #4
 c105d6c:	e24dd018 	sub	sp, sp, #24
 c105d70:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
 c105d74:	e1a03001 	mov	r3, r1
 c105d78:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
 c105d7c:	e14b31ba 	strh	r3, [fp, #-26]	; 0xffffffe6



    cpu_sr = 0;                                  /* Prevent compiler warning                           */
#endif    
    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
 c105d80:	e59f320c 	ldr	r3, [pc, #524]	; c105f94 <OSQPend+0x234>
 c105d84:	e5d33000 	ldrb	r3, [r3]
 c105d88:	e3530000 	cmp	r3, #0
 c105d8c:	0a000004 	beq	c105da4 <OSQPend+0x44>
        *err = OS_ERR_PEND_ISR;                  /* ... can't PEND from an ISR                         */
 c105d90:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c105d94:	e3a02002 	mov	r2, #2
 c105d98:	e5c32000 	strb	r2, [r3]
        return ((void *)0);
 c105d9c:	e3a03000 	mov	r3, #0
 c105da0:	ea000077 	b	c105f84 <OSQPend+0x224>
    }
#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
 c105da4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c105da8:	e3530000 	cmp	r3, #0
 c105dac:	1a000004 	bne	c105dc4 <OSQPend+0x64>
        *err = OS_ERR_PEVENT_NULL;
 c105db0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c105db4:	e3a02004 	mov	r2, #4
 c105db8:	e5c32000 	strb	r2, [r3]
        return ((void *)0);
 c105dbc:	e3a03000 	mov	r3, #0
 c105dc0:	ea00006f 	b	c105f84 <OSQPend+0x224>
    }
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
 c105dc4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c105dc8:	e5d33000 	ldrb	r3, [r3]
 c105dcc:	e3530002 	cmp	r3, #2
 c105dd0:	0a000004 	beq	c105de8 <OSQPend+0x88>
        *err = OS_ERR_EVENT_TYPE;
 c105dd4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c105dd8:	e3a02001 	mov	r2, #1
 c105ddc:	e5c32000 	strb	r2, [r3]
        return ((void *)0);
 c105de0:	e3a03000 	mov	r3, #0
 c105de4:	ea000066 	b	c105f84 <OSQPend+0x224>
    }
#endif
    OS_ENTER_CRITICAL();
 c105de8:	e10f0000 	mrs	r0, CPSR
 c105dec:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
 c105df0:	e38000c0 	orr	r0, r0, #192	; 0xc0
 c105df4:	e121f000 	msr	CPSR_c, r0
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
 c105df8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c105dfc:	e5933004 	ldr	r3, [r3, #4]
 c105e00:	e50b3010 	str	r3, [fp, #-16]
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
 c105e04:	e51b3010 	ldr	r3, [fp, #-16]
 c105e08:	e1d331b6 	ldrh	r3, [r3, #22]
 c105e0c:	e3530000 	cmp	r3, #0
 c105e10:	0a00001e 	beq	c105e90 <OSQPend+0x130>
        msg = *pq->OSQOut++;                     /* Yes, extract oldest message from the queue         */
 c105e14:	e51b3010 	ldr	r3, [fp, #-16]
 c105e18:	e5933010 	ldr	r3, [r3, #16]
 c105e1c:	e5932000 	ldr	r2, [r3]
 c105e20:	e50b2014 	str	r2, [fp, #-20]	; 0xffffffec
 c105e24:	e2832004 	add	r2, r3, #4
 c105e28:	e51b3010 	ldr	r3, [fp, #-16]
 c105e2c:	e5832010 	str	r2, [r3, #16]
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
 c105e30:	e51b3010 	ldr	r3, [fp, #-16]
 c105e34:	e1d331b6 	ldrh	r3, [r3, #22]
 c105e38:	e2433001 	sub	r3, r3, #1
 c105e3c:	e1a03803 	lsl	r3, r3, #16
 c105e40:	e1a02823 	lsr	r2, r3, #16
 c105e44:	e51b3010 	ldr	r3, [fp, #-16]
 c105e48:	e1c321b6 	strh	r2, [r3, #22]
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
 c105e4c:	e51b3010 	ldr	r3, [fp, #-16]
 c105e50:	e5932010 	ldr	r2, [r3, #16]
 c105e54:	e51b3010 	ldr	r3, [fp, #-16]
 c105e58:	e5933008 	ldr	r3, [r3, #8]
 c105e5c:	e1520003 	cmp	r2, r3
 c105e60:	1a000003 	bne	c105e74 <OSQPend+0x114>
            pq->OSQOut = pq->OSQStart;
 c105e64:	e51b3010 	ldr	r3, [fp, #-16]
 c105e68:	e5932004 	ldr	r2, [r3, #4]
 c105e6c:	e51b3010 	ldr	r3, [fp, #-16]
 c105e70:	e5832010 	str	r2, [r3, #16]
        }
        OS_EXIT_CRITICAL();
 c105e74:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 c105e78:	e121f000 	msr	CPSR_c, r0
        *err = OS_NO_ERR;
 c105e7c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c105e80:	e3a02000 	mov	r2, #0
 c105e84:	e5c32000 	strb	r2, [r3]
        return (msg);                            /* Return message received                            */
 c105e88:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c105e8c:	ea00003c 	b	c105f84 <OSQPend+0x224>
    }
    OSTCBCur->OSTCBStat   |= OS_STAT_Q;          /* Task will have to pend for a message to be posted  */
 c105e90:	e59f3100 	ldr	r3, [pc, #256]	; c105f98 <OSQPend+0x238>
 c105e94:	e5933000 	ldr	r3, [r3]
 c105e98:	e59f20f8 	ldr	r2, [pc, #248]	; c105f98 <OSQPend+0x238>
 c105e9c:	e5922000 	ldr	r2, [r2]
 c105ea0:	e5d2202c 	ldrb	r2, [r2, #44]	; 0x2c
 c105ea4:	e3822004 	orr	r2, r2, #4
 c105ea8:	e20220ff 	and	r2, r2, #255	; 0xff
 c105eac:	e5c3202c 	strb	r2, [r3, #44]	; 0x2c
    OSTCBCur->OSTCBPendTO  = FALSE;
 c105eb0:	e59f30e0 	ldr	r3, [pc, #224]	; c105f98 <OSQPend+0x238>
 c105eb4:	e5933000 	ldr	r3, [r3]
 c105eb8:	e3a02000 	mov	r2, #0
 c105ebc:	e5c3202d 	strb	r2, [r3, #45]	; 0x2d
    OSTCBCur->OSTCBDly     = timeout;            /* Load timeout into TCB                              */
 c105ec0:	e59f30d0 	ldr	r3, [pc, #208]	; c105f98 <OSQPend+0x238>
 c105ec4:	e5933000 	ldr	r3, [r3]
 c105ec8:	e15b21ba 	ldrh	r2, [fp, #-26]	; 0xffffffe6
 c105ecc:	e1c322ba 	strh	r2, [r3, #42]	; 0x2a
    OS_EventTaskWait(pevent);                    /* Suspend task until event or timeout occurs         */
 c105ed0:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
 c105ed4:	ebffebef 	bl	c100e98 <OS_EventTaskWait>
    OS_EXIT_CRITICAL();
 c105ed8:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 c105edc:	e121f000 	msr	CPSR_c, r0
    OS_Sched();                                  /* Find next highest priority task ready to run       */
 c105ee0:	ebffedff 	bl	c1016e4 <OS_Sched>
    OS_ENTER_CRITICAL();
 c105ee4:	e10f0000 	mrs	r0, CPSR
 c105ee8:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
 c105eec:	e38000c0 	orr	r0, r0, #192	; 0xc0
 c105ef0:	e121f000 	msr	CPSR_c, r0
    if (OSTCBCur->OSTCBPendTO == TRUE) {         /* Was task readied because of a timeout?             */
 c105ef4:	e59f309c 	ldr	r3, [pc, #156]	; c105f98 <OSQPend+0x238>
 c105ef8:	e5933000 	ldr	r3, [r3]
 c105efc:	e5d3302d 	ldrb	r3, [r3, #45]	; 0x2d
 c105f00:	e3530001 	cmp	r3, #1
 c105f04:	1a000008 	bne	c105f2c <OSQPend+0x1cc>
        OS_EventTO(pevent);                      /* Yes                                                */
 c105f08:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
 c105f0c:	ebffec37 	bl	c100ff0 <OS_EventTO>
        OS_EXIT_CRITICAL();
 c105f10:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 c105f14:	e121f000 	msr	CPSR_c, r0
        *err = OS_TIMEOUT;                       /*     Indicate a timeout occured                     */
 c105f18:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c105f1c:	e3a0200a 	mov	r2, #10
 c105f20:	e5c32000 	strb	r2, [r3]
        return ((void *)0);                      /*     No message received                            */
 c105f24:	e3a03000 	mov	r3, #0
 c105f28:	ea000015 	b	c105f84 <OSQPend+0x224>
    }
    msg                     = OSTCBCur->OSTCBMsg;/* No, Extract message from TCB (Put there by QPost)  */
 c105f2c:	e59f3064 	ldr	r3, [pc, #100]	; c105f98 <OSQPend+0x238>
 c105f30:	e5933000 	ldr	r3, [r3]
 c105f34:	e5933020 	ldr	r3, [r3, #32]
 c105f38:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    OSTCBCur->OSTCBMsg      = (void *)0;
 c105f3c:	e59f3054 	ldr	r3, [pc, #84]	; c105f98 <OSQPend+0x238>
 c105f40:	e5933000 	ldr	r3, [r3]
 c105f44:	e3a02000 	mov	r2, #0
 c105f48:	e5832020 	str	r2, [r3, #32]
    OSTCBCur->OSTCBStat     = OS_STAT_RDY;
 c105f4c:	e59f3044 	ldr	r3, [pc, #68]	; c105f98 <OSQPend+0x238>
 c105f50:	e5933000 	ldr	r3, [r3]
 c105f54:	e3a02000 	mov	r2, #0
 c105f58:	e5c3202c 	strb	r2, [r3, #44]	; 0x2c
    OSTCBCur->OSTCBEventPtr = (OS_EVENT *)0;     /*     No longer waiting for event                    */
 c105f5c:	e59f3034 	ldr	r3, [pc, #52]	; c105f98 <OSQPend+0x238>
 c105f60:	e5933000 	ldr	r3, [r3]
 c105f64:	e3a02000 	mov	r2, #0
 c105f68:	e583201c 	str	r2, [r3, #28]
    OS_EXIT_CRITICAL();
 c105f6c:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 c105f70:	e121f000 	msr	CPSR_c, r0
    *err                    = OS_NO_ERR;
 c105f74:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c105f78:	e3a02000 	mov	r2, #0
 c105f7c:	e5c32000 	strb	r2, [r3]
    return (msg);                                /*     Return message received                        */
 c105f80:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
}
 c105f84:	e1a00003 	mov	r0, r3
 c105f88:	e24bd00c 	sub	sp, fp, #12
 c105f8c:	e89d6800 	ldm	sp, {fp, sp, lr}
 c105f90:	e12fff1e 	bx	lr
 c105f94:	0c119ca8 	.word	0x0c119ca8
 c105f98:	0c119cac 	.word	0x0c119cac

0c105f9c <OSQPost>:
*********************************************************************************************************
*/

#if OS_Q_POST_EN > 0
INT8U  OSQPost (OS_EVENT *pevent, void *msg)
{
 c105f9c:	e1a0c00d 	mov	ip, sp
 c105fa0:	e92dd800 	push	{fp, ip, lr, pc}
 c105fa4:	e24cb004 	sub	fp, ip, #4
 c105fa8:	e24dd010 	sub	sp, sp, #16
 c105fac:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
 c105fb0:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4


    cpu_sr = 0;                                        /* Prevent compiler warning                     */
#endif    
#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
 c105fb4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c105fb8:	e3530000 	cmp	r3, #0
 c105fbc:	1a000001 	bne	c105fc8 <OSQPost+0x2c>
        return (OS_ERR_PEVENT_NULL);
 c105fc0:	e3a03004 	mov	r3, #4
 c105fc4:	ea00003e 	b	c1060c4 <OSQPost+0x128>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
 c105fc8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c105fcc:	e5d33000 	ldrb	r3, [r3]
 c105fd0:	e3530002 	cmp	r3, #2
 c105fd4:	0a000001 	beq	c105fe0 <OSQPost+0x44>
        return (OS_ERR_EVENT_TYPE);
 c105fd8:	e3a03001 	mov	r3, #1
 c105fdc:	ea000038 	b	c1060c4 <OSQPost+0x128>
    }
    OS_ENTER_CRITICAL();
 c105fe0:	e10f0000 	mrs	r0, CPSR
 c105fe4:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
 c105fe8:	e38000c0 	orr	r0, r0, #192	; 0xc0
 c105fec:	e121f000 	msr	CPSR_c, r0
    if (pevent->OSEventGrp != 0x00) {                  /* See if any task pending on queue             */
 c105ff0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c105ff4:	e5d33001 	ldrb	r3, [r3, #1]
 c105ff8:	e3530000 	cmp	r3, #0
 c105ffc:	0a000008 	beq	c106024 <OSQPost+0x88>
        (void)OS_EventTaskRdy(pevent, msg, OS_STAT_Q); /* Ready highest priority task waiting on event */
 c106000:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
 c106004:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
 c106008:	e3a02004 	mov	r2, #4
 c10600c:	ebffeb1e 	bl	c100c8c <OS_EventTaskRdy>
        OS_EXIT_CRITICAL();
 c106010:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 c106014:	e121f000 	msr	CPSR_c, r0
        OS_Sched();                                    /* Find highest priority task ready to run      */
 c106018:	ebffedb1 	bl	c1016e4 <OS_Sched>
        return (OS_NO_ERR);
 c10601c:	e3a03000 	mov	r3, #0
 c106020:	ea000027 	b	c1060c4 <OSQPost+0x128>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                   /* Point to queue control block                 */
 c106024:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c106028:	e5933004 	ldr	r3, [r3, #4]
 c10602c:	e50b3010 	str	r3, [fp, #-16]
    if (pq->OSQEntries >= pq->OSQSize) {               /* Make sure queue is not full                  */
 c106030:	e51b3010 	ldr	r3, [fp, #-16]
 c106034:	e1d321b6 	ldrh	r2, [r3, #22]
 c106038:	e51b3010 	ldr	r3, [fp, #-16]
 c10603c:	e1d331b4 	ldrh	r3, [r3, #20]
 c106040:	e1520003 	cmp	r2, r3
 c106044:	3a000003 	bcc	c106058 <OSQPost+0xbc>
        OS_EXIT_CRITICAL();
 c106048:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 c10604c:	e121f000 	msr	CPSR_c, r0
        return (OS_Q_FULL);
 c106050:	e3a0301e 	mov	r3, #30
 c106054:	ea00001a 	b	c1060c4 <OSQPost+0x128>
    }
    *pq->OSQIn++ = msg;                                /* Insert message into queue                    */
 c106058:	e51b3010 	ldr	r3, [fp, #-16]
 c10605c:	e593300c 	ldr	r3, [r3, #12]
 c106060:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
 c106064:	e5832000 	str	r2, [r3]
 c106068:	e2832004 	add	r2, r3, #4
 c10606c:	e51b3010 	ldr	r3, [fp, #-16]
 c106070:	e583200c 	str	r2, [r3, #12]
    pq->OSQEntries++;                                  /* Update the nbr of entries in the queue       */
 c106074:	e51b3010 	ldr	r3, [fp, #-16]
 c106078:	e1d331b6 	ldrh	r3, [r3, #22]
 c10607c:	e2833001 	add	r3, r3, #1
 c106080:	e1a03803 	lsl	r3, r3, #16
 c106084:	e1a02823 	lsr	r2, r3, #16
 c106088:	e51b3010 	ldr	r3, [fp, #-16]
 c10608c:	e1c321b6 	strh	r2, [r3, #22]
    if (pq->OSQIn == pq->OSQEnd) {                     /* Wrap IN ptr if we are at end of queue        */
 c106090:	e51b3010 	ldr	r3, [fp, #-16]
 c106094:	e593200c 	ldr	r2, [r3, #12]
 c106098:	e51b3010 	ldr	r3, [fp, #-16]
 c10609c:	e5933008 	ldr	r3, [r3, #8]
 c1060a0:	e1520003 	cmp	r2, r3
 c1060a4:	1a000003 	bne	c1060b8 <OSQPost+0x11c>
        pq->OSQIn = pq->OSQStart;
 c1060a8:	e51b3010 	ldr	r3, [fp, #-16]
 c1060ac:	e5932004 	ldr	r2, [r3, #4]
 c1060b0:	e51b3010 	ldr	r3, [fp, #-16]
 c1060b4:	e583200c 	str	r2, [r3, #12]
    }
    OS_EXIT_CRITICAL();
 c1060b8:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 c1060bc:	e121f000 	msr	CPSR_c, r0
    return (OS_NO_ERR);
 c1060c0:	e3a03000 	mov	r3, #0
}
 c1060c4:	e1a00003 	mov	r0, r3
 c1060c8:	e24bd00c 	sub	sp, fp, #12
 c1060cc:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1060d0:	e12fff1e 	bx	lr

0c1060d4 <OSQPostFront>:
*********************************************************************************************************
*/

#if OS_Q_POST_FRONT_EN > 0
INT8U  OSQPostFront (OS_EVENT *pevent, void *msg)
{
 c1060d4:	e1a0c00d 	mov	ip, sp
 c1060d8:	e92dd800 	push	{fp, ip, lr, pc}
 c1060dc:	e24cb004 	sub	fp, ip, #4
 c1060e0:	e24dd010 	sub	sp, sp, #16
 c1060e4:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
 c1060e8:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4


    cpu_sr = 0;                                       /* Prevent compiler warning                      */
#endif    
#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 c1060ec:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c1060f0:	e3530000 	cmp	r3, #0
 c1060f4:	1a000001 	bne	c106100 <OSQPostFront+0x2c>
        return (OS_ERR_PEVENT_NULL);
 c1060f8:	e3a03004 	mov	r3, #4
 c1060fc:	ea000040 	b	c106204 <OSQPostFront+0x130>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
 c106100:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c106104:	e5d33000 	ldrb	r3, [r3]
 c106108:	e3530002 	cmp	r3, #2
 c10610c:	0a000001 	beq	c106118 <OSQPostFront+0x44>
        return (OS_ERR_EVENT_TYPE);
 c106110:	e3a03001 	mov	r3, #1
 c106114:	ea00003a 	b	c106204 <OSQPostFront+0x130>
    }
    OS_ENTER_CRITICAL();
 c106118:	e10f0000 	mrs	r0, CPSR
 c10611c:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
 c106120:	e38000c0 	orr	r0, r0, #192	; 0xc0
 c106124:	e121f000 	msr	CPSR_c, r0
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
 c106128:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c10612c:	e5d33001 	ldrb	r3, [r3, #1]
 c106130:	e3530000 	cmp	r3, #0
 c106134:	0a000008 	beq	c10615c <OSQPostFront+0x88>
        (void)OS_EventTaskRdy(pevent, msg, OS_STAT_Q);/* Ready highest priority task waiting on event  */
 c106138:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
 c10613c:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
 c106140:	e3a02004 	mov	r2, #4
 c106144:	ebffead0 	bl	c100c8c <OS_EventTaskRdy>
        OS_EXIT_CRITICAL();
 c106148:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 c10614c:	e121f000 	msr	CPSR_c, r0
        OS_Sched();                                   /* Find highest priority task ready to run       */
 c106150:	ebffed63 	bl	c1016e4 <OS_Sched>
        return (OS_NO_ERR);
 c106154:	e3a03000 	mov	r3, #0
 c106158:	ea000029 	b	c106204 <OSQPostFront+0x130>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
 c10615c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c106160:	e5933004 	ldr	r3, [r3, #4]
 c106164:	e50b3010 	str	r3, [fp, #-16]
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
 c106168:	e51b3010 	ldr	r3, [fp, #-16]
 c10616c:	e1d321b6 	ldrh	r2, [r3, #22]
 c106170:	e51b3010 	ldr	r3, [fp, #-16]
 c106174:	e1d331b4 	ldrh	r3, [r3, #20]
 c106178:	e1520003 	cmp	r2, r3
 c10617c:	3a000003 	bcc	c106190 <OSQPostFront+0xbc>
        OS_EXIT_CRITICAL();
 c106180:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 c106184:	e121f000 	msr	CPSR_c, r0
        return (OS_Q_FULL);
 c106188:	e3a0301e 	mov	r3, #30
 c10618c:	ea00001c 	b	c106204 <OSQPostFront+0x130>
    }
    if (pq->OSQOut == pq->OSQStart) {                 /* Wrap OUT ptr if we are at the 1st queue entry */
 c106190:	e51b3010 	ldr	r3, [fp, #-16]
 c106194:	e5932010 	ldr	r2, [r3, #16]
 c106198:	e51b3010 	ldr	r3, [fp, #-16]
 c10619c:	e5933004 	ldr	r3, [r3, #4]
 c1061a0:	e1520003 	cmp	r2, r3
 c1061a4:	1a000003 	bne	c1061b8 <OSQPostFront+0xe4>
        pq->OSQOut = pq->OSQEnd;
 c1061a8:	e51b3010 	ldr	r3, [fp, #-16]
 c1061ac:	e5932008 	ldr	r2, [r3, #8]
 c1061b0:	e51b3010 	ldr	r3, [fp, #-16]
 c1061b4:	e5832010 	str	r2, [r3, #16]
    }
    pq->OSQOut--;
 c1061b8:	e51b3010 	ldr	r3, [fp, #-16]
 c1061bc:	e5933010 	ldr	r3, [r3, #16]
 c1061c0:	e2432004 	sub	r2, r3, #4
 c1061c4:	e51b3010 	ldr	r3, [fp, #-16]
 c1061c8:	e5832010 	str	r2, [r3, #16]
    *pq->OSQOut = msg;                                /* Insert message into queue                     */
 c1061cc:	e51b3010 	ldr	r3, [fp, #-16]
 c1061d0:	e5933010 	ldr	r3, [r3, #16]
 c1061d4:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
 c1061d8:	e5832000 	str	r2, [r3]
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
 c1061dc:	e51b3010 	ldr	r3, [fp, #-16]
 c1061e0:	e1d331b6 	ldrh	r3, [r3, #22]
 c1061e4:	e2833001 	add	r3, r3, #1
 c1061e8:	e1a03803 	lsl	r3, r3, #16
 c1061ec:	e1a02823 	lsr	r2, r3, #16
 c1061f0:	e51b3010 	ldr	r3, [fp, #-16]
 c1061f4:	e1c321b6 	strh	r2, [r3, #22]
    OS_EXIT_CRITICAL();
 c1061f8:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 c1061fc:	e121f000 	msr	CPSR_c, r0
    return (OS_NO_ERR);
 c106200:	e3a03000 	mov	r3, #0
}
 c106204:	e1a00003 	mov	r0, r3
 c106208:	e24bd00c 	sub	sp, fp, #12
 c10620c:	e89d6800 	ldm	sp, {fp, sp, lr}
 c106210:	e12fff1e 	bx	lr

0c106214 <OSQPostOpt>:
*********************************************************************************************************
*/

#if OS_Q_POST_OPT_EN > 0
INT8U  OSQPostOpt (OS_EVENT *pevent, void *msg, INT8U opt)
{
 c106214:	e1a0c00d 	mov	ip, sp
 c106218:	e92dd800 	push	{fp, ip, lr, pc}
 c10621c:	e24cb004 	sub	fp, ip, #4
 c106220:	e24dd018 	sub	sp, sp, #24
 c106224:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
 c106228:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
 c10622c:	e1a03002 	mov	r3, r2
 c106230:	e54b301d 	strb	r3, [fp, #-29]	; 0xffffffe3


    cpu_sr = 0;                                       /* Prevent compiler warning                      */
#endif    
#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 c106234:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c106238:	e3530000 	cmp	r3, #0
 c10623c:	1a000001 	bne	c106248 <OSQPostOpt+0x34>
        return (OS_ERR_PEVENT_NULL);
 c106240:	e3a03004 	mov	r3, #4
 c106244:	ea000065 	b	c1063e0 <OSQPostOpt+0x1cc>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
 c106248:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c10624c:	e5d33000 	ldrb	r3, [r3]
 c106250:	e3530002 	cmp	r3, #2
 c106254:	0a000001 	beq	c106260 <OSQPostOpt+0x4c>
        return (OS_ERR_EVENT_TYPE);
 c106258:	e3a03001 	mov	r3, #1
 c10625c:	ea00005f 	b	c1063e0 <OSQPostOpt+0x1cc>
    }
    OS_ENTER_CRITICAL();
 c106260:	e10f0000 	mrs	r0, CPSR
 c106264:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
 c106268:	e38000c0 	orr	r0, r0, #192	; 0xc0
 c10626c:	e121f000 	msr	CPSR_c, r0
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
 c106270:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c106274:	e5d33001 	ldrb	r3, [r3, #1]
 c106278:	e3530000 	cmp	r3, #0
 c10627c:	0a000017 	beq	c1062e0 <OSQPostOpt+0xcc>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
 c106280:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
 c106284:	e2033001 	and	r3, r3, #1
 c106288:	e20330ff 	and	r3, r3, #255	; 0xff
 c10628c:	e3530000 	cmp	r3, #0
 c106290:	0a000009 	beq	c1062bc <OSQPostOpt+0xa8>
            while (pevent->OSEventGrp != 0x00) {      /* Yes, Post to ALL tasks waiting on queue       */
 c106294:	ea000003 	b	c1062a8 <OSQPostOpt+0x94>
                (void)OS_EventTaskRdy(pevent, msg, OS_STAT_Q);
 c106298:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
 c10629c:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
 c1062a0:	e3a02004 	mov	r2, #4
 c1062a4:	ebffea78 	bl	c100c8c <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0x00) {      /* Yes, Post to ALL tasks waiting on queue       */
 c1062a8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c1062ac:	e5d33001 	ldrb	r3, [r3, #1]
 c1062b0:	e3530000 	cmp	r3, #0
 c1062b4:	1afffff7 	bne	c106298 <OSQPostOpt+0x84>
 c1062b8:	ea000003 	b	c1062cc <OSQPostOpt+0xb8>
                (void)OS_EventTaskRdy(pevent, msg, OS_STAT_Q);
            }
        } else {
            (void)OS_EventTaskRdy(pevent, msg, OS_STAT_Q);  /* No,  Post to HPT waiting on queue       */
 c1062bc:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
 c1062c0:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
 c1062c4:	e3a02004 	mov	r2, #4
 c1062c8:	ebffea6f 	bl	c100c8c <OS_EventTaskRdy>
        }
        OS_EXIT_CRITICAL();
 c1062cc:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 c1062d0:	e121f000 	msr	CPSR_c, r0
        OS_Sched();                                         /* Find highest priority task ready to run */
 c1062d4:	ebffed02 	bl	c1016e4 <OS_Sched>
        return (OS_NO_ERR);
 c1062d8:	e3a03000 	mov	r3, #0
 c1062dc:	ea00003f 	b	c1063e0 <OSQPostOpt+0x1cc>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
 c1062e0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c1062e4:	e5933004 	ldr	r3, [r3, #4]
 c1062e8:	e50b3010 	str	r3, [fp, #-16]
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
 c1062ec:	e51b3010 	ldr	r3, [fp, #-16]
 c1062f0:	e1d321b6 	ldrh	r2, [r3, #22]
 c1062f4:	e51b3010 	ldr	r3, [fp, #-16]
 c1062f8:	e1d331b4 	ldrh	r3, [r3, #20]
 c1062fc:	e1520003 	cmp	r2, r3
 c106300:	3a000003 	bcc	c106314 <OSQPostOpt+0x100>
        OS_EXIT_CRITICAL();
 c106304:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 c106308:	e121f000 	msr	CPSR_c, r0
        return (OS_Q_FULL);
 c10630c:	e3a0301e 	mov	r3, #30
 c106310:	ea000032 	b	c1063e0 <OSQPostOpt+0x1cc>
    }
    if ((opt & OS_POST_OPT_FRONT) != 0x00) {          /* Do we post to the FRONT of the queue?         */
 c106314:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
 c106318:	e2033002 	and	r3, r3, #2
 c10631c:	e3530000 	cmp	r3, #0
 c106320:	0a000013 	beq	c106374 <OSQPostOpt+0x160>
        if (pq->OSQOut == pq->OSQStart) {             /* Yes, Post as LIFO, Wrap OUT pointer if we ... */
 c106324:	e51b3010 	ldr	r3, [fp, #-16]
 c106328:	e5932010 	ldr	r2, [r3, #16]
 c10632c:	e51b3010 	ldr	r3, [fp, #-16]
 c106330:	e5933004 	ldr	r3, [r3, #4]
 c106334:	e1520003 	cmp	r2, r3
 c106338:	1a000003 	bne	c10634c <OSQPostOpt+0x138>
            pq->OSQOut = pq->OSQEnd;                  /*      ... are at the 1st queue entry           */
 c10633c:	e51b3010 	ldr	r3, [fp, #-16]
 c106340:	e5932008 	ldr	r2, [r3, #8]
 c106344:	e51b3010 	ldr	r3, [fp, #-16]
 c106348:	e5832010 	str	r2, [r3, #16]
        }
        pq->OSQOut--;
 c10634c:	e51b3010 	ldr	r3, [fp, #-16]
 c106350:	e5933010 	ldr	r3, [r3, #16]
 c106354:	e2432004 	sub	r2, r3, #4
 c106358:	e51b3010 	ldr	r3, [fp, #-16]
 c10635c:	e5832010 	str	r2, [r3, #16]
        *pq->OSQOut = msg;                            /*      Insert message into queue                */
 c106360:	e51b3010 	ldr	r3, [fp, #-16]
 c106364:	e5933010 	ldr	r3, [r3, #16]
 c106368:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
 c10636c:	e5832000 	str	r2, [r3]
 c106370:	ea000010 	b	c1063b8 <OSQPostOpt+0x1a4>
    } else {                                          /* No,  Post as FIFO                             */
        *pq->OSQIn++ = msg;                           /*      Insert message into queue                */
 c106374:	e51b3010 	ldr	r3, [fp, #-16]
 c106378:	e593300c 	ldr	r3, [r3, #12]
 c10637c:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
 c106380:	e5832000 	str	r2, [r3]
 c106384:	e2832004 	add	r2, r3, #4
 c106388:	e51b3010 	ldr	r3, [fp, #-16]
 c10638c:	e583200c 	str	r2, [r3, #12]
        if (pq->OSQIn == pq->OSQEnd) {                /*      Wrap IN ptr if we are at end of queue    */
 c106390:	e51b3010 	ldr	r3, [fp, #-16]
 c106394:	e593200c 	ldr	r2, [r3, #12]
 c106398:	e51b3010 	ldr	r3, [fp, #-16]
 c10639c:	e5933008 	ldr	r3, [r3, #8]
 c1063a0:	e1520003 	cmp	r2, r3
 c1063a4:	1a000003 	bne	c1063b8 <OSQPostOpt+0x1a4>
            pq->OSQIn = pq->OSQStart;
 c1063a8:	e51b3010 	ldr	r3, [fp, #-16]
 c1063ac:	e5932004 	ldr	r2, [r3, #4]
 c1063b0:	e51b3010 	ldr	r3, [fp, #-16]
 c1063b4:	e583200c 	str	r2, [r3, #12]
        }
    }
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
 c1063b8:	e51b3010 	ldr	r3, [fp, #-16]
 c1063bc:	e1d331b6 	ldrh	r3, [r3, #22]
 c1063c0:	e2833001 	add	r3, r3, #1
 c1063c4:	e1a03803 	lsl	r3, r3, #16
 c1063c8:	e1a02823 	lsr	r2, r3, #16
 c1063cc:	e51b3010 	ldr	r3, [fp, #-16]
 c1063d0:	e1c321b6 	strh	r2, [r3, #22]
    OS_EXIT_CRITICAL();
 c1063d4:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 c1063d8:	e121f000 	msr	CPSR_c, r0
    return (OS_NO_ERR);
 c1063dc:	e3a03000 	mov	r3, #0
}
 c1063e0:	e1a00003 	mov	r0, r3
 c1063e4:	e24bd00c 	sub	sp, fp, #12
 c1063e8:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1063ec:	e12fff1e 	bx	lr

0c1063f0 <OSQQuery>:
*********************************************************************************************************
*/

#if OS_Q_QUERY_EN > 0
INT8U  OSQQuery (OS_EVENT *pevent, OS_Q_DATA *p_q_data)
{
 c1063f0:	e1a0c00d 	mov	ip, sp
 c1063f4:	e92dd800 	push	{fp, ip, lr, pc}
 c1063f8:	e24cb004 	sub	fp, ip, #4
 c1063fc:	e24dd018 	sub	sp, sp, #24
 c106400:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
 c106404:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc


    cpu_sr = 0;                                            /* Prevent compiler warning                 */
#endif    
#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 c106408:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c10640c:	e3530000 	cmp	r3, #0
 c106410:	1a000001 	bne	c10641c <OSQQuery+0x2c>
        return (OS_ERR_PEVENT_NULL);
 c106414:	e3a03004 	mov	r3, #4
 c106418:	ea000078 	b	c106600 <OSQQuery+0x210>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
 c10641c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c106420:	e5d33000 	ldrb	r3, [r3]
 c106424:	e3530002 	cmp	r3, #2
 c106428:	0a000001 	beq	c106434 <OSQQuery+0x44>
        return (OS_ERR_EVENT_TYPE);
 c10642c:	e3a03001 	mov	r3, #1
 c106430:	ea000072 	b	c106600 <OSQQuery+0x210>
    }
    OS_ENTER_CRITICAL();
 c106434:	e10f0000 	mrs	r0, CPSR
 c106438:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
 c10643c:	e38000c0 	orr	r0, r0, #192	; 0xc0
 c106440:	e121f000 	msr	CPSR_c, r0
    p_q_data->OSEventGrp = pevent->OSEventGrp;             /* Copy message queue wait list             */
 c106444:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c106448:	e5d32001 	ldrb	r2, [r3, #1]
 c10644c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
 c106450:	e5c32010 	strb	r2, [r3, #16]
    psrc                 = &pevent->OSEventTbl[0];
 c106454:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c106458:	e2833008 	add	r3, r3, #8
 c10645c:	e50b3010 	str	r3, [fp, #-16]
    pdest                = &p_q_data->OSEventTbl[0];
 c106460:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
 c106464:	e2833008 	add	r3, r3, #8
 c106468:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
#if OS_EVENT_TBL_SIZE > 0
    *pdest++ = *psrc++;
 c10646c:	e51b3010 	ldr	r3, [fp, #-16]
 c106470:	e5d32000 	ldrb	r2, [r3]
 c106474:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c106478:	e5c32000 	strb	r2, [r3]
 c10647c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c106480:	e2833001 	add	r3, r3, #1
 c106484:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
 c106488:	e51b3010 	ldr	r3, [fp, #-16]
 c10648c:	e2833001 	add	r3, r3, #1
 c106490:	e50b3010 	str	r3, [fp, #-16]
#endif

#if OS_EVENT_TBL_SIZE > 1
    *pdest++ = *psrc++;
 c106494:	e51b3010 	ldr	r3, [fp, #-16]
 c106498:	e5d32000 	ldrb	r2, [r3]
 c10649c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c1064a0:	e5c32000 	strb	r2, [r3]
 c1064a4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c1064a8:	e2833001 	add	r3, r3, #1
 c1064ac:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
 c1064b0:	e51b3010 	ldr	r3, [fp, #-16]
 c1064b4:	e2833001 	add	r3, r3, #1
 c1064b8:	e50b3010 	str	r3, [fp, #-16]
#endif

#if OS_EVENT_TBL_SIZE > 2
    *pdest++ = *psrc++;
 c1064bc:	e51b3010 	ldr	r3, [fp, #-16]
 c1064c0:	e5d32000 	ldrb	r2, [r3]
 c1064c4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c1064c8:	e5c32000 	strb	r2, [r3]
 c1064cc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c1064d0:	e2833001 	add	r3, r3, #1
 c1064d4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
 c1064d8:	e51b3010 	ldr	r3, [fp, #-16]
 c1064dc:	e2833001 	add	r3, r3, #1
 c1064e0:	e50b3010 	str	r3, [fp, #-16]
#endif

#if OS_EVENT_TBL_SIZE > 3
    *pdest++ = *psrc++;
 c1064e4:	e51b3010 	ldr	r3, [fp, #-16]
 c1064e8:	e5d32000 	ldrb	r2, [r3]
 c1064ec:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c1064f0:	e5c32000 	strb	r2, [r3]
 c1064f4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c1064f8:	e2833001 	add	r3, r3, #1
 c1064fc:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
 c106500:	e51b3010 	ldr	r3, [fp, #-16]
 c106504:	e2833001 	add	r3, r3, #1
 c106508:	e50b3010 	str	r3, [fp, #-16]
#endif

#if OS_EVENT_TBL_SIZE > 4
    *pdest++ = *psrc++;
 c10650c:	e51b3010 	ldr	r3, [fp, #-16]
 c106510:	e5d32000 	ldrb	r2, [r3]
 c106514:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c106518:	e5c32000 	strb	r2, [r3]
 c10651c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c106520:	e2833001 	add	r3, r3, #1
 c106524:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
 c106528:	e51b3010 	ldr	r3, [fp, #-16]
 c10652c:	e2833001 	add	r3, r3, #1
 c106530:	e50b3010 	str	r3, [fp, #-16]
#endif

#if OS_EVENT_TBL_SIZE > 5
    *pdest++ = *psrc++;
 c106534:	e51b3010 	ldr	r3, [fp, #-16]
 c106538:	e5d32000 	ldrb	r2, [r3]
 c10653c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c106540:	e5c32000 	strb	r2, [r3]
 c106544:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c106548:	e2833001 	add	r3, r3, #1
 c10654c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
 c106550:	e51b3010 	ldr	r3, [fp, #-16]
 c106554:	e2833001 	add	r3, r3, #1
 c106558:	e50b3010 	str	r3, [fp, #-16]
#endif

#if OS_EVENT_TBL_SIZE > 6
    *pdest++ = *psrc++;
 c10655c:	e51b3010 	ldr	r3, [fp, #-16]
 c106560:	e5d32000 	ldrb	r2, [r3]
 c106564:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c106568:	e5c32000 	strb	r2, [r3]
 c10656c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c106570:	e2833001 	add	r3, r3, #1
 c106574:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
 c106578:	e51b3010 	ldr	r3, [fp, #-16]
 c10657c:	e2833001 	add	r3, r3, #1
 c106580:	e50b3010 	str	r3, [fp, #-16]
#endif

#if OS_EVENT_TBL_SIZE > 7
    *pdest   = *psrc;
 c106584:	e51b3010 	ldr	r3, [fp, #-16]
 c106588:	e5d32000 	ldrb	r2, [r3]
 c10658c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c106590:	e5c32000 	strb	r2, [r3]
#endif
    pq = (OS_Q *)pevent->OSEventPtr;
 c106594:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c106598:	e5933004 	ldr	r3, [r3, #4]
 c10659c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    if (pq->OSQEntries > 0) {
 c1065a0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c1065a4:	e1d331b6 	ldrh	r3, [r3, #22]
 c1065a8:	e3530000 	cmp	r3, #0
 c1065ac:	0a000005 	beq	c1065c8 <OSQQuery+0x1d8>
        p_q_data->OSMsg = *pq->OSQOut;                     /* Get next message to return if available  */
 c1065b0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c1065b4:	e5933010 	ldr	r3, [r3, #16]
 c1065b8:	e5932000 	ldr	r2, [r3]
 c1065bc:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
 c1065c0:	e5832000 	str	r2, [r3]
 c1065c4:	ea000002 	b	c1065d4 <OSQQuery+0x1e4>
    } else {
        p_q_data->OSMsg = (void *)0;
 c1065c8:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
 c1065cc:	e3a02000 	mov	r2, #0
 c1065d0:	e5832000 	str	r2, [r3]
    }
    p_q_data->OSNMsgs = pq->OSQEntries;
 c1065d4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c1065d8:	e1d321b6 	ldrh	r2, [r3, #22]
 c1065dc:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
 c1065e0:	e1c320b4 	strh	r2, [r3, #4]
    p_q_data->OSQSize = pq->OSQSize;
 c1065e4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c1065e8:	e1d321b4 	ldrh	r2, [r3, #20]
 c1065ec:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
 c1065f0:	e1c320b6 	strh	r2, [r3, #6]
    OS_EXIT_CRITICAL();
 c1065f4:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 c1065f8:	e121f000 	msr	CPSR_c, r0
    return (OS_NO_ERR);
 c1065fc:	e3a03000 	mov	r3, #0
}
 c106600:	e1a00003 	mov	r0, r3
 c106604:	e24bd00c 	sub	sp, fp, #12
 c106608:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10660c:	e12fff1e 	bx	lr

0c106610 <OS_QInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_QInit (void)
{
 c106610:	e1a0c00d 	mov	ip, sp
 c106614:	e92dd800 	push	{fp, ip, lr, pc}
 c106618:	e24cb004 	sub	fp, ip, #4
 c10661c:	e24dd010 	sub	sp, sp, #16
    OS_Q   *pq1;
    OS_Q   *pq2;



    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
 c106620:	e59f3084 	ldr	r3, [pc, #132]	; c1066ac <OS_QInit+0x9c>
 c106624:	e1a00003 	mov	r0, r3
 c106628:	e3a01060 	mov	r1, #96	; 0x60
 c10662c:	ebffebf9 	bl	c101618 <OS_MemClr>
    pq1 = &OSQTbl[0];
 c106630:	e59f3074 	ldr	r3, [pc, #116]	; c1066ac <OS_QInit+0x9c>
 c106634:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    pq2 = &OSQTbl[1];
 c106638:	e59f3070 	ldr	r3, [pc, #112]	; c1066b0 <OS_QInit+0xa0>
 c10663c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
 c106640:	e3a03000 	mov	r3, #0
 c106644:	e14b30be 	strh	r3, [fp, #-14]
 c106648:	ea00000b 	b	c10667c <OS_QInit+0x6c>
        pq1->OSQPtr = pq2;
 c10664c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c106650:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
 c106654:	e5832000 	str	r2, [r3]
        pq1++;
 c106658:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c10665c:	e2833018 	add	r3, r3, #24
 c106660:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
        pq2++;
 c106664:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c106668:	e2833018 	add	r3, r3, #24
 c10666c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8


    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
    pq1 = &OSQTbl[0];
    pq2 = &OSQTbl[1];
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
 c106670:	e15b30be 	ldrh	r3, [fp, #-14]
 c106674:	e2833001 	add	r3, r3, #1
 c106678:	e14b30be 	strh	r3, [fp, #-14]
 c10667c:	e15b30be 	ldrh	r3, [fp, #-14]
 c106680:	e3530002 	cmp	r3, #2
 c106684:	9afffff0 	bls	c10664c <OS_QInit+0x3c>
        pq1->OSQPtr = pq2;
        pq1++;
        pq2++;
    }
    pq1->OSQPtr = (OS_Q *)0;
 c106688:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c10668c:	e3a02000 	mov	r2, #0
 c106690:	e5832000 	str	r2, [r3]
    OSQFreeList = &OSQTbl[0];
 c106694:	e59f3018 	ldr	r3, [pc, #24]	; c1066b4 <OS_QInit+0xa4>
 c106698:	e59f200c 	ldr	r2, [pc, #12]	; c1066ac <OS_QInit+0x9c>
 c10669c:	e5832000 	str	r2, [r3]
#endif
}
 c1066a0:	e24bd00c 	sub	sp, fp, #12
 c1066a4:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1066a8:	e12fff1e 	bx	lr
 c1066ac:	0c119c30 	.word	0x0c119c30
 c1066b0:	0c119c48 	.word	0x0c119c48
 c1066b4:	0c119c94 	.word	0x0c119c94

0c1066b8 <OSSemAccept>:
*********************************************************************************************************
*/

#if OS_SEM_ACCEPT_EN > 0
INT16U  OSSemAccept (OS_EVENT *pevent)
{
 c1066b8:	e1a0c00d 	mov	ip, sp
 c1066bc:	e92dd800 	push	{fp, ip, lr, pc}
 c1066c0:	e24cb004 	sub	fp, ip, #4
 c1066c4:	e24dd010 	sub	sp, sp, #16
 c1066c8:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8


    cpu_sr = 0;                                       /* Prevent compiler warning                      */
#endif    
#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 c1066cc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c1066d0:	e3530000 	cmp	r3, #0
 c1066d4:	1a000001 	bne	c1066e0 <OSSemAccept+0x28>
        return (0);
 c1066d8:	e3a03000 	mov	r3, #0
 c1066dc:	ea000019 	b	c106748 <OSSemAccept+0x90>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 c1066e0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c1066e4:	e5d33000 	ldrb	r3, [r3]
 c1066e8:	e3530003 	cmp	r3, #3
 c1066ec:	0a000001 	beq	c1066f8 <OSSemAccept+0x40>
        return (0);
 c1066f0:	e3a03000 	mov	r3, #0
 c1066f4:	ea000013 	b	c106748 <OSSemAccept+0x90>
    }
    OS_ENTER_CRITICAL();
 c1066f8:	e10f0000 	mrs	r0, CPSR
 c1066fc:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
 c106700:	e38000c0 	orr	r0, r0, #192	; 0xc0
 c106704:	e121f000 	msr	CPSR_c, r0
    cnt = pevent->OSEventCnt;
 c106708:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c10670c:	e1d330b2 	ldrh	r3, [r3, #2]
 c106710:	e14b30be 	strh	r3, [fp, #-14]
    if (cnt > 0) {                                    /* See if resource is available                  */
 c106714:	e15b30be 	ldrh	r3, [fp, #-14]
 c106718:	e3530000 	cmp	r3, #0
 c10671c:	0a000006 	beq	c10673c <OSSemAccept+0x84>
        pevent->OSEventCnt--;                         /* Yes, decrement semaphore and notify caller    */
 c106720:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c106724:	e1d330b2 	ldrh	r3, [r3, #2]
 c106728:	e2433001 	sub	r3, r3, #1
 c10672c:	e1a03803 	lsl	r3, r3, #16
 c106730:	e1a02823 	lsr	r2, r3, #16
 c106734:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c106738:	e1c320b2 	strh	r2, [r3, #2]
    }
    OS_EXIT_CRITICAL();
 c10673c:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 c106740:	e121f000 	msr	CPSR_c, r0
    return (cnt);                                     /* Return semaphore count                        */
 c106744:	e15b30be 	ldrh	r3, [fp, #-14]
}
 c106748:	e1a00003 	mov	r0, r3
 c10674c:	e24bd00c 	sub	sp, fp, #12
 c106750:	e89d6800 	ldm	sp, {fp, sp, lr}
 c106754:	e12fff1e 	bx	lr

0c106758 <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
 c106758:	e1a0c00d 	mov	ip, sp
 c10675c:	e92dd800 	push	{fp, ip, lr, pc}
 c106760:	e24cb004 	sub	fp, ip, #4
 c106764:	e24dd010 	sub	sp, sp, #16
 c106768:	e1a03000 	mov	r3, r0
 c10676c:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea



    cpu_sr = 0;                                            /* Prevent compiler warning                 */
#endif    
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 c106770:	e59f30c0 	ldr	r3, [pc, #192]	; c106838 <OSSemCreate+0xe0>
 c106774:	e5d33000 	ldrb	r3, [r3]
 c106778:	e3530000 	cmp	r3, #0
 c10677c:	0a000001 	beq	c106788 <OSSemCreate+0x30>
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
 c106780:	e3a03000 	mov	r3, #0
 c106784:	ea000027 	b	c106828 <OSSemCreate+0xd0>
    }
    OS_ENTER_CRITICAL();
 c106788:	e10f0000 	mrs	r0, CPSR
 c10678c:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
 c106790:	e38000c0 	orr	r0, r0, #192	; 0xc0
 c106794:	e121f000 	msr	CPSR_c, r0
    pevent = OSEventFreeList;                              /* Get next free event control block        */
 c106798:	e59f309c 	ldr	r3, [pc, #156]	; c10683c <OSSemCreate+0xe4>
 c10679c:	e5933000 	ldr	r3, [r3]
 c1067a0:	e50b3010 	str	r3, [fp, #-16]
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
 c1067a4:	e59f3090 	ldr	r3, [pc, #144]	; c10683c <OSSemCreate+0xe4>
 c1067a8:	e5933000 	ldr	r3, [r3]
 c1067ac:	e3530000 	cmp	r3, #0
 c1067b0:	0a000005 	beq	c1067cc <OSSemCreate+0x74>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
 c1067b4:	e59f3080 	ldr	r3, [pc, #128]	; c10683c <OSSemCreate+0xe4>
 c1067b8:	e5933000 	ldr	r3, [r3]
 c1067bc:	e5933004 	ldr	r3, [r3, #4]
 c1067c0:	e1a02003 	mov	r2, r3
 c1067c4:	e59f3070 	ldr	r3, [pc, #112]	; c10683c <OSSemCreate+0xe4>
 c1067c8:	e5832000 	str	r2, [r3]
    }
    OS_EXIT_CRITICAL();
 c1067cc:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 c1067d0:	e121f000 	msr	CPSR_c, r0
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
 c1067d4:	e51b3010 	ldr	r3, [fp, #-16]
 c1067d8:	e3530000 	cmp	r3, #0
 c1067dc:	0a000010 	beq	c106824 <OSSemCreate+0xcc>
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
 c1067e0:	e51b3010 	ldr	r3, [fp, #-16]
 c1067e4:	e3a02003 	mov	r2, #3
 c1067e8:	e5c32000 	strb	r2, [r3]
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
 c1067ec:	e51b3010 	ldr	r3, [fp, #-16]
 c1067f0:	e15b21b6 	ldrh	r2, [fp, #-22]	; 0xffffffea
 c1067f4:	e1c320b2 	strh	r2, [r3, #2]
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
 c1067f8:	e51b3010 	ldr	r3, [fp, #-16]
 c1067fc:	e3a02000 	mov	r2, #0
 c106800:	e5832004 	str	r2, [r3, #4]
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';                      /* Unknown name                             */
 c106804:	e51b3010 	ldr	r3, [fp, #-16]
 c106808:	e3a0203f 	mov	r2, #63	; 0x3f
 c10680c:	e5c32010 	strb	r2, [r3, #16]
        pevent->OSEventName[1] = OS_ASCII_NUL;
 c106810:	e51b3010 	ldr	r3, [fp, #-16]
 c106814:	e3a02000 	mov	r2, #0
 c106818:	e5c32011 	strb	r2, [r3, #17]
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
 c10681c:	e51b0010 	ldr	r0, [fp, #-16]
 c106820:	ebffea37 	bl	c101104 <OS_EventWaitListInit>
    }
    return (pevent);
 c106824:	e51b3010 	ldr	r3, [fp, #-16]
}
 c106828:	e1a00003 	mov	r0, r3
 c10682c:	e24bd00c 	sub	sp, fp, #12
 c106830:	e89d6800 	ldm	sp, {fp, sp, lr}
 c106834:	e12fff1e 	bx	lr
 c106838:	0c119ca8 	.word	0x0c119ca8
 c10683c:	0c119ca4 	.word	0x0c119ca4

0c106840 <OSSemDel>:
*********************************************************************************************************
*/

#if OS_SEM_DEL_EN > 0
OS_EVENT  *OSSemDel (OS_EVENT *pevent, INT8U opt, INT8U *err)
{
 c106840:	e1a0c00d 	mov	ip, sp
 c106844:	e92dd800 	push	{fp, ip, lr, pc}
 c106848:	e24cb004 	sub	fp, ip, #4
 c10684c:	e24dd018 	sub	sp, sp, #24
 c106850:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
 c106854:	e1a03001 	mov	r3, r1
 c106858:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
 c10685c:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7



    cpu_sr = 0;                                            /* Prevent compiler warning                 */
#endif    
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 c106860:	e59f3204 	ldr	r3, [pc, #516]	; c106a6c <OSSemDel+0x22c>
 c106864:	e5d33000 	ldrb	r3, [r3]
 c106868:	e3530000 	cmp	r3, #0
 c10686c:	0a000004 	beq	c106884 <OSSemDel+0x44>
        *err = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
 c106870:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c106874:	e3e02073 	mvn	r2, #115	; 0x73
 c106878:	e5c32000 	strb	r2, [r3]
        return (pevent);
 c10687c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c106880:	ea000075 	b	c106a5c <OSSemDel+0x21c>
    }
#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 c106884:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c106888:	e3530000 	cmp	r3, #0
 c10688c:	1a000004 	bne	c1068a4 <OSSemDel+0x64>
        *err = OS_ERR_PEVENT_NULL;
 c106890:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c106894:	e3a02004 	mov	r2, #4
 c106898:	e5c32000 	strb	r2, [r3]
        return (pevent);
 c10689c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c1068a0:	ea00006d 	b	c106a5c <OSSemDel+0x21c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
 c1068a4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c1068a8:	e5d33000 	ldrb	r3, [r3]
 c1068ac:	e3530003 	cmp	r3, #3
 c1068b0:	0a000004 	beq	c1068c8 <OSSemDel+0x88>
        *err = OS_ERR_EVENT_TYPE;
 c1068b4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c1068b8:	e3a02001 	mov	r2, #1
 c1068bc:	e5c32000 	strb	r2, [r3]
        return (pevent);
 c1068c0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c1068c4:	ea000064 	b	c106a5c <OSSemDel+0x21c>
    }
    OS_ENTER_CRITICAL();
 c1068c8:	e10f0000 	mrs	r0, CPSR
 c1068cc:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
 c1068d0:	e38000c0 	orr	r0, r0, #192	; 0xc0
 c1068d4:	e121f000 	msr	CPSR_c, r0
    if (pevent->OSEventGrp != 0x00) {                      /* See if any tasks waiting on semaphore    */
 c1068d8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c1068dc:	e5d33001 	ldrb	r3, [r3, #1]
 c1068e0:	e3530000 	cmp	r3, #0
 c1068e4:	0a000002 	beq	c1068f4 <OSSemDel+0xb4>
        tasks_waiting = TRUE;                              /* Yes                                      */
 c1068e8:	e3a03001 	mov	r3, #1
 c1068ec:	e54b300d 	strb	r3, [fp, #-13]
 c1068f0:	ea000001 	b	c1068fc <OSSemDel+0xbc>
    } else {
        tasks_waiting = FALSE;                             /* No                                       */
 c1068f4:	e3a03000 	mov	r3, #0
 c1068f8:	e54b300d 	strb	r3, [fp, #-13]
    }
    switch (opt) {
 c1068fc:	e55b3019 	ldrb	r3, [fp, #-25]	; 0xffffffe7
 c106900:	e3530000 	cmp	r3, #0
 c106904:	0a000002 	beq	c106914 <OSSemDel+0xd4>
 c106908:	e3530001 	cmp	r3, #1
 c10690c:	0a000029 	beq	c1069b8 <OSSemDel+0x178>
 c106910:	ea00004b 	b	c106a44 <OSSemDel+0x204>
        case OS_DEL_NO_PEND:                               /* Delete semaphore only if no task waiting */
             if (tasks_waiting == FALSE) {
 c106914:	e55b300d 	ldrb	r3, [fp, #-13]
 c106918:	e3530000 	cmp	r3, #0
 c10691c:	1a000019 	bne	c106988 <OSSemDel+0x148>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
 c106920:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c106924:	e3a0203f 	mov	r2, #63	; 0x3f
 c106928:	e5c32010 	strb	r2, [r3, #16]
                 pevent->OSEventName[1] = OS_ASCII_NUL;
 c10692c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c106930:	e3a02000 	mov	r2, #0
 c106934:	e5c32011 	strb	r2, [r3, #17]
#endif
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
 c106938:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c10693c:	e3a02000 	mov	r2, #0
 c106940:	e5c32000 	strb	r2, [r3]
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
 c106944:	e59f3124 	ldr	r3, [pc, #292]	; c106a70 <OSSemDel+0x230>
 c106948:	e5932000 	ldr	r2, [r3]
 c10694c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c106950:	e5832004 	str	r2, [r3, #4]
                 pevent->OSEventCnt     = 0;
 c106954:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c106958:	e3a02000 	mov	r2, #0
 c10695c:	e1c320b2 	strh	r2, [r3, #2]
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
 c106960:	e59f3108 	ldr	r3, [pc, #264]	; c106a70 <OSSemDel+0x230>
 c106964:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
 c106968:	e5832000 	str	r2, [r3]
                 OS_EXIT_CRITICAL();
 c10696c:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 c106970:	e121f000 	msr	CPSR_c, r0
                 *err                   = OS_NO_ERR;
 c106974:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c106978:	e3a02000 	mov	r2, #0
 c10697c:	e5c32000 	strb	r2, [r3]
                 return ((OS_EVENT *)0);                   /* Semaphore has been deleted               */
 c106980:	e3a03000 	mov	r3, #0
 c106984:	ea000034 	b	c106a5c <OSSemDel+0x21c>
             } else {
                 OS_EXIT_CRITICAL();
 c106988:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 c10698c:	e121f000 	msr	CPSR_c, r0
                 *err                   = OS_ERR_TASK_WAITING;
 c106990:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c106994:	e3a02008 	mov	r2, #8
 c106998:	e5c32000 	strb	r2, [r3]
                 return (pevent);
 c10699c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c1069a0:	ea00002d 	b	c106a5c <OSSemDel+0x21c>
             }

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0x00) {          /* Ready ALL tasks waiting for semaphore    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM);
 c1069a4:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
 c1069a8:	e3a01000 	mov	r1, #0
 c1069ac:	e3a02001 	mov	r2, #1
 c1069b0:	ebffe8b5 	bl	c100c8c <OS_EventTaskRdy>
 c1069b4:	ea000000 	b	c1069bc <OSSemDel+0x17c>
                 *err                   = OS_ERR_TASK_WAITING;
                 return (pevent);
             }

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0x00) {          /* Ready ALL tasks waiting for semaphore    */
 c1069b8:	e1a00000 	nop			; (mov r0, r0)
 c1069bc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c1069c0:	e5d33001 	ldrb	r3, [r3, #1]
 c1069c4:	e3530000 	cmp	r3, #0
 c1069c8:	1afffff5 	bne	c1069a4 <OSSemDel+0x164>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
 c1069cc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c1069d0:	e3a0203f 	mov	r2, #63	; 0x3f
 c1069d4:	e5c32010 	strb	r2, [r3, #16]
             pevent->OSEventName[1] = OS_ASCII_NUL;
 c1069d8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c1069dc:	e3a02000 	mov	r2, #0
 c1069e0:	e5c32011 	strb	r2, [r3, #17]
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
 c1069e4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c1069e8:	e3a02000 	mov	r2, #0
 c1069ec:	e5c32000 	strb	r2, [r3]
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
 c1069f0:	e59f3078 	ldr	r3, [pc, #120]	; c106a70 <OSSemDel+0x230>
 c1069f4:	e5932000 	ldr	r2, [r3]
 c1069f8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c1069fc:	e5832004 	str	r2, [r3, #4]
             pevent->OSEventCnt     = 0;
 c106a00:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c106a04:	e3a02000 	mov	r2, #0
 c106a08:	e1c320b2 	strh	r2, [r3, #2]
             OSEventFreeList        = pevent;              /* Get next free event control block        */
 c106a0c:	e59f305c 	ldr	r3, [pc, #92]	; c106a70 <OSSemDel+0x230>
 c106a10:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
 c106a14:	e5832000 	str	r2, [r3]
             OS_EXIT_CRITICAL();
 c106a18:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 c106a1c:	e121f000 	msr	CPSR_c, r0
             if (tasks_waiting == TRUE) {                  /* Reschedule only if task(s) were waiting  */
 c106a20:	e55b300d 	ldrb	r3, [fp, #-13]
 c106a24:	e3530001 	cmp	r3, #1
 c106a28:	1a000000 	bne	c106a30 <OSSemDel+0x1f0>
                 OS_Sched();                               /* Find highest priority task ready to run  */
 c106a2c:	ebffeb2c 	bl	c1016e4 <OS_Sched>
             }
             *err = OS_NO_ERR;
 c106a30:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c106a34:	e3a02000 	mov	r2, #0
 c106a38:	e5c32000 	strb	r2, [r3]
             return ((OS_EVENT *)0);                       /* Semaphore has been deleted               */
 c106a3c:	e3a03000 	mov	r3, #0
 c106a40:	ea000005 	b	c106a5c <OSSemDel+0x21c>

        default:
             OS_EXIT_CRITICAL();
 c106a44:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 c106a48:	e121f000 	msr	CPSR_c, r0
             *err = OS_ERR_INVALID_OPT;
 c106a4c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c106a50:	e3a02007 	mov	r2, #7
 c106a54:	e5c32000 	strb	r2, [r3]
             return (pevent);
 c106a58:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
    }
}
 c106a5c:	e1a00003 	mov	r0, r3
 c106a60:	e24bd00c 	sub	sp, fp, #12
 c106a64:	e89d6800 	ldm	sp, {fp, sp, lr}
 c106a68:	e12fff1e 	bx	lr
 c106a6c:	0c119ca8 	.word	0x0c119ca8
 c106a70:	0c119ca4 	.word	0x0c119ca4

0c106a74 <OSSemPend>:
* Returns    : none
*********************************************************************************************************
*/

void  OSSemPend (OS_EVENT *pevent, INT16U timeout, INT8U *err)
{
 c106a74:	e1a0c00d 	mov	ip, sp
 c106a78:	e92dd800 	push	{fp, ip, lr, pc}
 c106a7c:	e24cb004 	sub	fp, ip, #4
 c106a80:	e24dd010 	sub	sp, sp, #16
 c106a84:	e50b0010 	str	r0, [fp, #-16]
 c106a88:	e1a03001 	mov	r3, r1
 c106a8c:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
 c106a90:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee



    cpu_sr = 0;                                       /* Prevent compiler warning                      */
#endif    
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
 c106a94:	e59f3170 	ldr	r3, [pc, #368]	; c106c0c <OSSemPend+0x198>
 c106a98:	e5d33000 	ldrb	r3, [r3]
 c106a9c:	e3530000 	cmp	r3, #0
 c106aa0:	0a000003 	beq	c106ab4 <OSSemPend+0x40>
        *err = OS_ERR_PEND_ISR;                       /* ... can't PEND from an ISR                    */
 c106aa4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c106aa8:	e3a02002 	mov	r2, #2
 c106aac:	e5c32000 	strb	r2, [r3]
        return;
 c106ab0:	ea000052 	b	c106c00 <OSSemPend+0x18c>
    }
#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 c106ab4:	e51b3010 	ldr	r3, [fp, #-16]
 c106ab8:	e3530000 	cmp	r3, #0
 c106abc:	1a000003 	bne	c106ad0 <OSSemPend+0x5c>
        *err = OS_ERR_PEVENT_NULL;
 c106ac0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c106ac4:	e3a02004 	mov	r2, #4
 c106ac8:	e5c32000 	strb	r2, [r3]
        return;
 c106acc:	ea00004b 	b	c106c00 <OSSemPend+0x18c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 c106ad0:	e51b3010 	ldr	r3, [fp, #-16]
 c106ad4:	e5d33000 	ldrb	r3, [r3]
 c106ad8:	e3530003 	cmp	r3, #3
 c106adc:	0a000003 	beq	c106af0 <OSSemPend+0x7c>
        *err = OS_ERR_EVENT_TYPE;
 c106ae0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c106ae4:	e3a02001 	mov	r2, #1
 c106ae8:	e5c32000 	strb	r2, [r3]
        return;
 c106aec:	ea000043 	b	c106c00 <OSSemPend+0x18c>
    }
    OS_ENTER_CRITICAL();
 c106af0:	e10f0000 	mrs	r0, CPSR
 c106af4:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
 c106af8:	e38000c0 	orr	r0, r0, #192	; 0xc0
 c106afc:	e121f000 	msr	CPSR_c, r0
    if (pevent->OSEventCnt > 0) {                     /* If sem. is positive, resource available ...   */
 c106b00:	e51b3010 	ldr	r3, [fp, #-16]
 c106b04:	e1d330b2 	ldrh	r3, [r3, #2]
 c106b08:	e3530000 	cmp	r3, #0
 c106b0c:	0a00000c 	beq	c106b44 <OSSemPend+0xd0>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
 c106b10:	e51b3010 	ldr	r3, [fp, #-16]
 c106b14:	e1d330b2 	ldrh	r3, [r3, #2]
 c106b18:	e2433001 	sub	r3, r3, #1
 c106b1c:	e1a03803 	lsl	r3, r3, #16
 c106b20:	e1a02823 	lsr	r2, r3, #16
 c106b24:	e51b3010 	ldr	r3, [fp, #-16]
 c106b28:	e1c320b2 	strh	r2, [r3, #2]
        OS_EXIT_CRITICAL();
 c106b2c:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 c106b30:	e121f000 	msr	CPSR_c, r0
        *err = OS_NO_ERR;
 c106b34:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c106b38:	e3a02000 	mov	r2, #0
 c106b3c:	e5c32000 	strb	r2, [r3]
        return;
 c106b40:	ea00002e 	b	c106c00 <OSSemPend+0x18c>
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat   |= OS_STAT_SEM;             /* Resource not available, pend on semaphore     */
 c106b44:	e59f30c4 	ldr	r3, [pc, #196]	; c106c10 <OSSemPend+0x19c>
 c106b48:	e5933000 	ldr	r3, [r3]
 c106b4c:	e59f20bc 	ldr	r2, [pc, #188]	; c106c10 <OSSemPend+0x19c>
 c106b50:	e5922000 	ldr	r2, [r2]
 c106b54:	e5d2202c 	ldrb	r2, [r2, #44]	; 0x2c
 c106b58:	e3822001 	orr	r2, r2, #1
 c106b5c:	e20220ff 	and	r2, r2, #255	; 0xff
 c106b60:	e5c3202c 	strb	r2, [r3, #44]	; 0x2c
    OSTCBCur->OSTCBPendTO  = FALSE;
 c106b64:	e59f30a4 	ldr	r3, [pc, #164]	; c106c10 <OSSemPend+0x19c>
 c106b68:	e5933000 	ldr	r3, [r3]
 c106b6c:	e3a02000 	mov	r2, #0
 c106b70:	e5c3202d 	strb	r2, [r3, #45]	; 0x2d
    OSTCBCur->OSTCBDly     = timeout;                 /* Store pend timeout in TCB                     */
 c106b74:	e59f3094 	ldr	r3, [pc, #148]	; c106c10 <OSSemPend+0x19c>
 c106b78:	e5933000 	ldr	r3, [r3]
 c106b7c:	e15b21b2 	ldrh	r2, [fp, #-18]	; 0xffffffee
 c106b80:	e1c322ba 	strh	r2, [r3, #42]	; 0x2a
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
 c106b84:	e51b0010 	ldr	r0, [fp, #-16]
 c106b88:	ebffe8c2 	bl	c100e98 <OS_EventTaskWait>
    OS_EXIT_CRITICAL();
 c106b8c:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 c106b90:	e121f000 	msr	CPSR_c, r0
    OS_Sched();                                       /* Find next highest priority task ready         */
 c106b94:	ebffead2 	bl	c1016e4 <OS_Sched>
    OS_ENTER_CRITICAL();
 c106b98:	e10f0000 	mrs	r0, CPSR
 c106b9c:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
 c106ba0:	e38000c0 	orr	r0, r0, #192	; 0xc0
 c106ba4:	e121f000 	msr	CPSR_c, r0
    if (OSTCBCur->OSTCBPendTO == TRUE) {              /* See if we timedout                            */
 c106ba8:	e59f3060 	ldr	r3, [pc, #96]	; c106c10 <OSSemPend+0x19c>
 c106bac:	e5933000 	ldr	r3, [r3]
 c106bb0:	e5d3302d 	ldrb	r3, [r3, #45]	; 0x2d
 c106bb4:	e3530001 	cmp	r3, #1
 c106bb8:	1a000007 	bne	c106bdc <OSSemPend+0x168>
        OS_EventTO(pevent);
 c106bbc:	e51b0010 	ldr	r0, [fp, #-16]
 c106bc0:	ebffe90a 	bl	c100ff0 <OS_EventTO>
        OS_EXIT_CRITICAL();
 c106bc4:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 c106bc8:	e121f000 	msr	CPSR_c, r0
        *err = OS_TIMEOUT;                            /* Indicate that didn't get event within TO      */
 c106bcc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c106bd0:	e3a0200a 	mov	r2, #10
 c106bd4:	e5c32000 	strb	r2, [r3]
        return;
 c106bd8:	ea000008 	b	c106c00 <OSSemPend+0x18c>
    }
    OSTCBCur->OSTCBEventPtr = (OS_EVENT *)0;
 c106bdc:	e59f302c 	ldr	r3, [pc, #44]	; c106c10 <OSSemPend+0x19c>
 c106be0:	e5933000 	ldr	r3, [r3]
 c106be4:	e3a02000 	mov	r2, #0
 c106be8:	e583201c 	str	r2, [r3, #28]
    OS_EXIT_CRITICAL();
 c106bec:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 c106bf0:	e121f000 	msr	CPSR_c, r0
    *err = OS_NO_ERR;
 c106bf4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c106bf8:	e3a02000 	mov	r2, #0
 c106bfc:	e5c32000 	strb	r2, [r3]
}
 c106c00:	e24bd00c 	sub	sp, fp, #12
 c106c04:	e89d6800 	ldm	sp, {fp, sp, lr}
 c106c08:	e12fff1e 	bx	lr
 c106c0c:	0c119ca8 	.word	0x0c119ca8
 c106c10:	0c119cac 	.word	0x0c119cac

0c106c14 <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
 c106c14:	e1a0c00d 	mov	ip, sp
 c106c18:	e92dd800 	push	{fp, ip, lr, pc}
 c106c1c:	e24cb004 	sub	fp, ip, #4
 c106c20:	e24dd008 	sub	sp, sp, #8
 c106c24:	e50b0010 	str	r0, [fp, #-16]


    cpu_sr = 0;                                            /* Prevent compiler warning                 */
#endif    
#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 c106c28:	e51b3010 	ldr	r3, [fp, #-16]
 c106c2c:	e3530000 	cmp	r3, #0
 c106c30:	1a000001 	bne	c106c3c <OSSemPost+0x28>
        return (OS_ERR_PEVENT_NULL);
 c106c34:	e3a03004 	mov	r3, #4
 c106c38:	ea000029 	b	c106ce4 <OSSemPost+0xd0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
 c106c3c:	e51b3010 	ldr	r3, [fp, #-16]
 c106c40:	e5d33000 	ldrb	r3, [r3]
 c106c44:	e3530003 	cmp	r3, #3
 c106c48:	0a000001 	beq	c106c54 <OSSemPost+0x40>
        return (OS_ERR_EVENT_TYPE);
 c106c4c:	e3a03001 	mov	r3, #1
 c106c50:	ea000023 	b	c106ce4 <OSSemPost+0xd0>
    }
    OS_ENTER_CRITICAL();
 c106c54:	e10f0000 	mrs	r0, CPSR
 c106c58:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
 c106c5c:	e38000c0 	orr	r0, r0, #192	; 0xc0
 c106c60:	e121f000 	msr	CPSR_c, r0
    if (pevent->OSEventGrp != 0x00) {                          /* See if any task waiting for semaphore*/
 c106c64:	e51b3010 	ldr	r3, [fp, #-16]
 c106c68:	e5d33001 	ldrb	r3, [r3, #1]
 c106c6c:	e3530000 	cmp	r3, #0
 c106c70:	0a000008 	beq	c106c98 <OSSemPost+0x84>
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM); /* Ready HPT waiting on event           */
 c106c74:	e51b0010 	ldr	r0, [fp, #-16]
 c106c78:	e3a01000 	mov	r1, #0
 c106c7c:	e3a02001 	mov	r2, #1
 c106c80:	ebffe801 	bl	c100c8c <OS_EventTaskRdy>
        OS_EXIT_CRITICAL();
 c106c84:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 c106c88:	e121f000 	msr	CPSR_c, r0
        OS_Sched();                                            /* Find HPT ready to run                */
 c106c8c:	ebffea94 	bl	c1016e4 <OS_Sched>
        return (OS_NO_ERR);
 c106c90:	e3a03000 	mov	r3, #0
 c106c94:	ea000012 	b	c106ce4 <OSSemPost+0xd0>
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
 c106c98:	e51b3010 	ldr	r3, [fp, #-16]
 c106c9c:	e1d320b2 	ldrh	r2, [r3, #2]
 c106ca0:	e59f304c 	ldr	r3, [pc, #76]	; c106cf4 <OSSemPost+0xe0>
 c106ca4:	e1520003 	cmp	r2, r3
 c106ca8:	0a00000a 	beq	c106cd8 <OSSemPost+0xc4>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
 c106cac:	e51b3010 	ldr	r3, [fp, #-16]
 c106cb0:	e1d330b2 	ldrh	r3, [r3, #2]
 c106cb4:	e2833001 	add	r3, r3, #1
 c106cb8:	e1a03803 	lsl	r3, r3, #16
 c106cbc:	e1a02823 	lsr	r2, r3, #16
 c106cc0:	e51b3010 	ldr	r3, [fp, #-16]
 c106cc4:	e1c320b2 	strh	r2, [r3, #2]
        OS_EXIT_CRITICAL();
 c106cc8:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 c106ccc:	e121f000 	msr	CPSR_c, r0
        return (OS_NO_ERR);
 c106cd0:	e3a03000 	mov	r3, #0
 c106cd4:	ea000002 	b	c106ce4 <OSSemPost+0xd0>
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
 c106cd8:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 c106cdc:	e121f000 	msr	CPSR_c, r0
    return (OS_SEM_OVF);
 c106ce0:	e3a03032 	mov	r3, #50	; 0x32
}
 c106ce4:	e1a00003 	mov	r0, r3
 c106ce8:	e24bd00c 	sub	sp, fp, #12
 c106cec:	e89d6800 	ldm	sp, {fp, sp, lr}
 c106cf0:	e12fff1e 	bx	lr
 c106cf4:	0000ffff 	.word	0x0000ffff

0c106cf8 <OSSemQuery>:
*********************************************************************************************************
*/

#if OS_SEM_QUERY_EN > 0
INT8U  OSSemQuery (OS_EVENT *pevent, OS_SEM_DATA *p_sem_data)
{
 c106cf8:	e1a0c00d 	mov	ip, sp
 c106cfc:	e92dd800 	push	{fp, ip, lr, pc}
 c106d00:	e24cb004 	sub	fp, ip, #4
 c106d04:	e24dd010 	sub	sp, sp, #16
 c106d08:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
 c106d0c:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4


    cpu_sr = 0;                                            /* Prevent compiler warning                 */
#endif    
#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 c106d10:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c106d14:	e3530000 	cmp	r3, #0
 c106d18:	1a000001 	bne	c106d24 <OSSemQuery+0x2c>
        return (OS_ERR_PEVENT_NULL);
 c106d1c:	e3a03004 	mov	r3, #4
 c106d20:	ea000064 	b	c106eb8 <OSSemQuery+0x1c0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
 c106d24:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c106d28:	e5d33000 	ldrb	r3, [r3]
 c106d2c:	e3530003 	cmp	r3, #3
 c106d30:	0a000001 	beq	c106d3c <OSSemQuery+0x44>
        return (OS_ERR_EVENT_TYPE);
 c106d34:	e3a03001 	mov	r3, #1
 c106d38:	ea00005e 	b	c106eb8 <OSSemQuery+0x1c0>
    }
    OS_ENTER_CRITICAL();
 c106d3c:	e10f0000 	mrs	r0, CPSR
 c106d40:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
 c106d44:	e38000c0 	orr	r0, r0, #192	; 0xc0
 c106d48:	e121f000 	msr	CPSR_c, r0
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
 c106d4c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c106d50:	e5d32001 	ldrb	r2, [r3, #1]
 c106d54:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 c106d58:	e5c3200a 	strb	r2, [r3, #10]
    psrc              = &pevent->OSEventTbl[0];
 c106d5c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c106d60:	e2833008 	add	r3, r3, #8
 c106d64:	e50b3010 	str	r3, [fp, #-16]
    pdest             = &p_sem_data->OSEventTbl[0];
 c106d68:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 c106d6c:	e2833002 	add	r3, r3, #2
 c106d70:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
#if OS_EVENT_TBL_SIZE > 0
    *pdest++ = *psrc++;
 c106d74:	e51b3010 	ldr	r3, [fp, #-16]
 c106d78:	e5d32000 	ldrb	r2, [r3]
 c106d7c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c106d80:	e5c32000 	strb	r2, [r3]
 c106d84:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c106d88:	e2833001 	add	r3, r3, #1
 c106d8c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
 c106d90:	e51b3010 	ldr	r3, [fp, #-16]
 c106d94:	e2833001 	add	r3, r3, #1
 c106d98:	e50b3010 	str	r3, [fp, #-16]
#endif

#if OS_EVENT_TBL_SIZE > 1
    *pdest++ = *psrc++;
 c106d9c:	e51b3010 	ldr	r3, [fp, #-16]
 c106da0:	e5d32000 	ldrb	r2, [r3]
 c106da4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c106da8:	e5c32000 	strb	r2, [r3]
 c106dac:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c106db0:	e2833001 	add	r3, r3, #1
 c106db4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
 c106db8:	e51b3010 	ldr	r3, [fp, #-16]
 c106dbc:	e2833001 	add	r3, r3, #1
 c106dc0:	e50b3010 	str	r3, [fp, #-16]
#endif

#if OS_EVENT_TBL_SIZE > 2
    *pdest++ = *psrc++;
 c106dc4:	e51b3010 	ldr	r3, [fp, #-16]
 c106dc8:	e5d32000 	ldrb	r2, [r3]
 c106dcc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c106dd0:	e5c32000 	strb	r2, [r3]
 c106dd4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c106dd8:	e2833001 	add	r3, r3, #1
 c106ddc:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
 c106de0:	e51b3010 	ldr	r3, [fp, #-16]
 c106de4:	e2833001 	add	r3, r3, #1
 c106de8:	e50b3010 	str	r3, [fp, #-16]
#endif

#if OS_EVENT_TBL_SIZE > 3
    *pdest++ = *psrc++;
 c106dec:	e51b3010 	ldr	r3, [fp, #-16]
 c106df0:	e5d32000 	ldrb	r2, [r3]
 c106df4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c106df8:	e5c32000 	strb	r2, [r3]
 c106dfc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c106e00:	e2833001 	add	r3, r3, #1
 c106e04:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
 c106e08:	e51b3010 	ldr	r3, [fp, #-16]
 c106e0c:	e2833001 	add	r3, r3, #1
 c106e10:	e50b3010 	str	r3, [fp, #-16]
#endif

#if OS_EVENT_TBL_SIZE > 4
    *pdest++ = *psrc++;
 c106e14:	e51b3010 	ldr	r3, [fp, #-16]
 c106e18:	e5d32000 	ldrb	r2, [r3]
 c106e1c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c106e20:	e5c32000 	strb	r2, [r3]
 c106e24:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c106e28:	e2833001 	add	r3, r3, #1
 c106e2c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
 c106e30:	e51b3010 	ldr	r3, [fp, #-16]
 c106e34:	e2833001 	add	r3, r3, #1
 c106e38:	e50b3010 	str	r3, [fp, #-16]
#endif

#if OS_EVENT_TBL_SIZE > 5
    *pdest++ = *psrc++;
 c106e3c:	e51b3010 	ldr	r3, [fp, #-16]
 c106e40:	e5d32000 	ldrb	r2, [r3]
 c106e44:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c106e48:	e5c32000 	strb	r2, [r3]
 c106e4c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c106e50:	e2833001 	add	r3, r3, #1
 c106e54:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
 c106e58:	e51b3010 	ldr	r3, [fp, #-16]
 c106e5c:	e2833001 	add	r3, r3, #1
 c106e60:	e50b3010 	str	r3, [fp, #-16]
#endif

#if OS_EVENT_TBL_SIZE > 6
    *pdest++ = *psrc++;
 c106e64:	e51b3010 	ldr	r3, [fp, #-16]
 c106e68:	e5d32000 	ldrb	r2, [r3]
 c106e6c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c106e70:	e5c32000 	strb	r2, [r3]
 c106e74:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c106e78:	e2833001 	add	r3, r3, #1
 c106e7c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
 c106e80:	e51b3010 	ldr	r3, [fp, #-16]
 c106e84:	e2833001 	add	r3, r3, #1
 c106e88:	e50b3010 	str	r3, [fp, #-16]
#endif

#if OS_EVENT_TBL_SIZE > 7
    *pdest   = *psrc;
 c106e8c:	e51b3010 	ldr	r3, [fp, #-16]
 c106e90:	e5d32000 	ldrb	r2, [r3]
 c106e94:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c106e98:	e5c32000 	strb	r2, [r3]
#endif
    p_sem_data->OSCnt      = pevent->OSEventCnt;           /* Get semaphore count                      */
 c106e9c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c106ea0:	e1d320b2 	ldrh	r2, [r3, #2]
 c106ea4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 c106ea8:	e1c320b0 	strh	r2, [r3]
    OS_EXIT_CRITICAL();
 c106eac:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 c106eb0:	e121f000 	msr	CPSR_c, r0
    return (OS_NO_ERR);
 c106eb4:	e3a03000 	mov	r3, #0
}
 c106eb8:	e1a00003 	mov	r0, r3
 c106ebc:	e24bd00c 	sub	sp, fp, #12
 c106ec0:	e89d6800 	ldm	sp, {fp, sp, lr}
 c106ec4:	e12fff1e 	bx	lr

0c106ec8 <OSSemSet>:
*********************************************************************************************************
*/

#if OS_SEM_SET_EN > 0
void  OSSemSet (OS_EVENT *pevent, INT16U cnt, INT8U *err)
{
 c106ec8:	e1a0c00d 	mov	ip, sp
 c106ecc:	e92dd800 	push	{fp, ip, lr, pc}
 c106ed0:	e24cb004 	sub	fp, ip, #4
 c106ed4:	e24dd010 	sub	sp, sp, #16
 c106ed8:	e50b0010 	str	r0, [fp, #-16]
 c106edc:	e1a03001 	mov	r3, r1
 c106ee0:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
 c106ee4:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee


    cpu_sr = 0;                                       /* Prevent compiler warning                      */
#endif    
#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 c106ee8:	e51b3010 	ldr	r3, [fp, #-16]
 c106eec:	e3530000 	cmp	r3, #0
 c106ef0:	1a000003 	bne	c106f04 <OSSemSet+0x3c>
        *err = OS_ERR_PEVENT_NULL;
 c106ef4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c106ef8:	e3a02004 	mov	r2, #4
 c106efc:	e5c32000 	strb	r2, [r3]
        return;
 c106f00:	ea00001f 	b	c106f84 <OSSemSet+0xbc>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 c106f04:	e51b3010 	ldr	r3, [fp, #-16]
 c106f08:	e5d33000 	ldrb	r3, [r3]
 c106f0c:	e3530003 	cmp	r3, #3
 c106f10:	0a000003 	beq	c106f24 <OSSemSet+0x5c>
        *err = OS_ERR_EVENT_TYPE;
 c106f14:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c106f18:	e3a02001 	mov	r2, #1
 c106f1c:	e5c32000 	strb	r2, [r3]
        return;
 c106f20:	ea000017 	b	c106f84 <OSSemSet+0xbc>
    }
    OS_ENTER_CRITICAL();
 c106f24:	e10f0000 	mrs	r0, CPSR
 c106f28:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
 c106f2c:	e38000c0 	orr	r0, r0, #192	; 0xc0
 c106f30:	e121f000 	msr	CPSR_c, r0
    if (pevent->OSEventCnt > 0) {                     /* See if semaphore already has a count          */
 c106f34:	e51b3010 	ldr	r3, [fp, #-16]
 c106f38:	e1d330b2 	ldrh	r3, [r3, #2]
 c106f3c:	e3530000 	cmp	r3, #0
 c106f40:	0a000003 	beq	c106f54 <OSSemSet+0x8c>
        pevent->OSEventCnt = cnt;                     /* Yes, set it to the new value specified.       */
 c106f44:	e51b3010 	ldr	r3, [fp, #-16]
 c106f48:	e15b21b2 	ldrh	r2, [fp, #-18]	; 0xffffffee
 c106f4c:	e1c320b2 	strh	r2, [r3, #2]
 c106f50:	ea000006 	b	c106f70 <OSSemSet+0xa8>
    } else {                                          /* No                                            */
        if (pevent->OSEventGrp == 0x00) {             /*      See if task(s) waiting?                  */
 c106f54:	e51b3010 	ldr	r3, [fp, #-16]
 c106f58:	e5d33001 	ldrb	r3, [r3, #1]
 c106f5c:	e3530000 	cmp	r3, #0
 c106f60:	1a000002 	bne	c106f70 <OSSemSet+0xa8>
            pevent->OSEventCnt = cnt;                 /*      No, OK to set the value                  */
 c106f64:	e51b3010 	ldr	r3, [fp, #-16]
 c106f68:	e15b21b2 	ldrh	r2, [fp, #-18]	; 0xffffffee
 c106f6c:	e1c320b2 	strh	r2, [r3, #2]
        }
    }
    OS_EXIT_CRITICAL();
 c106f70:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 c106f74:	e121f000 	msr	CPSR_c, r0
    *err = OS_NO_ERR;
 c106f78:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c106f7c:	e3a02000 	mov	r2, #0
 c106f80:	e5c32000 	strb	r2, [r3]
}
 c106f84:	e24bd00c 	sub	sp, fp, #12
 c106f88:	e89d6800 	ldm	sp, {fp, sp, lr}
 c106f8c:	e12fff1e 	bx	lr

0c106f90 <OSTaskChangePrio>:
*********************************************************************************************************
*/

#if OS_TASK_CHANGE_PRIO_EN > 0
INT8U  OSTaskChangePrio (INT8U oldprio, INT8U newprio)
{
 c106f90:	e1a0c00d 	mov	ip, sp
 c106f94:	e92dd800 	push	{fp, ip, lr, pc}
 c106f98:	e24cb004 	sub	fp, ip, #4
 c106f9c:	e24dd018 	sub	sp, sp, #24
 c106fa0:	e1a02000 	mov	r2, r0
 c106fa4:	e1a03001 	mov	r3, r1
 c106fa8:	e54b201d 	strb	r2, [fp, #-29]	; 0xffffffe3
 c106fac:	e54b301e 	strb	r3, [fp, #-30]	; 0xffffffe2


    cpu_sr = 0;                                                 /* Prevent compiler warning            */
#endif    
#if OS_ARG_CHK_EN > 0
    if (oldprio >= OS_LOWEST_PRIO) {
 c106fb0:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
 c106fb4:	e353003e 	cmp	r3, #62	; 0x3e
 c106fb8:	9a000004 	bls	c106fd0 <OSTaskChangePrio+0x40>
	    if (oldprio != OS_PRIO_SELF) {
 c106fbc:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
 c106fc0:	e35300ff 	cmp	r3, #255	; 0xff
 c106fc4:	0a000001 	beq	c106fd0 <OSTaskChangePrio+0x40>
            return (OS_PRIO_INVALID);
 c106fc8:	e3a0302a 	mov	r3, #42	; 0x2a
 c106fcc:	ea0000d7 	b	c107330 <OSTaskChangePrio+0x3a0>
		}
	}
    if (newprio >= OS_LOWEST_PRIO) {
 c106fd0:	e55b301e 	ldrb	r3, [fp, #-30]	; 0xffffffe2
 c106fd4:	e353003e 	cmp	r3, #62	; 0x3e
 c106fd8:	9a000001 	bls	c106fe4 <OSTaskChangePrio+0x54>
        return (OS_PRIO_INVALID);
 c106fdc:	e3a0302a 	mov	r3, #42	; 0x2a
 c106fe0:	ea0000d2 	b	c107330 <OSTaskChangePrio+0x3a0>
    }
#endif
    OS_ENTER_CRITICAL();
 c106fe4:	e10f0000 	mrs	r0, CPSR
 c106fe8:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
 c106fec:	e38000c0 	orr	r0, r0, #192	; 0xc0
 c106ff0:	e121f000 	msr	CPSR_c, r0
    if (OSTCBPrioTbl[newprio] != (OS_TCB *)0) {                 /* New priority must not already exist */
 c106ff4:	e55b201e 	ldrb	r2, [fp, #-30]	; 0xffffffe2
 c106ff8:	e59f3340 	ldr	r3, [pc, #832]	; c107340 <OSTaskChangePrio+0x3b0>
 c106ffc:	e7933102 	ldr	r3, [r3, r2, lsl #2]
 c107000:	e3530000 	cmp	r3, #0
 c107004:	0a000003 	beq	c107018 <OSTaskChangePrio+0x88>
        OS_EXIT_CRITICAL();
 c107008:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 c10700c:	e121f000 	msr	CPSR_c, r0
        return (OS_PRIO_EXIST);
 c107010:	e3a03028 	mov	r3, #40	; 0x28
 c107014:	ea0000c5 	b	c107330 <OSTaskChangePrio+0x3a0>
    } 
    if (oldprio == OS_PRIO_SELF) {                              /* See if changing self                */
 c107018:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
 c10701c:	e35300ff 	cmp	r3, #255	; 0xff
 c107020:	1a000003 	bne	c107034 <OSTaskChangePrio+0xa4>
        oldprio = OSTCBCur->OSTCBPrio;                          /* Yes, get priority                   */
 c107024:	e59f3318 	ldr	r3, [pc, #792]	; c107344 <OSTaskChangePrio+0x3b4>
 c107028:	e5933000 	ldr	r3, [r3]
 c10702c:	e5d3302e 	ldrb	r3, [r3, #46]	; 0x2e
 c107030:	e54b301d 	strb	r3, [fp, #-29]	; 0xffffffe3
    }
    ptcb = OSTCBPrioTbl[oldprio];
 c107034:	e55b201d 	ldrb	r2, [fp, #-29]	; 0xffffffe3
 c107038:	e59f3300 	ldr	r3, [pc, #768]	; c107340 <OSTaskChangePrio+0x3b0>
 c10703c:	e7933102 	ldr	r3, [r3, r2, lsl #2]
 c107040:	e50b3010 	str	r3, [fp, #-16]
    if (ptcb == (OS_TCB *)0) {                                  /* Does task to change exist?          */
 c107044:	e51b3010 	ldr	r3, [fp, #-16]
 c107048:	e3530000 	cmp	r3, #0
 c10704c:	1a000003 	bne	c107060 <OSTaskChangePrio+0xd0>
        OS_EXIT_CRITICAL();                                     /* No, can't change its priority!      */
 c107050:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 c107054:	e121f000 	msr	CPSR_c, r0
        return (OS_PRIO_ERR);
 c107058:	e3a03029 	mov	r3, #41	; 0x29
 c10705c:	ea0000b3 	b	c107330 <OSTaskChangePrio+0x3a0>
    }                                       
    if (ptcb == (OS_TCB *)1) {                                  /* Is task assigned to Mutex           */
 c107060:	e51b3010 	ldr	r3, [fp, #-16]
 c107064:	e3530001 	cmp	r3, #1
 c107068:	1a000003 	bne	c10707c <OSTaskChangePrio+0xec>
        OS_EXIT_CRITICAL();                                     /* No, can't change its priority!      */
 c10706c:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 c107070:	e121f000 	msr	CPSR_c, r0
        return (OS_TASK_NOT_EXIST);
 c107074:	e3a0300b 	mov	r3, #11
 c107078:	ea0000ac 	b	c107330 <OSTaskChangePrio+0x3a0>
    }                                       
    y                     = newprio >> 3;                       /* Yes, compute new TCB fields         */
 c10707c:	e55b301e 	ldrb	r3, [fp, #-30]	; 0xffffffe2
 c107080:	e1a031a3 	lsr	r3, r3, #3
 c107084:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
    bity                  = OSMapTbl[y];
 c107088:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c10708c:	e59f22b4 	ldr	r2, [pc, #692]	; c107348 <OSTaskChangePrio+0x3b8>
 c107090:	e7d23003 	ldrb	r3, [r2, r3]
 c107094:	e54b3012 	strb	r3, [fp, #-18]	; 0xffffffee
    x                     = newprio & 0x07;
 c107098:	e55b301e 	ldrb	r3, [fp, #-30]	; 0xffffffe2
 c10709c:	e2033007 	and	r3, r3, #7
 c1070a0:	e54b3013 	strb	r3, [fp, #-19]	; 0xffffffed
    bitx                  = OSMapTbl[x];
 c1070a4:	e55b3013 	ldrb	r3, [fp, #-19]	; 0xffffffed
 c1070a8:	e59f2298 	ldr	r2, [pc, #664]	; c107348 <OSTaskChangePrio+0x3b8>
 c1070ac:	e7d23003 	ldrb	r3, [r2, r3]
 c1070b0:	e54b3014 	strb	r3, [fp, #-20]	; 0xffffffec
    OSTCBPrioTbl[oldprio] = (OS_TCB *)0;                        /* Remove TCB from old priority        */
 c1070b4:	e55b201d 	ldrb	r2, [fp, #-29]	; 0xffffffe3
 c1070b8:	e59f3280 	ldr	r3, [pc, #640]	; c107340 <OSTaskChangePrio+0x3b0>
 c1070bc:	e3a01000 	mov	r1, #0
 c1070c0:	e7831102 	str	r1, [r3, r2, lsl #2]
    OSTCBPrioTbl[newprio] = ptcb;                               /* Place pointer to TCB @ new priority */
 c1070c4:	e55b201e 	ldrb	r2, [fp, #-30]	; 0xffffffe2
 c1070c8:	e59f3270 	ldr	r3, [pc, #624]	; c107340 <OSTaskChangePrio+0x3b0>
 c1070cc:	e51b1010 	ldr	r1, [fp, #-16]
 c1070d0:	e7831102 	str	r1, [r3, r2, lsl #2]
    y_old                 = ptcb->OSTCBY;
 c1070d4:	e51b3010 	ldr	r3, [fp, #-16]
 c1070d8:	e5d33030 	ldrb	r3, [r3, #48]	; 0x30
 c1070dc:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
    if ((OSRdyTbl[y_old] & ptcb->OSTCBBitX) != 0x00) {          /* If task is ready make it not        */
 c1070e0:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
 c1070e4:	e59f2260 	ldr	r2, [pc, #608]	; c10734c <OSTaskChangePrio+0x3bc>
 c1070e8:	e7d22003 	ldrb	r2, [r2, r3]
 c1070ec:	e51b3010 	ldr	r3, [fp, #-16]
 c1070f0:	e5d33031 	ldrb	r3, [r3, #49]	; 0x31
 c1070f4:	e0023003 	and	r3, r2, r3
 c1070f8:	e20330ff 	and	r3, r3, #255	; 0xff
 c1070fc:	e3530000 	cmp	r3, #0
 c107100:	0a000031 	beq	c1071cc <OSTaskChangePrio+0x23c>
        OSRdyTbl[y_old] &= ~ptcb->OSTCBBitX;
 c107104:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
 c107108:	e55b2015 	ldrb	r2, [fp, #-21]	; 0xffffffeb
 c10710c:	e59f1238 	ldr	r1, [pc, #568]	; c10734c <OSTaskChangePrio+0x3bc>
 c107110:	e7d12002 	ldrb	r2, [r1, r2]
 c107114:	e20210ff 	and	r1, r2, #255	; 0xff
 c107118:	e51b2010 	ldr	r2, [fp, #-16]
 c10711c:	e5d22031 	ldrb	r2, [r2, #49]	; 0x31
 c107120:	e20220ff 	and	r2, r2, #255	; 0xff
 c107124:	e1e02002 	mvn	r2, r2
 c107128:	e20220ff 	and	r2, r2, #255	; 0xff
 c10712c:	e0012002 	and	r2, r1, r2
 c107130:	e20220ff 	and	r2, r2, #255	; 0xff
 c107134:	e20210ff 	and	r1, r2, #255	; 0xff
 c107138:	e59f220c 	ldr	r2, [pc, #524]	; c10734c <OSTaskChangePrio+0x3bc>
 c10713c:	e7c21003 	strb	r1, [r2, r3]
        if (OSRdyTbl[y_old] == 0x00) {
 c107140:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
 c107144:	e59f2200 	ldr	r2, [pc, #512]	; c10734c <OSTaskChangePrio+0x3bc>
 c107148:	e7d23003 	ldrb	r3, [r2, r3]
 c10714c:	e3530000 	cmp	r3, #0
 c107150:	1a00000c 	bne	c107188 <OSTaskChangePrio+0x1f8>
            OSRdyGrp &= ~ptcb->OSTCBBitY;
 c107154:	e51b3010 	ldr	r3, [fp, #-16]
 c107158:	e5d33032 	ldrb	r3, [r3, #50]	; 0x32
 c10715c:	e20330ff 	and	r3, r3, #255	; 0xff
 c107160:	e1e03003 	mvn	r3, r3
 c107164:	e20320ff 	and	r2, r3, #255	; 0xff
 c107168:	e59f31e0 	ldr	r3, [pc, #480]	; c107350 <OSTaskChangePrio+0x3c0>
 c10716c:	e5d33000 	ldrb	r3, [r3]
 c107170:	e20330ff 	and	r3, r3, #255	; 0xff
 c107174:	e0023003 	and	r3, r2, r3
 c107178:	e20330ff 	and	r3, r3, #255	; 0xff
 c10717c:	e20320ff 	and	r2, r3, #255	; 0xff
 c107180:	e59f31c8 	ldr	r3, [pc, #456]	; c107350 <OSTaskChangePrio+0x3c0>
 c107184:	e5c32000 	strb	r2, [r3]
        }
        OSRdyGrp    |= bity;                                    /* Make new priority ready to run      */
 c107188:	e59f31c0 	ldr	r3, [pc, #448]	; c107350 <OSTaskChangePrio+0x3c0>
 c10718c:	e5d32000 	ldrb	r2, [r3]
 c107190:	e55b3012 	ldrb	r3, [fp, #-18]	; 0xffffffee
 c107194:	e1823003 	orr	r3, r2, r3
 c107198:	e20320ff 	and	r2, r3, #255	; 0xff
 c10719c:	e59f31ac 	ldr	r3, [pc, #428]	; c107350 <OSTaskChangePrio+0x3c0>
 c1071a0:	e5c32000 	strb	r2, [r3]
        OSRdyTbl[y] |= bitx;
 c1071a4:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c1071a8:	e55b2011 	ldrb	r2, [fp, #-17]	; 0xffffffef
 c1071ac:	e59f1198 	ldr	r1, [pc, #408]	; c10734c <OSTaskChangePrio+0x3bc>
 c1071b0:	e7d11002 	ldrb	r1, [r1, r2]
 c1071b4:	e55b2014 	ldrb	r2, [fp, #-20]	; 0xffffffec
 c1071b8:	e1812002 	orr	r2, r1, r2
 c1071bc:	e20210ff 	and	r1, r2, #255	; 0xff
 c1071c0:	e59f2184 	ldr	r2, [pc, #388]	; c10734c <OSTaskChangePrio+0x3bc>
 c1071c4:	e7c21003 	strb	r1, [r2, r3]
 c1071c8:	ea000045 	b	c1072e4 <OSTaskChangePrio+0x354>
#if OS_EVENT_EN
    } else {                                                    /* Task was not ready ...              */
        pevent = ptcb->OSTCBEventPtr;
 c1071cc:	e51b3010 	ldr	r3, [fp, #-16]
 c1071d0:	e593301c 	ldr	r3, [r3, #28]
 c1071d4:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
        if (pevent != (OS_EVENT *)0) {                          /* ... remove from event wait list     */
 c1071d8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 c1071dc:	e3530000 	cmp	r3, #0
 c1071e0:	0a00003f 	beq	c1072e4 <OSTaskChangePrio+0x354>
            pevent->OSEventTbl[y_old] &= ~ptcb->OSTCBBitX;
 c1071e4:	e55b1015 	ldrb	r1, [fp, #-21]	; 0xffffffeb
 c1071e8:	e55b2015 	ldrb	r2, [fp, #-21]	; 0xffffffeb
 c1071ec:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
 c1071f0:	e3a03008 	mov	r3, #8
 c1071f4:	e0802002 	add	r2, r0, r2
 c1071f8:	e0823003 	add	r3, r2, r3
 c1071fc:	e5d33000 	ldrb	r3, [r3]
 c107200:	e20320ff 	and	r2, r3, #255	; 0xff
 c107204:	e51b3010 	ldr	r3, [fp, #-16]
 c107208:	e5d33031 	ldrb	r3, [r3, #49]	; 0x31
 c10720c:	e20330ff 	and	r3, r3, #255	; 0xff
 c107210:	e1e03003 	mvn	r3, r3
 c107214:	e20330ff 	and	r3, r3, #255	; 0xff
 c107218:	e0023003 	and	r3, r2, r3
 c10721c:	e20330ff 	and	r3, r3, #255	; 0xff
 c107220:	e20320ff 	and	r2, r3, #255	; 0xff
 c107224:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
 c107228:	e3a03008 	mov	r3, #8
 c10722c:	e0801001 	add	r1, r0, r1
 c107230:	e0813003 	add	r3, r1, r3
 c107234:	e5c32000 	strb	r2, [r3]
            if (pevent->OSEventTbl[y_old] == 0) {
 c107238:	e55b2015 	ldrb	r2, [fp, #-21]	; 0xffffffeb
 c10723c:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
 c107240:	e3a03008 	mov	r3, #8
 c107244:	e0812002 	add	r2, r1, r2
 c107248:	e0823003 	add	r3, r2, r3
 c10724c:	e5d33000 	ldrb	r3, [r3]
 c107250:	e3530000 	cmp	r3, #0
 c107254:	1a00000c 	bne	c10728c <OSTaskChangePrio+0x2fc>
                pevent->OSEventGrp &= ~ptcb->OSTCBBitY;
 c107258:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 c10725c:	e5d33001 	ldrb	r3, [r3, #1]
 c107260:	e20320ff 	and	r2, r3, #255	; 0xff
 c107264:	e51b3010 	ldr	r3, [fp, #-16]
 c107268:	e5d33032 	ldrb	r3, [r3, #50]	; 0x32
 c10726c:	e20330ff 	and	r3, r3, #255	; 0xff
 c107270:	e1e03003 	mvn	r3, r3
 c107274:	e20330ff 	and	r3, r3, #255	; 0xff
 c107278:	e0023003 	and	r3, r2, r3
 c10727c:	e20330ff 	and	r3, r3, #255	; 0xff
 c107280:	e20320ff 	and	r2, r3, #255	; 0xff
 c107284:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 c107288:	e5c32001 	strb	r2, [r3, #1]
            }
            pevent->OSEventGrp    |= bity;                      /* Add new priority to wait list       */
 c10728c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 c107290:	e5d32001 	ldrb	r2, [r3, #1]
 c107294:	e55b3012 	ldrb	r3, [fp, #-18]	; 0xffffffee
 c107298:	e1823003 	orr	r3, r2, r3
 c10729c:	e20320ff 	and	r2, r3, #255	; 0xff
 c1072a0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 c1072a4:	e5c32001 	strb	r2, [r3, #1]
            pevent->OSEventTbl[y] |= bitx;
 c1072a8:	e55b1011 	ldrb	r1, [fp, #-17]	; 0xffffffef
 c1072ac:	e55b2011 	ldrb	r2, [fp, #-17]	; 0xffffffef
 c1072b0:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
 c1072b4:	e3a03008 	mov	r3, #8
 c1072b8:	e0802002 	add	r2, r0, r2
 c1072bc:	e0823003 	add	r3, r2, r3
 c1072c0:	e5d32000 	ldrb	r2, [r3]
 c1072c4:	e55b3014 	ldrb	r3, [fp, #-20]	; 0xffffffec
 c1072c8:	e1823003 	orr	r3, r2, r3
 c1072cc:	e20320ff 	and	r2, r3, #255	; 0xff
 c1072d0:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
 c1072d4:	e3a03008 	mov	r3, #8
 c1072d8:	e0801001 	add	r1, r0, r1
 c1072dc:	e0813003 	add	r3, r1, r3
 c1072e0:	e5c32000 	strb	r2, [r3]
        }
#endif
    }
    ptcb->OSTCBPrio = newprio;                                  /* Set new task priority               */
 c1072e4:	e51b3010 	ldr	r3, [fp, #-16]
 c1072e8:	e55b201e 	ldrb	r2, [fp, #-30]	; 0xffffffe2
 c1072ec:	e5c3202e 	strb	r2, [r3, #46]	; 0x2e
    ptcb->OSTCBY    = y;
 c1072f0:	e51b3010 	ldr	r3, [fp, #-16]
 c1072f4:	e55b2011 	ldrb	r2, [fp, #-17]	; 0xffffffef
 c1072f8:	e5c32030 	strb	r2, [r3, #48]	; 0x30
    ptcb->OSTCBX    = x;
 c1072fc:	e51b3010 	ldr	r3, [fp, #-16]
 c107300:	e55b2013 	ldrb	r2, [fp, #-19]	; 0xffffffed
 c107304:	e5c3202f 	strb	r2, [r3, #47]	; 0x2f
    ptcb->OSTCBBitY = bity;
 c107308:	e51b3010 	ldr	r3, [fp, #-16]
 c10730c:	e55b2012 	ldrb	r2, [fp, #-18]	; 0xffffffee
 c107310:	e5c32032 	strb	r2, [r3, #50]	; 0x32
    ptcb->OSTCBBitX = bitx;
 c107314:	e51b3010 	ldr	r3, [fp, #-16]
 c107318:	e55b2014 	ldrb	r2, [fp, #-20]	; 0xffffffec
 c10731c:	e5c32031 	strb	r2, [r3, #49]	; 0x31
    OS_EXIT_CRITICAL();
 c107320:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 c107324:	e121f000 	msr	CPSR_c, r0
    OS_Sched();                                                 /* Run highest priority task ready     */
 c107328:	ebffe8ed 	bl	c1016e4 <OS_Sched>
    return (OS_NO_ERR);
 c10732c:	e3a03000 	mov	r3, #0
}
 c107330:	e1a00003 	mov	r0, r3
 c107334:	e24bd00c 	sub	sp, fp, #12
 c107338:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10733c:	e12fff1e 	bx	lr
 c107340:	0c11af8c 	.word	0x0c11af8c
 c107344:	0c119cac 	.word	0x0c119cac
 c107348:	0c10e3d4 	.word	0x0c10e3d4
 c10734c:	0c119c9c 	.word	0x0c119c9c
 c107350:	0c119c98 	.word	0x0c119c98

0c107354 <OSTaskCreate>:
*********************************************************************************************************
*/

#if OS_TASK_CREATE_EN > 0
INT8U  OSTaskCreate (void (*task)(void *pd), void *p_arg, OS_STK *ptos, INT8U prio)
{
 c107354:	e1a0c00d 	mov	ip, sp
 c107358:	e92dd800 	push	{fp, ip, lr, pc}
 c10735c:	e24cb004 	sub	fp, ip, #4
 c107360:	e24dd028 	sub	sp, sp, #40	; 0x28
 c107364:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
 c107368:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
 c10736c:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
 c107370:	e54b3021 	strb	r3, [fp, #-33]	; 0xffffffdf


    cpu_sr = 0;                              /* Prevent compiler warning                               */
#endif    
#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
 c107374:	e55b3021 	ldrb	r3, [fp, #-33]	; 0xffffffdf
 c107378:	e353003f 	cmp	r3, #63	; 0x3f
 c10737c:	9a000001 	bls	c107388 <OSTaskCreate+0x34>
        return (OS_PRIO_INVALID);
 c107380:	e3a0302a 	mov	r3, #42	; 0x2a
 c107384:	ea000042 	b	c107494 <OSTaskCreate+0x140>
    }
#endif
    OS_ENTER_CRITICAL();
 c107388:	e10f0000 	mrs	r0, CPSR
 c10738c:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
 c107390:	e38000c0 	orr	r0, r0, #192	; 0xc0
 c107394:	e121f000 	msr	CPSR_c, r0
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
 c107398:	e59f3104 	ldr	r3, [pc, #260]	; c1074a4 <OSTaskCreate+0x150>
 c10739c:	e5d33000 	ldrb	r3, [r3]
 c1073a0:	e3530000 	cmp	r3, #0
 c1073a4:	0a000003 	beq	c1073b8 <OSTaskCreate+0x64>
        OS_EXIT_CRITICAL();
 c1073a8:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 c1073ac:	e121f000 	msr	CPSR_c, r0
        return (OS_ERR_TASK_CREATE_ISR);
 c1073b0:	e3a03010 	mov	r3, #16
 c1073b4:	ea000036 	b	c107494 <OSTaskCreate+0x140>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
 c1073b8:	e55b2021 	ldrb	r2, [fp, #-33]	; 0xffffffdf
 c1073bc:	e59f30e4 	ldr	r3, [pc, #228]	; c1074a8 <OSTaskCreate+0x154>
 c1073c0:	e7933102 	ldr	r3, [r3, r2, lsl #2]
 c1073c4:	e3530000 	cmp	r3, #0
 c1073c8:	1a00002e 	bne	c107488 <OSTaskCreate+0x134>
        OSTCBPrioTbl[prio] = (OS_TCB *)1;    /* Reserve the priority to prevent others from doing ...  */
 c1073cc:	e55b2021 	ldrb	r2, [fp, #-33]	; 0xffffffdf
 c1073d0:	e59f30d0 	ldr	r3, [pc, #208]	; c1074a8 <OSTaskCreate+0x154>
 c1073d4:	e3a01001 	mov	r1, #1
 c1073d8:	e7831102 	str	r1, [r3, r2, lsl #2]
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
 c1073dc:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 c1073e0:	e121f000 	msr	CPSR_c, r0
        psp = (OS_STK *)OSTaskStkInit(task, p_arg, ptos, 0);    /* Initialize the task's stack         */
 c1073e4:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
 c1073e8:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
 c1073ec:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
 c1073f0:	e3a03000 	mov	r3, #0
 c1073f4:	ebffe36e 	bl	c1001b4 <OSTaskStkInit>
 c1073f8:	e50b0010 	str	r0, [fp, #-16]
        err = OS_TCBInit(prio, psp, (OS_STK *)0, 0, 0, (void *)0, 0);
 c1073fc:	e55b3021 	ldrb	r3, [fp, #-33]	; 0xffffffdf
 c107400:	e3a02000 	mov	r2, #0
 c107404:	e58d2000 	str	r2, [sp]
 c107408:	e3a02000 	mov	r2, #0
 c10740c:	e58d2004 	str	r2, [sp, #4]
 c107410:	e3a02000 	mov	r2, #0
 c107414:	e58d2008 	str	r2, [sp, #8]
 c107418:	e1a00003 	mov	r0, r3
 c10741c:	e51b1010 	ldr	r1, [fp, #-16]
 c107420:	e3a02000 	mov	r2, #0
 c107424:	e3a03000 	mov	r3, #0
 c107428:	ebffe9bd 	bl	c101b24 <OS_TCBInit>
 c10742c:	e1a03000 	mov	r3, r0
 c107430:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
        if (err == OS_NO_ERR) {
 c107434:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c107438:	e3530000 	cmp	r3, #0
 c10743c:	1a000005 	bne	c107458 <OSTaskCreate+0x104>
            if (OSRunning == TRUE) {         /* Find highest priority task if multitasking has started */
 c107440:	e59f3064 	ldr	r3, [pc, #100]	; c1074ac <OSTaskCreate+0x158>
 c107444:	e5d33000 	ldrb	r3, [r3]
 c107448:	e3530001 	cmp	r3, #1
 c10744c:	1a00000b 	bne	c107480 <OSTaskCreate+0x12c>
                OS_Sched();
 c107450:	ebffe8a3 	bl	c1016e4 <OS_Sched>
 c107454:	ea000009 	b	c107480 <OSTaskCreate+0x12c>
            }
        } else {
            OS_ENTER_CRITICAL();
 c107458:	e10f0000 	mrs	r0, CPSR
 c10745c:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
 c107460:	e38000c0 	orr	r0, r0, #192	; 0xc0
 c107464:	e121f000 	msr	CPSR_c, r0
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
 c107468:	e55b2021 	ldrb	r2, [fp, #-33]	; 0xffffffdf
 c10746c:	e59f3034 	ldr	r3, [pc, #52]	; c1074a8 <OSTaskCreate+0x154>
 c107470:	e3a01000 	mov	r1, #0
 c107474:	e7831102 	str	r1, [r3, r2, lsl #2]
            OS_EXIT_CRITICAL();
 c107478:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 c10747c:	e121f000 	msr	CPSR_c, r0
        }
        return (err);
 c107480:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c107484:	ea000002 	b	c107494 <OSTaskCreate+0x140>
    }
    OS_EXIT_CRITICAL();
 c107488:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 c10748c:	e121f000 	msr	CPSR_c, r0
    return (OS_PRIO_EXIST);
 c107490:	e3a03028 	mov	r3, #40	; 0x28
}
 c107494:	e1a00003 	mov	r0, r3
 c107498:	e24bd00c 	sub	sp, fp, #12
 c10749c:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1074a0:	e12fff1e 	bx	lr
 c1074a4:	0c119ca8 	.word	0x0c119ca8
 c1074a8:	0c11af8c 	.word	0x0c11af8c
 c1074ac:	0c119225 	.word	0x0c119225

0c1074b0 <OSTaskCreateExt>:
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
 c1074b0:	e1a0c00d 	mov	ip, sp
 c1074b4:	e92dd800 	push	{fp, ip, lr, pc}
 c1074b8:	e24cb004 	sub	fp, ip, #4
 c1074bc:	e24dd028 	sub	sp, sp, #40	; 0x28
 c1074c0:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
 c1074c4:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
 c1074c8:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
 c1074cc:	e54b3021 	strb	r3, [fp, #-33]	; 0xffffffdf


    cpu_sr = 0;                              /* Prevent compiler warning                               */
#endif    
#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
 c1074d0:	e55b3021 	ldrb	r3, [fp, #-33]	; 0xffffffdf
 c1074d4:	e353003f 	cmp	r3, #63	; 0x3f
 c1074d8:	9a000001 	bls	c1074e4 <OSTaskCreateExt+0x34>
        return (OS_PRIO_INVALID);
 c1074dc:	e3a0302a 	mov	r3, #42	; 0x2a
 c1074e0:	ea000047 	b	c107604 <OSTaskCreateExt+0x154>
    }
#endif
    OS_ENTER_CRITICAL();
 c1074e4:	e10f0000 	mrs	r0, CPSR
 c1074e8:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
 c1074ec:	e38000c0 	orr	r0, r0, #192	; 0xc0
 c1074f0:	e121f000 	msr	CPSR_c, r0
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
 c1074f4:	e59f3118 	ldr	r3, [pc, #280]	; c107614 <OSTaskCreateExt+0x164>
 c1074f8:	e5d33000 	ldrb	r3, [r3]
 c1074fc:	e3530000 	cmp	r3, #0
 c107500:	0a000003 	beq	c107514 <OSTaskCreateExt+0x64>
        OS_EXIT_CRITICAL();
 c107504:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 c107508:	e121f000 	msr	CPSR_c, r0
        return (OS_ERR_TASK_CREATE_ISR);
 c10750c:	e3a03010 	mov	r3, #16
 c107510:	ea00003b 	b	c107604 <OSTaskCreateExt+0x154>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
 c107514:	e55b2021 	ldrb	r2, [fp, #-33]	; 0xffffffdf
 c107518:	e59f30f8 	ldr	r3, [pc, #248]	; c107618 <OSTaskCreateExt+0x168>
 c10751c:	e7933102 	ldr	r3, [r3, r2, lsl #2]
 c107520:	e3530000 	cmp	r3, #0
 c107524:	1a000033 	bne	c1075f8 <OSTaskCreateExt+0x148>
        OSTCBPrioTbl[prio] = (OS_TCB *)1;    /* Reserve the priority to prevent others from doing ...  */
 c107528:	e55b2021 	ldrb	r2, [fp, #-33]	; 0xffffffdf
 c10752c:	e59f30e4 	ldr	r3, [pc, #228]	; c107618 <OSTaskCreateExt+0x168>
 c107530:	e3a01001 	mov	r1, #1
 c107534:	e7831102 	str	r1, [r3, r2, lsl #2]
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
 c107538:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 c10753c:	e121f000 	msr	CPSR_c, r0

        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
 c107540:	e1db31b4 	ldrh	r3, [fp, #20]
 c107544:	e59b0008 	ldr	r0, [fp, #8]
 c107548:	e59b100c 	ldr	r1, [fp, #12]
 c10754c:	e1a02003 	mov	r2, r3
 c107550:	eb000388 	bl	c108378 <OS_TaskStkClr>

        psp = (OS_STK *)OSTaskStkInit(task, p_arg, ptos, opt); /* Initialize the task's stack          */
 c107554:	e1db31b4 	ldrh	r3, [fp, #20]
 c107558:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
 c10755c:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
 c107560:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
 c107564:	ebffe312 	bl	c1001b4 <OSTaskStkInit>
 c107568:	e50b0010 	str	r0, [fp, #-16]
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
 c10756c:	e55b2021 	ldrb	r2, [fp, #-33]	; 0xffffffdf
 c107570:	e1db30b4 	ldrh	r3, [fp, #4]
 c107574:	e59b100c 	ldr	r1, [fp, #12]
 c107578:	e58d1000 	str	r1, [sp]
 c10757c:	e59b1010 	ldr	r1, [fp, #16]
 c107580:	e58d1004 	str	r1, [sp, #4]
 c107584:	e1db11b4 	ldrh	r1, [fp, #20]
 c107588:	e58d1008 	str	r1, [sp, #8]
 c10758c:	e1a00002 	mov	r0, r2
 c107590:	e51b1010 	ldr	r1, [fp, #-16]
 c107594:	e59b2008 	ldr	r2, [fp, #8]
 c107598:	ebffe961 	bl	c101b24 <OS_TCBInit>
 c10759c:	e1a03000 	mov	r3, r0
 c1075a0:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
        if (err == OS_NO_ERR) {
 c1075a4:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c1075a8:	e3530000 	cmp	r3, #0
 c1075ac:	1a000005 	bne	c1075c8 <OSTaskCreateExt+0x118>
            if (OSRunning == TRUE) {                           /* Find HPT if multitasking has started */
 c1075b0:	e59f3064 	ldr	r3, [pc, #100]	; c10761c <OSTaskCreateExt+0x16c>
 c1075b4:	e5d33000 	ldrb	r3, [r3]
 c1075b8:	e3530001 	cmp	r3, #1
 c1075bc:	1a00000b 	bne	c1075f0 <OSTaskCreateExt+0x140>
                OS_Sched();
 c1075c0:	ebffe847 	bl	c1016e4 <OS_Sched>
 c1075c4:	ea000009 	b	c1075f0 <OSTaskCreateExt+0x140>
            }
        } else {
            OS_ENTER_CRITICAL();
 c1075c8:	e10f0000 	mrs	r0, CPSR
 c1075cc:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
 c1075d0:	e38000c0 	orr	r0, r0, #192	; 0xc0
 c1075d4:	e121f000 	msr	CPSR_c, r0
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
 c1075d8:	e55b2021 	ldrb	r2, [fp, #-33]	; 0xffffffdf
 c1075dc:	e59f3034 	ldr	r3, [pc, #52]	; c107618 <OSTaskCreateExt+0x168>
 c1075e0:	e3a01000 	mov	r1, #0
 c1075e4:	e7831102 	str	r1, [r3, r2, lsl #2]
            OS_EXIT_CRITICAL();
 c1075e8:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 c1075ec:	e121f000 	msr	CPSR_c, r0
        }
        return (err);
 c1075f0:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c1075f4:	ea000002 	b	c107604 <OSTaskCreateExt+0x154>
    }
    OS_EXIT_CRITICAL();
 c1075f8:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 c1075fc:	e121f000 	msr	CPSR_c, r0
    return (OS_PRIO_EXIST);
 c107600:	e3a03028 	mov	r3, #40	; 0x28
}
 c107604:	e1a00003 	mov	r0, r3
 c107608:	e24bd00c 	sub	sp, fp, #12
 c10760c:	e89d6800 	ldm	sp, {fp, sp, lr}
 c107610:	e12fff1e 	bx	lr
 c107614:	0c119ca8 	.word	0x0c119ca8
 c107618:	0c11af8c 	.word	0x0c11af8c
 c10761c:	0c119225 	.word	0x0c119225

0c107620 <OSTaskDel>:
*********************************************************************************************************
*/
/*$PAGE*/
#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDel (INT8U prio)
{
 c107620:	e1a0c00d 	mov	ip, sp
 c107624:	e92dd800 	push	{fp, ip, lr, pc}
 c107628:	e24cb004 	sub	fp, ip, #4
 c10762c:	e24dd018 	sub	sp, sp, #24
 c107630:	e1a03000 	mov	r3, r0
 c107634:	e54b301d 	strb	r3, [fp, #-29]	; 0xffffffe3



    cpu_sr = 0;                                                 /* Prevent compiler warning            */
#endif    
    if (OSIntNesting > 0) {                                     /* See if trying to delete from ISR    */
 c107638:	e59f3398 	ldr	r3, [pc, #920]	; c1079d8 <OSTaskDel+0x3b8>
 c10763c:	e5d33000 	ldrb	r3, [r3]
 c107640:	e3530000 	cmp	r3, #0
 c107644:	0a000001 	beq	c107650 <OSTaskDel+0x30>
        return (OS_TASK_DEL_ISR);
 c107648:	e3a0303f 	mov	r3, #63	; 0x3f
 c10764c:	ea0000dd 	b	c1079c8 <OSTaskDel+0x3a8>
    }
#if OS_ARG_CHK_EN > 0
    if (prio == OS_IDLE_PRIO) {                                 /* Not allowed to delete idle task     */
 c107650:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
 c107654:	e353003f 	cmp	r3, #63	; 0x3f
 c107658:	1a000001 	bne	c107664 <OSTaskDel+0x44>
        return (OS_TASK_DEL_IDLE);
 c10765c:	e3a0303d 	mov	r3, #61	; 0x3d
 c107660:	ea0000d8 	b	c1079c8 <OSTaskDel+0x3a8>
    }
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
 c107664:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
 c107668:	e353003e 	cmp	r3, #62	; 0x3e
 c10766c:	9a000004 	bls	c107684 <OSTaskDel+0x64>
        if (prio != OS_PRIO_SELF) {       
 c107670:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
 c107674:	e35300ff 	cmp	r3, #255	; 0xff
 c107678:	0a000001 	beq	c107684 <OSTaskDel+0x64>
            return (OS_PRIO_INVALID);
 c10767c:	e3a0302a 	mov	r3, #42	; 0x2a
 c107680:	ea0000d0 	b	c1079c8 <OSTaskDel+0x3a8>
        }
    }
#endif
    OS_ENTER_CRITICAL();
 c107684:	e10f0000 	mrs	r0, CPSR
 c107688:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
 c10768c:	e38000c0 	orr	r0, r0, #192	; 0xc0
 c107690:	e121f000 	msr	CPSR_c, r0
    if (prio == OS_PRIO_SELF) {                                 /* See if requesting to delete self    */
 c107694:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
 c107698:	e35300ff 	cmp	r3, #255	; 0xff
 c10769c:	1a000003 	bne	c1076b0 <OSTaskDel+0x90>
        prio = OSTCBCur->OSTCBPrio;                             /* Set priority to delete to current   */
 c1076a0:	e59f3334 	ldr	r3, [pc, #820]	; c1079dc <OSTaskDel+0x3bc>
 c1076a4:	e5933000 	ldr	r3, [r3]
 c1076a8:	e5d3302e 	ldrb	r3, [r3, #46]	; 0x2e
 c1076ac:	e54b301d 	strb	r3, [fp, #-29]	; 0xffffffe3
    }
    ptcb = OSTCBPrioTbl[prio];
 c1076b0:	e55b201d 	ldrb	r2, [fp, #-29]	; 0xffffffe3
 c1076b4:	e59f3324 	ldr	r3, [pc, #804]	; c1079e0 <OSTaskDel+0x3c0>
 c1076b8:	e7933102 	ldr	r3, [r3, r2, lsl #2]
 c1076bc:	e50b3010 	str	r3, [fp, #-16]
    if (ptcb == (OS_TCB *)0) {                                  /* Task to delete must exist           */
 c1076c0:	e51b3010 	ldr	r3, [fp, #-16]
 c1076c4:	e3530000 	cmp	r3, #0
 c1076c8:	1a000003 	bne	c1076dc <OSTaskDel+0xbc>
        OS_EXIT_CRITICAL();
 c1076cc:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 c1076d0:	e121f000 	msr	CPSR_c, r0
        return (OS_TASK_DEL_ERR);
 c1076d4:	e3a0303c 	mov	r3, #60	; 0x3c
 c1076d8:	ea0000ba 	b	c1079c8 <OSTaskDel+0x3a8>
    }
    if (ptcb == (OS_TCB *)1) {                                  /* Must not be assigned to Mutex       */
 c1076dc:	e51b3010 	ldr	r3, [fp, #-16]
 c1076e0:	e3530001 	cmp	r3, #1
 c1076e4:	1a000003 	bne	c1076f8 <OSTaskDel+0xd8>
        OS_EXIT_CRITICAL();
 c1076e8:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 c1076ec:	e121f000 	msr	CPSR_c, r0
        return (OS_TASK_NOT_EXIST);
 c1076f0:	e3a0300b 	mov	r3, #11
 c1076f4:	ea0000b3 	b	c1079c8 <OSTaskDel+0x3a8>
    }
	y            =  ptcb->OSTCBY;
 c1076f8:	e51b3010 	ldr	r3, [fp, #-16]
 c1076fc:	e5d33030 	ldrb	r3, [r3, #48]	; 0x30
 c107700:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
	OSRdyTbl[y] &= ~ptcb->OSTCBBitX;
 c107704:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c107708:	e55b2011 	ldrb	r2, [fp, #-17]	; 0xffffffef
 c10770c:	e59f12d0 	ldr	r1, [pc, #720]	; c1079e4 <OSTaskDel+0x3c4>
 c107710:	e7d12002 	ldrb	r2, [r1, r2]
 c107714:	e20210ff 	and	r1, r2, #255	; 0xff
 c107718:	e51b2010 	ldr	r2, [fp, #-16]
 c10771c:	e5d22031 	ldrb	r2, [r2, #49]	; 0x31
 c107720:	e20220ff 	and	r2, r2, #255	; 0xff
 c107724:	e1e02002 	mvn	r2, r2
 c107728:	e20220ff 	and	r2, r2, #255	; 0xff
 c10772c:	e0012002 	and	r2, r1, r2
 c107730:	e20220ff 	and	r2, r2, #255	; 0xff
 c107734:	e20210ff 	and	r1, r2, #255	; 0xff
 c107738:	e59f22a4 	ldr	r2, [pc, #676]	; c1079e4 <OSTaskDel+0x3c4>
 c10773c:	e7c21003 	strb	r1, [r2, r3]
    if (OSRdyTbl[y] == 0x00) {                                  /* Make task not ready                 */
 c107740:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c107744:	e59f2298 	ldr	r2, [pc, #664]	; c1079e4 <OSTaskDel+0x3c4>
 c107748:	e7d23003 	ldrb	r3, [r2, r3]
 c10774c:	e3530000 	cmp	r3, #0
 c107750:	1a00000c 	bne	c107788 <OSTaskDel+0x168>
        OSRdyGrp &= ~ptcb->OSTCBBitY;
 c107754:	e51b3010 	ldr	r3, [fp, #-16]
 c107758:	e5d33032 	ldrb	r3, [r3, #50]	; 0x32
 c10775c:	e20330ff 	and	r3, r3, #255	; 0xff
 c107760:	e1e03003 	mvn	r3, r3
 c107764:	e20320ff 	and	r2, r3, #255	; 0xff
 c107768:	e59f3278 	ldr	r3, [pc, #632]	; c1079e8 <OSTaskDel+0x3c8>
 c10776c:	e5d33000 	ldrb	r3, [r3]
 c107770:	e20330ff 	and	r3, r3, #255	; 0xff
 c107774:	e0023003 	and	r3, r2, r3
 c107778:	e20330ff 	and	r3, r3, #255	; 0xff
 c10777c:	e20320ff 	and	r2, r3, #255	; 0xff
 c107780:	e59f3260 	ldr	r3, [pc, #608]	; c1079e8 <OSTaskDel+0x3c8>
 c107784:	e5c32000 	strb	r2, [r3]
    }
#if OS_EVENT_EN
    pevent = ptcb->OSTCBEventPtr;
 c107788:	e51b3010 	ldr	r3, [fp, #-16]
 c10778c:	e593301c 	ldr	r3, [r3, #28]
 c107790:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    if (pevent != (OS_EVENT *)0) {                              /* If task is waiting on event         */
 c107794:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c107798:	e3530000 	cmp	r3, #0
 c10779c:	0a000029 	beq	c107848 <OSTaskDel+0x228>
	    pevent->OSEventTbl[y] &= ~ptcb->OSTCBBitX;
 c1077a0:	e55b1011 	ldrb	r1, [fp, #-17]	; 0xffffffef
 c1077a4:	e55b2011 	ldrb	r2, [fp, #-17]	; 0xffffffef
 c1077a8:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
 c1077ac:	e3a03008 	mov	r3, #8
 c1077b0:	e0802002 	add	r2, r0, r2
 c1077b4:	e0823003 	add	r3, r2, r3
 c1077b8:	e5d33000 	ldrb	r3, [r3]
 c1077bc:	e20320ff 	and	r2, r3, #255	; 0xff
 c1077c0:	e51b3010 	ldr	r3, [fp, #-16]
 c1077c4:	e5d33031 	ldrb	r3, [r3, #49]	; 0x31
 c1077c8:	e20330ff 	and	r3, r3, #255	; 0xff
 c1077cc:	e1e03003 	mvn	r3, r3
 c1077d0:	e20330ff 	and	r3, r3, #255	; 0xff
 c1077d4:	e0023003 	and	r3, r2, r3
 c1077d8:	e20330ff 	and	r3, r3, #255	; 0xff
 c1077dc:	e20320ff 	and	r2, r3, #255	; 0xff
 c1077e0:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
 c1077e4:	e3a03008 	mov	r3, #8
 c1077e8:	e0801001 	add	r1, r0, r1
 c1077ec:	e0813003 	add	r3, r1, r3
 c1077f0:	e5c32000 	strb	r2, [r3]
        if (pevent->OSEventTbl[y] == 0) {                       /* ... remove task from ...            */
 c1077f4:	e55b2011 	ldrb	r2, [fp, #-17]	; 0xffffffef
 c1077f8:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
 c1077fc:	e3a03008 	mov	r3, #8
 c107800:	e0812002 	add	r2, r1, r2
 c107804:	e0823003 	add	r3, r2, r3
 c107808:	e5d33000 	ldrb	r3, [r3]
 c10780c:	e3530000 	cmp	r3, #0
 c107810:	1a00000c 	bne	c107848 <OSTaskDel+0x228>
            pevent->OSEventGrp &= ~ptcb->OSTCBBitY;             /* ... event ctrl block                */
 c107814:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c107818:	e5d33001 	ldrb	r3, [r3, #1]
 c10781c:	e20320ff 	and	r2, r3, #255	; 0xff
 c107820:	e51b3010 	ldr	r3, [fp, #-16]
 c107824:	e5d33032 	ldrb	r3, [r3, #50]	; 0x32
 c107828:	e20330ff 	and	r3, r3, #255	; 0xff
 c10782c:	e1e03003 	mvn	r3, r3
 c107830:	e20330ff 	and	r3, r3, #255	; 0xff
 c107834:	e0023003 	and	r3, r2, r3
 c107838:	e20330ff 	and	r3, r3, #255	; 0xff
 c10783c:	e20320ff 	and	r2, r3, #255	; 0xff
 c107840:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c107844:	e5c32001 	strb	r2, [r3, #1]
        }
    }
#endif
#if (OS_VERSION >= 251) && (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    pnode = ptcb->OSTCBFlagNode;
 c107848:	e51b3010 	ldr	r3, [fp, #-16]
 c10784c:	e5933024 	ldr	r3, [r3, #36]	; 0x24
 c107850:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    if (pnode != (OS_FLAG_NODE *)0) {                           /* If task is waiting on event flag    */
 c107854:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 c107858:	e3530000 	cmp	r3, #0
 c10785c:	0a000001 	beq	c107868 <OSTaskDel+0x248>
        OS_FlagUnlink(pnode);                                   /* Remove from wait list               */
 c107860:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
 c107864:	ebffef7a 	bl	c103654 <OS_FlagUnlink>
    }
#endif
    ptcb->OSTCBDly    = 0;                                      /* Prevent OSTimeTick() from updating  */
 c107868:	e51b3010 	ldr	r3, [fp, #-16]
 c10786c:	e3a02000 	mov	r2, #0
 c107870:	e1c322ba 	strh	r2, [r3, #42]	; 0x2a
    ptcb->OSTCBStat   = OS_STAT_RDY;                            /* Prevent task from being resumed     */
 c107874:	e51b3010 	ldr	r3, [fp, #-16]
 c107878:	e3a02000 	mov	r2, #0
 c10787c:	e5c3202c 	strb	r2, [r3, #44]	; 0x2c
    ptcb->OSTCBPendTO = FALSE;
 c107880:	e51b3010 	ldr	r3, [fp, #-16]
 c107884:	e3a02000 	mov	r2, #0
 c107888:	e5c3202d 	strb	r2, [r3, #45]	; 0x2d
	if (OSLockNesting < 255u) {                                 /* Make sure we don't context switch   */
 c10788c:	e59f3158 	ldr	r3, [pc, #344]	; c1079ec <OSTaskDel+0x3cc>
 c107890:	e5d33000 	ldrb	r3, [r3]
 c107894:	e35300ff 	cmp	r3, #255	; 0xff
 c107898:	0a000005 	beq	c1078b4 <OSTaskDel+0x294>
        OSLockNesting++;
 c10789c:	e59f3148 	ldr	r3, [pc, #328]	; c1079ec <OSTaskDel+0x3cc>
 c1078a0:	e5d33000 	ldrb	r3, [r3]
 c1078a4:	e2833001 	add	r3, r3, #1
 c1078a8:	e20320ff 	and	r2, r3, #255	; 0xff
 c1078ac:	e59f3138 	ldr	r3, [pc, #312]	; c1079ec <OSTaskDel+0x3cc>
 c1078b0:	e5c32000 	strb	r2, [r3]
	}
    OS_EXIT_CRITICAL();                                         /* Enabling INT. ignores next instruc. */
 c1078b4:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 c1078b8:	e121f000 	msr	CPSR_c, r0
    OS_Dummy();                                                 /* ... Dummy ensures that INTs will be */
 c1078bc:	ebffe4ec 	bl	c100c74 <OS_Dummy>
    OS_ENTER_CRITICAL();                                        /* ... disabled HERE!                  */
 c1078c0:	e10f0000 	mrs	r0, CPSR
 c1078c4:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
 c1078c8:	e38000c0 	orr	r0, r0, #192	; 0xc0
 c1078cc:	e121f000 	msr	CPSR_c, r0
	if (OSLockNesting > 0) {                                    /* Remove context switch lock          */
 c1078d0:	e59f3114 	ldr	r3, [pc, #276]	; c1079ec <OSTaskDel+0x3cc>
 c1078d4:	e5d33000 	ldrb	r3, [r3]
 c1078d8:	e3530000 	cmp	r3, #0
 c1078dc:	0a000005 	beq	c1078f8 <OSTaskDel+0x2d8>
        OSLockNesting--;
 c1078e0:	e59f3104 	ldr	r3, [pc, #260]	; c1079ec <OSTaskDel+0x3cc>
 c1078e4:	e5d33000 	ldrb	r3, [r3]
 c1078e8:	e2433001 	sub	r3, r3, #1
 c1078ec:	e20320ff 	and	r2, r3, #255	; 0xff
 c1078f0:	e59f30f4 	ldr	r3, [pc, #244]	; c1079ec <OSTaskDel+0x3cc>
 c1078f4:	e5c32000 	strb	r2, [r3]
	}
    OSTaskDelHook(ptcb);                                        /* Call user defined hook              */
 c1078f8:	e51b0010 	ldr	r0, [fp, #-16]
 c1078fc:	ebffe217 	bl	c100160 <OSTaskDelHook>
    OSTaskCtr--;                                                /* One less task being managed         */
 c107900:	e59f30e8 	ldr	r3, [pc, #232]	; c1079f0 <OSTaskDel+0x3d0>
 c107904:	e5d33000 	ldrb	r3, [r3]
 c107908:	e2433001 	sub	r3, r3, #1
 c10790c:	e20320ff 	and	r2, r3, #255	; 0xff
 c107910:	e59f30d8 	ldr	r3, [pc, #216]	; c1079f0 <OSTaskDel+0x3d0>
 c107914:	e5c32000 	strb	r2, [r3]
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                           /* Clear old priority entry            */
 c107918:	e55b201d 	ldrb	r2, [fp, #-29]	; 0xffffffe3
 c10791c:	e59f30bc 	ldr	r3, [pc, #188]	; c1079e0 <OSTaskDel+0x3c0>
 c107920:	e3a01000 	mov	r1, #0
 c107924:	e7831102 	str	r1, [r3, r2, lsl #2]
    if (ptcb->OSTCBPrev == (OS_TCB *)0) {                       /* Remove from TCB chain               */
 c107928:	e51b3010 	ldr	r3, [fp, #-16]
 c10792c:	e5933018 	ldr	r3, [r3, #24]
 c107930:	e3530000 	cmp	r3, #0
 c107934:	1a000008 	bne	c10795c <OSTaskDel+0x33c>
        ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
 c107938:	e51b3010 	ldr	r3, [fp, #-16]
 c10793c:	e5933014 	ldr	r3, [r3, #20]
 c107940:	e3a02000 	mov	r2, #0
 c107944:	e5832018 	str	r2, [r3, #24]
        OSTCBList                  = ptcb->OSTCBNext;
 c107948:	e51b3010 	ldr	r3, [fp, #-16]
 c10794c:	e5932014 	ldr	r2, [r3, #20]
 c107950:	e59f309c 	ldr	r3, [pc, #156]	; c1079f4 <OSTaskDel+0x3d4>
 c107954:	e5832000 	str	r2, [r3]
 c107958:	ea000009 	b	c107984 <OSTaskDel+0x364>
    } else {
        ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
 c10795c:	e51b3010 	ldr	r3, [fp, #-16]
 c107960:	e5933018 	ldr	r3, [r3, #24]
 c107964:	e51b2010 	ldr	r2, [fp, #-16]
 c107968:	e5922014 	ldr	r2, [r2, #20]
 c10796c:	e5832014 	str	r2, [r3, #20]
        ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
 c107970:	e51b3010 	ldr	r3, [fp, #-16]
 c107974:	e5933014 	ldr	r3, [r3, #20]
 c107978:	e51b2010 	ldr	r2, [fp, #-16]
 c10797c:	e5922018 	ldr	r2, [r2, #24]
 c107980:	e5832018 	str	r2, [r3, #24]
    }
    ptcb->OSTCBNext   = OSTCBFreeList;                          /* Return TCB to free TCB list         */
 c107984:	e59f306c 	ldr	r3, [pc, #108]	; c1079f8 <OSTaskDel+0x3d8>
 c107988:	e5932000 	ldr	r2, [r3]
 c10798c:	e51b3010 	ldr	r3, [fp, #-16]
 c107990:	e5832014 	str	r2, [r3, #20]
    OSTCBFreeList     = ptcb;
 c107994:	e59f305c 	ldr	r3, [pc, #92]	; c1079f8 <OSTaskDel+0x3d8>
 c107998:	e51b2010 	ldr	r2, [fp, #-16]
 c10799c:	e5832000 	str	r2, [r3]
#if OS_TASK_NAME_SIZE > 1
    ptcb->OSTCBTaskName[0] = '?';                               /* Unknown name                        */
 c1079a0:	e51b3010 	ldr	r3, [fp, #-16]
 c1079a4:	e3a0203f 	mov	r2, #63	; 0x3f
 c1079a8:	e5c32048 	strb	r2, [r3, #72]	; 0x48
    ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
 c1079ac:	e51b3010 	ldr	r3, [fp, #-16]
 c1079b0:	e3a02000 	mov	r2, #0
 c1079b4:	e5c32049 	strb	r2, [r3, #73]	; 0x49
#endif
    OS_EXIT_CRITICAL();
 c1079b8:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 c1079bc:	e121f000 	msr	CPSR_c, r0
    OS_Sched();                                                 /* Find new highest priority task      */
 c1079c0:	ebffe747 	bl	c1016e4 <OS_Sched>
    return (OS_NO_ERR);
 c1079c4:	e3a03000 	mov	r3, #0
}
 c1079c8:	e1a00003 	mov	r0, r3
 c1079cc:	e24bd00c 	sub	sp, fp, #12
 c1079d0:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1079d4:	e12fff1e 	bx	lr
 c1079d8:	0c119ca8 	.word	0x0c119ca8
 c1079dc:	0c119cac 	.word	0x0c119cac
 c1079e0:	0c11af8c 	.word	0x0c11af8c
 c1079e4:	0c119c9c 	.word	0x0c119c9c
 c1079e8:	0c119c98 	.word	0x0c119c98
 c1079ec:	0c119224 	.word	0x0c119224
 c1079f0:	0c119c29 	.word	0x0c119c29
 c1079f4:	0c119310 	.word	0x0c119310
 c1079f8:	0c119c24 	.word	0x0c119c24

0c1079fc <OSTaskDelReq>:
*********************************************************************************************************
*/
/*$PAGE*/
#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDelReq (INT8U prio)
{
 c1079fc:	e1a0c00d 	mov	ip, sp
 c107a00:	e92dd800 	push	{fp, ip, lr, pc}
 c107a04:	e24cb004 	sub	fp, ip, #4
 c107a08:	e24dd010 	sub	sp, sp, #16
 c107a0c:	e1a03000 	mov	r3, r0
 c107a10:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb


    cpu_sr = 0;                                                 /* Prevent compiler warning            */
#endif    
#if OS_ARG_CHK_EN > 0
    if (prio == OS_IDLE_PRIO) {                                 /* Not allowed to delete idle task     */
 c107a14:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
 c107a18:	e353003f 	cmp	r3, #63	; 0x3f
 c107a1c:	1a000001 	bne	c107a28 <OSTaskDelReq+0x2c>
        return (OS_TASK_DEL_IDLE);
 c107a20:	e3a0303d 	mov	r3, #61	; 0x3d
 c107a24:	ea000032 	b	c107af4 <OSTaskDelReq+0xf8>
    }
    if (prio >= OS_LOWEST_PRIO) {						        /* Task priority valid ?               */
 c107a28:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
 c107a2c:	e353003e 	cmp	r3, #62	; 0x3e
 c107a30:	9a000004 	bls	c107a48 <OSTaskDelReq+0x4c>
        if (prio != OS_PRIO_SELF) {                       
 c107a34:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
 c107a38:	e35300ff 	cmp	r3, #255	; 0xff
 c107a3c:	0a000001 	beq	c107a48 <OSTaskDelReq+0x4c>
            return (OS_PRIO_INVALID);
 c107a40:	e3a0302a 	mov	r3, #42	; 0x2a
 c107a44:	ea00002a 	b	c107af4 <OSTaskDelReq+0xf8>
		}
    }
#endif
    if (prio == OS_PRIO_SELF) {                                 /* See if a task is requesting to ...  */
 c107a48:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
 c107a4c:	e35300ff 	cmp	r3, #255	; 0xff
 c107a50:	1a00000b 	bne	c107a84 <OSTaskDelReq+0x88>
        OS_ENTER_CRITICAL();                                    /* ... this task to delete itself      */
 c107a54:	e10f0000 	mrs	r0, CPSR
 c107a58:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
 c107a5c:	e38000c0 	orr	r0, r0, #192	; 0xc0
 c107a60:	e121f000 	msr	CPSR_c, r0
        stat = OSTCBCur->OSTCBDelReq;                           /* Return request status to caller     */
 c107a64:	e59f3098 	ldr	r3, [pc, #152]	; c107b04 <OSTaskDelReq+0x108>
 c107a68:	e5933000 	ldr	r3, [r3]
 c107a6c:	e5d33033 	ldrb	r3, [r3, #51]	; 0x33
 c107a70:	e54b300d 	strb	r3, [fp, #-13]
        OS_EXIT_CRITICAL();
 c107a74:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 c107a78:	e121f000 	msr	CPSR_c, r0
        return (stat);
 c107a7c:	e55b300d 	ldrb	r3, [fp, #-13]
 c107a80:	ea00001b 	b	c107af4 <OSTaskDelReq+0xf8>
    }
    OS_ENTER_CRITICAL();
 c107a84:	e10f0000 	mrs	r0, CPSR
 c107a88:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
 c107a8c:	e38000c0 	orr	r0, r0, #192	; 0xc0
 c107a90:	e121f000 	msr	CPSR_c, r0
    ptcb = OSTCBPrioTbl[prio];
 c107a94:	e55b2015 	ldrb	r2, [fp, #-21]	; 0xffffffeb
 c107a98:	e59f3068 	ldr	r3, [pc, #104]	; c107b08 <OSTaskDelReq+0x10c>
 c107a9c:	e7933102 	ldr	r3, [r3, r2, lsl #2]
 c107aa0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    if (ptcb == (OS_TCB *)0) {                                  /* Task to delete must exist           */
 c107aa4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c107aa8:	e3530000 	cmp	r3, #0
 c107aac:	1a000003 	bne	c107ac0 <OSTaskDelReq+0xc4>
        OS_EXIT_CRITICAL();
 c107ab0:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 c107ab4:	e121f000 	msr	CPSR_c, r0
        return (OS_TASK_NOT_EXIST);                             /* Task must already be deleted        */
 c107ab8:	e3a0300b 	mov	r3, #11
 c107abc:	ea00000c 	b	c107af4 <OSTaskDelReq+0xf8>
    }
    if (ptcb == (OS_TCB *)1) {                                  /* Must NOT be assigned to a Mutex     */
 c107ac0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c107ac4:	e3530001 	cmp	r3, #1
 c107ac8:	1a000003 	bne	c107adc <OSTaskDelReq+0xe0>
        OS_EXIT_CRITICAL();
 c107acc:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 c107ad0:	e121f000 	msr	CPSR_c, r0
        return (OS_TASK_DEL_ERR);
 c107ad4:	e3a0303c 	mov	r3, #60	; 0x3c
 c107ad8:	ea000005 	b	c107af4 <OSTaskDelReq+0xf8>
    }
    ptcb->OSTCBDelReq = OS_TASK_DEL_REQ;                        /* Set flag indicating task to be DEL. */
 c107adc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c107ae0:	e3a0203e 	mov	r2, #62	; 0x3e
 c107ae4:	e5c32033 	strb	r2, [r3, #51]	; 0x33
    OS_EXIT_CRITICAL();
 c107ae8:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 c107aec:	e121f000 	msr	CPSR_c, r0
    return (OS_NO_ERR);
 c107af0:	e3a03000 	mov	r3, #0
}
 c107af4:	e1a00003 	mov	r0, r3
 c107af8:	e24bd00c 	sub	sp, fp, #12
 c107afc:	e89d6800 	ldm	sp, {fp, sp, lr}
 c107b00:	e12fff1e 	bx	lr
 c107b04:	0c119cac 	.word	0x0c119cac
 c107b08:	0c11af8c 	.word	0x0c11af8c

0c107b0c <OSTaskNameGet>:
*********************************************************************************************************
*/

#if OS_TASK_NAME_SIZE > 1
INT8U  OSTaskNameGet (INT8U prio, char *pname, INT8U *err)
{
 c107b0c:	e1a0c00d 	mov	ip, sp
 c107b10:	e92dd800 	push	{fp, ip, lr, pc}
 c107b14:	e24cb004 	sub	fp, ip, #4
 c107b18:	e24dd018 	sub	sp, sp, #24
 c107b1c:	e1a03000 	mov	r3, r0
 c107b20:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
 c107b24:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
 c107b28:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb


    cpu_sr = 0;                                          /* Prevent compiler warning                   */
#endif    
#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                         /* Task priority valid ?                      */
 c107b2c:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
 c107b30:	e353003f 	cmp	r3, #63	; 0x3f
 c107b34:	9a000007 	bls	c107b58 <OSTaskNameGet+0x4c>
        if (prio != OS_PRIO_SELF) { 
 c107b38:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
 c107b3c:	e35300ff 	cmp	r3, #255	; 0xff
 c107b40:	0a000004 	beq	c107b58 <OSTaskNameGet+0x4c>
            *err = OS_PRIO_INVALID;                      /* No                                         */
 c107b44:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c107b48:	e3a0202a 	mov	r2, #42	; 0x2a
 c107b4c:	e5c32000 	strb	r2, [r3]
            return (0);
 c107b50:	e3a03000 	mov	r3, #0
 c107b54:	ea000037 	b	c107c38 <OSTaskNameGet+0x12c>
        }
    }
    if (pname == (char *)0) {                             /* Is 'pname' a NULL pointer?                */
 c107b58:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 c107b5c:	e3530000 	cmp	r3, #0
 c107b60:	1a000004 	bne	c107b78 <OSTaskNameGet+0x6c>
        *err = OS_ERR_PNAME_NULL;						  /* Yes                                       */
 c107b64:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c107b68:	e3a0200f 	mov	r2, #15
 c107b6c:	e5c32000 	strb	r2, [r3]
        return (0);
 c107b70:	e3a03000 	mov	r3, #0
 c107b74:	ea00002f 	b	c107c38 <OSTaskNameGet+0x12c>
    }
#endif
    OS_ENTER_CRITICAL();
 c107b78:	e10f0000 	mrs	r0, CPSR
 c107b7c:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
 c107b80:	e38000c0 	orr	r0, r0, #192	; 0xc0
 c107b84:	e121f000 	msr	CPSR_c, r0
    if (prio == OS_PRIO_SELF) {                           /* See if caller desires it's own name       */
 c107b88:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
 c107b8c:	e35300ff 	cmp	r3, #255	; 0xff
 c107b90:	1a000003 	bne	c107ba4 <OSTaskNameGet+0x98>
        prio = OSTCBCur->OSTCBPrio;
 c107b94:	e59f30ac 	ldr	r3, [pc, #172]	; c107c48 <OSTaskNameGet+0x13c>
 c107b98:	e5933000 	ldr	r3, [r3]
 c107b9c:	e5d3302e 	ldrb	r3, [r3, #46]	; 0x2e
 c107ba0:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
    }
    ptcb = OSTCBPrioTbl[prio];
 c107ba4:	e55b2015 	ldrb	r2, [fp, #-21]	; 0xffffffeb
 c107ba8:	e59f309c 	ldr	r3, [pc, #156]	; c107c4c <OSTaskNameGet+0x140>
 c107bac:	e7933102 	ldr	r3, [r3, r2, lsl #2]
 c107bb0:	e50b3010 	str	r3, [fp, #-16]
    if (ptcb == (OS_TCB *)0) {                            /* Does task exist?                          */
 c107bb4:	e51b3010 	ldr	r3, [fp, #-16]
 c107bb8:	e3530000 	cmp	r3, #0
 c107bbc:	1a000006 	bne	c107bdc <OSTaskNameGet+0xd0>
        OS_EXIT_CRITICAL();                               /* No                                        */
 c107bc0:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 c107bc4:	e121f000 	msr	CPSR_c, r0
        *err = OS_TASK_NOT_EXIST;
 c107bc8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c107bcc:	e3a0200b 	mov	r2, #11
 c107bd0:	e5c32000 	strb	r2, [r3]
        return (0);
 c107bd4:	e3a03000 	mov	r3, #0
 c107bd8:	ea000016 	b	c107c38 <OSTaskNameGet+0x12c>
    }
    if (ptcb == (OS_TCB *)1) {                            /* Task assigned to a Mutex?                 */
 c107bdc:	e51b3010 	ldr	r3, [fp, #-16]
 c107be0:	e3530001 	cmp	r3, #1
 c107be4:	1a000006 	bne	c107c04 <OSTaskNameGet+0xf8>
        OS_EXIT_CRITICAL();                               /* Yes                                       */
 c107be8:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 c107bec:	e121f000 	msr	CPSR_c, r0
        *err = OS_TASK_NOT_EXIST;
 c107bf0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c107bf4:	e3a0200b 	mov	r2, #11
 c107bf8:	e5c32000 	strb	r2, [r3]
        return (0);
 c107bfc:	e3a03000 	mov	r3, #0
 c107c00:	ea00000c 	b	c107c38 <OSTaskNameGet+0x12c>
    }
    len  = OS_StrCopy(pname, ptcb->OSTCBTaskName);        /* Yes, copy name from TCB                   */
 c107c04:	e51b3010 	ldr	r3, [fp, #-16]
 c107c08:	e2833048 	add	r3, r3, #72	; 0x48
 c107c0c:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
 c107c10:	e1a01003 	mov	r1, r3
 c107c14:	ebffe6fa 	bl	c101804 <OS_StrCopy>
 c107c18:	e1a03000 	mov	r3, r0
 c107c1c:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
    OS_EXIT_CRITICAL();
 c107c20:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 c107c24:	e121f000 	msr	CPSR_c, r0
    *err = OS_NO_ERR;
 c107c28:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c107c2c:	e3a02000 	mov	r2, #0
 c107c30:	e5c32000 	strb	r2, [r3]
    return (len);
 c107c34:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
}
 c107c38:	e1a00003 	mov	r0, r3
 c107c3c:	e24bd00c 	sub	sp, fp, #12
 c107c40:	e89d6800 	ldm	sp, {fp, sp, lr}
 c107c44:	e12fff1e 	bx	lr
 c107c48:	0c119cac 	.word	0x0c119cac
 c107c4c:	0c11af8c 	.word	0x0c11af8c

0c107c50 <OSTaskNameSet>:
* Returns    : None
*********************************************************************************************************
*/
#if OS_TASK_NAME_SIZE > 1
void  OSTaskNameSet (INT8U prio, char *pname, INT8U *err)
{
 c107c50:	e1a0c00d 	mov	ip, sp
 c107c54:	e92dd800 	push	{fp, ip, lr, pc}
 c107c58:	e24cb004 	sub	fp, ip, #4
 c107c5c:	e24dd018 	sub	sp, sp, #24
 c107c60:	e1a03000 	mov	r3, r0
 c107c64:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
 c107c68:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
 c107c6c:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb


    cpu_sr = 0;                                      /* Prevent compiler warning                       */
#endif    
#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                     /* Task priority valid ?                          */
 c107c70:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
 c107c74:	e353003f 	cmp	r3, #63	; 0x3f
 c107c78:	9a000006 	bls	c107c98 <OSTaskNameSet+0x48>
        if (prio != OS_PRIO_SELF) {              
 c107c7c:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
 c107c80:	e35300ff 	cmp	r3, #255	; 0xff
 c107c84:	0a000003 	beq	c107c98 <OSTaskNameSet+0x48>
            *err = OS_PRIO_INVALID;                  /* No                                             */
 c107c88:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c107c8c:	e3a0202a 	mov	r2, #42	; 0x2a
 c107c90:	e5c32000 	strb	r2, [r3]
            return;
 c107c94:	ea00003e 	b	c107d94 <OSTaskNameSet+0x144>
        }
    }
    if (pname == (char *)0) {                        /* Is 'pname' a NULL pointer?                     */
 c107c98:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 c107c9c:	e3530000 	cmp	r3, #0
 c107ca0:	1a000003 	bne	c107cb4 <OSTaskNameSet+0x64>
        *err = OS_ERR_PNAME_NULL;					 /* Yes                                            */
 c107ca4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c107ca8:	e3a0200f 	mov	r2, #15
 c107cac:	e5c32000 	strb	r2, [r3]
        return;
 c107cb0:	ea000037 	b	c107d94 <OSTaskNameSet+0x144>
    }
#endif
    OS_ENTER_CRITICAL();
 c107cb4:	e10f0000 	mrs	r0, CPSR
 c107cb8:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
 c107cbc:	e38000c0 	orr	r0, r0, #192	; 0xc0
 c107cc0:	e121f000 	msr	CPSR_c, r0
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
 c107cc4:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
 c107cc8:	e35300ff 	cmp	r3, #255	; 0xff
 c107ccc:	1a000003 	bne	c107ce0 <OSTaskNameSet+0x90>
        prio = OSTCBCur->OSTCBPrio;
 c107cd0:	e59f30c8 	ldr	r3, [pc, #200]	; c107da0 <OSTaskNameSet+0x150>
 c107cd4:	e5933000 	ldr	r3, [r3]
 c107cd8:	e5d3302e 	ldrb	r3, [r3, #46]	; 0x2e
 c107cdc:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
    }
    ptcb = OSTCBPrioTbl[prio];
 c107ce0:	e55b2015 	ldrb	r2, [fp, #-21]	; 0xffffffeb
 c107ce4:	e59f30b8 	ldr	r3, [pc, #184]	; c107da4 <OSTaskNameSet+0x154>
 c107ce8:	e7933102 	ldr	r3, [r3, r2, lsl #2]
 c107cec:	e50b3010 	str	r3, [fp, #-16]
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
 c107cf0:	e51b3010 	ldr	r3, [fp, #-16]
 c107cf4:	e3530000 	cmp	r3, #0
 c107cf8:	1a000005 	bne	c107d14 <OSTaskNameSet+0xc4>
        OS_EXIT_CRITICAL();                          /* No                                             */
 c107cfc:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 c107d00:	e121f000 	msr	CPSR_c, r0
        *err = OS_TASK_NOT_EXIST;
 c107d04:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c107d08:	e3a0200b 	mov	r2, #11
 c107d0c:	e5c32000 	strb	r2, [r3]
        return;
 c107d10:	ea00001f 	b	c107d94 <OSTaskNameSet+0x144>
    }
    if (ptcb == (OS_TCB *)1) {                       /* Task assigned to a Mutex?                      */
 c107d14:	e51b3010 	ldr	r3, [fp, #-16]
 c107d18:	e3530001 	cmp	r3, #1
 c107d1c:	1a000005 	bne	c107d38 <OSTaskNameSet+0xe8>
        OS_EXIT_CRITICAL();                          /* Yes                                            */
 c107d20:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 c107d24:	e121f000 	msr	CPSR_c, r0
        *err = OS_TASK_NOT_EXIST;
 c107d28:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c107d2c:	e3a0200b 	mov	r2, #11
 c107d30:	e5c32000 	strb	r2, [r3]
        return;
 c107d34:	ea000016 	b	c107d94 <OSTaskNameSet+0x144>
    }
    len = OS_StrLen(pname);                          /* Yes, Can we fit the string in the TCB?         */
 c107d38:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
 c107d3c:	ebffe6d2 	bl	c10188c <OS_StrLen>
 c107d40:	e1a03000 	mov	r3, r0
 c107d44:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
    if (len > (OS_TASK_NAME_SIZE - 1)) {             /*      No                                        */
 c107d48:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c107d4c:	e353001f 	cmp	r3, #31
 c107d50:	9a000005 	bls	c107d6c <OSTaskNameSet+0x11c>
        OS_EXIT_CRITICAL();
 c107d54:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 c107d58:	e121f000 	msr	CPSR_c, r0
        *err = OS_ERR_TASK_NAME_TOO_LONG;
 c107d5c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c107d60:	e3a0200e 	mov	r2, #14
 c107d64:	e5c32000 	strb	r2, [r3]
        return;
 c107d68:	ea000009 	b	c107d94 <OSTaskNameSet+0x144>
    } 
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
 c107d6c:	e51b3010 	ldr	r3, [fp, #-16]
 c107d70:	e2833048 	add	r3, r3, #72	; 0x48
 c107d74:	e1a00003 	mov	r0, r3
 c107d78:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
 c107d7c:	ebffe6a0 	bl	c101804 <OS_StrCopy>
    OS_EXIT_CRITICAL();
 c107d80:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 c107d84:	e121f000 	msr	CPSR_c, r0
    *err = OS_NO_ERR;
 c107d88:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c107d8c:	e3a02000 	mov	r2, #0
 c107d90:	e5c32000 	strb	r2, [r3]
}
 c107d94:	e24bd00c 	sub	sp, fp, #12
 c107d98:	e89d6800 	ldm	sp, {fp, sp, lr}
 c107d9c:	e12fff1e 	bx	lr
 c107da0:	0c119cac 	.word	0x0c119cac
 c107da4:	0c11af8c 	.word	0x0c11af8c

0c107da8 <OSTaskResume>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskResume (INT8U prio)
{
 c107da8:	e1a0c00d 	mov	ip, sp
 c107dac:	e92dd800 	push	{fp, ip, lr, pc}
 c107db0:	e24cb004 	sub	fp, ip, #4
 c107db4:	e24dd010 	sub	sp, sp, #16
 c107db8:	e1a03000 	mov	r3, r0
 c107dbc:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb


    cpu_sr = 0;                                               /* Prevent compiler warning              */
#endif    
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
 c107dc0:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
 c107dc4:	e353003e 	cmp	r3, #62	; 0x3e
 c107dc8:	9a000001 	bls	c107dd4 <OSTaskResume+0x2c>
        return (OS_PRIO_INVALID);
 c107dcc:	e3a0302a 	mov	r3, #42	; 0x2a
 c107dd0:	ea00004a 	b	c107f00 <OSTaskResume+0x158>
    }
#endif
    OS_ENTER_CRITICAL();
 c107dd4:	e10f0000 	mrs	r0, CPSR
 c107dd8:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
 c107ddc:	e38000c0 	orr	r0, r0, #192	; 0xc0
 c107de0:	e121f000 	msr	CPSR_c, r0
    ptcb = OSTCBPrioTbl[prio];
 c107de4:	e55b2015 	ldrb	r2, [fp, #-21]	; 0xffffffeb
 c107de8:	e59f3120 	ldr	r3, [pc, #288]	; c107f10 <OSTaskResume+0x168>
 c107dec:	e7933102 	ldr	r3, [r3, r2, lsl #2]
 c107df0:	e50b3010 	str	r3, [fp, #-16]
    if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
 c107df4:	e51b3010 	ldr	r3, [fp, #-16]
 c107df8:	e3530000 	cmp	r3, #0
 c107dfc:	1a000003 	bne	c107e10 <OSTaskResume+0x68>
        OS_EXIT_CRITICAL();
 c107e00:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 c107e04:	e121f000 	msr	CPSR_c, r0
        return (OS_TASK_RESUME_PRIO);
 c107e08:	e3a03064 	mov	r3, #100	; 0x64
 c107e0c:	ea00003b 	b	c107f00 <OSTaskResume+0x158>
    }
    if (ptcb == (OS_TCB *)1) {                                /* See if assigned to Mutex              */
 c107e10:	e51b3010 	ldr	r3, [fp, #-16]
 c107e14:	e3530001 	cmp	r3, #1
 c107e18:	1a000003 	bne	c107e2c <OSTaskResume+0x84>
        OS_EXIT_CRITICAL();
 c107e1c:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 c107e20:	e121f000 	msr	CPSR_c, r0
        return (OS_TASK_NOT_EXIST);
 c107e24:	e3a0300b 	mov	r3, #11
 c107e28:	ea000034 	b	c107f00 <OSTaskResume+0x158>
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
 c107e2c:	e51b3010 	ldr	r3, [fp, #-16]
 c107e30:	e5d3302c 	ldrb	r3, [r3, #44]	; 0x2c
 c107e34:	e2033008 	and	r3, r3, #8
 c107e38:	e3530000 	cmp	r3, #0
 c107e3c:	0a00002c 	beq	c107ef4 <OSTaskResume+0x14c>
        ptcb->OSTCBStat &= ~OS_STAT_SUSPEND;				  /* Remove suspension                     */
 c107e40:	e51b3010 	ldr	r3, [fp, #-16]
 c107e44:	e5d3302c 	ldrb	r3, [r3, #44]	; 0x2c
 c107e48:	e3c33008 	bic	r3, r3, #8
 c107e4c:	e20320ff 	and	r2, r3, #255	; 0xff
 c107e50:	e51b3010 	ldr	r3, [fp, #-16]
 c107e54:	e5c3202c 	strb	r2, [r3, #44]	; 0x2c
        if (ptcb->OSTCBStat == OS_STAT_RDY) {                 /* See if task is now ready              */
 c107e58:	e51b3010 	ldr	r3, [fp, #-16]
 c107e5c:	e5d3302c 	ldrb	r3, [r3, #44]	; 0x2c
 c107e60:	e3530000 	cmp	r3, #0
 c107e64:	1a00001e 	bne	c107ee4 <OSTaskResume+0x13c>
            if (ptcb->OSTCBDly == 0) {
 c107e68:	e51b3010 	ldr	r3, [fp, #-16]
 c107e6c:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
 c107e70:	e3530000 	cmp	r3, #0
 c107e74:	1a000017 	bne	c107ed8 <OSTaskResume+0x130>
                OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
 c107e78:	e51b3010 	ldr	r3, [fp, #-16]
 c107e7c:	e5d32032 	ldrb	r2, [r3, #50]	; 0x32
 c107e80:	e59f308c 	ldr	r3, [pc, #140]	; c107f14 <OSTaskResume+0x16c>
 c107e84:	e5d33000 	ldrb	r3, [r3]
 c107e88:	e1823003 	orr	r3, r2, r3
 c107e8c:	e20320ff 	and	r2, r3, #255	; 0xff
 c107e90:	e59f307c 	ldr	r3, [pc, #124]	; c107f14 <OSTaskResume+0x16c>
 c107e94:	e5c32000 	strb	r2, [r3]
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 c107e98:	e51b3010 	ldr	r3, [fp, #-16]
 c107e9c:	e5d33030 	ldrb	r3, [r3, #48]	; 0x30
 c107ea0:	e51b2010 	ldr	r2, [fp, #-16]
 c107ea4:	e5d22030 	ldrb	r2, [r2, #48]	; 0x30
 c107ea8:	e59f1068 	ldr	r1, [pc, #104]	; c107f18 <OSTaskResume+0x170>
 c107eac:	e7d11002 	ldrb	r1, [r1, r2]
 c107eb0:	e51b2010 	ldr	r2, [fp, #-16]
 c107eb4:	e5d22031 	ldrb	r2, [r2, #49]	; 0x31
 c107eb8:	e1812002 	orr	r2, r1, r2
 c107ebc:	e20210ff 	and	r1, r2, #255	; 0xff
 c107ec0:	e59f2050 	ldr	r2, [pc, #80]	; c107f18 <OSTaskResume+0x170>
 c107ec4:	e7c21003 	strb	r1, [r2, r3]
                OS_EXIT_CRITICAL();
 c107ec8:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 c107ecc:	e121f000 	msr	CPSR_c, r0
                OS_Sched();
 c107ed0:	ebffe603 	bl	c1016e4 <OS_Sched>
 c107ed4:	ea000004 	b	c107eec <OSTaskResume+0x144>
            } else {
                OS_EXIT_CRITICAL();
 c107ed8:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 c107edc:	e121f000 	msr	CPSR_c, r0
 c107ee0:	ea000001 	b	c107eec <OSTaskResume+0x144>
            }
        } else {                                              /* Must be pending on event              */
		    OS_EXIT_CRITICAL();
 c107ee4:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 c107ee8:	e121f000 	msr	CPSR_c, r0
        }
        return (OS_NO_ERR);
 c107eec:	e3a03000 	mov	r3, #0
 c107ef0:	ea000002 	b	c107f00 <OSTaskResume+0x158>
    }
    OS_EXIT_CRITICAL();
 c107ef4:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 c107ef8:	e121f000 	msr	CPSR_c, r0
    return (OS_TASK_NOT_SUSPENDED);
 c107efc:	e3a03065 	mov	r3, #101	; 0x65
}
 c107f00:	e1a00003 	mov	r0, r3
 c107f04:	e24bd00c 	sub	sp, fp, #12
 c107f08:	e89d6800 	ldm	sp, {fp, sp, lr}
 c107f0c:	e12fff1e 	bx	lr
 c107f10:	0c11af8c 	.word	0x0c11af8c
 c107f14:	0c119c98 	.word	0x0c119c98
 c107f18:	0c119c9c 	.word	0x0c119c9c

0c107f1c <OSTaskStkChk>:
*              OS_TASK_OPT_ERR     if you did NOT specified OS_TASK_OPT_STK_CHK when the task was created
*********************************************************************************************************
*/
#if OS_TASK_CREATE_EXT_EN > 0
INT8U  OSTaskStkChk (INT8U prio, OS_STK_DATA *p_stk_data)
{
 c107f1c:	e1a0c00d 	mov	ip, sp
 c107f20:	e92dd800 	push	{fp, ip, lr, pc}
 c107f24:	e24cb004 	sub	fp, ip, #4
 c107f28:	e24dd018 	sub	sp, sp, #24
 c107f2c:	e1a03000 	mov	r3, r0
 c107f30:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
 c107f34:	e54b301d 	strb	r3, [fp, #-29]	; 0xffffffe3


    cpu_sr = 0;                                        /* Prevent compiler warning                     */
#endif    
#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {					   /* Make sure task priority is valid             */
 c107f38:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
 c107f3c:	e353003f 	cmp	r3, #63	; 0x3f
 c107f40:	9a000004 	bls	c107f58 <OSTaskStkChk+0x3c>
        if (prio != OS_PRIO_SELF) {        
 c107f44:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
 c107f48:	e35300ff 	cmp	r3, #255	; 0xff
 c107f4c:	0a000001 	beq	c107f58 <OSTaskStkChk+0x3c>
            return (OS_PRIO_INVALID);
 c107f50:	e3a0302a 	mov	r3, #42	; 0x2a
 c107f54:	ea00004f 	b	c108098 <OSTaskStkChk+0x17c>
        }
    }
#endif
    p_stk_data->OSFree = 0;                            /* Assume failure, set to 0 size                */
 c107f58:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
 c107f5c:	e3a02000 	mov	r2, #0
 c107f60:	e5832000 	str	r2, [r3]
    p_stk_data->OSUsed = 0;
 c107f64:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
 c107f68:	e3a02000 	mov	r2, #0
 c107f6c:	e5832004 	str	r2, [r3, #4]
    OS_ENTER_CRITICAL();
 c107f70:	e10f0000 	mrs	r0, CPSR
 c107f74:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
 c107f78:	e38000c0 	orr	r0, r0, #192	; 0xc0
 c107f7c:	e121f000 	msr	CPSR_c, r0
    if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
 c107f80:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
 c107f84:	e35300ff 	cmp	r3, #255	; 0xff
 c107f88:	1a000003 	bne	c107f9c <OSTaskStkChk+0x80>
        prio = OSTCBCur->OSTCBPrio;
 c107f8c:	e59f3114 	ldr	r3, [pc, #276]	; c1080a8 <OSTaskStkChk+0x18c>
 c107f90:	e5933000 	ldr	r3, [r3]
 c107f94:	e5d3302e 	ldrb	r3, [r3, #46]	; 0x2e
 c107f98:	e54b301d 	strb	r3, [fp, #-29]	; 0xffffffe3
    }
    ptcb = OSTCBPrioTbl[prio];
 c107f9c:	e55b201d 	ldrb	r2, [fp, #-29]	; 0xffffffe3
 c107fa0:	e59f3104 	ldr	r3, [pc, #260]	; c1080ac <OSTaskStkChk+0x190>
 c107fa4:	e7933102 	ldr	r3, [r3, r2, lsl #2]
 c107fa8:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
 c107fac:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c107fb0:	e3530000 	cmp	r3, #0
 c107fb4:	1a000003 	bne	c107fc8 <OSTaskStkChk+0xac>
        OS_EXIT_CRITICAL();
 c107fb8:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 c107fbc:	e121f000 	msr	CPSR_c, r0
        return (OS_TASK_NOT_EXIST);
 c107fc0:	e3a0300b 	mov	r3, #11
 c107fc4:	ea000033 	b	c108098 <OSTaskStkChk+0x17c>
    }
    if (ptcb == (OS_TCB *)1) {
 c107fc8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c107fcc:	e3530001 	cmp	r3, #1
 c107fd0:	1a000003 	bne	c107fe4 <OSTaskStkChk+0xc8>
        OS_EXIT_CRITICAL();
 c107fd4:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 c107fd8:	e121f000 	msr	CPSR_c, r0
        return (OS_TASK_NOT_EXIST);
 c107fdc:	e3a0300b 	mov	r3, #11
 c107fe0:	ea00002c 	b	c108098 <OSTaskStkChk+0x17c>
    }  
    if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0) { /* Make sure stack checking option is set       */
 c107fe4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c107fe8:	e1d331b0 	ldrh	r3, [r3, #16]
 c107fec:	e2033001 	and	r3, r3, #1
 c107ff0:	e3530000 	cmp	r3, #0
 c107ff4:	1a000003 	bne	c108008 <OSTaskStkChk+0xec>
        OS_EXIT_CRITICAL();
 c107ff8:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 c107ffc:	e121f000 	msr	CPSR_c, r0
        return (OS_TASK_OPT_ERR);
 c108000:	e3a03082 	mov	r3, #130	; 0x82
 c108004:	ea000023 	b	c108098 <OSTaskStkChk+0x17c>
    }
    free = 0;
 c108008:	e3a03000 	mov	r3, #0
 c10800c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    size = ptcb->OSTCBStkSize;
 c108010:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c108014:	e593300c 	ldr	r3, [r3, #12]
 c108018:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    pchk = ptcb->OSTCBStkBottom;
 c10801c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c108020:	e5933008 	ldr	r3, [r3, #8]
 c108024:	e50b3010 	str	r3, [fp, #-16]
    OS_EXIT_CRITICAL();
 c108028:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 c10802c:	e121f000 	msr	CPSR_c, r0
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
 c108030:	ea000002 	b	c108040 <OSTaskStkChk+0x124>
        free++;
 c108034:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c108038:	e2833001 	add	r3, r3, #1
 c10803c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    free = 0;
    size = ptcb->OSTCBStkSize;
    pchk = ptcb->OSTCBStkBottom;
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
 c108040:	e51b3010 	ldr	r3, [fp, #-16]
 c108044:	e5933000 	ldr	r3, [r3]
 c108048:	e3530000 	cmp	r3, #0
 c10804c:	13a03000 	movne	r3, #0
 c108050:	03a03001 	moveq	r3, #1
 c108054:	e20330ff 	and	r3, r3, #255	; 0xff
 c108058:	e51b2010 	ldr	r2, [fp, #-16]
 c10805c:	e2822004 	add	r2, r2, #4
 c108060:	e50b2010 	str	r2, [fp, #-16]
 c108064:	e3530000 	cmp	r3, #0
 c108068:	1afffff1 	bne	c108034 <OSTaskStkChk+0x118>
#else
    while (*pchk-- == (OS_STK)0) {
        free++;
    }
#endif
    p_stk_data->OSFree = free * sizeof(OS_STK);           /* Compute number of free bytes on the stack */
 c10806c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c108070:	e1a02103 	lsl	r2, r3, #2
 c108074:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
 c108078:	e5832000 	str	r2, [r3]
    p_stk_data->OSUsed = (size - free) * sizeof(OS_STK);  /* Compute number of bytes used on the stack */
 c10807c:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
 c108080:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c108084:	e0633002 	rsb	r3, r3, r2
 c108088:	e1a02103 	lsl	r2, r3, #2
 c10808c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
 c108090:	e5832004 	str	r2, [r3, #4]
    return (OS_NO_ERR);
 c108094:	e3a03000 	mov	r3, #0
}
 c108098:	e1a00003 	mov	r0, r3
 c10809c:	e24bd00c 	sub	sp, fp, #12
 c1080a0:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1080a4:	e12fff1e 	bx	lr
 c1080a8:	0c119cac 	.word	0x0c119cac
 c1080ac:	0c11af8c 	.word	0x0c11af8c

0c1080b0 <OSTaskSuspend>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskSuspend (INT8U prio)
{
 c1080b0:	e1a0c00d 	mov	ip, sp
 c1080b4:	e92dd800 	push	{fp, ip, lr, pc}
 c1080b8:	e24cb004 	sub	fp, ip, #4
 c1080bc:	e24dd018 	sub	sp, sp, #24
 c1080c0:	e1a03000 	mov	r3, r0
 c1080c4:	e54b301d 	strb	r3, [fp, #-29]	; 0xffffffe3


    cpu_sr = 0;                                                 /* Prevent compiler warning            */
#endif    
#if OS_ARG_CHK_EN > 0
    if (prio == OS_IDLE_PRIO) {                                 /* Not allowed to suspend idle task    */
 c1080c8:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
 c1080cc:	e353003f 	cmp	r3, #63	; 0x3f
 c1080d0:	1a000001 	bne	c1080dc <OSTaskSuspend+0x2c>
        return (OS_TASK_SUSPEND_IDLE);
 c1080d4:	e3a0305b 	mov	r3, #91	; 0x5b
 c1080d8:	ea000063 	b	c10826c <OSTaskSuspend+0x1bc>
    }
    if (prio >= OS_LOWEST_PRIO) {								/* Task priority valid ?               */
 c1080dc:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
 c1080e0:	e353003e 	cmp	r3, #62	; 0x3e
 c1080e4:	9a000004 	bls	c1080fc <OSTaskSuspend+0x4c>
        if (prio != OS_PRIO_SELF) {
 c1080e8:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
 c1080ec:	e35300ff 	cmp	r3, #255	; 0xff
 c1080f0:	0a000001 	beq	c1080fc <OSTaskSuspend+0x4c>
            return (OS_PRIO_INVALID);
 c1080f4:	e3a0302a 	mov	r3, #42	; 0x2a
 c1080f8:	ea00005b 	b	c10826c <OSTaskSuspend+0x1bc>
        }
    }
#endif
    OS_ENTER_CRITICAL();
 c1080fc:	e10f0000 	mrs	r0, CPSR
 c108100:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
 c108104:	e38000c0 	orr	r0, r0, #192	; 0xc0
 c108108:	e121f000 	msr	CPSR_c, r0
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
 c10810c:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
 c108110:	e35300ff 	cmp	r3, #255	; 0xff
 c108114:	1a000006 	bne	c108134 <OSTaskSuspend+0x84>
        prio = OSTCBCur->OSTCBPrio;
 c108118:	e59f315c 	ldr	r3, [pc, #348]	; c10827c <OSTaskSuspend+0x1cc>
 c10811c:	e5933000 	ldr	r3, [r3]
 c108120:	e5d3302e 	ldrb	r3, [r3, #46]	; 0x2e
 c108124:	e54b301d 	strb	r3, [fp, #-29]	; 0xffffffe3
        self = TRUE;
 c108128:	e3a03001 	mov	r3, #1
 c10812c:	e54b300d 	strb	r3, [fp, #-13]
 c108130:	ea00000a 	b	c108160 <OSTaskSuspend+0xb0>
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
 c108134:	e59f3140 	ldr	r3, [pc, #320]	; c10827c <OSTaskSuspend+0x1cc>
 c108138:	e5933000 	ldr	r3, [r3]
 c10813c:	e5d3302e 	ldrb	r3, [r3, #46]	; 0x2e
 c108140:	e55b201d 	ldrb	r2, [fp, #-29]	; 0xffffffe3
 c108144:	e1520003 	cmp	r2, r3
 c108148:	1a000002 	bne	c108158 <OSTaskSuspend+0xa8>
        self = TRUE;
 c10814c:	e3a03001 	mov	r3, #1
 c108150:	e54b300d 	strb	r3, [fp, #-13]
 c108154:	ea000001 	b	c108160 <OSTaskSuspend+0xb0>
    } else {
        self = FALSE;                                           /* No suspending another task          */
 c108158:	e3a03000 	mov	r3, #0
 c10815c:	e54b300d 	strb	r3, [fp, #-13]
    }
    ptcb = OSTCBPrioTbl[prio];
 c108160:	e55b201d 	ldrb	r2, [fp, #-29]	; 0xffffffe3
 c108164:	e59f3114 	ldr	r3, [pc, #276]	; c108280 <OSTaskSuspend+0x1d0>
 c108168:	e7933102 	ldr	r3, [r3, r2, lsl #2]
 c10816c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
 c108170:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c108174:	e3530000 	cmp	r3, #0
 c108178:	1a000003 	bne	c10818c <OSTaskSuspend+0xdc>
        OS_EXIT_CRITICAL();
 c10817c:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 c108180:	e121f000 	msr	CPSR_c, r0
        return (OS_TASK_SUSPEND_PRIO);
 c108184:	e3a0305a 	mov	r3, #90	; 0x5a
 c108188:	ea000037 	b	c10826c <OSTaskSuspend+0x1bc>
    }
    if (ptcb == (OS_TCB *)1) {                                  /* See if assigned to Mutex            */
 c10818c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c108190:	e3530001 	cmp	r3, #1
 c108194:	1a000003 	bne	c1081a8 <OSTaskSuspend+0xf8>
        OS_EXIT_CRITICAL();
 c108198:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 c10819c:	e121f000 	msr	CPSR_c, r0
        return (OS_TASK_NOT_EXIST);
 c1081a0:	e3a0300b 	mov	r3, #11
 c1081a4:	ea000030 	b	c10826c <OSTaskSuspend+0x1bc>
    }
	y            = ptcb->OSTCBY;
 c1081a8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c1081ac:	e5d33030 	ldrb	r3, [r3, #48]	; 0x30
 c1081b0:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
	OSRdyTbl[y] &= ~ptcb->OSTCBBitX;							/* Make task not ready                 */
 c1081b4:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
 c1081b8:	e55b2015 	ldrb	r2, [fp, #-21]	; 0xffffffeb
 c1081bc:	e59f10c0 	ldr	r1, [pc, #192]	; c108284 <OSTaskSuspend+0x1d4>
 c1081c0:	e7d12002 	ldrb	r2, [r1, r2]
 c1081c4:	e20210ff 	and	r1, r2, #255	; 0xff
 c1081c8:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
 c1081cc:	e5d22031 	ldrb	r2, [r2, #49]	; 0x31
 c1081d0:	e20220ff 	and	r2, r2, #255	; 0xff
 c1081d4:	e1e02002 	mvn	r2, r2
 c1081d8:	e20220ff 	and	r2, r2, #255	; 0xff
 c1081dc:	e0012002 	and	r2, r1, r2
 c1081e0:	e20220ff 	and	r2, r2, #255	; 0xff
 c1081e4:	e20210ff 	and	r1, r2, #255	; 0xff
 c1081e8:	e59f2094 	ldr	r2, [pc, #148]	; c108284 <OSTaskSuspend+0x1d4>
 c1081ec:	e7c21003 	strb	r1, [r2, r3]
    if (OSRdyTbl[y] == 0x00) { 
 c1081f0:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
 c1081f4:	e59f2088 	ldr	r2, [pc, #136]	; c108284 <OSTaskSuspend+0x1d4>
 c1081f8:	e7d23003 	ldrb	r3, [r2, r3]
 c1081fc:	e3530000 	cmp	r3, #0
 c108200:	1a00000c 	bne	c108238 <OSTaskSuspend+0x188>
        OSRdyGrp &= ~ptcb->OSTCBBitY;
 c108204:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c108208:	e5d33032 	ldrb	r3, [r3, #50]	; 0x32
 c10820c:	e20330ff 	and	r3, r3, #255	; 0xff
 c108210:	e1e03003 	mvn	r3, r3
 c108214:	e20320ff 	and	r2, r3, #255	; 0xff
 c108218:	e59f3068 	ldr	r3, [pc, #104]	; c108288 <OSTaskSuspend+0x1d8>
 c10821c:	e5d33000 	ldrb	r3, [r3]
 c108220:	e20330ff 	and	r3, r3, #255	; 0xff
 c108224:	e0023003 	and	r3, r2, r3
 c108228:	e20330ff 	and	r3, r3, #255	; 0xff
 c10822c:	e20320ff 	and	r2, r3, #255	; 0xff
 c108230:	e59f3050 	ldr	r3, [pc, #80]	; c108288 <OSTaskSuspend+0x1d8>
 c108234:	e5c32000 	strb	r2, [r3]
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
 c108238:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c10823c:	e5d3302c 	ldrb	r3, [r3, #44]	; 0x2c
 c108240:	e3833008 	orr	r3, r3, #8
 c108244:	e20320ff 	and	r2, r3, #255	; 0xff
 c108248:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c10824c:	e5c3202c 	strb	r2, [r3, #44]	; 0x2c
    OS_EXIT_CRITICAL();
 c108250:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 c108254:	e121f000 	msr	CPSR_c, r0
    if (self == TRUE) {                                         /* Context switch only if SELF         */
 c108258:	e55b300d 	ldrb	r3, [fp, #-13]
 c10825c:	e3530001 	cmp	r3, #1
 c108260:	1a000000 	bne	c108268 <OSTaskSuspend+0x1b8>
        OS_Sched();
 c108264:	ebffe51e 	bl	c1016e4 <OS_Sched>
    }
    return (OS_NO_ERR);
 c108268:	e3a03000 	mov	r3, #0
}
 c10826c:	e1a00003 	mov	r0, r3
 c108270:	e24bd00c 	sub	sp, fp, #12
 c108274:	e89d6800 	ldm	sp, {fp, sp, lr}
 c108278:	e12fff1e 	bx	lr
 c10827c:	0c119cac 	.word	0x0c119cac
 c108280:	0c11af8c 	.word	0x0c11af8c
 c108284:	0c119c9c 	.word	0x0c119c9c
 c108288:	0c119c98 	.word	0x0c119c98

0c10828c <OSTaskQuery>:
*********************************************************************************************************
*/

#if OS_TASK_QUERY_EN > 0
INT8U  OSTaskQuery (INT8U prio, OS_TCB *p_task_data)
{
 c10828c:	e1a0c00d 	mov	ip, sp
 c108290:	e92dd800 	push	{fp, ip, lr, pc}
 c108294:	e24cb004 	sub	fp, ip, #4
 c108298:	e24dd010 	sub	sp, sp, #16
 c10829c:	e1a03000 	mov	r3, r0
 c1082a0:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
 c1082a4:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb


    cpu_sr = 0;                                  /* Prevent compiler warning                           */
#endif    
#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {				 /* Task priority valid ?    	                       */
 c1082a8:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
 c1082ac:	e353003f 	cmp	r3, #63	; 0x3f
 c1082b0:	9a000004 	bls	c1082c8 <OSTaskQuery+0x3c>
        if (prio != OS_PRIO_SELF) {   
 c1082b4:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
 c1082b8:	e35300ff 	cmp	r3, #255	; 0xff
 c1082bc:	0a000001 	beq	c1082c8 <OSTaskQuery+0x3c>
            return (OS_PRIO_INVALID);
 c1082c0:	e3a0302a 	mov	r3, #42	; 0x2a
 c1082c4:	ea000025 	b	c108360 <OSTaskQuery+0xd4>
        }
    }
#endif
    OS_ENTER_CRITICAL();
 c1082c8:	e10f0000 	mrs	r0, CPSR
 c1082cc:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
 c1082d0:	e38000c0 	orr	r0, r0, #192	; 0xc0
 c1082d4:	e121f000 	msr	CPSR_c, r0
    if (prio == OS_PRIO_SELF) {                  /* See if suspend SELF                                */
 c1082d8:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
 c1082dc:	e35300ff 	cmp	r3, #255	; 0xff
 c1082e0:	1a000003 	bne	c1082f4 <OSTaskQuery+0x68>
        prio = OSTCBCur->OSTCBPrio;
 c1082e4:	e59f3084 	ldr	r3, [pc, #132]	; c108370 <OSTaskQuery+0xe4>
 c1082e8:	e5933000 	ldr	r3, [r3]
 c1082ec:	e5d3302e 	ldrb	r3, [r3, #46]	; 0x2e
 c1082f0:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
    }
    ptcb = OSTCBPrioTbl[prio];
 c1082f4:	e55b2015 	ldrb	r2, [fp, #-21]	; 0xffffffeb
 c1082f8:	e59f3074 	ldr	r3, [pc, #116]	; c108374 <OSTaskQuery+0xe8>
 c1082fc:	e7933102 	ldr	r3, [r3, r2, lsl #2]
 c108300:	e50b3010 	str	r3, [fp, #-16]
    if (ptcb == (OS_TCB *)0) {                   /* Task to query must exist                           */
 c108304:	e51b3010 	ldr	r3, [fp, #-16]
 c108308:	e3530000 	cmp	r3, #0
 c10830c:	1a000003 	bne	c108320 <OSTaskQuery+0x94>
        OS_EXIT_CRITICAL();
 c108310:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 c108314:	e121f000 	msr	CPSR_c, r0
        return (OS_PRIO_ERR);
 c108318:	e3a03029 	mov	r3, #41	; 0x29
 c10831c:	ea00000f 	b	c108360 <OSTaskQuery+0xd4>
    }
    if (ptcb == (OS_TCB *)1) {                   /* Task to query must not be assigned to a Mutex      */
 c108320:	e51b3010 	ldr	r3, [fp, #-16]
 c108324:	e3530001 	cmp	r3, #1
 c108328:	1a000003 	bne	c10833c <OSTaskQuery+0xb0>
        OS_EXIT_CRITICAL();
 c10832c:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 c108330:	e121f000 	msr	CPSR_c, r0
        return (OS_TASK_NOT_EXIST);
 c108334:	e3a0300b 	mov	r3, #11
 c108338:	ea000008 	b	c108360 <OSTaskQuery+0xd4>
    }
                                                 /* Copy TCB into user storage area                    */
    OS_MemCopy((INT8U *)p_task_data, (INT8U *)ptcb, sizeof(OS_TCB));  
 c10833c:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
 c108340:	e51b3010 	ldr	r3, [fp, #-16]
 c108344:	e1a00002 	mov	r0, r2
 c108348:	e1a01003 	mov	r1, r3
 c10834c:	e3a02068 	mov	r2, #104	; 0x68
 c108350:	ebffe4c7 	bl	c101674 <OS_MemCopy>
    OS_EXIT_CRITICAL();
 c108354:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 c108358:	e121f000 	msr	CPSR_c, r0
    return (OS_NO_ERR);
 c10835c:	e3a03000 	mov	r3, #0
}
 c108360:	e1a00003 	mov	r0, r3
 c108364:	e24bd00c 	sub	sp, fp, #12
 c108368:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10836c:	e12fff1e 	bx	lr
 c108370:	0c119cac 	.word	0x0c119cac
 c108374:	0c11af8c 	.word	0x0c11af8c

0c108378 <OS_TaskStkClr>:
* Returns    : none
*********************************************************************************************************
*/
#if OS_TASK_CREATE_EXT_EN > 0
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
 c108378:	e1a0c00d 	mov	ip, sp
 c10837c:	e92dd800 	push	{fp, ip, lr, pc}
 c108380:	e24cb004 	sub	fp, ip, #4
 c108384:	e24dd010 	sub	sp, sp, #16
 c108388:	e50b0010 	str	r0, [fp, #-16]
 c10838c:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
 c108390:	e1a03002 	mov	r3, r2
 c108394:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
 c108398:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
 c10839c:	e2033001 	and	r3, r3, #1
 c1083a0:	e20330ff 	and	r3, r3, #255	; 0xff
 c1083a4:	e3530000 	cmp	r3, #0
 c1083a8:	0a000010 	beq	c1083f0 <OS_TaskStkClr+0x78>
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
 c1083ac:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
 c1083b0:	e2033002 	and	r3, r3, #2
 c1083b4:	e3530000 	cmp	r3, #0
 c1083b8:	0a00000c 	beq	c1083f0 <OS_TaskStkClr+0x78>
#if OS_STK_GROWTH == 1                     
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
 c1083bc:	ea000008 	b	c1083e4 <OS_TaskStkClr+0x6c>
                size--;
 c1083c0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c1083c4:	e2433001 	sub	r3, r3, #1
 c1083c8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
                *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
 c1083cc:	e51b3010 	ldr	r3, [fp, #-16]
 c1083d0:	e3a02000 	mov	r2, #0
 c1083d4:	e5832000 	str	r2, [r3]
 c1083d8:	e51b3010 	ldr	r3, [fp, #-16]
 c1083dc:	e2833004 	add	r3, r3, #4
 c1083e0:	e50b3010 	str	r3, [fp, #-16]
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
#if OS_STK_GROWTH == 1                     
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
 c1083e4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c1083e8:	e3530000 	cmp	r3, #0
 c1083ec:	1afffff3 	bne	c1083c0 <OS_TaskStkClr+0x48>
                *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
            }
#endif
        }
    }
}
 c1083f0:	e24bd00c 	sub	sp, fp, #12
 c1083f4:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1083f8:	e12fff1e 	bx	lr

0c1083fc <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT16U ticks)
{
 c1083fc:	e1a0c00d 	mov	ip, sp
 c108400:	e92dd800 	push	{fp, ip, lr, pc}
 c108404:	e24cb004 	sub	fp, ip, #4
 c108408:	e24dd010 	sub	sp, sp, #16
 c10840c:	e1a03000 	mov	r3, r0
 c108410:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea



    cpu_sr = 0;                                  /* Prevent compiler warning                           */
#endif    
    if (ticks > 0) {                             /* 0 means no delay!                                  */
 c108414:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
 c108418:	e3530000 	cmp	r3, #0
 c10841c:	0a000031 	beq	c1084e8 <OSTimeDly+0xec>
        OS_ENTER_CRITICAL();
 c108420:	e10f0000 	mrs	r0, CPSR
 c108424:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
 c108428:	e38000c0 	orr	r0, r0, #192	; 0xc0
 c10842c:	e121f000 	msr	CPSR_c, r0
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
 c108430:	e59f30bc 	ldr	r3, [pc, #188]	; c1084f4 <OSTimeDly+0xf8>
 c108434:	e5933000 	ldr	r3, [r3]
 c108438:	e5d33030 	ldrb	r3, [r3, #48]	; 0x30
 c10843c:	e54b300d 	strb	r3, [fp, #-13]
        OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
 c108440:	e55b300d 	ldrb	r3, [fp, #-13]
 c108444:	e55b200d 	ldrb	r2, [fp, #-13]
 c108448:	e59f10a8 	ldr	r1, [pc, #168]	; c1084f8 <OSTimeDly+0xfc>
 c10844c:	e7d12002 	ldrb	r2, [r1, r2]
 c108450:	e20210ff 	and	r1, r2, #255	; 0xff
 c108454:	e59f2098 	ldr	r2, [pc, #152]	; c1084f4 <OSTimeDly+0xf8>
 c108458:	e5922000 	ldr	r2, [r2]
 c10845c:	e5d22031 	ldrb	r2, [r2, #49]	; 0x31
 c108460:	e20220ff 	and	r2, r2, #255	; 0xff
 c108464:	e1e02002 	mvn	r2, r2
 c108468:	e20220ff 	and	r2, r2, #255	; 0xff
 c10846c:	e0012002 	and	r2, r1, r2
 c108470:	e20220ff 	and	r2, r2, #255	; 0xff
 c108474:	e20210ff 	and	r1, r2, #255	; 0xff
 c108478:	e59f2078 	ldr	r2, [pc, #120]	; c1084f8 <OSTimeDly+0xfc>
 c10847c:	e7c21003 	strb	r1, [r2, r3]
        if (OSRdyTbl[y] == 0) {  
 c108480:	e55b300d 	ldrb	r3, [fp, #-13]
 c108484:	e59f206c 	ldr	r2, [pc, #108]	; c1084f8 <OSTimeDly+0xfc>
 c108488:	e7d23003 	ldrb	r3, [r2, r3]
 c10848c:	e3530000 	cmp	r3, #0
 c108490:	1a00000d 	bne	c1084cc <OSTimeDly+0xd0>
            OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
 c108494:	e59f3058 	ldr	r3, [pc, #88]	; c1084f4 <OSTimeDly+0xf8>
 c108498:	e5933000 	ldr	r3, [r3]
 c10849c:	e5d33032 	ldrb	r3, [r3, #50]	; 0x32
 c1084a0:	e20330ff 	and	r3, r3, #255	; 0xff
 c1084a4:	e1e03003 	mvn	r3, r3
 c1084a8:	e20320ff 	and	r2, r3, #255	; 0xff
 c1084ac:	e59f3048 	ldr	r3, [pc, #72]	; c1084fc <OSTimeDly+0x100>
 c1084b0:	e5d33000 	ldrb	r3, [r3]
 c1084b4:	e20330ff 	and	r3, r3, #255	; 0xff
 c1084b8:	e0023003 	and	r3, r2, r3
 c1084bc:	e20330ff 	and	r3, r3, #255	; 0xff
 c1084c0:	e20320ff 	and	r2, r3, #255	; 0xff
 c1084c4:	e59f3030 	ldr	r3, [pc, #48]	; c1084fc <OSTimeDly+0x100>
 c1084c8:	e5c32000 	strb	r2, [r3]
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
 c1084cc:	e59f3020 	ldr	r3, [pc, #32]	; c1084f4 <OSTimeDly+0xf8>
 c1084d0:	e5933000 	ldr	r3, [r3]
 c1084d4:	e15b21b6 	ldrh	r2, [fp, #-22]	; 0xffffffea
 c1084d8:	e1c322ba 	strh	r2, [r3, #42]	; 0x2a
        OS_EXIT_CRITICAL();
 c1084dc:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 c1084e0:	e121f000 	msr	CPSR_c, r0
        OS_Sched();                              /* Find next task to run!                             */
 c1084e4:	ebffe47e 	bl	c1016e4 <OS_Sched>
    }
}
 c1084e8:	e24bd00c 	sub	sp, fp, #12
 c1084ec:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1084f0:	e12fff1e 	bx	lr
 c1084f4:	0c119cac 	.word	0x0c119cac
 c1084f8:	0c119c9c 	.word	0x0c119c9c
 c1084fc:	0c119c98 	.word	0x0c119c98

0c108500 <OSTimeDlyHMSM>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_HMSM_EN > 0
INT8U  OSTimeDlyHMSM (INT8U hours, INT8U minutes, INT8U seconds, INT16U milli)
{
 c108500:	e1a0c00d 	mov	ip, sp
 c108504:	e92dd800 	push	{fp, ip, lr, pc}
 c108508:	e24cb004 	sub	fp, ip, #4
 c10850c:	e24dd010 	sub	sp, sp, #16
 c108510:	e54b0015 	strb	r0, [fp, #-21]	; 0xffffffeb
 c108514:	e54b1016 	strb	r1, [fp, #-22]	; 0xffffffea
 c108518:	e54b2017 	strb	r2, [fp, #-23]	; 0xffffffe9
 c10851c:	e14b31ba 	strh	r3, [fp, #-26]	; 0xffffffe6
    INT32U ticks;
    INT16U loops;


#if OS_ARG_CHK_EN > 0
    if (hours == 0) {
 c108520:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
 c108524:	e3530000 	cmp	r3, #0
 c108528:	1a00000a 	bne	c108558 <OSTimeDlyHMSM+0x58>
        if (minutes == 0) {
 c10852c:	e55b3016 	ldrb	r3, [fp, #-22]	; 0xffffffea
 c108530:	e3530000 	cmp	r3, #0
 c108534:	1a000007 	bne	c108558 <OSTimeDlyHMSM+0x58>
            if (seconds == 0) {
 c108538:	e55b3017 	ldrb	r3, [fp, #-23]	; 0xffffffe9
 c10853c:	e3530000 	cmp	r3, #0
 c108540:	1a000004 	bne	c108558 <OSTimeDlyHMSM+0x58>
                if (milli == 0) {
 c108544:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
 c108548:	e3530000 	cmp	r3, #0
 c10854c:	1a000001 	bne	c108558 <OSTimeDlyHMSM+0x58>
                    return (OS_TIME_ZERO_DLY);
 c108550:	e3a03054 	mov	r3, #84	; 0x54
 c108554:	ea00004c 	b	c10868c <OSTimeDlyHMSM+0x18c>
                }
            }
        }
    }
    if (minutes > 59) {
 c108558:	e55b3016 	ldrb	r3, [fp, #-22]	; 0xffffffea
 c10855c:	e353003b 	cmp	r3, #59	; 0x3b
 c108560:	9a000001 	bls	c10856c <OSTimeDlyHMSM+0x6c>
        return (OS_TIME_INVALID_MINUTES);        /* Validate arguments to be within range              */
 c108564:	e3a03051 	mov	r3, #81	; 0x51
 c108568:	ea000047 	b	c10868c <OSTimeDlyHMSM+0x18c>
    }
    if (seconds > 59) {
 c10856c:	e55b3017 	ldrb	r3, [fp, #-23]	; 0xffffffe9
 c108570:	e353003b 	cmp	r3, #59	; 0x3b
 c108574:	9a000001 	bls	c108580 <OSTimeDlyHMSM+0x80>
        return (OS_TIME_INVALID_SECONDS);
 c108578:	e3a03052 	mov	r3, #82	; 0x52
 c10857c:	ea000042 	b	c10868c <OSTimeDlyHMSM+0x18c>
    }
    if (milli > 999) {
 c108580:	e15b21ba 	ldrh	r2, [fp, #-26]	; 0xffffffe6
 c108584:	e59f3110 	ldr	r3, [pc, #272]	; c10869c <OSTimeDlyHMSM+0x19c>
 c108588:	e1520003 	cmp	r2, r3
 c10858c:	9a000001 	bls	c108598 <OSTimeDlyHMSM+0x98>
        return (OS_TIME_INVALID_MILLI);
 c108590:	e3a03053 	mov	r3, #83	; 0x53
 c108594:	ea00003c 	b	c10868c <OSTimeDlyHMSM+0x18c>
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
 c108598:	e55b2015 	ldrb	r2, [fp, #-21]	; 0xffffffeb
 c10859c:	e1a03002 	mov	r3, r2
 c1085a0:	e1a03203 	lsl	r3, r3, #4
 c1085a4:	e0623003 	rsb	r3, r2, r3
 c1085a8:	e1a02203 	lsl	r2, r3, #4
 c1085ac:	e0632002 	rsb	r2, r3, r2
 c1085b0:	e1a03202 	lsl	r3, r2, #4
 c1085b4:	e1a02003 	mov	r2, r3
 c1085b8:	e1a01002 	mov	r1, r2
 c1085bc:	e55b2016 	ldrb	r2, [fp, #-22]	; 0xffffffea
 c1085c0:	e1a03002 	mov	r3, r2
 c1085c4:	e1a03203 	lsl	r3, r3, #4
 c1085c8:	e0623003 	rsb	r3, r2, r3
 c1085cc:	e1a03103 	lsl	r3, r3, #2
 c1085d0:	e0812003 	add	r2, r1, r3
 c1085d4:	e55b3017 	ldrb	r3, [fp, #-23]	; 0xffffffe9
 c1085d8:	e0822003 	add	r2, r2, r3
 c1085dc:	e1a03002 	mov	r3, r2
 c1085e0:	e1a03103 	lsl	r3, r3, #2
 c1085e4:	e0833002 	add	r3, r3, r2
 c1085e8:	e1a02103 	lsl	r2, r3, #2
 c1085ec:	e0833002 	add	r3, r3, r2
 c1085f0:	e1a03103 	lsl	r3, r3, #2
 c1085f4:	e1a01003 	mov	r1, r3
          + OS_TICKS_PER_SEC * ((INT32U)milli + 500L / OS_TICKS_PER_SEC) / 1000L;
 c1085f8:	e15b21ba 	ldrh	r2, [fp, #-26]	; 0xffffffe6
 c1085fc:	e1a03002 	mov	r3, r2
 c108600:	e1a03103 	lsl	r3, r3, #2
 c108604:	e0833002 	add	r3, r3, r2
 c108608:	e1a02103 	lsl	r2, r3, #2
 c10860c:	e0833002 	add	r3, r3, r2
 c108610:	e1a03103 	lsl	r3, r3, #2
 c108614:	e2832f7d 	add	r2, r3, #500	; 0x1f4
 c108618:	e59f3080 	ldr	r3, [pc, #128]	; c1086a0 <OSTimeDlyHMSM+0x1a0>
 c10861c:	e0830392 	umull	r0, r3, r2, r3
 c108620:	e1a03323 	lsr	r3, r3, #6
        return (OS_TIME_INVALID_MILLI);
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
 c108624:	e0813003 	add	r3, r1, r3
 c108628:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
          + OS_TICKS_PER_SEC * ((INT32U)milli + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks / 65536L);            /* Compute the integral number of 65536 tick delays   */
 c10862c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c108630:	e1a03823 	lsr	r3, r3, #16
 c108634:	e14b30be 	strh	r3, [fp, #-14]
    ticks = ticks % 65536L;                      /* Obtain  the fractional number of ticks             */
 c108638:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c10863c:	e1a03803 	lsl	r3, r3, #16
 c108640:	e1a03823 	lsr	r3, r3, #16
 c108644:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    OSTimeDly((INT16U)ticks);
 c108648:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c10864c:	e1a03803 	lsl	r3, r3, #16
 c108650:	e1a03823 	lsr	r3, r3, #16
 c108654:	e1a00003 	mov	r0, r3
 c108658:	ebffff67 	bl	c1083fc <OSTimeDly>
    while (loops > 0) {
 c10865c:	ea000006 	b	c10867c <OSTimeDlyHMSM+0x17c>
        OSTimeDly((INT16U)32768u);
 c108660:	e3a00902 	mov	r0, #32768	; 0x8000
 c108664:	ebffff64 	bl	c1083fc <OSTimeDly>
        OSTimeDly((INT16U)32768u);
 c108668:	e3a00902 	mov	r0, #32768	; 0x8000
 c10866c:	ebffff62 	bl	c1083fc <OSTimeDly>
        loops--;
 c108670:	e15b30be 	ldrh	r3, [fp, #-14]
 c108674:	e2433001 	sub	r3, r3, #1
 c108678:	e14b30be 	strh	r3, [fp, #-14]
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
          + OS_TICKS_PER_SEC * ((INT32U)milli + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks / 65536L);            /* Compute the integral number of 65536 tick delays   */
    ticks = ticks % 65536L;                      /* Obtain  the fractional number of ticks             */
    OSTimeDly((INT16U)ticks);
    while (loops > 0) {
 c10867c:	e15b30be 	ldrh	r3, [fp, #-14]
 c108680:	e3530000 	cmp	r3, #0
 c108684:	1afffff5 	bne	c108660 <OSTimeDlyHMSM+0x160>
        OSTimeDly((INT16U)32768u);
        OSTimeDly((INT16U)32768u);
        loops--;
    }
    return (OS_NO_ERR);
 c108688:	e3a03000 	mov	r3, #0
}
 c10868c:	e1a00003 	mov	r0, r3
 c108690:	e24bd00c 	sub	sp, fp, #12
 c108694:	e89d6800 	ldm	sp, {fp, sp, lr}
 c108698:	e12fff1e 	bx	lr
 c10869c:	000003e7 	.word	0x000003e7
 c1086a0:	10624dd3 	.word	0x10624dd3

0c1086a4 <OSTimeDlyResume>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_RESUME_EN > 0
INT8U  OSTimeDlyResume (INT8U prio)
{
 c1086a4:	e1a0c00d 	mov	ip, sp
 c1086a8:	e92dd800 	push	{fp, ip, lr, pc}
 c1086ac:	e24cb004 	sub	fp, ip, #4
 c1086b0:	e24dd010 	sub	sp, sp, #16
 c1086b4:	e1a03000 	mov	r3, r0
 c1086b8:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb



    cpu_sr = 0;                                                /* Prevent compiler warning             */
#endif    
    if (prio >= OS_LOWEST_PRIO) {
 c1086bc:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
 c1086c0:	e353003e 	cmp	r3, #62	; 0x3e
 c1086c4:	9a000001 	bls	c1086d0 <OSTimeDlyResume+0x2c>
        return (OS_PRIO_INVALID);
 c1086c8:	e3a0302a 	mov	r3, #42	; 0x2a
 c1086cc:	ea000052 	b	c10881c <OSTimeDlyResume+0x178>
    }
    OS_ENTER_CRITICAL();
 c1086d0:	e10f0000 	mrs	r0, CPSR
 c1086d4:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
 c1086d8:	e38000c0 	orr	r0, r0, #192	; 0xc0
 c1086dc:	e121f000 	msr	CPSR_c, r0
    ptcb = (OS_TCB *)OSTCBPrioTbl[prio];                       /* Make sure that task exist            */
 c1086e0:	e55b2015 	ldrb	r2, [fp, #-21]	; 0xffffffeb
 c1086e4:	e59f3140 	ldr	r3, [pc, #320]	; c10882c <OSTimeDlyResume+0x188>
 c1086e8:	e7933102 	ldr	r3, [r3, r2, lsl #2]
 c1086ec:	e50b3010 	str	r3, [fp, #-16]
    if (ptcb == (OS_TCB *)0) {
 c1086f0:	e51b3010 	ldr	r3, [fp, #-16]
 c1086f4:	e3530000 	cmp	r3, #0
 c1086f8:	1a000003 	bne	c10870c <OSTimeDlyResume+0x68>
        OS_EXIT_CRITICAL();
 c1086fc:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 c108700:	e121f000 	msr	CPSR_c, r0
        return (OS_TASK_NOT_EXIST);                            /* The task does not exist              */
 c108704:	e3a0300b 	mov	r3, #11
 c108708:	ea000043 	b	c10881c <OSTimeDlyResume+0x178>
    }
    if (ptcb == (OS_TCB *)1) {
 c10870c:	e51b3010 	ldr	r3, [fp, #-16]
 c108710:	e3530001 	cmp	r3, #1
 c108714:	1a000003 	bne	c108728 <OSTimeDlyResume+0x84>
        OS_EXIT_CRITICAL();
 c108718:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 c10871c:	e121f000 	msr	CPSR_c, r0
        return (OS_TASK_NOT_EXIST);                            /* The task does not exist              */
 c108720:	e3a0300b 	mov	r3, #11
 c108724:	ea00003c 	b	c10881c <OSTimeDlyResume+0x178>
    }
    if (ptcb->OSTCBDly == 0) {                                 /* See if task is delayed               */
 c108728:	e51b3010 	ldr	r3, [fp, #-16]
 c10872c:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
 c108730:	e3530000 	cmp	r3, #0
 c108734:	1a000003 	bne	c108748 <OSTimeDlyResume+0xa4>
        OS_EXIT_CRITICAL();
 c108738:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 c10873c:	e121f000 	msr	CPSR_c, r0
        return (OS_TIME_NOT_DLY);                              /* Indicate that task was not delayed   */
 c108740:	e3a03050 	mov	r3, #80	; 0x50
 c108744:	ea000034 	b	c10881c <OSTimeDlyResume+0x178>
    }

    ptcb->OSTCBDly = 0;                                        /* Clear the time delay                 */
 c108748:	e51b3010 	ldr	r3, [fp, #-16]
 c10874c:	e3a02000 	mov	r2, #0
 c108750:	e1c322ba 	strh	r2, [r3, #42]	; 0x2a
    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
 c108754:	e51b3010 	ldr	r3, [fp, #-16]
 c108758:	e5d3302c 	ldrb	r3, [r3, #44]	; 0x2c
 c10875c:	e2033037 	and	r3, r3, #55	; 0x37
 c108760:	e3530000 	cmp	r3, #0
 c108764:	0a000009 	beq	c108790 <OSTimeDlyResume+0xec>
        ptcb->OSTCBStat   &= ~OS_STAT_PEND_ANY;                /* Yes, Clear status flag               */
 c108768:	e51b3010 	ldr	r3, [fp, #-16]
 c10876c:	e5d3302c 	ldrb	r3, [r3, #44]	; 0x2c
 c108770:	e3c33037 	bic	r3, r3, #55	; 0x37
 c108774:	e20320ff 	and	r2, r3, #255	; 0xff
 c108778:	e51b3010 	ldr	r3, [fp, #-16]
 c10877c:	e5c3202c 	strb	r2, [r3, #44]	; 0x2c
        ptcb->OSTCBPendTO  = TRUE;                             /* Indicate PEND timeout                */
 c108780:	e51b3010 	ldr	r3, [fp, #-16]
 c108784:	e3a02001 	mov	r2, #1
 c108788:	e5c3202d 	strb	r2, [r3, #45]	; 0x2d
 c10878c:	ea000002 	b	c10879c <OSTimeDlyResume+0xf8>
    } else {
        ptcb->OSTCBPendTO  = FALSE;
 c108790:	e51b3010 	ldr	r3, [fp, #-16]
 c108794:	e3a02000 	mov	r2, #0
 c108798:	e5c3202d 	strb	r2, [r3, #45]	; 0x2d
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?                   */
 c10879c:	e51b3010 	ldr	r3, [fp, #-16]
 c1087a0:	e5d3302c 	ldrb	r3, [r3, #44]	; 0x2c
 c1087a4:	e2033008 	and	r3, r3, #8
 c1087a8:	e3530000 	cmp	r3, #0
 c1087ac:	1a000017 	bne	c108810 <OSTimeDlyResume+0x16c>
        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready                      */
 c1087b0:	e51b3010 	ldr	r3, [fp, #-16]
 c1087b4:	e5d32032 	ldrb	r2, [r3, #50]	; 0x32
 c1087b8:	e59f3070 	ldr	r3, [pc, #112]	; c108830 <OSTimeDlyResume+0x18c>
 c1087bc:	e5d33000 	ldrb	r3, [r3]
 c1087c0:	e1823003 	orr	r3, r2, r3
 c1087c4:	e20320ff 	and	r2, r3, #255	; 0xff
 c1087c8:	e59f3060 	ldr	r3, [pc, #96]	; c108830 <OSTimeDlyResume+0x18c>
 c1087cc:	e5c32000 	strb	r2, [r3]
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 c1087d0:	e51b3010 	ldr	r3, [fp, #-16]
 c1087d4:	e5d33030 	ldrb	r3, [r3, #48]	; 0x30
 c1087d8:	e51b2010 	ldr	r2, [fp, #-16]
 c1087dc:	e5d22030 	ldrb	r2, [r2, #48]	; 0x30
 c1087e0:	e59f104c 	ldr	r1, [pc, #76]	; c108834 <OSTimeDlyResume+0x190>
 c1087e4:	e7d11002 	ldrb	r1, [r1, r2]
 c1087e8:	e51b2010 	ldr	r2, [fp, #-16]
 c1087ec:	e5d22031 	ldrb	r2, [r2, #49]	; 0x31
 c1087f0:	e1812002 	orr	r2, r1, r2
 c1087f4:	e20210ff 	and	r1, r2, #255	; 0xff
 c1087f8:	e59f2034 	ldr	r2, [pc, #52]	; c108834 <OSTimeDlyResume+0x190>
 c1087fc:	e7c21003 	strb	r1, [r2, r3]
        OS_EXIT_CRITICAL();
 c108800:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 c108804:	e121f000 	msr	CPSR_c, r0
        OS_Sched();                                           /* See if this is new highest priority   */
 c108808:	ebffe3b5 	bl	c1016e4 <OS_Sched>
 c10880c:	ea000001 	b	c108818 <OSTimeDlyResume+0x174>
    } else {
        OS_EXIT_CRITICAL();                                   /* Task may be suspended                 */
 c108810:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 c108814:	e121f000 	msr	CPSR_c, r0
    }
    return (OS_NO_ERR);
 c108818:	e3a03000 	mov	r3, #0
}
 c10881c:	e1a00003 	mov	r0, r3
 c108820:	e24bd00c 	sub	sp, fp, #12
 c108824:	e89d6800 	ldm	sp, {fp, sp, lr}
 c108828:	e12fff1e 	bx	lr
 c10882c:	0c11af8c 	.word	0x0c11af8c
 c108830:	0c119c98 	.word	0x0c119c98
 c108834:	0c119c9c 	.word	0x0c119c9c

0c108838 <OSTimeGet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
INT32U  OSTimeGet (void)
{
 c108838:	e1a0c00d 	mov	ip, sp
 c10883c:	e92dd800 	push	{fp, ip, lr, pc}
 c108840:	e24cb004 	sub	fp, ip, #4
 c108844:	e24dd008 	sub	sp, sp, #8



    cpu_sr = 0;                                  /* Prevent compiler warning                           */
#endif    
    OS_ENTER_CRITICAL();
 c108848:	e10f0000 	mrs	r0, CPSR
 c10884c:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
 c108850:	e38000c0 	orr	r0, r0, #192	; 0xc0
 c108854:	e121f000 	msr	CPSR_c, r0
    ticks = OSTime;
 c108858:	e59f3020 	ldr	r3, [pc, #32]	; c108880 <OSTimeGet+0x48>
 c10885c:	e5933000 	ldr	r3, [r3]
 c108860:	e50b3010 	str	r3, [fp, #-16]
    OS_EXIT_CRITICAL();
 c108864:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 c108868:	e121f000 	msr	CPSR_c, r0
    return (ticks);
 c10886c:	e51b3010 	ldr	r3, [fp, #-16]
}
 c108870:	e1a00003 	mov	r0, r3
 c108874:	e24bd00c 	sub	sp, fp, #12
 c108878:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10887c:	e12fff1e 	bx	lr
 c108880:	0c119cb0 	.word	0x0c119cb0

0c108884 <OSTimeSet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
void  OSTimeSet (INT32U ticks)
{
 c108884:	e1a0c00d 	mov	ip, sp
 c108888:	e92dd800 	push	{fp, ip, lr, pc}
 c10888c:	e24cb004 	sub	fp, ip, #4
 c108890:	e24dd008 	sub	sp, sp, #8
 c108894:	e50b0010 	str	r0, [fp, #-16]



    cpu_sr = 0;                                  /* Prevent compiler warning                           */
#endif    
    OS_ENTER_CRITICAL();
 c108898:	e10f0000 	mrs	r0, CPSR
 c10889c:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
 c1088a0:	e38000c0 	orr	r0, r0, #192	; 0xc0
 c1088a4:	e121f000 	msr	CPSR_c, r0
    OSTime = ticks;
 c1088a8:	e59f3018 	ldr	r3, [pc, #24]	; c1088c8 <OSTimeSet+0x44>
 c1088ac:	e51b2010 	ldr	r2, [fp, #-16]
 c1088b0:	e5832000 	str	r2, [r3]
    OS_EXIT_CRITICAL();
 c1088b4:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 c1088b8:	e121f000 	msr	CPSR_c, r0
}
 c1088bc:	e24bd00c 	sub	sp, fp, #12
 c1088c0:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1088c4:	e12fff1e 	bx	lr
 c1088c8:	0c119cb0 	.word	0x0c119cb0

0c1088cc <OS_CPU_isr_pb>:
** Wrapper + isr_pb
**
*/

OS_CPU_isr_pb:
  OS_CPU_ISR_WRAPPER isr_pb
 c1088cc:	e92d000e 	push	{r1, r2, r3}
 c1088d0:	e1a0100d 	mov	r1, sp
 c1088d4:	e28dd00c 	add	sp, sp, #12
 c1088d8:	e24e2004 	sub	r2, lr, #4
 c1088dc:	e14f3000 	mrs	r3, SPSR
 c1088e0:	e321f0d3 	msr	CPSR_c, #211	; 0xd3
 c1088e4:	e52d2004 	push	{r2}		; (str r2, [sp, #-4]!)
 c1088e8:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
 c1088ec:	e92d1ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, ip}
 c1088f0:	e8b10070 	ldm	r1!, {r4, r5, r6}
 c1088f4:	e92d0070 	push	{r4, r5, r6}
 c1088f8:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
 c1088fc:	e52d3004 	push	{r3}		; (str r3, [sp, #-4]!)
 c108900:	ebffdf3a 	bl	c1005f0 <OSIntEnter>
 c108904:	e59f0030 	ldr	r0, [pc, #48]	; c10893c <labelisr_pb+0x1c>
 c108908:	e5d00000 	ldrb	r0, [r0]
 c10890c:	e3500001 	cmp	r0, #1
 c108910:	1a000002 	bne	c108920 <labelisr_pb>
 c108914:	e59f0024 	ldr	r0, [pc, #36]	; c108940 <labelisr_pb+0x20>
 c108918:	e5901000 	ldr	r1, [r0]
 c10891c:	e581d000 	str	sp, [r1]

0c108920 <labelisr_pb>:
 c108920:	e321f0d2 	msr	CPSR_c, #210	; 0xd2
 c108924:	eb000284 	bl	c10933c <isr_pb>
 c108928:	e321f0d3 	msr	CPSR_c, #211	; 0xd3
 c10892c:	ebffdf45 	bl	c100648 <OSIntExit>
 c108930:	e49d4004 	pop	{r4}		; (ldr r4, [sp], #4)
 c108934:	e169f004 	msr	SPSR_fc, r4
 c108938:	e8fddfff 	ldm	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr, pc}^
 c10893c:	0c119ca8 	.word	0x0c119ca8
 c108940:	0c119cac 	.word	0x0c119cac

0c108944 <main>:
void isr_pb( void );                 /* Función invocada por el anterior wrapper que atiende al dispositivo, no debe tener el atributo interrupt */

/*******************************************************************/

void main( void )
{
 c108944:	e1a0c00d 	mov	ip, sp
 c108948:	e92dd800 	push	{fp, ip, lr, pc}
 c10894c:	e24cb004 	sub	fp, ip, #4

    sys_init();                                                          /* Inicializa los dispositivos        */
 c108950:	eb000d30 	bl	c10be18 <sys_init>
    timers_init();
 c108954:	eb000ffc 	bl	c10c94c <timers_init>
    uart0_init();
 c108958:	eb001277 	bl	c10d33c <uart0_init>
    leds_init();
 c10895c:	eb0008f0 	bl	c10ad24 <leds_init>
    segs_init();
 c108960:	eb000cf7 	bl	c10bd44 <segs_init>
    rtc_init();
 c108964:	eb000aa9 	bl	c10b410 <rtc_init>
    pbs_init();
 c108968:	eb00096f 	bl	c10af2c <pbs_init>
    keypad_init();
 c10896c:	eb000354 	bl	c1096c4 <keypad_init>
    lcd_init();
 c108970:	eb000445 	bl	c109a8c <lcd_init>
    lcd_clear();
 c108974:	eb0004cb 	bl	c109ca8 <lcd_clear>
    lcd_on();
 c108978:	eb0004a4 	bl	c109c10 <lcd_on>

    uart0_puts( "\n\n Ejecutando uCOS-II (version " );
 c10897c:	e59f0088 	ldr	r0, [pc, #136]	; c108a0c <main+0xc8>
 c108980:	eb0012ac 	bl	c10d438 <uart0_puts>
    uart0_putint( OSVersion() );
 c108984:	ebffe0b2 	bl	c100c54 <OSVersion>
 c108988:	e1a03000 	mov	r3, r0
 c10898c:	e1a00003 	mov	r0, r3
 c108990:	eb0012bc 	bl	c10d488 <uart0_putint>
    uart0_puts( ")\n" ) ;
 c108994:	e59f0074 	ldr	r0, [pc, #116]	; c108a10 <main+0xcc>
 c108998:	eb0012a6 	bl	c10d438 <uart0_puts>
    uart0_puts( "----------------------------------\n\n" ) ;
 c10899c:	e59f0070 	ldr	r0, [pc, #112]	; c108a14 <main+0xd0>
 c1089a0:	eb0012a4 	bl	c10d438 <uart0_puts>

    OSInit();                                                              /* Inicializa el kernel              */
 c1089a4:	ebffdeff 	bl	c1005a8 <OSInit>
    uart0Sem = OSSemCreate( 1 );/* Crea recursos                     */
 c1089a8:	e3a00001 	mov	r0, #1
 c1089ac:	ebfff769 	bl	c106758 <OSSemCreate>
 c1089b0:	e1a02000 	mov	r2, r0
 c1089b4:	e59f305c 	ldr	r3, [pc, #92]	; c108a18 <main+0xd4>
 c1089b8:	e5832000 	str	r2, [r3]
    lcdSem = OSSemCreate( 1 );
 c1089bc:	e3a00001 	mov	r0, #1
 c1089c0:	ebfff764 	bl	c106758 <OSSemCreate>
 c1089c4:	e1a02000 	mov	r2, r0
 c1089c8:	e59f304c 	ldr	r3, [pc, #76]	; c108a1c <main+0xd8>
 c1089cc:	e5832000 	str	r2, [r3]
    keypadQueue = OSQCreate( &keypadQueueTable[0], KEYPAD_QUEUE_SIZE );
 c1089d0:	e59f0048 	ldr	r0, [pc, #72]	; c108a20 <main+0xdc>
 c1089d4:	e3a01040 	mov	r1, #64	; 0x40
 c1089d8:	ebfff3a7 	bl	c10587c <OSQCreate>
 c1089dc:	e1a02000 	mov	r2, r0
 c1089e0:	e59f303c 	ldr	r3, [pc, #60]	; c108a24 <main+0xe0>
 c1089e4:	e5832000 	str	r2, [r3]
    OSTaskCreate( TaskStart, NULL, &TaskStartStk[TASK_STK_SIZE - 1], 0 );  /* Crea la tarea inicial de arranque */
 c1089e8:	e59f0038 	ldr	r0, [pc, #56]	; c108a28 <main+0xe4>
 c1089ec:	e3a01000 	mov	r1, #0
 c1089f0:	e59f2034 	ldr	r2, [pc, #52]	; c108a2c <main+0xe8>
 c1089f4:	e3a03000 	mov	r3, #0
 c1089f8:	ebfffa55 	bl	c107354 <OSTaskCreate>
    OSStart();                                                             /* Inicia multitarea                 */
 c1089fc:	ebffdfb3 	bl	c1008d0 <OSStart>
}                              
 c108a00:	e24bd00c 	sub	sp, fp, #12
 c108a04:	e89d6800 	ldm	sp, {fp, sp, lr}
 c108a08:	e12fff1e 	bx	lr
 c108a0c:	0c10e53c 	.word	0x0c10e53c
 c108a10:	0c10e55c 	.word	0x0c10e55c
 c108a14:	0c10e560 	.word	0x0c10e560
 c108a18:	0c143098 	.word	0x0c143098
 c108a1c:	0c139090 	.word	0x0c139090
 c108a20:	0c14d09c 	.word	0x0c14d09c
 c108a24:	0c143094 	.word	0x0c143094
 c108a28:	0c108a30 	.word	0x0c108a30
 c108a2c:	0c16b198 	.word	0x0c16b198

0c108a30 <TaskStart>:

/*******************************************************************/

void TaskStart( void *pdata )
{
 c108a30:	e1a0c00d 	mov	ip, sp
 c108a34:	e92dd800 	push	{fp, ip, lr, pc}
 c108a38:	e24cb004 	sub	fp, ip, #4
 c108a3c:	e24dd010 	sub	sp, sp, #16
 c108a40:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
    const char id1 = '1'; /* Identificadores de tareas */
 c108a44:	e3a03031 	mov	r3, #49	; 0x31
 c108a48:	e54b300d 	strb	r3, [fp, #-13]
    const char id2 = '2';
 c108a4c:	e3a03032 	mov	r3, #50	; 0x32
 c108a50:	e54b300e 	strb	r3, [fp, #-14]
    const char id3 = '3';
 c108a54:	e3a03033 	mov	r3, #51	; 0x33
 c108a58:	e54b300f 	strb	r3, [fp, #-15]
    const char id4 = '4';
 c108a5c:	e3a03034 	mov	r3, #52	; 0x34
 c108a60:	e54b3010 	strb	r3, [fp, #-16]
    const char id5 = '5';
 c108a64:	e3a03035 	mov	r3, #53	; 0x35
 c108a68:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
    const char id6 = '6';
 c108a6c:	e3a03036 	mov	r3, #54	; 0x36
 c108a70:	e54b3012 	strb	r3, [fp, #-18]	; 0xffffffee
    const char id7 = '7';
 c108a74:	e3a03037 	mov	r3, #55	; 0x37
 c108a78:	e54b3013 	strb	r3, [fp, #-19]	; 0xffffffed
    const char id8 = '8';
 c108a7c:	e3a03038 	mov	r3, #56	; 0x38
 c108a80:	e54b3014 	strb	r3, [fp, #-20]	; 0xffffffec

    OS_ENTER_CRITICAL();
 c108a84:	e10f0000 	mrs	r0, CPSR
 c108a88:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
 c108a8c:	e38000c0 	orr	r0, r0, #192	; 0xc0
 c108a90:	e121f000 	msr	CPSR_c, r0
    timer0_open_tick( OSTickISR, OS_TICKS_PER_SEC );  /* Instala OSTickISR como RTI del timer0                     */
 c108a94:	e59f00e8 	ldr	r0, [pc, #232]	; c108b84 <TaskStart+0x154>
 c108a98:	e3a01064 	mov	r1, #100	; 0x64
 c108a9c:	eb00112e 	bl	c10cf5c <timer0_open_tick>
    pbs_open( OS_CPU_isr_pb );                        /* Instala OS_CPU_isr_pb como RTI por presión de pulsadores  */
 c108aa0:	e59f00e0 	ldr	r0, [pc, #224]	; c108b88 <TaskStart+0x158>
 c108aa4:	eb000a2e 	bl	c10b364 <pbs_open>
    OS_EXIT_CRITICAL();
 c108aa8:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 c108aac:	e121f000 	msr	CPSR_c, r0

    OSTaskCreate( Task1, (void *)&id1, &Task1Stk[TASK_STK_SIZE - 1], 1 );      /* Crea las tareas de la aplicación */
 c108ab0:	e24b300d 	sub	r3, fp, #13
 c108ab4:	e59f00d0 	ldr	r0, [pc, #208]	; c108b8c <TaskStart+0x15c>
 c108ab8:	e1a01003 	mov	r1, r3
 c108abc:	e59f20cc 	ldr	r2, [pc, #204]	; c108b90 <TaskStart+0x160>
 c108ac0:	e3a03001 	mov	r3, #1
 c108ac4:	ebfffa22 	bl	c107354 <OSTaskCreate>
    OSTaskCreate( Task2, (void *)&id2, &Task2Stk[TASK_STK_SIZE - 1], 2 );
 c108ac8:	e24b300e 	sub	r3, fp, #14
 c108acc:	e59f00c0 	ldr	r0, [pc, #192]	; c108b94 <TaskStart+0x164>
 c108ad0:	e1a01003 	mov	r1, r3
 c108ad4:	e59f20bc 	ldr	r2, [pc, #188]	; c108b98 <TaskStart+0x168>
 c108ad8:	e3a03002 	mov	r3, #2
 c108adc:	ebfffa1c 	bl	c107354 <OSTaskCreate>
    OSTaskCreate( Task3, (void *)&id3, &Task3Stk[TASK_STK_SIZE - 1], 3 );
 c108ae0:	e24b300f 	sub	r3, fp, #15
 c108ae4:	e59f00b0 	ldr	r0, [pc, #176]	; c108b9c <TaskStart+0x16c>
 c108ae8:	e1a01003 	mov	r1, r3
 c108aec:	e59f20ac 	ldr	r2, [pc, #172]	; c108ba0 <TaskStart+0x170>
 c108af0:	e3a03003 	mov	r3, #3
 c108af4:	ebfffa16 	bl	c107354 <OSTaskCreate>
    OSTaskCreate( Task4, (void *)&id4, &Task4Stk[TASK_STK_SIZE - 1], 4 );
 c108af8:	e24b3010 	sub	r3, fp, #16
 c108afc:	e59f00a0 	ldr	r0, [pc, #160]	; c108ba4 <TaskStart+0x174>
 c108b00:	e1a01003 	mov	r1, r3
 c108b04:	e59f209c 	ldr	r2, [pc, #156]	; c108ba8 <TaskStart+0x178>
 c108b08:	e3a03004 	mov	r3, #4
 c108b0c:	ebfffa10 	bl	c107354 <OSTaskCreate>
    OSTaskCreate( Task5, (void *)&id5, &Task5Stk[TASK_STK_SIZE - 1], 5 );
 c108b10:	e24b3011 	sub	r3, fp, #17
 c108b14:	e59f0090 	ldr	r0, [pc, #144]	; c108bac <TaskStart+0x17c>
 c108b18:	e1a01003 	mov	r1, r3
 c108b1c:	e59f208c 	ldr	r2, [pc, #140]	; c108bb0 <TaskStart+0x180>
 c108b20:	e3a03005 	mov	r3, #5
 c108b24:	ebfffa0a 	bl	c107354 <OSTaskCreate>
    OSTaskCreate( Task6, (void *)&id6, &Task6Stk[TASK_STK_SIZE - 1], 6 );
 c108b28:	e24b3012 	sub	r3, fp, #18
 c108b2c:	e59f0080 	ldr	r0, [pc, #128]	; c108bb4 <TaskStart+0x184>
 c108b30:	e1a01003 	mov	r1, r3
 c108b34:	e59f207c 	ldr	r2, [pc, #124]	; c108bb8 <TaskStart+0x188>
 c108b38:	e3a03006 	mov	r3, #6
 c108b3c:	ebfffa04 	bl	c107354 <OSTaskCreate>
    OSTaskCreate( Task7, (void *)&id7, &Task7Stk[TASK_STK_SIZE - 1], 7 );
 c108b40:	e24b3013 	sub	r3, fp, #19
 c108b44:	e59f0070 	ldr	r0, [pc, #112]	; c108bbc <TaskStart+0x18c>
 c108b48:	e1a01003 	mov	r1, r3
 c108b4c:	e59f206c 	ldr	r2, [pc, #108]	; c108bc0 <TaskStart+0x190>
 c108b50:	e3a03007 	mov	r3, #7
 c108b54:	ebfff9fe 	bl	c107354 <OSTaskCreate>
    OSTaskCreate( Task8, (void *)&id8, &Task8Stk[TASK_STK_SIZE - 1], 8 );
 c108b58:	e24b3014 	sub	r3, fp, #20
 c108b5c:	e59f0060 	ldr	r0, [pc, #96]	; c108bc4 <TaskStart+0x194>
 c108b60:	e1a01003 	mov	r1, r3
 c108b64:	e59f205c 	ldr	r2, [pc, #92]	; c108bc8 <TaskStart+0x198>
 c108b68:	e3a03008 	mov	r3, #8
 c108b6c:	ebfff9f8 	bl	c107354 <OSTaskCreate>


    OSTaskDel(OS_PRIO_SELF);             /* La tarea inicial de arranque se auto-elimina */
 c108b70:	e3a000ff 	mov	r0, #255	; 0xff
 c108b74:	ebfffaa9 	bl	c107620 <OSTaskDel>
}
 c108b78:	e24bd00c 	sub	sp, fp, #12
 c108b7c:	e89d6800 	ldm	sp, {fp, sp, lr}
 c108b80:	e12fff1e 	bx	lr
 c108b84:	0c100078 	.word	0x0c100078
 c108b88:	0c1088cc 	.word	0x0c1088cc
 c108b8c:	0c108bcc 	.word	0x0c108bcc
 c108b90:	0c157198 	.word	0x0c157198
 c108b94:	0c108c64 	.word	0x0c108c64
 c108b98:	0c143090 	.word	0x0c143090
 c108b9c:	0c108d50 	.word	0x0c108d50
 c108ba0:	0c12508c 	.word	0x0c12508c
 c108ba4:	0c108e68 	.word	0x0c108e68
 c108ba8:	0c13908c 	.word	0x0c13908c
 c108bac:	0c108f54 	.word	0x0c108f54
 c108bb0:	0c175198 	.word	0x0c175198
 c108bb4:	0c10905c 	.word	0x0c10905c
 c108bb8:	0c14d098 	.word	0x0c14d098
 c108bbc:	0c109104 	.word	0x0c109104
 c108bc0:	0c12f08c 	.word	0x0c12f08c
 c108bc4:	0c10922c 	.word	0x0c10922c
 c108bc8:	0c161198 	.word	0x0c161198

0c108bcc <Task1>:

void Task1( void *id )
{
 c108bcc:	e1a0c00d 	mov	ip, sp
 c108bd0:	e92dd800 	push	{fp, ip, lr, pc}
 c108bd4:	e24cb004 	sub	fp, ip, #4
 c108bd8:	e24dd010 	sub	sp, sp, #16
 c108bdc:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
    INT8U err;

    OSSemPend( uart0Sem, 0, &err );    /* Muestra un mensaje inicial en la UART0 (protegida por un semáforo) */
 c108be0:	e59f3070 	ldr	r3, [pc, #112]	; c108c58 <Task1+0x8c>
 c108be4:	e5932000 	ldr	r2, [r3]
 c108be8:	e24b300d 	sub	r3, fp, #13
 c108bec:	e1a00002 	mov	r0, r2
 c108bf0:	e3a01000 	mov	r1, #0
 c108bf4:	e1a02003 	mov	r2, r3
 c108bf8:	ebfff79d 	bl	c106a74 <OSSemPend>
        uart0_puts( "  Task" );
 c108bfc:	e59f0058 	ldr	r0, [pc, #88]	; c108c5c <Task1+0x90>
 c108c00:	eb00120c 	bl	c10d438 <uart0_puts>
        uart0_putchar( *(char *)id );
 c108c04:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c108c08:	e5d33000 	ldrb	r3, [r3]
 c108c0c:	e1a00003 	mov	r0, r3
 c108c10:	eb0011e2 	bl	c10d3a0 <uart0_putchar>
        uart0_puts( " iniciada.\n" );
 c108c14:	e59f0044 	ldr	r0, [pc, #68]	; c108c60 <Task1+0x94>
 c108c18:	eb001206 	bl	c10d438 <uart0_puts>
    OSSemPost( uart0Sem );
 c108c1c:	e59f3034 	ldr	r3, [pc, #52]	; c108c58 <Task1+0x8c>
 c108c20:	e5933000 	ldr	r3, [r3]
 c108c24:	e1a00003 	mov	r0, r3
 c108c28:	ebfff7f9 	bl	c106c14 <OSSemPost>
    
    led_on( LEFT_LED );
 c108c2c:	e3a00001 	mov	r0, #1
 c108c30:	eb00084b 	bl	c10ad64 <led_on>
    led_off( RIGHT_LED );
 c108c34:	e3a00002 	mov	r0, #2
 c108c38:	eb000861 	bl	c10adc4 <led_off>

    while( 1 )                          /* Cada 0,5 segundos (50 ticks) alterna el led que se enciende */
    {
        OSTimeDly( 50 );
 c108c3c:	e3a00032 	mov	r0, #50	; 0x32
 c108c40:	ebfffded 	bl	c1083fc <OSTimeDly>
        led_toggle( LEFT_LED );
 c108c44:	e3a00001 	mov	r0, #1
 c108c48:	eb000875 	bl	c10ae24 <led_toggle>
        led_toggle( RIGHT_LED );
 c108c4c:	e3a00002 	mov	r0, #2
 c108c50:	eb000873 	bl	c10ae24 <led_toggle>
    }
 c108c54:	eafffff8 	b	c108c3c <Task1+0x70>
 c108c58:	0c143098 	.word	0x0c143098
 c108c5c:	0c10e588 	.word	0x0c10e588
 c108c60:	0c10e590 	.word	0x0c10e590

0c108c64 <Task2>:
}

void Task2( void *id)
{
 c108c64:	e1a0c00d 	mov	ip, sp
 c108c68:	e92dd800 	push	{fp, ip, lr, pc}
 c108c6c:	e24cb004 	sub	fp, ip, #4
 c108c70:	e24dd010 	sub	sp, sp, #16
 c108c74:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
    INT8U err;
    uint8 scancode;

    OSSemPend( uart0Sem, 0, &err );    /* Muestra un mensaje inicial en la UART0 (protegida por un semáforo) */
 c108c78:	e59f30c0 	ldr	r3, [pc, #192]	; c108d40 <Task2+0xdc>
 c108c7c:	e5932000 	ldr	r2, [r3]
 c108c80:	e24b300d 	sub	r3, fp, #13
 c108c84:	e1a00002 	mov	r0, r2
 c108c88:	e3a01000 	mov	r1, #0
 c108c8c:	e1a02003 	mov	r2, r3
 c108c90:	ebfff777 	bl	c106a74 <OSSemPend>
        uart0_puts( "  Task" );
 c108c94:	e59f00a8 	ldr	r0, [pc, #168]	; c108d44 <Task2+0xe0>
 c108c98:	eb0011e6 	bl	c10d438 <uart0_puts>
        uart0_putchar( *(char *)id );
 c108c9c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c108ca0:	e5d33000 	ldrb	r3, [r3]
 c108ca4:	e1a00003 	mov	r0, r3
 c108ca8:	eb0011bc 	bl	c10d3a0 <uart0_putchar>
        uart0_puts( " iniciada.\n" );
 c108cac:	e59f0094 	ldr	r0, [pc, #148]	; c108d48 <Task2+0xe4>
 c108cb0:	eb0011e0 	bl	c10d438 <uart0_puts>
    OSSemPost( uart0Sem );
 c108cb4:	e59f3084 	ldr	r3, [pc, #132]	; c108d40 <Task2+0xdc>
 c108cb8:	e5933000 	ldr	r3, [r3]
 c108cbc:	e1a00003 	mov	r0, r3
 c108cc0:	ebfff7d3 	bl	c106c14 <OSSemPost>
 c108cc4:	ea000000 	b	c108ccc <Task2+0x68>
            OSQPostOpt( keypadQueue, (void *) &scancode, OS_POST_OPT_BROADCAST );
            while( scancode == keypad_scan() )
                OSTimeDly( 10 );
            OSTimeDly( 10 );    // rebote depresión 100 ms (10 ticks)
        }
    }
 c108cc8:	e1a00000 	nop			; (mov r0, r0)
        uart0_puts( " iniciada.\n" );
    OSSemPost( uart0Sem );

    while( 1 )                          /* Cada 0,1 segundos (10 ticks) muestrea el keypad y envía el scancode a otras tareas */
    {
        OSTimeDly( 10 );
 c108ccc:	e3a0000a 	mov	r0, #10
 c108cd0:	ebfffdc9 	bl	c1083fc <OSTimeDly>
        scancode = keypad_scan();
 c108cd4:	eb0001b8 	bl	c1093bc <keypad_scan>
 c108cd8:	e1a03000 	mov	r3, r0
 c108cdc:	e54b300e 	strb	r3, [fp, #-14]
        if( scancode != KEYPAD_FAILURE )
 c108ce0:	e55b300e 	ldrb	r3, [fp, #-14]
 c108ce4:	e35300ff 	cmp	r3, #255	; 0xff
 c108ce8:	0afffff6 	beq	c108cc8 <Task2+0x64>
        {
            OSTimeDly( 3 );    // rebote presión 30 ms (3 ticks)
 c108cec:	e3a00003 	mov	r0, #3
 c108cf0:	ebfffdc1 	bl	c1083fc <OSTimeDly>
            OSQPostOpt( keypadQueue, (void *) &scancode, OS_POST_OPT_BROADCAST );
 c108cf4:	e59f3050 	ldr	r3, [pc, #80]	; c108d4c <Task2+0xe8>
 c108cf8:	e5932000 	ldr	r2, [r3]
 c108cfc:	e24b300e 	sub	r3, fp, #14
 c108d00:	e1a00002 	mov	r0, r2
 c108d04:	e1a01003 	mov	r1, r3
 c108d08:	e3a02001 	mov	r2, #1
 c108d0c:	ebfff540 	bl	c106214 <OSQPostOpt>
            while( scancode == keypad_scan() )
 c108d10:	ea000001 	b	c108d1c <Task2+0xb8>
                OSTimeDly( 10 );
 c108d14:	e3a0000a 	mov	r0, #10
 c108d18:	ebfffdb7 	bl	c1083fc <OSTimeDly>
        scancode = keypad_scan();
        if( scancode != KEYPAD_FAILURE )
        {
            OSTimeDly( 3 );    // rebote presión 30 ms (3 ticks)
            OSQPostOpt( keypadQueue, (void *) &scancode, OS_POST_OPT_BROADCAST );
            while( scancode == keypad_scan() )
 c108d1c:	eb0001a6 	bl	c1093bc <keypad_scan>
 c108d20:	e1a03000 	mov	r3, r0
 c108d24:	e1a02003 	mov	r2, r3
 c108d28:	e55b300e 	ldrb	r3, [fp, #-14]
 c108d2c:	e1520003 	cmp	r2, r3
 c108d30:	0afffff7 	beq	c108d14 <Task2+0xb0>
                OSTimeDly( 10 );
            OSTimeDly( 10 );    // rebote depresión 100 ms (10 ticks)
 c108d34:	e3a0000a 	mov	r0, #10
 c108d38:	ebfffdaf 	bl	c1083fc <OSTimeDly>
        }
    }
 c108d3c:	eaffffe2 	b	c108ccc <Task2+0x68>
 c108d40:	0c143098 	.word	0x0c143098
 c108d44:	0c10e588 	.word	0x0c10e588
 c108d48:	0c10e590 	.word	0x0c10e590
 c108d4c:	0c143094 	.word	0x0c143094

0c108d50 <Task3>:
}

void Task3( void *id )
{
 c108d50:	e1a0c00d 	mov	ip, sp
 c108d54:	e92dd800 	push	{fp, ip, lr, pc}
 c108d58:	e24cb004 	sub	fp, ip, #4
 c108d5c:	e24dd010 	sub	sp, sp, #16
 c108d60:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
    INT8U err;
    rtc_time_t rtc_time;

    OSSemPend( uart0Sem, 0, &err );    /* Muestra un mensaje inicial en la UART0 (protegida por un semáforo) */
 c108d64:	e59f30e4 	ldr	r3, [pc, #228]	; c108e50 <Task3+0x100>
 c108d68:	e5932000 	ldr	r2, [r3]
 c108d6c:	e24b300d 	sub	r3, fp, #13
 c108d70:	e1a00002 	mov	r0, r2
 c108d74:	e3a01000 	mov	r1, #0
 c108d78:	e1a02003 	mov	r2, r3
 c108d7c:	ebfff73c 	bl	c106a74 <OSSemPend>
        uart0_puts( "  Task" );
 c108d80:	e59f00cc 	ldr	r0, [pc, #204]	; c108e54 <Task3+0x104>
 c108d84:	eb0011ab 	bl	c10d438 <uart0_puts>
        uart0_putchar( *(char *)id );
 c108d88:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c108d8c:	e5d33000 	ldrb	r3, [r3]
 c108d90:	e1a00003 	mov	r0, r3
 c108d94:	eb001181 	bl	c10d3a0 <uart0_putchar>
        uart0_puts( " iniciada.\n" );
 c108d98:	e59f00b8 	ldr	r0, [pc, #184]	; c108e58 <Task3+0x108>
 c108d9c:	eb0011a5 	bl	c10d438 <uart0_puts>
    OSSemPost( uart0Sem );
 c108da0:	e59f30a8 	ldr	r3, [pc, #168]	; c108e50 <Task3+0x100>
 c108da4:	e5933000 	ldr	r3, [r3]
 c108da8:	e1a00003 	mov	r0, r3
 c108dac:	ebfff798 	bl	c106c14 <OSSemPost>

    while( 1 )                          /* Cada segundo (100 ticks) muestra por la UART0 la hora del RTC */
    {
        rtc_gettime( &rtc_time );
 c108db0:	e24b3014 	sub	r3, fp, #20
 c108db4:	e1a00003 	mov	r0, r3
 c108db8:	eb000a91 	bl	c10b804 <rtc_gettime>
        OSSemPend( uart0Sem, 0, &err );
 c108dbc:	e59f308c 	ldr	r3, [pc, #140]	; c108e50 <Task3+0x100>
 c108dc0:	e5932000 	ldr	r2, [r3]
 c108dc4:	e24b300d 	sub	r3, fp, #13
 c108dc8:	e1a00002 	mov	r0, r2
 c108dcc:	e3a01000 	mov	r1, #0
 c108dd0:	e1a02003 	mov	r2, r3
 c108dd4:	ebfff726 	bl	c106a74 <OSSemPend>
            uart0_puts( "  (Task" );
 c108dd8:	e59f007c 	ldr	r0, [pc, #124]	; c108e5c <Task3+0x10c>
 c108ddc:	eb001195 	bl	c10d438 <uart0_puts>
            uart0_putchar( *(char *)id );
 c108de0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c108de4:	e5d33000 	ldrb	r3, [r3]
 c108de8:	e1a00003 	mov	r0, r3
 c108dec:	eb00116b 	bl	c10d3a0 <uart0_putchar>
            uart0_puts( ") Hora: " );
 c108df0:	e59f0068 	ldr	r0, [pc, #104]	; c108e60 <Task3+0x110>
 c108df4:	eb00118f 	bl	c10d438 <uart0_puts>
            uart0_putint( rtc_time.hour );
 c108df8:	e55b3012 	ldrb	r3, [fp, #-18]	; 0xffffffee
 c108dfc:	e1a00003 	mov	r0, r3
 c108e00:	eb0011a0 	bl	c10d488 <uart0_putint>
            uart0_putchar( ':' );
 c108e04:	e3a0003a 	mov	r0, #58	; 0x3a
 c108e08:	eb001164 	bl	c10d3a0 <uart0_putchar>
            uart0_putint( rtc_time.min );
 c108e0c:	e55b3013 	ldrb	r3, [fp, #-19]	; 0xffffffed
 c108e10:	e1a00003 	mov	r0, r3
 c108e14:	eb00119b 	bl	c10d488 <uart0_putint>
            uart0_putchar( ':' );
 c108e18:	e3a0003a 	mov	r0, #58	; 0x3a
 c108e1c:	eb00115f 	bl	c10d3a0 <uart0_putchar>
            uart0_putint( rtc_time.sec );
 c108e20:	e55b3014 	ldrb	r3, [fp, #-20]	; 0xffffffec
 c108e24:	e1a00003 	mov	r0, r3
 c108e28:	eb001196 	bl	c10d488 <uart0_putint>
            uart0_puts( "\n" );
 c108e2c:	e59f0030 	ldr	r0, [pc, #48]	; c108e64 <Task3+0x114>
 c108e30:	eb001180 	bl	c10d438 <uart0_puts>
        OSSemPost( uart0Sem );
 c108e34:	e59f3014 	ldr	r3, [pc, #20]	; c108e50 <Task3+0x100>
 c108e38:	e5933000 	ldr	r3, [r3]
 c108e3c:	e1a00003 	mov	r0, r3
 c108e40:	ebfff773 	bl	c106c14 <OSSemPost>
        OSTimeDly( 100 );
 c108e44:	e3a00064 	mov	r0, #100	; 0x64
 c108e48:	ebfffd6b 	bl	c1083fc <OSTimeDly>
    }
 c108e4c:	eaffffd7 	b	c108db0 <Task3+0x60>
 c108e50:	0c143098 	.word	0x0c143098
 c108e54:	0c10e588 	.word	0x0c10e588
 c108e58:	0c10e590 	.word	0x0c10e590
 c108e5c:	0c10e59c 	.word	0x0c10e59c
 c108e60:	0c10e5a4 	.word	0x0c10e5a4
 c108e64:	0c10e5b0 	.word	0x0c10e5b0

0c108e68 <Task4>:
}

void Task4( void *id )
{
 c108e68:	e1a0c00d 	mov	ip, sp
 c108e6c:	e92dd800 	push	{fp, ip, lr, pc}
 c108e70:	e24cb004 	sub	fp, ip, #4
 c108e74:	e24dd010 	sub	sp, sp, #16
 c108e78:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
    INT8U err;
    INT32U ticks;

    OSSemPend( uart0Sem, 0, &err );    /* Muestra un mensaje inicial en la UART0 (protegida por un semáforo) */
 c108e7c:	e59f30b8 	ldr	r3, [pc, #184]	; c108f3c <Task4+0xd4>
 c108e80:	e5932000 	ldr	r2, [r3]
 c108e84:	e24b3011 	sub	r3, fp, #17
 c108e88:	e1a00002 	mov	r0, r2
 c108e8c:	e3a01000 	mov	r1, #0
 c108e90:	e1a02003 	mov	r2, r3
 c108e94:	ebfff6f6 	bl	c106a74 <OSSemPend>
        uart0_puts( "  Task" );
 c108e98:	e59f00a0 	ldr	r0, [pc, #160]	; c108f40 <Task4+0xd8>
 c108e9c:	eb001165 	bl	c10d438 <uart0_puts>
        uart0_putchar( *(char *)id );
 c108ea0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c108ea4:	e5d33000 	ldrb	r3, [r3]
 c108ea8:	e1a00003 	mov	r0, r3
 c108eac:	eb00113b 	bl	c10d3a0 <uart0_putchar>
        uart0_puts( " iniciada.\n" );
 c108eb0:	e59f008c 	ldr	r0, [pc, #140]	; c108f44 <Task4+0xdc>
 c108eb4:	eb00115f 	bl	c10d438 <uart0_puts>
    OSSemPost( uart0Sem );
 c108eb8:	e59f307c 	ldr	r3, [pc, #124]	; c108f3c <Task4+0xd4>
 c108ebc:	e5933000 	ldr	r3, [r3]
 c108ec0:	e1a00003 	mov	r0, r3
 c108ec4:	ebfff752 	bl	c106c14 <OSSemPost>

    while( 1 )                          /* Cada 10 segundos (1000 ticks) muestra por la UART0 los ticks transcurridos */
    {
        ticks = OSTimeGet();
 c108ec8:	ebfffe5a 	bl	c108838 <OSTimeGet>
 c108ecc:	e50b0010 	str	r0, [fp, #-16]
        OSSemPend( uart0Sem, 0, &err );
 c108ed0:	e59f3064 	ldr	r3, [pc, #100]	; c108f3c <Task4+0xd4>
 c108ed4:	e5932000 	ldr	r2, [r3]
 c108ed8:	e24b3011 	sub	r3, fp, #17
 c108edc:	e1a00002 	mov	r0, r2
 c108ee0:	e3a01000 	mov	r1, #0
 c108ee4:	e1a02003 	mov	r2, r3
 c108ee8:	ebfff6e1 	bl	c106a74 <OSSemPend>
            uart0_puts( "  (Task" );
 c108eec:	e59f0054 	ldr	r0, [pc, #84]	; c108f48 <Task4+0xe0>
 c108ef0:	eb001150 	bl	c10d438 <uart0_puts>
            uart0_putchar( *(char *)id );
 c108ef4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c108ef8:	e5d33000 	ldrb	r3, [r3]
 c108efc:	e1a00003 	mov	r0, r3
 c108f00:	eb001126 	bl	c10d3a0 <uart0_putchar>
            uart0_puts( ") Ticks: " );
 c108f04:	e59f0040 	ldr	r0, [pc, #64]	; c108f4c <Task4+0xe4>
 c108f08:	eb00114a 	bl	c10d438 <uart0_puts>
            uart0_putint( ticks );
 c108f0c:	e51b3010 	ldr	r3, [fp, #-16]
 c108f10:	e1a00003 	mov	r0, r3
 c108f14:	eb00115b 	bl	c10d488 <uart0_putint>
            uart0_puts( "\n" );
 c108f18:	e59f0030 	ldr	r0, [pc, #48]	; c108f50 <Task4+0xe8>
 c108f1c:	eb001145 	bl	c10d438 <uart0_puts>
        OSSemPost( uart0Sem );
 c108f20:	e59f3014 	ldr	r3, [pc, #20]	; c108f3c <Task4+0xd4>
 c108f24:	e5933000 	ldr	r3, [r3]
 c108f28:	e1a00003 	mov	r0, r3
 c108f2c:	ebfff738 	bl	c106c14 <OSSemPost>
        OSTimeDly( 1000 );
 c108f30:	e3a00ffa 	mov	r0, #1000	; 0x3e8
 c108f34:	ebfffd30 	bl	c1083fc <OSTimeDly>
    }
 c108f38:	eaffffe2 	b	c108ec8 <Task4+0x60>
 c108f3c:	0c143098 	.word	0x0c143098
 c108f40:	0c10e588 	.word	0x0c10e588
 c108f44:	0c10e590 	.word	0x0c10e590
 c108f48:	0c10e59c 	.word	0x0c10e59c
 c108f4c:	0c10e5b4 	.word	0x0c10e5b4
 c108f50:	0c10e5b0 	.word	0x0c10e5b0

0c108f54 <Task5>:
}

void Task5( void *id )
{
 c108f54:	e1a0c00d 	mov	ip, sp
 c108f58:	e92dd800 	push	{fp, ip, lr, pc}
 c108f5c:	e24cb004 	sub	fp, ip, #4
 c108f60:	e24dd010 	sub	sp, sp, #16
 c108f64:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
    INT8U err;
    uint8 scancode;

    OSSemPend( uart0Sem, 0, &err );    /* Muestra un mensaje inicial en la UART0 (protegida por un semáforo) */
 c108f68:	e59f30d0 	ldr	r3, [pc, #208]	; c109040 <Task5+0xec>
 c108f6c:	e5932000 	ldr	r2, [r3]
 c108f70:	e24b300e 	sub	r3, fp, #14
 c108f74:	e1a00002 	mov	r0, r2
 c108f78:	e3a01000 	mov	r1, #0
 c108f7c:	e1a02003 	mov	r2, r3
 c108f80:	ebfff6bb 	bl	c106a74 <OSSemPend>
        uart0_puts( "  Task" );
 c108f84:	e59f00b8 	ldr	r0, [pc, #184]	; c109044 <Task5+0xf0>
 c108f88:	eb00112a 	bl	c10d438 <uart0_puts>
        uart0_putchar( *(char *)id );
 c108f8c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c108f90:	e5d33000 	ldrb	r3, [r3]
 c108f94:	e1a00003 	mov	r0, r3
 c108f98:	eb001100 	bl	c10d3a0 <uart0_putchar>
        uart0_puts( " iniciada.\n" );
 c108f9c:	e59f00a4 	ldr	r0, [pc, #164]	; c109048 <Task5+0xf4>
 c108fa0:	eb001124 	bl	c10d438 <uart0_puts>
    OSSemPost( uart0Sem );
 c108fa4:	e59f3094 	ldr	r3, [pc, #148]	; c109040 <Task5+0xec>
 c108fa8:	e5933000 	ldr	r3, [r3]
 c108fac:	e1a00003 	mov	r0, r3
 c108fb0:	ebfff717 	bl	c106c14 <OSSemPost>

    while( 1 )                         /* Cada vez que reciba un scancode lo muestra por la UART0 */
    {
        scancode = *((uint8 *) OSQPend( keypadQueue, 0, &err ));
 c108fb4:	e59f3090 	ldr	r3, [pc, #144]	; c10904c <Task5+0xf8>
 c108fb8:	e5932000 	ldr	r2, [r3]
 c108fbc:	e24b300e 	sub	r3, fp, #14
 c108fc0:	e1a00002 	mov	r0, r2
 c108fc4:	e3a01000 	mov	r1, #0
 c108fc8:	e1a02003 	mov	r2, r3
 c108fcc:	ebfff363 	bl	c105d60 <OSQPend>
 c108fd0:	e1a03000 	mov	r3, r0
 c108fd4:	e5d33000 	ldrb	r3, [r3]
 c108fd8:	e54b300d 	strb	r3, [fp, #-13]
        OSSemPend( uart0Sem, 0, &err );
 c108fdc:	e59f305c 	ldr	r3, [pc, #92]	; c109040 <Task5+0xec>
 c108fe0:	e5932000 	ldr	r2, [r3]
 c108fe4:	e24b300e 	sub	r3, fp, #14
 c108fe8:	e1a00002 	mov	r0, r2
 c108fec:	e3a01000 	mov	r1, #0
 c108ff0:	e1a02003 	mov	r2, r3
 c108ff4:	ebfff69e 	bl	c106a74 <OSSemPend>
            uart0_puts( "  (Task" );
 c108ff8:	e59f0050 	ldr	r0, [pc, #80]	; c109050 <Task5+0xfc>
 c108ffc:	eb00110d 	bl	c10d438 <uart0_puts>
            uart0_putchar( *(char *)id );
 c109000:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c109004:	e5d33000 	ldrb	r3, [r3]
 c109008:	e1a00003 	mov	r0, r3
 c10900c:	eb0010e3 	bl	c10d3a0 <uart0_putchar>
            uart0_puts( ") Tecla pulsada: " );
 c109010:	e59f003c 	ldr	r0, [pc, #60]	; c109054 <Task5+0x100>
 c109014:	eb001107 	bl	c10d438 <uart0_puts>
            uart0_puthex( scancode );
 c109018:	e55b300d 	ldrb	r3, [fp, #-13]
 c10901c:	e1a00003 	mov	r0, r3
 c109020:	eb00115d 	bl	c10d59c <uart0_puthex>
            uart0_puts( "\n" );
 c109024:	e59f002c 	ldr	r0, [pc, #44]	; c109058 <Task5+0x104>
 c109028:	eb001102 	bl	c10d438 <uart0_puts>
        OSSemPost( uart0Sem );
 c10902c:	e59f300c 	ldr	r3, [pc, #12]	; c109040 <Task5+0xec>
 c109030:	e5933000 	ldr	r3, [r3]
 c109034:	e1a00003 	mov	r0, r3
 c109038:	ebfff6f5 	bl	c106c14 <OSSemPost>
    }
 c10903c:	eaffffdc 	b	c108fb4 <Task5+0x60>
 c109040:	0c143098 	.word	0x0c143098
 c109044:	0c10e588 	.word	0x0c10e588
 c109048:	0c10e590 	.word	0x0c10e590
 c10904c:	0c143094 	.word	0x0c143094
 c109050:	0c10e59c 	.word	0x0c10e59c
 c109054:	0c10e5c0 	.word	0x0c10e5c0
 c109058:	0c10e5b0 	.word	0x0c10e5b0

0c10905c <Task6>:
}

void Task6( void *id )
{
 c10905c:	e1a0c00d 	mov	ip, sp
 c109060:	e92dd800 	push	{fp, ip, lr, pc}
 c109064:	e24cb004 	sub	fp, ip, #4
 c109068:	e24dd010 	sub	sp, sp, #16
 c10906c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
    INT8U err;
    uint8 scancode;

    OSSemPend( uart0Sem, 0, &err );    /* Muestra un mensaje inicial en la UART0 (protegida por un semáforo) */
 c109070:	e59f307c 	ldr	r3, [pc, #124]	; c1090f4 <Task6+0x98>
 c109074:	e5932000 	ldr	r2, [r3]
 c109078:	e24b300e 	sub	r3, fp, #14
 c10907c:	e1a00002 	mov	r0, r2
 c109080:	e3a01000 	mov	r1, #0
 c109084:	e1a02003 	mov	r2, r3
 c109088:	ebfff679 	bl	c106a74 <OSSemPend>
        uart0_puts( "  Task" );
 c10908c:	e59f0064 	ldr	r0, [pc, #100]	; c1090f8 <Task6+0x9c>
 c109090:	eb0010e8 	bl	c10d438 <uart0_puts>
        uart0_putchar( *(char *)id );
 c109094:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c109098:	e5d33000 	ldrb	r3, [r3]
 c10909c:	e1a00003 	mov	r0, r3
 c1090a0:	eb0010be 	bl	c10d3a0 <uart0_putchar>
        uart0_puts( " iniciada.\n" );
 c1090a4:	e59f0050 	ldr	r0, [pc, #80]	; c1090fc <Task6+0xa0>
 c1090a8:	eb0010e2 	bl	c10d438 <uart0_puts>
    OSSemPost( uart0Sem );
 c1090ac:	e59f3040 	ldr	r3, [pc, #64]	; c1090f4 <Task6+0x98>
 c1090b0:	e5933000 	ldr	r3, [r3]
 c1090b4:	e1a00003 	mov	r0, r3
 c1090b8:	ebfff6d5 	bl	c106c14 <OSSemPost>

    while( 1 )                         /* Cada vez que reciba un scancode lo muestra por los 7 segmentos */
    {
        scancode = *((uint8 *) OSQPend( keypadQueue, 0, &err ));
 c1090bc:	e59f303c 	ldr	r3, [pc, #60]	; c109100 <Task6+0xa4>
 c1090c0:	e5932000 	ldr	r2, [r3]
 c1090c4:	e24b300e 	sub	r3, fp, #14
 c1090c8:	e1a00002 	mov	r0, r2
 c1090cc:	e3a01000 	mov	r1, #0
 c1090d0:	e1a02003 	mov	r2, r3
 c1090d4:	ebfff321 	bl	c105d60 <OSQPend>
 c1090d8:	e1a03000 	mov	r3, r0
 c1090dc:	e5d33000 	ldrb	r3, [r3]
 c1090e0:	e54b300d 	strb	r3, [fp, #-13]
        segs_putchar( scancode );
 c1090e4:	e55b300d 	ldrb	r3, [fp, #-13]
 c1090e8:	e1a00003 	mov	r0, r3
 c1090ec:	eb000b29 	bl	c10bd98 <segs_putchar>
    }
 c1090f0:	eafffff1 	b	c1090bc <Task6+0x60>
 c1090f4:	0c143098 	.word	0x0c143098
 c1090f8:	0c10e588 	.word	0x0c10e588
 c1090fc:	0c10e590 	.word	0x0c10e590
 c109100:	0c143094 	.word	0x0c143094

0c109104 <Task7>:
}

/*******************************************************************/

void Task7( void *id )
{
 c109104:	e1a0c00d 	mov	ip, sp
 c109108:	e92dd800 	push	{fp, ip, lr, pc}
 c10910c:	e24cb004 	sub	fp, ip, #4
 c109110:	e24dd010 	sub	sp, sp, #16
 c109114:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
    INT8U err;
    uint8 scancode;

    OSSemPend( uart0Sem, 0, &err );    /* Muestra un mensaje inicial en la UART0 (protegida por un semáforo) */
 c109118:	e59f30f0 	ldr	r3, [pc, #240]	; c109210 <Task7+0x10c>
 c10911c:	e5932000 	ldr	r2, [r3]
 c109120:	e24b300e 	sub	r3, fp, #14
 c109124:	e1a00002 	mov	r0, r2
 c109128:	e3a01000 	mov	r1, #0
 c10912c:	e1a02003 	mov	r2, r3
 c109130:	ebfff64f 	bl	c106a74 <OSSemPend>
        uart0_puts( "  Task" );
 c109134:	e59f00d8 	ldr	r0, [pc, #216]	; c109214 <Task7+0x110>
 c109138:	eb0010be 	bl	c10d438 <uart0_puts>
        uart0_putchar( *(char *)id );
 c10913c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c109140:	e5d33000 	ldrb	r3, [r3]
 c109144:	e1a00003 	mov	r0, r3
 c109148:	eb001094 	bl	c10d3a0 <uart0_putchar>
        uart0_puts( " iniciada.\n" );
 c10914c:	e59f00c4 	ldr	r0, [pc, #196]	; c109218 <Task7+0x114>
 c109150:	eb0010b8 	bl	c10d438 <uart0_puts>
    OSSemPost( uart0Sem );
 c109154:	e59f30b4 	ldr	r3, [pc, #180]	; c109210 <Task7+0x10c>
 c109158:	e5933000 	ldr	r3, [r3]
 c10915c:	e1a00003 	mov	r0, r3
 c109160:	ebfff6ab 	bl	c106c14 <OSSemPost>

    while( 1 )                         /* Cada vez que reciba un scancode lo muestra por la UART0 */
    {
        scancode = *((uint8 *) OSQPend( keypadQueue, 0, &err ));
 c109164:	e59f30b0 	ldr	r3, [pc, #176]	; c10921c <Task7+0x118>
 c109168:	e5932000 	ldr	r2, [r3]
 c10916c:	e24b300e 	sub	r3, fp, #14
 c109170:	e1a00002 	mov	r0, r2
 c109174:	e3a01000 	mov	r1, #0
 c109178:	e1a02003 	mov	r2, r3
 c10917c:	ebfff2f7 	bl	c105d60 <OSQPend>
 c109180:	e1a03000 	mov	r3, r0
 c109184:	e5d33000 	ldrb	r3, [r3]
 c109188:	e54b300d 	strb	r3, [fp, #-13]
        OSSemPend( lcdSem, 0, &err );
 c10918c:	e59f308c 	ldr	r3, [pc, #140]	; c109220 <Task7+0x11c>
 c109190:	e5932000 	ldr	r2, [r3]
 c109194:	e24b300e 	sub	r3, fp, #14
 c109198:	e1a00002 	mov	r0, r2
 c10919c:	e3a01000 	mov	r1, #0
 c1091a0:	e1a02003 	mov	r2, r3
 c1091a4:	ebfff632 	bl	c106a74 <OSSemPend>
            lcd_puts( 20, 16, 0xf, "  (Task" );
 c1091a8:	e3a00014 	mov	r0, #20
 c1091ac:	e3a01010 	mov	r1, #16
 c1091b0:	e3a0200f 	mov	r2, #15
 c1091b4:	e59f3068 	ldr	r3, [pc, #104]	; c109224 <Task7+0x120>
 c1091b8:	eb00042a 	bl	c10a268 <lcd_puts>
            lcd_putchar( 90, 16, 0xf, *(char *)id );
 c1091bc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c1091c0:	e5d33000 	ldrb	r3, [r3]
 c1091c4:	e3a0005a 	mov	r0, #90	; 0x5a
 c1091c8:	e3a01010 	mov	r1, #16
 c1091cc:	e3a0200f 	mov	r2, #15
 c1091d0:	eb0003cf 	bl	c10a114 <lcd_putchar>
            lcd_puts( 100, 16, 0xf, ") Tecla pulsada: " );
 c1091d4:	e3a00064 	mov	r0, #100	; 0x64
 c1091d8:	e3a01010 	mov	r1, #16
 c1091dc:	e3a0200f 	mov	r2, #15
 c1091e0:	e59f3040 	ldr	r3, [pc, #64]	; c109228 <Task7+0x124>
 c1091e4:	eb00041f 	bl	c10a268 <lcd_puts>
           lcd_puthex( 240, 16, 0xf, scancode );
 c1091e8:	e55b300d 	ldrb	r3, [fp, #-13]
 c1091ec:	e3a000f0 	mov	r0, #240	; 0xf0
 c1091f0:	e3a01010 	mov	r1, #16
 c1091f4:	e3a0200f 	mov	r2, #15
 c1091f8:	eb00049e 	bl	c10a478 <lcd_puthex>
        OSSemPost( lcdSem );
 c1091fc:	e59f301c 	ldr	r3, [pc, #28]	; c109220 <Task7+0x11c>
 c109200:	e5933000 	ldr	r3, [r3]
 c109204:	e1a00003 	mov	r0, r3
 c109208:	ebfff681 	bl	c106c14 <OSSemPost>
    }
 c10920c:	eaffffd4 	b	c109164 <Task7+0x60>
 c109210:	0c143098 	.word	0x0c143098
 c109214:	0c10e588 	.word	0x0c10e588
 c109218:	0c10e590 	.word	0x0c10e590
 c10921c:	0c143094 	.word	0x0c143094
 c109220:	0c139090 	.word	0x0c139090
 c109224:	0c10e59c 	.word	0x0c10e59c
 c109228:	0c10e5c0 	.word	0x0c10e5c0

0c10922c <Task8>:
}


void Task8( void *id )
{
 c10922c:	e1a0c00d 	mov	ip, sp
 c109230:	e92dd800 	push	{fp, ip, lr, pc}
 c109234:	e24cb004 	sub	fp, ip, #4
 c109238:	e24dd010 	sub	sp, sp, #16
 c10923c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
    INT8U err;
    rtc_time_t rtc_time;

    OSSemPend( uart0Sem, 0, &err );    /* Muestra un mensaje inicial en la UART0 (protegida por un semáforo) */
 c109240:	e59f30dc 	ldr	r3, [pc, #220]	; c109324 <Task8+0xf8>
 c109244:	e5932000 	ldr	r2, [r3]
 c109248:	e24b300d 	sub	r3, fp, #13
 c10924c:	e1a00002 	mov	r0, r2
 c109250:	e3a01000 	mov	r1, #0
 c109254:	e1a02003 	mov	r2, r3
 c109258:	ebfff605 	bl	c106a74 <OSSemPend>
        uart0_puts( "  Task" );
 c10925c:	e59f00c4 	ldr	r0, [pc, #196]	; c109328 <Task8+0xfc>
 c109260:	eb001074 	bl	c10d438 <uart0_puts>
        uart0_putchar( *(char *)id );
 c109264:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c109268:	e5d33000 	ldrb	r3, [r3]
 c10926c:	e1a00003 	mov	r0, r3
 c109270:	eb00104a 	bl	c10d3a0 <uart0_putchar>
        uart0_puts( " iniciada.\n" );
 c109274:	e59f00b0 	ldr	r0, [pc, #176]	; c10932c <Task8+0x100>
 c109278:	eb00106e 	bl	c10d438 <uart0_puts>
    OSSemPost( uart0Sem );
 c10927c:	e59f30a0 	ldr	r3, [pc, #160]	; c109324 <Task8+0xf8>
 c109280:	e5933000 	ldr	r3, [r3]
 c109284:	e1a00003 	mov	r0, r3
 c109288:	ebfff661 	bl	c106c14 <OSSemPost>

    while( 1 )
    {
        rtc_gettime( &rtc_time );
 c10928c:	e24b3014 	sub	r3, fp, #20
 c109290:	e1a00003 	mov	r0, r3
 c109294:	eb00095a 	bl	c10b804 <rtc_gettime>
        OSSemPend( lcdSem, 0, &err );
 c109298:	e59f3090 	ldr	r3, [pc, #144]	; c109330 <Task8+0x104>
 c10929c:	e5932000 	ldr	r2, [r3]
 c1092a0:	e24b300d 	sub	r3, fp, #13
 c1092a4:	e1a00002 	mov	r0, r2
 c1092a8:	e3a01000 	mov	r1, #0
 c1092ac:	e1a02003 	mov	r2, r3
 c1092b0:	ebfff5ef 	bl	c106a74 <OSSemPend>
        	lcd_puts( 20, 50, 0xf, "  (Task" );
 c1092b4:	e3a00014 	mov	r0, #20
 c1092b8:	e3a01032 	mov	r1, #50	; 0x32
 c1092bc:	e3a0200f 	mov	r2, #15
 c1092c0:	e59f306c 	ldr	r3, [pc, #108]	; c109334 <Task8+0x108>
 c1092c4:	eb0003e7 	bl	c10a268 <lcd_puts>
        	lcd_putchar( 90, 50, 0xf, *(char *)id );
 c1092c8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c1092cc:	e5d33000 	ldrb	r3, [r3]
 c1092d0:	e3a0005a 	mov	r0, #90	; 0x5a
 c1092d4:	e3a01032 	mov	r1, #50	; 0x32
 c1092d8:	e3a0200f 	mov	r2, #15
 c1092dc:	eb00038c 	bl	c10a114 <lcd_putchar>
        	lcd_puts( 100, 50, 0xf, ") Tiempo: " );
 c1092e0:	e3a00064 	mov	r0, #100	; 0x64
 c1092e4:	e3a01032 	mov	r1, #50	; 0x32
 c1092e8:	e3a0200f 	mov	r2, #15
 c1092ec:	e59f3044 	ldr	r3, [pc, #68]	; c109338 <Task8+0x10c>
 c1092f0:	eb0003dc 	bl	c10a268 <lcd_puts>
            lcd_putint( 200, 50, 0xf, rtc_time.sec );
 c1092f4:	e55b3014 	ldrb	r3, [fp, #-20]	; 0xffffffec
 c1092f8:	e3a000c8 	mov	r0, #200	; 0xc8
 c1092fc:	e3a01032 	mov	r1, #50	; 0x32
 c109300:	e3a0200f 	mov	r2, #15
 c109304:	eb000408 	bl	c10a32c <lcd_putint>
          //  lcd_puts( "\n" );
        OSSemPost( lcdSem );
 c109308:	e59f3020 	ldr	r3, [pc, #32]	; c109330 <Task8+0x104>
 c10930c:	e5933000 	ldr	r3, [r3]
 c109310:	e1a00003 	mov	r0, r3
 c109314:	ebfff63e 	bl	c106c14 <OSSemPost>
        OSTimeDly( 100 );
 c109318:	e3a00064 	mov	r0, #100	; 0x64
 c10931c:	ebfffc36 	bl	c1083fc <OSTimeDly>
    }
 c109320:	eaffffd9 	b	c10928c <Task8+0x60>
 c109324:	0c143098 	.word	0x0c143098
 c109328:	0c10e588 	.word	0x0c10e588
 c10932c:	0c10e590 	.word	0x0c10e590
 c109330:	0c139090 	.word	0x0c139090
 c109334:	0c10e59c 	.word	0x0c10e59c
 c109338:	0c10e5d4 	.word	0x0c10e5d4

0c10933c <isr_pb>:
}

void isr_pb( void )
{
 c10933c:	e1a0c00d 	mov	ip, sp
 c109340:	e92dd800 	push	{fp, ip, lr, pc}
 c109344:	e24cb004 	sub	fp, ip, #4
    if( OSSemAccept( uart0Sem ) )     /* Si detecta la presión de un pulsador muestra un mensaje por la UART0 (si no está siendo usada) */
 c109348:	e59f305c 	ldr	r3, [pc, #92]	; c1093ac <isr_pb+0x70>
 c10934c:	e5933000 	ldr	r3, [r3]
 c109350:	e1a00003 	mov	r0, r3
 c109354:	ebfff4d7 	bl	c1066b8 <OSSemAccept>
 c109358:	e1a03000 	mov	r3, r0
 c10935c:	e3530000 	cmp	r3, #0
 c109360:	0a000005 	beq	c10937c <isr_pb+0x40>
    {
        uart0_puts( "  (INT) Se ha pulsado algún pushbutton...\n" );
 c109364:	e59f0044 	ldr	r0, [pc, #68]	; c1093b0 <isr_pb+0x74>
 c109368:	eb001032 	bl	c10d438 <uart0_puts>
        OSSemPost( uart0Sem );
 c10936c:	e59f3038 	ldr	r3, [pc, #56]	; c1093ac <isr_pb+0x70>
 c109370:	e5933000 	ldr	r3, [r3]
 c109374:	e1a00003 	mov	r0, r3
 c109378:	ebfff625 	bl	c106c14 <OSSemPost>
    }
    EXTINTPND = BIT_RIGHTPB;
 c10937c:	e59f3030 	ldr	r3, [pc, #48]	; c1093b4 <isr_pb+0x78>
 c109380:	e3a02008 	mov	r2, #8
 c109384:	e5832000 	str	r2, [r3]
    EXTINTPND = BIT_LEFTPB;
 c109388:	e59f3024 	ldr	r3, [pc, #36]	; c1093b4 <isr_pb+0x78>
 c10938c:	e3a02004 	mov	r2, #4
 c109390:	e5832000 	str	r2, [r3]
    I_ISPC = BIT_PB;
 c109394:	e59f301c 	ldr	r3, [pc, #28]	; c1093b8 <isr_pb+0x7c>
 c109398:	e3a02602 	mov	r2, #2097152	; 0x200000
 c10939c:	e5832000 	str	r2, [r3]
}
 c1093a0:	e24bd00c 	sub	sp, fp, #12
 c1093a4:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1093a8:	e12fff1e 	bx	lr
 c1093ac:	0c143098 	.word	0x0c143098
 c1093b0:	0c10e5e0 	.word	0x0c10e5e0
 c1093b4:	01d20054 	.word	0x01d20054
 c1093b8:	01e00024 	.word	0x01e00024

0c1093bc <keypad_scan>:
#include <keypad.h>

extern void isr_KEYPAD_dummy( void );

uint8 keypad_scan( void )
{
 c1093bc:	e1a0c00d 	mov	ip, sp
 c1093c0:	e92dd800 	push	{fp, ip, lr, pc}
 c1093c4:	e24cb004 	sub	fp, ip, #4
 c1093c8:	e24dd008 	sub	sp, sp, #8
    uint8 aux;

    aux = *( KEYPAD_ADDR + 0x1c );//máscara de scan: 0b00011100
 c1093cc:	e59f31fc 	ldr	r3, [pc, #508]	; c1095d0 <keypad_scan+0x214>
 c1093d0:	e5d33000 	ldrb	r3, [r3]
 c1093d4:	e54b300d 	strb	r3, [fp, #-13]

    if( (aux & 0x0f) != 0x0f )//comprueba si la tecla pulsada está en la fila 1
 c1093d8:	e55b300d 	ldrb	r3, [fp, #-13]
 c1093dc:	e203300f 	and	r3, r3, #15
 c1093e0:	e353000f 	cmp	r3, #15
 c1093e4:	0a000017 	beq	c109448 <keypad_scan+0x8c>
    {
        if( (aux & 0x8) == 0 )//comprueba si está en la columna 1
 c1093e8:	e55b300d 	ldrb	r3, [fp, #-13]
 c1093ec:	e2033008 	and	r3, r3, #8
 c1093f0:	e3530000 	cmp	r3, #0
 c1093f4:	1a000001 	bne	c109400 <keypad_scan+0x44>
            return KEYPAD_KEY0;
 c1093f8:	e3a03000 	mov	r3, #0
 c1093fc:	ea00006f 	b	c1095c0 <keypad_scan+0x204>
        else if( (aux & 0x4) == 0 )//comprueba si está en la columna 2
 c109400:	e55b300d 	ldrb	r3, [fp, #-13]
 c109404:	e2033004 	and	r3, r3, #4
 c109408:	e3530000 	cmp	r3, #0
 c10940c:	1a000001 	bne	c109418 <keypad_scan+0x5c>
            return KEYPAD_KEY1;
 c109410:	e3a03001 	mov	r3, #1
 c109414:	ea000069 	b	c1095c0 <keypad_scan+0x204>
        else if( (aux & 0x2) == 0 )
 c109418:	e55b300d 	ldrb	r3, [fp, #-13]
 c10941c:	e2033002 	and	r3, r3, #2
 c109420:	e3530000 	cmp	r3, #0
 c109424:	1a000001 	bne	c109430 <keypad_scan+0x74>
            return KEYPAD_KEY2;
 c109428:	e3a03002 	mov	r3, #2
 c10942c:	ea000063 	b	c1095c0 <keypad_scan+0x204>
        else if( (aux & 0x1) == 0 )
 c109430:	e55b300d 	ldrb	r3, [fp, #-13]
 c109434:	e2033001 	and	r3, r3, #1
 c109438:	e3530000 	cmp	r3, #0
 c10943c:	1a000001 	bne	c109448 <keypad_scan+0x8c>
            return KEYPAD_KEY3;
 c109440:	e3a03003 	mov	r3, #3
 c109444:	ea00005d 	b	c1095c0 <keypad_scan+0x204>
    }

    aux = *( KEYPAD_ADDR + 0x1a);
 c109448:	e59f3184 	ldr	r3, [pc, #388]	; c1095d4 <keypad_scan+0x218>
 c10944c:	e5d33000 	ldrb	r3, [r3]
 c109450:	e54b300d 	strb	r3, [fp, #-13]
    if( (aux & 0x0f) != 0x0f )
 c109454:	e55b300d 	ldrb	r3, [fp, #-13]
 c109458:	e203300f 	and	r3, r3, #15
 c10945c:	e353000f 	cmp	r3, #15
 c109460:	0a000017 	beq	c1094c4 <keypad_scan+0x108>
    {
    	if( (aux & 0x8) == 0 )
 c109464:	e55b300d 	ldrb	r3, [fp, #-13]
 c109468:	e2033008 	and	r3, r3, #8
 c10946c:	e3530000 	cmp	r3, #0
 c109470:	1a000001 	bne	c10947c <keypad_scan+0xc0>
    		return KEYPAD_KEY4;
 c109474:	e3a03004 	mov	r3, #4
 c109478:	ea000050 	b	c1095c0 <keypad_scan+0x204>
    	else if( (aux & 0x4) == 0 )
 c10947c:	e55b300d 	ldrb	r3, [fp, #-13]
 c109480:	e2033004 	and	r3, r3, #4
 c109484:	e3530000 	cmp	r3, #0
 c109488:	1a000001 	bne	c109494 <keypad_scan+0xd8>
    		return KEYPAD_KEY5;
 c10948c:	e3a03005 	mov	r3, #5
 c109490:	ea00004a 	b	c1095c0 <keypad_scan+0x204>
    	else if( (aux & 0x2) == 0 )
 c109494:	e55b300d 	ldrb	r3, [fp, #-13]
 c109498:	e2033002 	and	r3, r3, #2
 c10949c:	e3530000 	cmp	r3, #0
 c1094a0:	1a000001 	bne	c1094ac <keypad_scan+0xf0>
    		return KEYPAD_KEY6;
 c1094a4:	e3a03006 	mov	r3, #6
 c1094a8:	ea000044 	b	c1095c0 <keypad_scan+0x204>
    	else if( (aux & 0x1) == 0 )
 c1094ac:	e55b300d 	ldrb	r3, [fp, #-13]
 c1094b0:	e2033001 	and	r3, r3, #1
 c1094b4:	e3530000 	cmp	r3, #0
 c1094b8:	1a000001 	bne	c1094c4 <keypad_scan+0x108>
    		return KEYPAD_KEY7;
 c1094bc:	e3a03007 	mov	r3, #7
 c1094c0:	ea00003e 	b	c1095c0 <keypad_scan+0x204>
    }

    aux = *( KEYPAD_ADDR + 0x16);
 c1094c4:	e59f310c 	ldr	r3, [pc, #268]	; c1095d8 <keypad_scan+0x21c>
 c1094c8:	e5d33000 	ldrb	r3, [r3]
 c1094cc:	e54b300d 	strb	r3, [fp, #-13]
    if( (aux & 0x0f) != 0x0f )
 c1094d0:	e55b300d 	ldrb	r3, [fp, #-13]
 c1094d4:	e203300f 	and	r3, r3, #15
 c1094d8:	e353000f 	cmp	r3, #15
 c1094dc:	0a000017 	beq	c109540 <keypad_scan+0x184>
    {
    	if( (aux & 0x8) == 0 )
 c1094e0:	e55b300d 	ldrb	r3, [fp, #-13]
 c1094e4:	e2033008 	and	r3, r3, #8
 c1094e8:	e3530000 	cmp	r3, #0
 c1094ec:	1a000001 	bne	c1094f8 <keypad_scan+0x13c>
    		return KEYPAD_KEY8;
 c1094f0:	e3a03008 	mov	r3, #8
 c1094f4:	ea000031 	b	c1095c0 <keypad_scan+0x204>
    	else if( (aux & 0x4) == 0 )
 c1094f8:	e55b300d 	ldrb	r3, [fp, #-13]
 c1094fc:	e2033004 	and	r3, r3, #4
 c109500:	e3530000 	cmp	r3, #0
 c109504:	1a000001 	bne	c109510 <keypad_scan+0x154>
    		return KEYPAD_KEY9;
 c109508:	e3a03009 	mov	r3, #9
 c10950c:	ea00002b 	b	c1095c0 <keypad_scan+0x204>
    	else if( (aux & 0x2) == 0 )
 c109510:	e55b300d 	ldrb	r3, [fp, #-13]
 c109514:	e2033002 	and	r3, r3, #2
 c109518:	e3530000 	cmp	r3, #0
 c10951c:	1a000001 	bne	c109528 <keypad_scan+0x16c>
    		return KEYPAD_KEYA;
 c109520:	e3a0300a 	mov	r3, #10
 c109524:	ea000025 	b	c1095c0 <keypad_scan+0x204>
    	else if( (aux & 0x1) == 0 )
 c109528:	e55b300d 	ldrb	r3, [fp, #-13]
 c10952c:	e2033001 	and	r3, r3, #1
 c109530:	e3530000 	cmp	r3, #0
 c109534:	1a000001 	bne	c109540 <keypad_scan+0x184>
    		return KEYPAD_KEYB;
 c109538:	e3a0300b 	mov	r3, #11
 c10953c:	ea00001f 	b	c1095c0 <keypad_scan+0x204>
    }

    aux = *( KEYPAD_ADDR + 0x0e);
 c109540:	e59f3094 	ldr	r3, [pc, #148]	; c1095dc <keypad_scan+0x220>
 c109544:	e5d33000 	ldrb	r3, [r3]
 c109548:	e54b300d 	strb	r3, [fp, #-13]
    if( (aux & 0x0f) != 0x0f )
 c10954c:	e55b300d 	ldrb	r3, [fp, #-13]
 c109550:	e203300f 	and	r3, r3, #15
 c109554:	e353000f 	cmp	r3, #15
 c109558:	0a000017 	beq	c1095bc <keypad_scan+0x200>
    {
    	if( (aux & 0x8) == 0 )
 c10955c:	e55b300d 	ldrb	r3, [fp, #-13]
 c109560:	e2033008 	and	r3, r3, #8
 c109564:	e3530000 	cmp	r3, #0
 c109568:	1a000001 	bne	c109574 <keypad_scan+0x1b8>
    	    return KEYPAD_KEYC;
 c10956c:	e3a0300c 	mov	r3, #12
 c109570:	ea000012 	b	c1095c0 <keypad_scan+0x204>
    	else if( (aux & 0x4) == 0 )
 c109574:	e55b300d 	ldrb	r3, [fp, #-13]
 c109578:	e2033004 	and	r3, r3, #4
 c10957c:	e3530000 	cmp	r3, #0
 c109580:	1a000001 	bne	c10958c <keypad_scan+0x1d0>
    	    return KEYPAD_KEYD;
 c109584:	e3a0300d 	mov	r3, #13
 c109588:	ea00000c 	b	c1095c0 <keypad_scan+0x204>
    	else if( (aux & 0x2) == 0 )
 c10958c:	e55b300d 	ldrb	r3, [fp, #-13]
 c109590:	e2033002 	and	r3, r3, #2
 c109594:	e3530000 	cmp	r3, #0
 c109598:	1a000001 	bne	c1095a4 <keypad_scan+0x1e8>
    	    return KEYPAD_KEYE;
 c10959c:	e3a0300e 	mov	r3, #14
 c1095a0:	ea000006 	b	c1095c0 <keypad_scan+0x204>
    	else if( (aux & 0x1) == 0 )
 c1095a4:	e55b300d 	ldrb	r3, [fp, #-13]
 c1095a8:	e2033001 	and	r3, r3, #1
 c1095ac:	e3530000 	cmp	r3, #0
 c1095b0:	1a000001 	bne	c1095bc <keypad_scan+0x200>
    	    return KEYPAD_KEYF;
 c1095b4:	e3a0300f 	mov	r3, #15
 c1095b8:	ea000000 	b	c1095c0 <keypad_scan+0x204>
    }

    return KEYPAD_FAILURE;
 c1095bc:	e3a030ff 	mov	r3, #255	; 0xff
}
 c1095c0:	e1a00003 	mov	r0, r3
 c1095c4:	e24bd00c 	sub	sp, fp, #12
 c1095c8:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1095cc:	e12fff1e 	bx	lr
 c1095d0:	0600001c 	.word	0x0600001c
 c1095d4:	0600001a 	.word	0x0600001a
 c1095d8:	06000016 	.word	0x06000016
 c1095dc:	0600000e 	.word	0x0600000e

0c1095e0 <keypad_status>:

uint8 keypad_status( uint8 scancode )
{
 c1095e0:	e1a0c00d 	mov	ip, sp
 c1095e4:	e92dd800 	push	{fp, ip, lr, pc}
 c1095e8:	e24cb004 	sub	fp, ip, #4
 c1095ec:	e24dd008 	sub	sp, sp, #8
 c1095f0:	e1a03000 	mov	r3, r0
 c1095f4:	e54b300d 	strb	r3, [fp, #-13]
	if (keypad_scan() == scancode){
 c1095f8:	ebffff6f 	bl	c1093bc <keypad_scan>
 c1095fc:	e1a03000 	mov	r3, r0
 c109600:	e55b200d 	ldrb	r2, [fp, #-13]
 c109604:	e1520003 	cmp	r2, r3
 c109608:	1a000001 	bne	c109614 <keypad_status+0x34>
	    return KEY_DOWN;
 c10960c:	e3a03001 	mov	r3, #1
 c109610:	ea000000 	b	c109618 <keypad_status+0x38>
	}
	else{
	    return KEY_UP;
 c109614:	e3a03000 	mov	r3, #0
	}
}
 c109618:	e1a00003 	mov	r0, r3
 c10961c:	e24bd00c 	sub	sp, fp, #12
 c109620:	e89d6800 	ldm	sp, {fp, sp, lr}
 c109624:	e12fff1e 	bx	lr

0c109628 <keypad_open>:

void keypad_open( void (*isr)(void) )
{
 c109628:	e1a0c00d 	mov	ip, sp
 c10962c:	e92dd800 	push	{fp, ip, lr, pc}
 c109630:	e24cb004 	sub	fp, ip, #4
 c109634:	e24dd008 	sub	sp, sp, #8
 c109638:	e50b0010 	str	r0, [fp, #-16]
	pISR_KEYPAD	= (uint32) isr;
 c10963c:	e59f3030 	ldr	r3, [pc, #48]	; c109674 <keypad_open+0x4c>
 c109640:	e51b2010 	ldr	r2, [fp, #-16]
 c109644:	e5832000 	str	r2, [r3]
	I_ISPC = BIT_KEYPAD;
 c109648:	e59f3028 	ldr	r3, [pc, #40]	; c109678 <keypad_open+0x50>
 c10964c:	e3a02401 	mov	r2, #16777216	; 0x1000000
 c109650:	e5832000 	str	r2, [r3]
	INTMSK	&= ~(BIT_GLOBAL | BIT_KEYPAD);
 c109654:	e59f3020 	ldr	r3, [pc, #32]	; c10967c <keypad_open+0x54>
 c109658:	e59f201c 	ldr	r2, [pc, #28]	; c10967c <keypad_open+0x54>
 c10965c:	e5922000 	ldr	r2, [r2]
 c109660:	e3c22405 	bic	r2, r2, #83886080	; 0x5000000
 c109664:	e5832000 	str	r2, [r3]
}
 c109668:	e24bd00c 	sub	sp, fp, #12
 c10966c:	e89d6800 	ldm	sp, {fp, sp, lr}
 c109670:	e12fff1e 	bx	lr
 c109674:	0c7fff80 	.word	0x0c7fff80
 c109678:	01e00024 	.word	0x01e00024
 c10967c:	01e0000c 	.word	0x01e0000c

0c109680 <keypad_close>:

void keypad_close( void )
{
 c109680:	e1a0c00d 	mov	ip, sp
 c109684:	e92dd800 	push	{fp, ip, lr, pc}
 c109688:	e24cb004 	sub	fp, ip, #4
	INTMSK |=  BIT_KEYPAD;
 c10968c:	e59f3024 	ldr	r3, [pc, #36]	; c1096b8 <keypad_close+0x38>
 c109690:	e59f2020 	ldr	r2, [pc, #32]	; c1096b8 <keypad_close+0x38>
 c109694:	e5922000 	ldr	r2, [r2]
 c109698:	e3822401 	orr	r2, r2, #16777216	; 0x1000000
 c10969c:	e5832000 	str	r2, [r3]
	pISR_KEYPAD	= (uint32) isr_KEYPAD_dummy;
 c1096a0:	e59f3014 	ldr	r3, [pc, #20]	; c1096bc <keypad_close+0x3c>
 c1096a4:	e59f2014 	ldr	r2, [pc, #20]	; c1096c0 <keypad_close+0x40>
 c1096a8:	e5832000 	str	r2, [r3]
}
 c1096ac:	e24bd00c 	sub	sp, fp, #12
 c1096b0:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1096b4:	e12fff1e 	bx	lr
 c1096b8:	01e0000c 	.word	0x01e0000c
 c1096bc:	0c7fff80 	.word	0x0c7fff80
 c1096c0:	0c10c8a0 	.word	0x0c10c8a0

0c1096c4 <keypad_init>:

#if KEYPAD_IO_METHOD == POOLING


void keypad_init( void )
{
 c1096c4:	e1a0c00d 	mov	ip, sp
 c1096c8:	e92dd800 	push	{fp, ip, lr, pc}
 c1096cc:	e24cb004 	sub	fp, ip, #4
	EXTINT = (EXTINT & ~(0xf<<4)) | (2<<4);
 c1096d0:	e59f301c 	ldr	r3, [pc, #28]	; c1096f4 <keypad_init+0x30>
 c1096d4:	e59f2018 	ldr	r2, [pc, #24]	; c1096f4 <keypad_init+0x30>
 c1096d8:	e5922000 	ldr	r2, [r2]
 c1096dc:	e3c220f0 	bic	r2, r2, #240	; 0xf0
 c1096e0:	e3822020 	orr	r2, r2, #32
 c1096e4:	e5832000 	str	r2, [r3]
};
 c1096e8:	e24bd00c 	sub	sp, fp, #12
 c1096ec:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1096f0:	e12fff1e 	bx	lr
 c1096f4:	01d20050 	.word	0x01d20050

0c1096f8 <keypad_wait_keydown>:


void keypad_wait_keydown( uint8 scancode )
{
 c1096f8:	e1a0c00d 	mov	ip, sp
 c1096fc:	e92dd800 	push	{fp, ip, lr, pc}
 c109700:	e24cb004 	sub	fp, ip, #4
 c109704:	e24dd008 	sub	sp, sp, #8
 c109708:	e1a03000 	mov	r3, r0
 c10970c:	e54b300d 	strb	r3, [fp, #-13]
     while( 1 ) 
     {
        while( PDATG & (1 << 1) ); // espera presión del keypad
 c109710:	e1a00000 	nop			; (mov r0, r0)
 c109714:	e59f305c 	ldr	r3, [pc, #92]	; c109778 <keypad_wait_keydown+0x80>
 c109718:	e5933000 	ldr	r3, [r3]
 c10971c:	e2033002 	and	r3, r3, #2
 c109720:	e3530000 	cmp	r3, #0
 c109724:	1afffffa 	bne	c109714 <keypad_wait_keydown+0x1c>
        sw_delay_ms( KEYPAD_KEYDOWN_DELAY ); // eliminación de rebotes
 c109728:	e3a0001e 	mov	r0, #30
 c10972c:	eb000d2c 	bl	c10cbe4 <sw_delay_ms>
        if ( scancode == keypad_scan() )// si se pulsa la tecla indicada por scancode
 c109730:	ebffff21 	bl	c1093bc <keypad_scan>
 c109734:	e1a03000 	mov	r3, r0
 c109738:	e55b200d 	ldrb	r2, [fp, #-13]
 c10973c:	e1520003 	cmp	r2, r3
 c109740:	0a000009 	beq	c10976c <keypad_wait_keydown+0x74>
            return;
        while( (PDATG &(1 << 1)) == 0 ); // si no lo es, espera depresión y vulve a empezar
 c109744:	e1a00000 	nop			; (mov r0, r0)
 c109748:	e59f3028 	ldr	r3, [pc, #40]	; c109778 <keypad_wait_keydown+0x80>
 c10974c:	e5933000 	ldr	r3, [r3]
 c109750:	e2033002 	and	r3, r3, #2
 c109754:	e3530000 	cmp	r3, #0
 c109758:	0afffffa 	beq	c109748 <keypad_wait_keydown+0x50>
        sw_delay_ms( KEYPAD_KEYUP_DELAY );
 c10975c:	e3a00064 	mov	r0, #100	; 0x64
 c109760:	eb000d1f 	bl	c10cbe4 <sw_delay_ms>
    }         
 c109764:	e1a00000 	nop			; (mov r0, r0)

void keypad_wait_keydown( uint8 scancode )
{
     while( 1 ) 
     {
        while( PDATG & (1 << 1) ); // espera presión del keypad
 c109768:	eaffffe9 	b	c109714 <keypad_wait_keydown+0x1c>
        if ( scancode == keypad_scan() )// si se pulsa la tecla indicada por scancode
            return;
        while( (PDATG &(1 << 1)) == 0 ); // si no lo es, espera depresión y vulve a empezar
        sw_delay_ms( KEYPAD_KEYUP_DELAY );
    }         
}
 c10976c:	e24bd00c 	sub	sp, fp, #12
 c109770:	e89d6800 	ldm	sp, {fp, sp, lr}
 c109774:	e12fff1e 	bx	lr
 c109778:	01d20044 	.word	0x01d20044

0c10977c <keypad_wait_keyup>:

void keypad_wait_keyup( uint8 scancode )
{
 c10977c:	e1a0c00d 	mov	ip, sp
 c109780:	e92dd800 	push	{fp, ip, lr, pc}
 c109784:	e24cb004 	sub	fp, ip, #4
 c109788:	e24dd008 	sub	sp, sp, #8
 c10978c:	e1a03000 	mov	r3, r0
 c109790:	e54b300d 	strb	r3, [fp, #-13]
	 while( 1 )
	 {
	      while( PDATG & (1 << 1) );
 c109794:	e1a00000 	nop			; (mov r0, r0)
 c109798:	e59f305c 	ldr	r3, [pc, #92]	; c1097fc <keypad_wait_keyup+0x80>
 c10979c:	e5933000 	ldr	r3, [r3]
 c1097a0:	e2033002 	and	r3, r3, #2
 c1097a4:	e3530000 	cmp	r3, #0
 c1097a8:	1afffffa 	bne	c109798 <keypad_wait_keyup+0x1c>
	      sw_delay_ms( KEYPAD_KEYDOWN_DELAY );
 c1097ac:	e3a0001e 	mov	r0, #30
 c1097b0:	eb000d0b 	bl	c10cbe4 <sw_delay_ms>
	      if ( scancode == keypad_scan() )
 c1097b4:	ebffff00 	bl	c1093bc <keypad_scan>
 c1097b8:	e1a03000 	mov	r3, r0
 c1097bc:	e55b200d 	ldrb	r2, [fp, #-13]
 c1097c0:	e1520003 	cmp	r2, r3
 c1097c4:	1a00000a 	bne	c1097f4 <keypad_wait_keyup+0x78>
	      {
		      while( (PDATG &(1 << 1)) == 0 );
 c1097c8:	e1a00000 	nop			; (mov r0, r0)
 c1097cc:	e59f3028 	ldr	r3, [pc, #40]	; c1097fc <keypad_wait_keyup+0x80>
 c1097d0:	e5933000 	ldr	r3, [r3]
 c1097d4:	e2033002 	and	r3, r3, #2
 c1097d8:	e3530000 	cmp	r3, #0
 c1097dc:	0afffffa 	beq	c1097cc <keypad_wait_keyup+0x50>
		      sw_delay_ms( KEYPAD_KEYUP_DELAY );
 c1097e0:	e3a00064 	mov	r0, #100	; 0x64
 c1097e4:	eb000cfe 	bl	c10cbe4 <sw_delay_ms>
	          return;
	      }
	  }
}
 c1097e8:	e24bd00c 	sub	sp, fp, #12
 c1097ec:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1097f0:	e12fff1e 	bx	lr
	      {
		      while( (PDATG &(1 << 1)) == 0 );
		      sw_delay_ms( KEYPAD_KEYUP_DELAY );
	          return;
	      }
	  }
 c1097f4:	e1a00000 	nop			; (mov r0, r0)

void keypad_wait_keyup( uint8 scancode )
{
	 while( 1 )
	 {
	      while( PDATG & (1 << 1) );
 c1097f8:	eaffffe6 	b	c109798 <keypad_wait_keyup+0x1c>
 c1097fc:	01d20044 	.word	0x01d20044

0c109800 <keypad_wait_any_keydown>:
	      }
	  }
}

void keypad_wait_any_keydown( void )
{
 c109800:	e1a0c00d 	mov	ip, sp
 c109804:	e92dd800 	push	{fp, ip, lr, pc}
 c109808:	e24cb004 	sub	fp, ip, #4
	while(PDATG & (1<<1) );
 c10980c:	e1a00000 	nop			; (mov r0, r0)
 c109810:	e59f3040 	ldr	r3, [pc, #64]	; c109858 <keypad_wait_any_keydown+0x58>
 c109814:	e5933000 	ldr	r3, [r3]
 c109818:	e2033002 	and	r3, r3, #2
 c10981c:	e3530000 	cmp	r3, #0
 c109820:	1afffffa 	bne	c109810 <keypad_wait_any_keydown+0x10>
	sw_delay_ms( KEYPAD_KEYDOWN_DELAY );
 c109824:	e3a0001e 	mov	r0, #30
 c109828:	eb000ced 	bl	c10cbe4 <sw_delay_ms>
	while( (PDATG & ( 1 << 1)) == 0 );
 c10982c:	e1a00000 	nop			; (mov r0, r0)
 c109830:	e59f3020 	ldr	r3, [pc, #32]	; c109858 <keypad_wait_any_keydown+0x58>
 c109834:	e5933000 	ldr	r3, [r3]
 c109838:	e2033002 	and	r3, r3, #2
 c10983c:	e3530000 	cmp	r3, #0
 c109840:	0afffffa 	beq	c109830 <keypad_wait_any_keydown+0x30>
    sw_delay_ms( KEYPAD_KEYUP_DELAY );
 c109844:	e3a00064 	mov	r0, #100	; 0x64
 c109848:	eb000ce5 	bl	c10cbe4 <sw_delay_ms>
}
 c10984c:	e24bd00c 	sub	sp, fp, #12
 c109850:	e89d6800 	ldm	sp, {fp, sp, lr}
 c109854:	e12fff1e 	bx	lr
 c109858:	01d20044 	.word	0x01d20044

0c10985c <keypad_wait_any_keyup>:

void keypad_wait_any_keyup( void )
{
 c10985c:	e1a0c00d 	mov	ip, sp
 c109860:	e92dd800 	push	{fp, ip, lr, pc}
 c109864:	e24cb004 	sub	fp, ip, #4
	while(PDATG & (1<<1));
 c109868:	e1a00000 	nop			; (mov r0, r0)
 c10986c:	e59f3038 	ldr	r3, [pc, #56]	; c1098ac <keypad_wait_any_keyup+0x50>
 c109870:	e5933000 	ldr	r3, [r3]
 c109874:	e2033002 	and	r3, r3, #2
 c109878:	e3530000 	cmp	r3, #0
 c10987c:	1afffffa 	bne	c10986c <keypad_wait_any_keyup+0x10>
	sw_delay_ms( KEYPAD_KEYUP_DELAY );
 c109880:	e3a00064 	mov	r0, #100	; 0x64
 c109884:	eb000cd6 	bl	c10cbe4 <sw_delay_ms>
	while( (PDATG & (1<<1)) == 0 );
 c109888:	e1a00000 	nop			; (mov r0, r0)
 c10988c:	e59f3018 	ldr	r3, [pc, #24]	; c1098ac <keypad_wait_any_keyup+0x50>
 c109890:	e5933000 	ldr	r3, [r3]
 c109894:	e2033002 	and	r3, r3, #2
 c109898:	e3530000 	cmp	r3, #0
 c10989c:	0afffffa 	beq	c10988c <keypad_wait_any_keyup+0x30>
}
 c1098a0:	e24bd00c 	sub	sp, fp, #12
 c1098a4:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1098a8:	e12fff1e 	bx	lr
 c1098ac:	01d20044 	.word	0x01d20044

0c1098b0 <keypad_getchar>:

uint8 keypad_getchar( void )
{
 c1098b0:	e1a0c00d 	mov	ip, sp
 c1098b4:	e92dd800 	push	{fp, ip, lr, pc}
 c1098b8:	e24cb004 	sub	fp, ip, #4
 c1098bc:	e24dd008 	sub	sp, sp, #8
	uint8 scancode;
    while(PDATG & (1<<1)); // esperar presión
 c1098c0:	e1a00000 	nop			; (mov r0, r0)
 c1098c4:	e59f3054 	ldr	r3, [pc, #84]	; c109920 <keypad_getchar+0x70>
 c1098c8:	e5933000 	ldr	r3, [r3]
 c1098cc:	e2033002 	and	r3, r3, #2
 c1098d0:	e3530000 	cmp	r3, #0
 c1098d4:	1afffffa 	bne	c1098c4 <keypad_getchar+0x14>
    sw_delay_ms( KEYPAD_KEYDOWN_DELAY );
 c1098d8:	e3a0001e 	mov	r0, #30
 c1098dc:	eb000cc0 	bl	c10cbe4 <sw_delay_ms>
    scancode = keypad_scan();// guardo el scancode de la key pulsada
 c1098e0:	ebfffeb5 	bl	c1093bc <keypad_scan>
 c1098e4:	e1a03000 	mov	r3, r0
 c1098e8:	e54b300d 	strb	r3, [fp, #-13]

    while( (PDATG & (1<<1)) == 0 ); // espero depresión
 c1098ec:	e1a00000 	nop			; (mov r0, r0)
 c1098f0:	e59f3028 	ldr	r3, [pc, #40]	; c109920 <keypad_getchar+0x70>
 c1098f4:	e5933000 	ldr	r3, [r3]
 c1098f8:	e2033002 	and	r3, r3, #2
 c1098fc:	e3530000 	cmp	r3, #0
 c109900:	0afffffa 	beq	c1098f0 <keypad_getchar+0x40>
    sw_delay_ms( KEYPAD_KEYUP_DELAY );
 c109904:	e3a00064 	mov	r0, #100	; 0x64
 c109908:	eb000cb5 	bl	c10cbe4 <sw_delay_ms>

    return scancode; // lo devuelvo
 c10990c:	e55b300d 	ldrb	r3, [fp, #-13]
}
 c109910:	e1a00003 	mov	r0, r3
 c109914:	e24bd00c 	sub	sp, fp, #12
 c109918:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10991c:	e12fff1e 	bx	lr
 c109920:	01d20044 	.word	0x01d20044

0c109924 <keypad_getchartime>:

uint8 keypad_getchartime( uint16 *ms )
{
 c109924:	e1a0c00d 	mov	ip, sp
 c109928:	e92dd800 	push	{fp, ip, lr, pc}
 c10992c:	e24cb004 	sub	fp, ip, #4
 c109930:	e24dd010 	sub	sp, sp, #16
 c109934:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
	uint8 scancode;

	while(PDATG & (1<<1));// espera presión
 c109938:	e1a00000 	nop			; (mov r0, r0)
 c10993c:	e59f3080 	ldr	r3, [pc, #128]	; c1099c4 <keypad_getchartime+0xa0>
 c109940:	e5933000 	ldr	r3, [r3]
 c109944:	e2033002 	and	r3, r3, #2
 c109948:	e3530000 	cmp	r3, #0
 c10994c:	1afffffa 	bne	c10993c <keypad_getchartime+0x18>
	timer3_start();
 c109950:	eb000d03 	bl	c10cd64 <timer3_start>
	sw_delay_ms( KEYPAD_KEYDOWN_DELAY );
 c109954:	e3a0001e 	mov	r0, #30
 c109958:	eb000ca1 	bl	c10cbe4 <sw_delay_ms>
	scancode = keypad_scan();// scancode key pulsada
 c10995c:	ebfffe96 	bl	c1093bc <keypad_scan>
 c109960:	e1a03000 	mov	r3, r0
 c109964:	e54b300d 	strb	r3, [fp, #-13]

	while( (PDATG & (1<<1)) == 0 );// espera depresion
 c109968:	e1a00000 	nop			; (mov r0, r0)
 c10996c:	e59f3050 	ldr	r3, [pc, #80]	; c1099c4 <keypad_getchartime+0xa0>
 c109970:	e5933000 	ldr	r3, [r3]
 c109974:	e2033002 	and	r3, r3, #2
 c109978:	e3530000 	cmp	r3, #0
 c10997c:	0afffffa 	beq	c10996c <keypad_getchartime+0x48>
	*ms = timer3_stop() / 10; // detengo timer y calculo los ms
 c109980:	eb000d23 	bl	c10ce14 <timer3_stop>
 c109984:	e1a03000 	mov	r3, r0
 c109988:	e1a02003 	mov	r2, r3
 c10998c:	e59f3034 	ldr	r3, [pc, #52]	; c1099c8 <keypad_getchartime+0xa4>
 c109990:	e0831392 	umull	r1, r3, r2, r3
 c109994:	e1a031a3 	lsr	r3, r3, #3
 c109998:	e1a03803 	lsl	r3, r3, #16
 c10999c:	e1a02823 	lsr	r2, r3, #16
 c1099a0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c1099a4:	e1c320b0 	strh	r2, [r3]
	sw_delay_ms( KEYPAD_KEYUP_DELAY );
 c1099a8:	e3a00064 	mov	r0, #100	; 0x64
 c1099ac:	eb000c8c 	bl	c10cbe4 <sw_delay_ms>

	return scancode;
 c1099b0:	e55b300d 	ldrb	r3, [fp, #-13]
}
 c1099b4:	e1a00003 	mov	r0, r3
 c1099b8:	e24bd00c 	sub	sp, fp, #12
 c1099bc:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1099c0:	e12fff1e 	bx	lr
 c1099c4:	01d20044 	.word	0x01d20044
 c1099c8:	cccccccd 	.word	0xcccccccd

0c1099cc <keypad_timeout_getchar>:

uint8 keypad_timeout_getchar( uint16 ms )
{
 c1099cc:	e1a0c00d 	mov	ip, sp
 c1099d0:	e92dd800 	push	{fp, ip, lr, pc}
 c1099d4:	e24cb004 	sub	fp, ip, #4
 c1099d8:	e24dd010 	sub	sp, sp, #16
 c1099dc:	e1a03000 	mov	r3, r0
 c1099e0:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
	uint8 scancode;

	timer3_start_timeout(ms); // hacemos un timeout con los ms pasados por parámetro
 c1099e4:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
 c1099e8:	e1a00003 	mov	r0, r3
 c1099ec:	eb000d1d 	bl	c10ce68 <timer3_start_timeout>
	while(timer3_timeout() && (PDATG & (1<<1)));
 c1099f0:	e1a00000 	nop			; (mov r0, r0)
 c1099f4:	eb000d49 	bl	c10cf20 <timer3_timeout>
 c1099f8:	e1a03000 	mov	r3, r0
 c1099fc:	e3530000 	cmp	r3, #0
 c109a00:	0a000004 	beq	c109a18 <keypad_timeout_getchar+0x4c>
 c109a04:	e59f307c 	ldr	r3, [pc, #124]	; c109a88 <keypad_timeout_getchar+0xbc>
 c109a08:	e5933000 	ldr	r3, [r3]
 c109a0c:	e2033002 	and	r3, r3, #2
 c109a10:	e3530000 	cmp	r3, #0
 c109a14:	1afffff6 	bne	c1099f4 <keypad_timeout_getchar+0x28>
	if(!timer3_timeout( ))
 c109a18:	eb000d40 	bl	c10cf20 <timer3_timeout>
 c109a1c:	e1a03000 	mov	r3, r0
 c109a20:	e3530000 	cmp	r3, #0
 c109a24:	1a000001 	bne	c109a30 <keypad_timeout_getchar+0x64>
	    	return KEYPAD_TIMEOUT;
 c109a28:	e3a030fe 	mov	r3, #254	; 0xfe
 c109a2c:	ea000011 	b	c109a78 <keypad_timeout_getchar+0xac>
	else{
		sw_delay_ms( KEYPAD_KEYDOWN_DELAY );
 c109a30:	e3a0001e 	mov	r0, #30
 c109a34:	eb000c6a 	bl	c10cbe4 <sw_delay_ms>
		scancode = keypad_scan();
 c109a38:	ebfffe5f 	bl	c1093bc <keypad_scan>
 c109a3c:	e1a03000 	mov	r3, r0
 c109a40:	e54b300d 	strb	r3, [fp, #-13]

		while( timer3_timeout() && ((PDATG & (1<<1)) == 0) );
 c109a44:	e1a00000 	nop			; (mov r0, r0)
 c109a48:	eb000d34 	bl	c10cf20 <timer3_timeout>
 c109a4c:	e1a03000 	mov	r3, r0
 c109a50:	e3530000 	cmp	r3, #0
 c109a54:	0a000004 	beq	c109a6c <keypad_timeout_getchar+0xa0>
 c109a58:	e59f3028 	ldr	r3, [pc, #40]	; c109a88 <keypad_timeout_getchar+0xbc>
 c109a5c:	e5933000 	ldr	r3, [r3]
 c109a60:	e2033002 	and	r3, r3, #2
 c109a64:	e3530000 	cmp	r3, #0
 c109a68:	0afffff6 	beq	c109a48 <keypad_timeout_getchar+0x7c>
		sw_delay_ms( KEYPAD_KEYUP_DELAY );
 c109a6c:	e3a00064 	mov	r0, #100	; 0x64
 c109a70:	eb000c5b 	bl	c10cbe4 <sw_delay_ms>

		return scancode;
 c109a74:	e55b300d 	ldrb	r3, [fp, #-13]
	}
}
 c109a78:	e1a00003 	mov	r0, r3
 c109a7c:	e24bd00c 	sub	sp, fp, #12
 c109a80:	e89d6800 	ldm	sp, {fp, sp, lr}
 c109a84:	e12fff1e 	bx	lr
 c109a88:	01d20044 	.word	0x01d20044

0c109a8c <lcd_init>:
static uint8 lcd_buffer[LCD_BUFFER_SIZE];

//static uint8 state;

void lcd_init( void )
{      
 c109a8c:	e1a0c00d 	mov	ip, sp
 c109a90:	e92dd800 	push	{fp, ip, lr, pc}
 c109a94:	e24cb004 	sub	fp, ip, #4
    DITHMODE = 0x12210;
 c109a98:	e59f30fc 	ldr	r3, [pc, #252]	; c109b9c <lcd_init+0x110>
 c109a9c:	e59f20fc 	ldr	r2, [pc, #252]	; c109ba0 <lcd_init+0x114>
 c109aa0:	e5832000 	str	r2, [r3]
    DP1_2    = 0xA5A5;
 c109aa4:	e59f30f8 	ldr	r3, [pc, #248]	; c109ba4 <lcd_init+0x118>
 c109aa8:	e59f20f8 	ldr	r2, [pc, #248]	; c109ba8 <lcd_init+0x11c>
 c109aac:	e5832000 	str	r2, [r3]
    DP4_7    = 0xBA5DA65;
 c109ab0:	e59f30f4 	ldr	r3, [pc, #244]	; c109bac <lcd_init+0x120>
 c109ab4:	e59f20f4 	ldr	r2, [pc, #244]	; c109bb0 <lcd_init+0x124>
 c109ab8:	e5832000 	str	r2, [r3]
    DP3_5    = 0xA5A5F;
 c109abc:	e59f30f0 	ldr	r3, [pc, #240]	; c109bb4 <lcd_init+0x128>
 c109ac0:	e59f20f0 	ldr	r2, [pc, #240]	; c109bb8 <lcd_init+0x12c>
 c109ac4:	e5832000 	str	r2, [r3]
    DP2_3    = 0xD6B;
 c109ac8:	e59f30ec 	ldr	r3, [pc, #236]	; c109bbc <lcd_init+0x130>
 c109acc:	e59f20ec 	ldr	r2, [pc, #236]	; c109bc0 <lcd_init+0x134>
 c109ad0:	e5832000 	str	r2, [r3]
    DP5_7    = 0xEB7B5ED;
 c109ad4:	e59f30e8 	ldr	r3, [pc, #232]	; c109bc4 <lcd_init+0x138>
 c109ad8:	e59f20e8 	ldr	r2, [pc, #232]	; c109bc8 <lcd_init+0x13c>
 c109adc:	e5832000 	str	r2, [r3]
    DP3_4    = 0x7DBE;
 c109ae0:	e59f30e4 	ldr	r3, [pc, #228]	; c109bcc <lcd_init+0x140>
 c109ae4:	e59f20e4 	ldr	r2, [pc, #228]	; c109bd0 <lcd_init+0x144>
 c109ae8:	e5832000 	str	r2, [r3]
    DP4_5    = 0x7EBDF ;
 c109aec:	e59f30e0 	ldr	r3, [pc, #224]	; c109bd4 <lcd_init+0x148>
 c109af0:	e59f20e0 	ldr	r2, [pc, #224]	; c109bd8 <lcd_init+0x14c>
 c109af4:	e5832000 	str	r2, [r3]
    DP6_7    = 0x7FDFBFE;
 c109af8:	e59f30dc 	ldr	r3, [pc, #220]	; c109bdc <lcd_init+0x150>
 c109afc:	e59f20dc 	ldr	r2, [pc, #220]	; c109be0 <lcd_init+0x154>
 c109b00:	e5832000 	str	r2, [r3]
    
    REDLUT   = 0x0;
 c109b04:	e59f30d8 	ldr	r3, [pc, #216]	; c109be4 <lcd_init+0x158>
 c109b08:	e3a02000 	mov	r2, #0
 c109b0c:	e5832000 	str	r2, [r3]
    GREENLUT = 0x0;
 c109b10:	e59f30d0 	ldr	r3, [pc, #208]	; c109be8 <lcd_init+0x15c>
 c109b14:	e3a02000 	mov	r2, #0
 c109b18:	e5832000 	str	r2, [r3]
    BLUELUT  = 0x0;
 c109b1c:	e59f30c8 	ldr	r3, [pc, #200]	; c109bec <lcd_init+0x160>
 c109b20:	e3a02000 	mov	r2, #0
 c109b24:	e5832000 	str	r2, [r3]

    LCDCON1  = 0x1C020;
 c109b28:	e3a0361f 	mov	r3, #32505856	; 0x1f00000
 c109b2c:	e59f20bc 	ldr	r2, [pc, #188]	; c109bf0 <lcd_init+0x164>
 c109b30:	e5832000 	str	r2, [r3]
    LCDCON2  = 0x13CEF;
 c109b34:	e59f30b8 	ldr	r3, [pc, #184]	; c109bf4 <lcd_init+0x168>
 c109b38:	e59f20b8 	ldr	r2, [pc, #184]	; c109bf8 <lcd_init+0x16c>
 c109b3c:	e5832000 	str	r2, [r3]
    LCDCON3  = 0x0;
 c109b40:	e59f30b4 	ldr	r3, [pc, #180]	; c109bfc <lcd_init+0x170>
 c109b44:	e3a02000 	mov	r2, #0
 c109b48:	e5832000 	str	r2, [r3]

    LCDSADDR1 = (2 << 27) | ((uint32)lcd_buffer >> 1);
 c109b4c:	e59f30ac 	ldr	r3, [pc, #172]	; c109c00 <lcd_init+0x174>
 c109b50:	e59f20ac 	ldr	r2, [pc, #172]	; c109c04 <lcd_init+0x178>
 c109b54:	e1a020a2 	lsr	r2, r2, #1
 c109b58:	e3822201 	orr	r2, r2, #268435456	; 0x10000000
 c109b5c:	e5832000 	str	r2, [r3]
    LCDSADDR2 = (1 << 29) | (((uint32)lcd_buffer + LCD_BUFFER_SIZE) & 0x3FFFFF) >> 1;
 c109b60:	e59f20a0 	ldr	r2, [pc, #160]	; c109c08 <lcd_init+0x17c>
 c109b64:	e59f3098 	ldr	r3, [pc, #152]	; c109c04 <lcd_init+0x178>
 c109b68:	e2833c96 	add	r3, r3, #38400	; 0x9600
 c109b6c:	e3c334ff 	bic	r3, r3, #-16777216	; 0xff000000
 c109b70:	e3c33503 	bic	r3, r3, #12582912	; 0xc00000
 c109b74:	e1a030a3 	lsr	r3, r3, #1
 c109b78:	e3833202 	orr	r3, r3, #536870912	; 0x20000000
 c109b7c:	e5823000 	str	r3, [r2]
    LCDSADDR3 = 0x50;
 c109b80:	e59f3084 	ldr	r3, [pc, #132]	; c109c0c <lcd_init+0x180>
 c109b84:	e3a02050 	mov	r2, #80	; 0x50
 c109b88:	e5832000 	str	r2, [r3]
    
    lcd_off();
 c109b8c:	eb00002a 	bl	c109c3c <lcd_off>
}
 c109b90:	e24bd00c 	sub	sp, fp, #12
 c109b94:	e89d6800 	ldm	sp, {fp, sp, lr}
 c109b98:	e12fff1e 	bx	lr
 c109b9c:	01f00044 	.word	0x01f00044
 c109ba0:	00012210 	.word	0x00012210
 c109ba4:	01f00020 	.word	0x01f00020
 c109ba8:	0000a5a5 	.word	0x0000a5a5
 c109bac:	01f00024 	.word	0x01f00024
 c109bb0:	0ba5da65 	.word	0x0ba5da65
 c109bb4:	01f00028 	.word	0x01f00028
 c109bb8:	000a5a5f 	.word	0x000a5a5f
 c109bbc:	01f0002c 	.word	0x01f0002c
 c109bc0:	00000d6b 	.word	0x00000d6b
 c109bc4:	01f00030 	.word	0x01f00030
 c109bc8:	0eb7b5ed 	.word	0x0eb7b5ed
 c109bcc:	01f00034 	.word	0x01f00034
 c109bd0:	00007dbe 	.word	0x00007dbe
 c109bd4:	01f00038 	.word	0x01f00038
 c109bd8:	0007ebdf 	.word	0x0007ebdf
 c109bdc:	01f0003c 	.word	0x01f0003c
 c109be0:	07fdfbfe 	.word	0x07fdfbfe
 c109be4:	01f00014 	.word	0x01f00014
 c109be8:	01f00018 	.word	0x01f00018
 c109bec:	01f0001c 	.word	0x01f0001c
 c109bf0:	0001c020 	.word	0x0001c020
 c109bf4:	01f00004 	.word	0x01f00004
 c109bf8:	00013cef 	.word	0x00013cef
 c109bfc:	01f00040 	.word	0x01f00040
 c109c00:	01f00008 	.word	0x01f00008
 c109c04:	0c10fc18 	.word	0x0c10fc18
 c109c08:	01f0000c 	.word	0x01f0000c
 c109c0c:	01f00010 	.word	0x01f00010

0c109c10 <lcd_on>:

void lcd_on( void )
{
 c109c10:	e1a0c00d 	mov	ip, sp
 c109c14:	e92dd800 	push	{fp, ip, lr, pc}
 c109c18:	e24cb004 	sub	fp, ip, #4
    LCDCON1 |= (1 << 0);
 c109c1c:	e3a0361f 	mov	r3, #32505856	; 0x1f00000
 c109c20:	e3a0261f 	mov	r2, #32505856	; 0x1f00000
 c109c24:	e5922000 	ldr	r2, [r2]
 c109c28:	e3822001 	orr	r2, r2, #1
 c109c2c:	e5832000 	str	r2, [r3]
}
 c109c30:	e24bd00c 	sub	sp, fp, #12
 c109c34:	e89d6800 	ldm	sp, {fp, sp, lr}
 c109c38:	e12fff1e 	bx	lr

0c109c3c <lcd_off>:

void lcd_off( void )
{
 c109c3c:	e1a0c00d 	mov	ip, sp
 c109c40:	e92dd800 	push	{fp, ip, lr, pc}
 c109c44:	e24cb004 	sub	fp, ip, #4
	LCDCON1 &= ~(1 << 0);
 c109c48:	e3a0361f 	mov	r3, #32505856	; 0x1f00000
 c109c4c:	e3a0261f 	mov	r2, #32505856	; 0x1f00000
 c109c50:	e5922000 	ldr	r2, [r2]
 c109c54:	e3c22001 	bic	r2, r2, #1
 c109c58:	e5832000 	str	r2, [r3]
}
 c109c5c:	e24bd00c 	sub	sp, fp, #12
 c109c60:	e89d6800 	ldm	sp, {fp, sp, lr}
 c109c64:	e12fff1e 	bx	lr

0c109c68 <lcd_status>:

uint8 lcd_status( void )
{
 c109c68:	e1a0c00d 	mov	ip, sp
 c109c6c:	e92dd800 	push	{fp, ip, lr, pc}
 c109c70:	e24cb004 	sub	fp, ip, #4
    if(LCDCON1 & (1 << 0)){
 c109c74:	e3a0361f 	mov	r3, #32505856	; 0x1f00000
 c109c78:	e5933000 	ldr	r3, [r3]
 c109c7c:	e2033001 	and	r3, r3, #1
 c109c80:	e20330ff 	and	r3, r3, #255	; 0xff
 c109c84:	e3530000 	cmp	r3, #0
 c109c88:	0a000001 	beq	c109c94 <lcd_status+0x2c>
    	return ON;
 c109c8c:	e3a03001 	mov	r3, #1
 c109c90:	ea000000 	b	c109c98 <lcd_status+0x30>
    }
    else{
    	return OFF;
 c109c94:	e3a03000 	mov	r3, #0
    }
}
 c109c98:	e1a00003 	mov	r0, r3
 c109c9c:	e24bd00c 	sub	sp, fp, #12
 c109ca0:	e89d6800 	ldm	sp, {fp, sp, lr}
 c109ca4:	e12fff1e 	bx	lr

0c109ca8 <lcd_clear>:

void lcd_clear( void )
{
 c109ca8:	e1a0c00d 	mov	ip, sp
 c109cac:	e92dd800 	push	{fp, ip, lr, pc}
 c109cb0:	e24cb004 	sub	fp, ip, #4
 c109cb4:	e24dd008 	sub	sp, sp, #8
	//fila 1: (0,0) (1,0) ... (319,0)etc.
	//fila 239(ultima): (0,239) (1,239) ... (319,239)
	int i,j;
    for(i = 0; i <= LCD_HEIGHT;i++){
 c109cb8:	e3a03000 	mov	r3, #0
 c109cbc:	e50b3010 	str	r3, [fp, #-16]
 c109cc0:	ea000015 	b	c109d1c <lcd_clear+0x74>
    	for(j = 0; j <= LCD_WIDTH; j++){
 c109cc4:	e3a03000 	mov	r3, #0
 c109cc8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
 c109ccc:	ea00000c 	b	c109d04 <lcd_clear+0x5c>
    		lcd_putpixel(j,i,WHITE); // relleno en blanco todo
 c109cd0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c109cd4:	e1a03803 	lsl	r3, r3, #16
 c109cd8:	e1a02823 	lsr	r2, r3, #16
 c109cdc:	e51b3010 	ldr	r3, [fp, #-16]
 c109ce0:	e1a03803 	lsl	r3, r3, #16
 c109ce4:	e1a03823 	lsr	r3, r3, #16
 c109ce8:	e1a00002 	mov	r0, r2
 c109cec:	e1a01003 	mov	r1, r3
 c109cf0:	e3a02000 	mov	r2, #0
 c109cf4:	eb00000e 	bl	c109d34 <lcd_putpixel>
{
	//fila 1: (0,0) (1,0) ... (319,0)etc.
	//fila 239(ultima): (0,239) (1,239) ... (319,239)
	int i,j;
    for(i = 0; i <= LCD_HEIGHT;i++){
    	for(j = 0; j <= LCD_WIDTH; j++){
 c109cf8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c109cfc:	e2833001 	add	r3, r3, #1
 c109d00:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
 c109d04:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c109d08:	e3530d05 	cmp	r3, #320	; 0x140
 c109d0c:	daffffef 	ble	c109cd0 <lcd_clear+0x28>
void lcd_clear( void )
{
	//fila 1: (0,0) (1,0) ... (319,0)etc.
	//fila 239(ultima): (0,239) (1,239) ... (319,239)
	int i,j;
    for(i = 0; i <= LCD_HEIGHT;i++){
 c109d10:	e51b3010 	ldr	r3, [fp, #-16]
 c109d14:	e2833001 	add	r3, r3, #1
 c109d18:	e50b3010 	str	r3, [fp, #-16]
 c109d1c:	e51b3010 	ldr	r3, [fp, #-16]
 c109d20:	e35300f0 	cmp	r3, #240	; 0xf0
 c109d24:	daffffe6 	ble	c109cc4 <lcd_clear+0x1c>
    	for(j = 0; j <= LCD_WIDTH; j++){
    		lcd_putpixel(j,i,WHITE); // relleno en blanco todo
    	}
    }
}
 c109d28:	e24bd00c 	sub	sp, fp, #12
 c109d2c:	e89d6800 	ldm	sp, {fp, sp, lr}
 c109d30:	e12fff1e 	bx	lr

0c109d34 <lcd_putpixel>:

void lcd_putpixel( uint16 x, uint16 y, uint8 c)
{
 c109d34:	e1a0c00d 	mov	ip, sp
 c109d38:	e92dd800 	push	{fp, ip, lr, pc}
 c109d3c:	e24cb004 	sub	fp, ip, #4
 c109d40:	e24dd010 	sub	sp, sp, #16
 c109d44:	e1a03002 	mov	r3, r2
 c109d48:	e14b01b6 	strh	r0, [fp, #-22]	; 0xffffffea
 c109d4c:	e14b11b8 	strh	r1, [fp, #-24]	; 0xffffffe8
 c109d50:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
    uint8 byte, bit;
    uint16 i;

    i = x/2 + y*(LCD_WIDTH/2);
 c109d54:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
 c109d58:	e1a030a3 	lsr	r3, r3, #1
 c109d5c:	e1a03803 	lsl	r3, r3, #16
 c109d60:	e1a02823 	lsr	r2, r3, #16
 c109d64:	e15b31b8 	ldrh	r3, [fp, #-24]	; 0xffffffe8
 c109d68:	e1a01003 	mov	r1, r3
 c109d6c:	e1a01101 	lsl	r1, r1, #2
 c109d70:	e0813003 	add	r3, r1, r3
 c109d74:	e1a03283 	lsl	r3, r3, #5
 c109d78:	e1a03803 	lsl	r3, r3, #16
 c109d7c:	e1a03823 	lsr	r3, r3, #16
 c109d80:	e0823003 	add	r3, r2, r3
 c109d84:	e14b30be 	strh	r3, [fp, #-14]
    bit = (1-x%2)*4;
 c109d88:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
 c109d8c:	e2033001 	and	r3, r3, #1
 c109d90:	e3530000 	cmp	r3, #0
 c109d94:	1a000001 	bne	c109da0 <lcd_putpixel+0x6c>
 c109d98:	e3a03004 	mov	r3, #4
 c109d9c:	ea000000 	b	c109da4 <lcd_putpixel+0x70>
 c109da0:	e3a03000 	mov	r3, #0
 c109da4:	e54b300f 	strb	r3, [fp, #-15]
    
    byte = lcd_buffer[i];
 c109da8:	e15b30be 	ldrh	r3, [fp, #-14]
 c109dac:	e59f2068 	ldr	r2, [pc, #104]	; c109e1c <lcd_putpixel+0xe8>
 c109db0:	e7d23003 	ldrb	r3, [r2, r3]
 c109db4:	e54b3010 	strb	r3, [fp, #-16]
    byte &= ~(0xF << bit);
 c109db8:	e55b300f 	ldrb	r3, [fp, #-15]
 c109dbc:	e3a0200f 	mov	r2, #15
 c109dc0:	e1a03312 	lsl	r3, r2, r3
 c109dc4:	e20330ff 	and	r3, r3, #255	; 0xff
 c109dc8:	e1e03003 	mvn	r3, r3
 c109dcc:	e20320ff 	and	r2, r3, #255	; 0xff
 c109dd0:	e55b3010 	ldrb	r3, [fp, #-16]
 c109dd4:	e0023003 	and	r3, r2, r3
 c109dd8:	e20330ff 	and	r3, r3, #255	; 0xff
 c109ddc:	e54b3010 	strb	r3, [fp, #-16]
    byte |= c << bit;
 c109de0:	e55b2019 	ldrb	r2, [fp, #-25]	; 0xffffffe7
 c109de4:	e55b300f 	ldrb	r3, [fp, #-15]
 c109de8:	e1a03312 	lsl	r3, r2, r3
 c109dec:	e20320ff 	and	r2, r3, #255	; 0xff
 c109df0:	e55b3010 	ldrb	r3, [fp, #-16]
 c109df4:	e1823003 	orr	r3, r2, r3
 c109df8:	e20330ff 	and	r3, r3, #255	; 0xff
 c109dfc:	e54b3010 	strb	r3, [fp, #-16]
    lcd_buffer[i] = byte;
 c109e00:	e15b30be 	ldrh	r3, [fp, #-14]
 c109e04:	e59f2010 	ldr	r2, [pc, #16]	; c109e1c <lcd_putpixel+0xe8>
 c109e08:	e55b1010 	ldrb	r1, [fp, #-16]
 c109e0c:	e7c21003 	strb	r1, [r2, r3]
}
 c109e10:	e24bd00c 	sub	sp, fp, #12
 c109e14:	e89d6800 	ldm	sp, {fp, sp, lr}
 c109e18:	e12fff1e 	bx	lr
 c109e1c:	0c10fc18 	.word	0x0c10fc18

0c109e20 <lcd_getpixel>:

uint8 lcd_getpixel( uint16 x, uint16 y )
{
 c109e20:	e1a0c00d 	mov	ip, sp
 c109e24:	e92dd800 	push	{fp, ip, lr, pc}
 c109e28:	e24cb004 	sub	fp, ip, #4
 c109e2c:	e24dd010 	sub	sp, sp, #16
 c109e30:	e1a02000 	mov	r2, r0
 c109e34:	e1a03001 	mov	r3, r1
 c109e38:	e14b21b6 	strh	r2, [fp, #-22]	; 0xffffffea
 c109e3c:	e14b31b8 	strh	r3, [fp, #-24]	; 0xffffffe8
    uint8 byte, bit, ret;
    uint16 i;

    i = x/2 + y*(LCD_WIDTH/2);
 c109e40:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
 c109e44:	e1a030a3 	lsr	r3, r3, #1
 c109e48:	e1a03803 	lsl	r3, r3, #16
 c109e4c:	e1a02823 	lsr	r2, r3, #16
 c109e50:	e15b31b8 	ldrh	r3, [fp, #-24]	; 0xffffffe8
 c109e54:	e1a01003 	mov	r1, r3
 c109e58:	e1a01101 	lsl	r1, r1, #2
 c109e5c:	e0813003 	add	r3, r1, r3
 c109e60:	e1a03283 	lsl	r3, r3, #5
 c109e64:	e1a03803 	lsl	r3, r3, #16
 c109e68:	e1a03823 	lsr	r3, r3, #16
 c109e6c:	e0823003 	add	r3, r2, r3
 c109e70:	e14b31b0 	strh	r3, [fp, #-16]
    bit = (1-x%2)*4;
 c109e74:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
 c109e78:	e2033001 	and	r3, r3, #1
 c109e7c:	e3530000 	cmp	r3, #0
 c109e80:	1a000001 	bne	c109e8c <lcd_getpixel+0x6c>
 c109e84:	e3a03004 	mov	r3, #4
 c109e88:	ea000000 	b	c109e90 <lcd_getpixel+0x70>
 c109e8c:	e3a03000 	mov	r3, #0
 c109e90:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef

    byte = lcd_buffer[i];
 c109e94:	e15b31b0 	ldrh	r3, [fp, #-16]
 c109e98:	e59f2058 	ldr	r2, [pc, #88]	; c109ef8 <lcd_getpixel+0xd8>
 c109e9c:	e7d23003 	ldrb	r3, [r2, r3]
 c109ea0:	e54b3012 	strb	r3, [fp, #-18]	; 0xffffffee

    if(bit == 0){
 c109ea4:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c109ea8:	e3530000 	cmp	r3, #0
 c109eac:	1a000005 	bne	c109ec8 <lcd_getpixel+0xa8>
    	byte &= ~(0xF << 4);
 c109eb0:	e55b3012 	ldrb	r3, [fp, #-18]	; 0xffffffee
 c109eb4:	e203300f 	and	r3, r3, #15
 c109eb8:	e54b3012 	strb	r3, [fp, #-18]	; 0xffffffee
    	ret = byte;
 c109ebc:	e55b3012 	ldrb	r3, [fp, #-18]	; 0xffffffee
 c109ec0:	e54b300d 	strb	r3, [fp, #-13]
 c109ec4:	ea000006 	b	c109ee4 <lcd_getpixel+0xc4>
    }
    else{
    	byte &= ~(0xF << 0);
 c109ec8:	e55b3012 	ldrb	r3, [fp, #-18]	; 0xffffffee
 c109ecc:	e3c3300f 	bic	r3, r3, #15
 c109ed0:	e54b3012 	strb	r3, [fp, #-18]	; 0xffffffee
    	ret = byte >> bit;
 c109ed4:	e55b2012 	ldrb	r2, [fp, #-18]	; 0xffffffee
 c109ed8:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c109edc:	e1a03352 	asr	r3, r2, r3
 c109ee0:	e54b300d 	strb	r3, [fp, #-13]
    }

    return ret;
 c109ee4:	e55b300d 	ldrb	r3, [fp, #-13]
}
 c109ee8:	e1a00003 	mov	r0, r3
 c109eec:	e24bd00c 	sub	sp, fp, #12
 c109ef0:	e89d6800 	ldm	sp, {fp, sp, lr}
 c109ef4:	e12fff1e 	bx	lr
 c109ef8:	0c10fc18 	.word	0x0c10fc18

0c109efc <lcd_draw_hline>:

void lcd_draw_hline( uint16 xleft, uint16 xright, uint16 y, uint8 color, uint16 width )
{
 c109efc:	e1a0c00d 	mov	ip, sp
 c109f00:	e92dd800 	push	{fp, ip, lr, pc}
 c109f04:	e24cb004 	sub	fp, ip, #4
 c109f08:	e24dd010 	sub	sp, sp, #16
 c109f0c:	e14b01b6 	strh	r0, [fp, #-22]	; 0xffffffea
 c109f10:	e14b11b8 	strh	r1, [fp, #-24]	; 0xffffffe8
 c109f14:	e14b21ba 	strh	r2, [fp, #-26]	; 0xffffffe6
 c109f18:	e54b301b 	strb	r3, [fp, #-27]	; 0xffffffe5
	int i,j;
	for(i = y; i < (y+width); i++ ){
 c109f1c:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
 c109f20:	e50b3010 	str	r3, [fp, #-16]
 c109f24:	ea000017 	b	c109f88 <lcd_draw_hline+0x8c>
		for(j = xleft; j < xright; j++){
 c109f28:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
 c109f2c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
 c109f30:	ea00000d 	b	c109f6c <lcd_draw_hline+0x70>
			lcd_putpixel(j,i,color);
 c109f34:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c109f38:	e1a03803 	lsl	r3, r3, #16
 c109f3c:	e1a01823 	lsr	r1, r3, #16
 c109f40:	e51b3010 	ldr	r3, [fp, #-16]
 c109f44:	e1a03803 	lsl	r3, r3, #16
 c109f48:	e1a02823 	lsr	r2, r3, #16
 c109f4c:	e55b301b 	ldrb	r3, [fp, #-27]	; 0xffffffe5
 c109f50:	e1a00001 	mov	r0, r1
 c109f54:	e1a01002 	mov	r1, r2
 c109f58:	e1a02003 	mov	r2, r3
 c109f5c:	ebffff74 	bl	c109d34 <lcd_putpixel>

void lcd_draw_hline( uint16 xleft, uint16 xright, uint16 y, uint8 color, uint16 width )
{
	int i,j;
	for(i = y; i < (y+width); i++ ){
		for(j = xleft; j < xright; j++){
 c109f60:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c109f64:	e2833001 	add	r3, r3, #1
 c109f68:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
 c109f6c:	e15b21b8 	ldrh	r2, [fp, #-24]	; 0xffffffe8
 c109f70:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c109f74:	e1520003 	cmp	r2, r3
 c109f78:	caffffed 	bgt	c109f34 <lcd_draw_hline+0x38>
}

void lcd_draw_hline( uint16 xleft, uint16 xright, uint16 y, uint8 color, uint16 width )
{
	int i,j;
	for(i = y; i < (y+width); i++ ){
 c109f7c:	e51b3010 	ldr	r3, [fp, #-16]
 c109f80:	e2833001 	add	r3, r3, #1
 c109f84:	e50b3010 	str	r3, [fp, #-16]
 c109f88:	e15b21ba 	ldrh	r2, [fp, #-26]	; 0xffffffe6
 c109f8c:	e1db30b4 	ldrh	r3, [fp, #4]
 c109f90:	e0822003 	add	r2, r2, r3
 c109f94:	e51b3010 	ldr	r3, [fp, #-16]
 c109f98:	e1520003 	cmp	r2, r3
 c109f9c:	caffffe1 	bgt	c109f28 <lcd_draw_hline+0x2c>
		for(j = xleft; j < xright; j++){
			lcd_putpixel(j,i,color);
		}
	}
}
 c109fa0:	e24bd00c 	sub	sp, fp, #12
 c109fa4:	e89d6800 	ldm	sp, {fp, sp, lr}
 c109fa8:	e12fff1e 	bx	lr

0c109fac <lcd_draw_vline>:

void lcd_draw_vline( uint16 yup, uint16 ydown, uint16 x, uint8 color, uint16 width )
{
 c109fac:	e1a0c00d 	mov	ip, sp
 c109fb0:	e92dd800 	push	{fp, ip, lr, pc}
 c109fb4:	e24cb004 	sub	fp, ip, #4
 c109fb8:	e24dd010 	sub	sp, sp, #16
 c109fbc:	e14b01b6 	strh	r0, [fp, #-22]	; 0xffffffea
 c109fc0:	e14b11b8 	strh	r1, [fp, #-24]	; 0xffffffe8
 c109fc4:	e14b21ba 	strh	r2, [fp, #-26]	; 0xffffffe6
 c109fc8:	e54b301b 	strb	r3, [fp, #-27]	; 0xffffffe5
	int i,j;
	for (i = yup; i < ydown; i++) {
 c109fcc:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
 c109fd0:	e50b3010 	str	r3, [fp, #-16]
 c109fd4:	ea000019 	b	c10a040 <lcd_draw_vline+0x94>
		for (j = x; j < (x + width); j++) {
 c109fd8:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
 c109fdc:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
 c109fe0:	ea00000d 	b	c10a01c <lcd_draw_vline+0x70>
			lcd_putpixel(j, i, color);
 c109fe4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c109fe8:	e1a03803 	lsl	r3, r3, #16
 c109fec:	e1a01823 	lsr	r1, r3, #16
 c109ff0:	e51b3010 	ldr	r3, [fp, #-16]
 c109ff4:	e1a03803 	lsl	r3, r3, #16
 c109ff8:	e1a02823 	lsr	r2, r3, #16
 c109ffc:	e55b301b 	ldrb	r3, [fp, #-27]	; 0xffffffe5
 c10a000:	e1a00001 	mov	r0, r1
 c10a004:	e1a01002 	mov	r1, r2
 c10a008:	e1a02003 	mov	r2, r3
 c10a00c:	ebffff48 	bl	c109d34 <lcd_putpixel>

void lcd_draw_vline( uint16 yup, uint16 ydown, uint16 x, uint8 color, uint16 width )
{
	int i,j;
	for (i = yup; i < ydown; i++) {
		for (j = x; j < (x + width); j++) {
 c10a010:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c10a014:	e2833001 	add	r3, r3, #1
 c10a018:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
 c10a01c:	e15b21ba 	ldrh	r2, [fp, #-26]	; 0xffffffe6
 c10a020:	e1db30b4 	ldrh	r3, [fp, #4]
 c10a024:	e0822003 	add	r2, r2, r3
 c10a028:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c10a02c:	e1520003 	cmp	r2, r3
 c10a030:	caffffeb 	bgt	c109fe4 <lcd_draw_vline+0x38>
}

void lcd_draw_vline( uint16 yup, uint16 ydown, uint16 x, uint8 color, uint16 width )
{
	int i,j;
	for (i = yup; i < ydown; i++) {
 c10a034:	e51b3010 	ldr	r3, [fp, #-16]
 c10a038:	e2833001 	add	r3, r3, #1
 c10a03c:	e50b3010 	str	r3, [fp, #-16]
 c10a040:	e15b21b8 	ldrh	r2, [fp, #-24]	; 0xffffffe8
 c10a044:	e51b3010 	ldr	r3, [fp, #-16]
 c10a048:	e1520003 	cmp	r2, r3
 c10a04c:	caffffe1 	bgt	c109fd8 <lcd_draw_vline+0x2c>
		for (j = x; j < (x + width); j++) {
			lcd_putpixel(j, i, color);
		}
	}
}
 c10a050:	e24bd00c 	sub	sp, fp, #12
 c10a054:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10a058:	e12fff1e 	bx	lr

0c10a05c <lcd_draw_box>:

void lcd_draw_box( uint16 xleft, uint16 yup, uint16 xright, uint16 ydown, uint8 color, uint16 width )
{
 c10a05c:	e1a0c00d 	mov	ip, sp
 c10a060:	e92dd800 	push	{fp, ip, lr, pc}
 c10a064:	e24cb004 	sub	fp, ip, #4
 c10a068:	e24dd010 	sub	sp, sp, #16
 c10a06c:	e14b00be 	strh	r0, [fp, #-14]
 c10a070:	e14b11b0 	strh	r1, [fp, #-16]
 c10a074:	e14b21b2 	strh	r2, [fp, #-18]	; 0xffffffee
 c10a078:	e14b31b4 	strh	r3, [fp, #-20]	; 0xffffffec
	lcd_draw_hline(xleft, xright, yup, color, width);
 c10a07c:	e15b00be 	ldrh	r0, [fp, #-14]
 c10a080:	e15b11b2 	ldrh	r1, [fp, #-18]	; 0xffffffee
 c10a084:	e15b21b0 	ldrh	r2, [fp, #-16]
 c10a088:	e5db3004 	ldrb	r3, [fp, #4]
 c10a08c:	e1dbc0b8 	ldrh	ip, [fp, #8]
 c10a090:	e58dc000 	str	ip, [sp]
 c10a094:	ebffff98 	bl	c109efc <lcd_draw_hline>
	lcd_draw_vline(yup, ydown, xleft, color, width);
 c10a098:	e15b01b0 	ldrh	r0, [fp, #-16]
 c10a09c:	e15b11b4 	ldrh	r1, [fp, #-20]	; 0xffffffec
 c10a0a0:	e15b20be 	ldrh	r2, [fp, #-14]
 c10a0a4:	e5db3004 	ldrb	r3, [fp, #4]
 c10a0a8:	e1dbc0b8 	ldrh	ip, [fp, #8]
 c10a0ac:	e58dc000 	str	ip, [sp]
 c10a0b0:	ebffffbd 	bl	c109fac <lcd_draw_vline>
	lcd_draw_hline(xleft, xright, ydown, color, width);
 c10a0b4:	e15b00be 	ldrh	r0, [fp, #-14]
 c10a0b8:	e15b11b2 	ldrh	r1, [fp, #-18]	; 0xffffffee
 c10a0bc:	e15b21b4 	ldrh	r2, [fp, #-20]	; 0xffffffec
 c10a0c0:	e5db3004 	ldrb	r3, [fp, #4]
 c10a0c4:	e1dbc0b8 	ldrh	ip, [fp, #8]
 c10a0c8:	e58dc000 	str	ip, [sp]
 c10a0cc:	ebffff8a 	bl	c109efc <lcd_draw_hline>
	lcd_draw_vline(yup, ydown + width + 1, xright, color, width);
 c10a0d0:	e15b21b4 	ldrh	r2, [fp, #-20]	; 0xffffffec
 c10a0d4:	e1db30b8 	ldrh	r3, [fp, #8]
 c10a0d8:	e0823003 	add	r3, r2, r3
 c10a0dc:	e1a03803 	lsl	r3, r3, #16
 c10a0e0:	e1a03823 	lsr	r3, r3, #16
 c10a0e4:	e2833001 	add	r3, r3, #1
 c10a0e8:	e1a03803 	lsl	r3, r3, #16
 c10a0ec:	e1a01823 	lsr	r1, r3, #16
 c10a0f0:	e15b01b0 	ldrh	r0, [fp, #-16]
 c10a0f4:	e15b21b2 	ldrh	r2, [fp, #-18]	; 0xffffffee
 c10a0f8:	e5db3004 	ldrb	r3, [fp, #4]
 c10a0fc:	e1dbc0b8 	ldrh	ip, [fp, #8]
 c10a100:	e58dc000 	str	ip, [sp]
 c10a104:	ebffffa8 	bl	c109fac <lcd_draw_vline>
}
 c10a108:	e24bd00c 	sub	sp, fp, #12
 c10a10c:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10a110:	e12fff1e 	bx	lr

0c10a114 <lcd_putchar>:

void lcd_putchar( uint16 x, uint16 y, uint8 color, char ch )
{
 c10a114:	e1a0c00d 	mov	ip, sp
 c10a118:	e92dd800 	push	{fp, ip, lr, pc}
 c10a11c:	e24cb004 	sub	fp, ip, #4
 c10a120:	e24dd010 	sub	sp, sp, #16
 c10a124:	e14b01b6 	strh	r0, [fp, #-22]	; 0xffffffea
 c10a128:	e14b11b8 	strh	r1, [fp, #-24]	; 0xffffffe8
 c10a12c:	e54b2019 	strb	r2, [fp, #-25]	; 0xffffffe7
 c10a130:	e54b301a 	strb	r3, [fp, #-26]	; 0xffffffe6
    uint8 line, row;
    uint8 *bitmap;

    bitmap = font + ch*16;
 c10a134:	e55b301a 	ldrb	r3, [fp, #-26]	; 0xffffffe6
 c10a138:	e1a03203 	lsl	r3, r3, #4
 c10a13c:	e1a02003 	mov	r2, r3
 c10a140:	e59f311c 	ldr	r3, [pc, #284]	; c10a264 <lcd_putchar+0x150>
 c10a144:	e0823003 	add	r3, r2, r3
 c10a148:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    for( line=0; line<16; line++ )
 c10a14c:	e3a03000 	mov	r3, #0
 c10a150:	e54b300d 	strb	r3, [fp, #-13]
 c10a154:	ea00003c 	b	c10a24c <lcd_putchar+0x138>
        for( row=0; row<8; row++ )                    
 c10a158:	e3a03000 	mov	r3, #0
 c10a15c:	e54b300e 	strb	r3, [fp, #-14]
 c10a160:	ea000033 	b	c10a234 <lcd_putchar+0x120>
            if( bitmap[line] & (0x80 >> row) )
 c10a164:	e55b300d 	ldrb	r3, [fp, #-13]
 c10a168:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
 c10a16c:	e0823003 	add	r3, r2, r3
 c10a170:	e5d33000 	ldrb	r3, [r3]
 c10a174:	e1a02003 	mov	r2, r3
 c10a178:	e55b300e 	ldrb	r3, [fp, #-14]
 c10a17c:	e3a01080 	mov	r1, #128	; 0x80
 c10a180:	e1a03351 	asr	r3, r1, r3
 c10a184:	e0023003 	and	r3, r2, r3
 c10a188:	e3530000 	cmp	r3, #0
 c10a18c:	0a000013 	beq	c10a1e0 <lcd_putchar+0xcc>
                lcd_putpixel( x+row, y+line, color );
 c10a190:	e55b300e 	ldrb	r3, [fp, #-14]
 c10a194:	e1a03803 	lsl	r3, r3, #16
 c10a198:	e1a02823 	lsr	r2, r3, #16
 c10a19c:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
 c10a1a0:	e0823003 	add	r3, r2, r3
 c10a1a4:	e1a03803 	lsl	r3, r3, #16
 c10a1a8:	e1a01823 	lsr	r1, r3, #16
 c10a1ac:	e55b300d 	ldrb	r3, [fp, #-13]
 c10a1b0:	e1a03803 	lsl	r3, r3, #16
 c10a1b4:	e1a02823 	lsr	r2, r3, #16
 c10a1b8:	e15b31b8 	ldrh	r3, [fp, #-24]	; 0xffffffe8
 c10a1bc:	e0823003 	add	r3, r2, r3
 c10a1c0:	e1a03803 	lsl	r3, r3, #16
 c10a1c4:	e1a02823 	lsr	r2, r3, #16
 c10a1c8:	e55b3019 	ldrb	r3, [fp, #-25]	; 0xffffffe7
 c10a1cc:	e1a00001 	mov	r0, r1
 c10a1d0:	e1a01002 	mov	r1, r2
 c10a1d4:	e1a02003 	mov	r2, r3
 c10a1d8:	ebfffed5 	bl	c109d34 <lcd_putpixel>
 c10a1dc:	ea000011 	b	c10a228 <lcd_putchar+0x114>
            else
                lcd_putpixel( x+row, y+line, WHITE );
 c10a1e0:	e55b300e 	ldrb	r3, [fp, #-14]
 c10a1e4:	e1a03803 	lsl	r3, r3, #16
 c10a1e8:	e1a02823 	lsr	r2, r3, #16
 c10a1ec:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
 c10a1f0:	e0823003 	add	r3, r2, r3
 c10a1f4:	e1a03803 	lsl	r3, r3, #16
 c10a1f8:	e1a02823 	lsr	r2, r3, #16
 c10a1fc:	e55b300d 	ldrb	r3, [fp, #-13]
 c10a200:	e1a03803 	lsl	r3, r3, #16
 c10a204:	e1a01823 	lsr	r1, r3, #16
 c10a208:	e15b31b8 	ldrh	r3, [fp, #-24]	; 0xffffffe8
 c10a20c:	e0813003 	add	r3, r1, r3
 c10a210:	e1a03803 	lsl	r3, r3, #16
 c10a214:	e1a03823 	lsr	r3, r3, #16
 c10a218:	e1a00002 	mov	r0, r2
 c10a21c:	e1a01003 	mov	r1, r3
 c10a220:	e3a02000 	mov	r2, #0
 c10a224:	ebfffec2 	bl	c109d34 <lcd_putpixel>
    uint8 line, row;
    uint8 *bitmap;

    bitmap = font + ch*16;
    for( line=0; line<16; line++ )
        for( row=0; row<8; row++ )                    
 c10a228:	e55b300e 	ldrb	r3, [fp, #-14]
 c10a22c:	e2833001 	add	r3, r3, #1
 c10a230:	e54b300e 	strb	r3, [fp, #-14]
 c10a234:	e55b300e 	ldrb	r3, [fp, #-14]
 c10a238:	e3530007 	cmp	r3, #7
 c10a23c:	9affffc8 	bls	c10a164 <lcd_putchar+0x50>
{
    uint8 line, row;
    uint8 *bitmap;

    bitmap = font + ch*16;
    for( line=0; line<16; line++ )
 c10a240:	e55b300d 	ldrb	r3, [fp, #-13]
 c10a244:	e2833001 	add	r3, r3, #1
 c10a248:	e54b300d 	strb	r3, [fp, #-13]
 c10a24c:	e55b300d 	ldrb	r3, [fp, #-13]
 c10a250:	e353000f 	cmp	r3, #15
 c10a254:	9affffbf 	bls	c10a158 <lcd_putchar+0x44>
        for( row=0; row<8; row++ )                    
            if( bitmap[line] & (0x80 >> row) )
                lcd_putpixel( x+row, y+line, color );
            else
                lcd_putpixel( x+row, y+line, WHITE );
}
 c10a258:	e24bd00c 	sub	sp, fp, #12
 c10a25c:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10a260:	e12fff1e 	bx	lr
 c10a264:	0c10ec10 	.word	0x0c10ec10

0c10a268 <lcd_puts>:

void lcd_puts( uint16 x, uint16 y, uint8 color, char *s )
{
 c10a268:	e1a0c00d 	mov	ip, sp
 c10a26c:	e92dd800 	push	{fp, ip, lr, pc}
 c10a270:	e24cb004 	sub	fp, ip, #4
 c10a274:	e24dd018 	sub	sp, sp, #24
 c10a278:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
 c10a27c:	e14b01b6 	strh	r0, [fp, #-22]	; 0xffffffea
 c10a280:	e14b11b8 	strh	r1, [fp, #-24]	; 0xffffffe8
 c10a284:	e1a03002 	mov	r3, r2
 c10a288:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
	uint16 i = y, j;
 c10a28c:	e15b31b8 	ldrh	r3, [fp, #-24]	; 0xffffffe8
 c10a290:	e14b30be 	strh	r3, [fp, #-14]

	while((*s != '\0')&&(i < LCD_HEIGHT)){
 c10a294:	ea000019 	b	c10a300 <lcd_puts+0x98>
		j = x;
 c10a298:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
 c10a29c:	e14b31b0 	strh	r3, [fp, #-16]
		while((*s != '\0')&&(j < LCD_WIDTH)){
 c10a2a0:	ea00000b 	b	c10a2d4 <lcd_puts+0x6c>
			lcd_putchar(j,i,color,*s);
 c10a2a4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c10a2a8:	e5d33000 	ldrb	r3, [r3]
 c10a2ac:	e15b01b0 	ldrh	r0, [fp, #-16]
 c10a2b0:	e15b10be 	ldrh	r1, [fp, #-14]
 c10a2b4:	e55b2019 	ldrb	r2, [fp, #-25]	; 0xffffffe7
 c10a2b8:	ebffff95 	bl	c10a114 <lcd_putchar>
			s++;
 c10a2bc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c10a2c0:	e2833001 	add	r3, r3, #1
 c10a2c4:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
			j+=8;
 c10a2c8:	e15b31b0 	ldrh	r3, [fp, #-16]
 c10a2cc:	e2833008 	add	r3, r3, #8
 c10a2d0:	e14b31b0 	strh	r3, [fp, #-16]
{
	uint16 i = y, j;

	while((*s != '\0')&&(i < LCD_HEIGHT)){
		j = x;
		while((*s != '\0')&&(j < LCD_WIDTH)){
 c10a2d4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c10a2d8:	e5d33000 	ldrb	r3, [r3]
 c10a2dc:	e3530000 	cmp	r3, #0
 c10a2e0:	0a000003 	beq	c10a2f4 <lcd_puts+0x8c>
 c10a2e4:	e15b21b0 	ldrh	r2, [fp, #-16]
 c10a2e8:	e59f3038 	ldr	r3, [pc, #56]	; c10a328 <lcd_puts+0xc0>
 c10a2ec:	e1520003 	cmp	r2, r3
 c10a2f0:	9affffeb 	bls	c10a2a4 <lcd_puts+0x3c>
			lcd_putchar(j,i,color,*s);
			s++;
			j+=8;
		}
		i+=16;
 c10a2f4:	e15b30be 	ldrh	r3, [fp, #-14]
 c10a2f8:	e2833010 	add	r3, r3, #16
 c10a2fc:	e14b30be 	strh	r3, [fp, #-14]

void lcd_puts( uint16 x, uint16 y, uint8 color, char *s )
{
	uint16 i = y, j;

	while((*s != '\0')&&(i < LCD_HEIGHT)){
 c10a300:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c10a304:	e5d33000 	ldrb	r3, [r3]
 c10a308:	e3530000 	cmp	r3, #0
 c10a30c:	0a000002 	beq	c10a31c <lcd_puts+0xb4>
 c10a310:	e15b30be 	ldrh	r3, [fp, #-14]
 c10a314:	e35300ef 	cmp	r3, #239	; 0xef
 c10a318:	9affffde 	bls	c10a298 <lcd_puts+0x30>
			s++;
			j+=8;
		}
		i+=16;
	}
}
 c10a31c:	e24bd00c 	sub	sp, fp, #12
 c10a320:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10a324:	e12fff1e 	bx	lr
 c10a328:	0000013f 	.word	0x0000013f

0c10a32c <lcd_putint>:

void lcd_putint( uint16 x, uint16 y, uint8 color, int32 i )
{
 c10a32c:	e1a0c00d 	mov	ip, sp
 c10a330:	e92dd800 	push	{fp, ip, lr, pc}
 c10a334:	e24cb004 	sub	fp, ip, #4
 c10a338:	e24dd028 	sub	sp, sp, #40	; 0x28
 c10a33c:	e50b3030 	str	r3, [fp, #-48]	; 0xffffffd0
 c10a340:	e14b02b6 	strh	r0, [fp, #-38]	; 0xffffffda
 c10a344:	e14b12b8 	strh	r1, [fp, #-40]	; 0xffffffd8
 c10a348:	e1a03002 	mov	r3, r2
 c10a34c:	e54b3029 	strb	r3, [fp, #-41]	; 0xffffffd7
	uint16 x2 = x, y2 = y;
 c10a350:	e15b32b6 	ldrh	r3, [fp, #-38]	; 0xffffffda
 c10a354:	e14b31b4 	strh	r3, [fp, #-20]	; 0xffffffec
 c10a358:	e15b32b8 	ldrh	r3, [fp, #-40]	; 0xffffffd8
 c10a35c:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
	char buf[8 + 1];
	char *p = buf + 8;
 c10a360:	e24b3020 	sub	r3, fp, #32
 c10a364:	e2833008 	add	r3, r3, #8
 c10a368:	e50b3010 	str	r3, [fp, #-16]
	uint8 c = 0;
 c10a36c:	e3a03000 	mov	r3, #0
 c10a370:	e54b3017 	strb	r3, [fp, #-23]	; 0xffffffe9
	uint8 neg = 0;
 c10a374:	e3a03000 	mov	r3, #0
 c10a378:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef

	if(i < 0){
 c10a37c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
 c10a380:	e3530000 	cmp	r3, #0
 c10a384:	aa000004 	bge	c10a39c <lcd_putint+0x70>
		neg = 1;
 c10a388:	e3a03001 	mov	r3, #1
 c10a38c:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
		i = -i;
 c10a390:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
 c10a394:	e2633000 	rsb	r3, r3, #0
 c10a398:	e50b3030 	str	r3, [fp, #-48]	; 0xffffffd0
	}

	*p = '\0';
 c10a39c:	e51b3010 	ldr	r3, [fp, #-16]
 c10a3a0:	e3a02000 	mov	r2, #0
 c10a3a4:	e5c32000 	strb	r2, [r3]
	do {
		c = i % 10;
 c10a3a8:	e51b1030 	ldr	r1, [fp, #-48]	; 0xffffffd0
 c10a3ac:	e59f30c0 	ldr	r3, [pc, #192]	; c10a474 <lcd_putint+0x148>
 c10a3b0:	e0c32391 	smull	r2, r3, r1, r3
 c10a3b4:	e1a02143 	asr	r2, r3, #2
 c10a3b8:	e1a03fc1 	asr	r3, r1, #31
 c10a3bc:	e0632002 	rsb	r2, r3, r2
 c10a3c0:	e1a03002 	mov	r3, r2
 c10a3c4:	e1a03103 	lsl	r3, r3, #2
 c10a3c8:	e0833002 	add	r3, r3, r2
 c10a3cc:	e1a03083 	lsl	r3, r3, #1
 c10a3d0:	e0632001 	rsb	r2, r3, r1
 c10a3d4:	e1a03002 	mov	r3, r2
 c10a3d8:	e54b3017 	strb	r3, [fp, #-23]	; 0xffffffe9
		*--p = '0' + c;
 c10a3dc:	e51b3010 	ldr	r3, [fp, #-16]
 c10a3e0:	e2433001 	sub	r3, r3, #1
 c10a3e4:	e50b3010 	str	r3, [fp, #-16]
 c10a3e8:	e55b3017 	ldrb	r3, [fp, #-23]	; 0xffffffe9
 c10a3ec:	e2833030 	add	r3, r3, #48	; 0x30
 c10a3f0:	e20320ff 	and	r2, r3, #255	; 0xff
 c10a3f4:	e51b3010 	ldr	r3, [fp, #-16]
 c10a3f8:	e5c32000 	strb	r2, [r3]
		i = i / 10;
 c10a3fc:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
 c10a400:	e59f206c 	ldr	r2, [pc, #108]	; c10a474 <lcd_putint+0x148>
 c10a404:	e0c21293 	smull	r1, r2, r3, r2
 c10a408:	e1a02142 	asr	r2, r2, #2
 c10a40c:	e1a03fc3 	asr	r3, r3, #31
 c10a410:	e0633002 	rsb	r3, r3, r2
 c10a414:	e50b3030 	str	r3, [fp, #-48]	; 0xffffffd0
	} while (i);
 c10a418:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
 c10a41c:	e3530000 	cmp	r3, #0
 c10a420:	1affffe0 	bne	c10a3a8 <lcd_putint+0x7c>

	if(neg == 1){
 c10a424:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c10a428:	e3530001 	cmp	r3, #1
 c10a42c:	1a000005 	bne	c10a448 <lcd_putint+0x11c>
		*--p = '-';
 c10a430:	e51b3010 	ldr	r3, [fp, #-16]
 c10a434:	e2433001 	sub	r3, r3, #1
 c10a438:	e50b3010 	str	r3, [fp, #-16]
 c10a43c:	e51b3010 	ldr	r3, [fp, #-16]
 c10a440:	e3a0202d 	mov	r2, #45	; 0x2d
 c10a444:	e5c32000 	strb	r2, [r3]
	}

	lcd_puts(x2,y2,color,p);
 c10a448:	e15b11b4 	ldrh	r1, [fp, #-20]	; 0xffffffec
 c10a44c:	e15b21b6 	ldrh	r2, [fp, #-22]	; 0xffffffea
 c10a450:	e55b3029 	ldrb	r3, [fp, #-41]	; 0xffffffd7
 c10a454:	e1a00001 	mov	r0, r1
 c10a458:	e1a01002 	mov	r1, r2
 c10a45c:	e1a02003 	mov	r2, r3
 c10a460:	e51b3010 	ldr	r3, [fp, #-16]
 c10a464:	ebffff7f 	bl	c10a268 <lcd_puts>
}
 c10a468:	e24bd00c 	sub	sp, fp, #12
 c10a46c:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10a470:	e12fff1e 	bx	lr
 c10a474:	66666667 	.word	0x66666667

0c10a478 <lcd_puthex>:

void lcd_puthex( uint16 x, uint16 y, uint8 color, uint32 i )
{
 c10a478:	e1a0c00d 	mov	ip, sp
 c10a47c:	e92dd800 	push	{fp, ip, lr, pc}
 c10a480:	e24cb004 	sub	fp, ip, #4
 c10a484:	e24dd020 	sub	sp, sp, #32
 c10a488:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
 c10a48c:	e14b01be 	strh	r0, [fp, #-30]	; 0xffffffe2
 c10a490:	e14b12b0 	strh	r1, [fp, #-32]	; 0xffffffe0
 c10a494:	e1a03002 	mov	r3, r2
 c10a498:	e54b3021 	strb	r3, [fp, #-33]	; 0xffffffdf
    char buf[8 + 1];
    char *p = buf + 8;
 c10a49c:	e24b301c 	sub	r3, fp, #28
 c10a4a0:	e2833008 	add	r3, r3, #8
 c10a4a4:	e50b3010 	str	r3, [fp, #-16]
    uint8 c;

    *p = '\0';
 c10a4a8:	e51b3010 	ldr	r3, [fp, #-16]
 c10a4ac:	e3a02000 	mov	r2, #0
 c10a4b0:	e5c32000 	strb	r2, [r3]

    do {
        c = i & 0xf;
 c10a4b4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
 c10a4b8:	e20330ff 	and	r3, r3, #255	; 0xff
 c10a4bc:	e203300f 	and	r3, r3, #15
 c10a4c0:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
        if( c < 10 )
 c10a4c4:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c10a4c8:	e3530009 	cmp	r3, #9
 c10a4cc:	8a000008 	bhi	c10a4f4 <lcd_puthex+0x7c>
            *--p = '0' + c;
 c10a4d0:	e51b3010 	ldr	r3, [fp, #-16]
 c10a4d4:	e2433001 	sub	r3, r3, #1
 c10a4d8:	e50b3010 	str	r3, [fp, #-16]
 c10a4dc:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c10a4e0:	e2833030 	add	r3, r3, #48	; 0x30
 c10a4e4:	e20320ff 	and	r2, r3, #255	; 0xff
 c10a4e8:	e51b3010 	ldr	r3, [fp, #-16]
 c10a4ec:	e5c32000 	strb	r2, [r3]
 c10a4f0:	ea000007 	b	c10a514 <lcd_puthex+0x9c>
        else
            *--p = 'a' + c - 10;
 c10a4f4:	e51b3010 	ldr	r3, [fp, #-16]
 c10a4f8:	e2433001 	sub	r3, r3, #1
 c10a4fc:	e50b3010 	str	r3, [fp, #-16]
 c10a500:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c10a504:	e2833057 	add	r3, r3, #87	; 0x57
 c10a508:	e20320ff 	and	r2, r3, #255	; 0xff
 c10a50c:	e51b3010 	ldr	r3, [fp, #-16]
 c10a510:	e5c32000 	strb	r2, [r3]
        i = i >> 4;
 c10a514:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
 c10a518:	e1a03223 	lsr	r3, r3, #4
 c10a51c:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
    } while( i );
 c10a520:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
 c10a524:	e3530000 	cmp	r3, #0
 c10a528:	1affffe1 	bne	c10a4b4 <lcd_puthex+0x3c>

    lcd_puts(x,y,color,p);
 c10a52c:	e15b11be 	ldrh	r1, [fp, #-30]	; 0xffffffe2
 c10a530:	e15b22b0 	ldrh	r2, [fp, #-32]	; 0xffffffe0
 c10a534:	e55b3021 	ldrb	r3, [fp, #-33]	; 0xffffffdf
 c10a538:	e1a00001 	mov	r0, r1
 c10a53c:	e1a01002 	mov	r1, r2
 c10a540:	e1a02003 	mov	r2, r3
 c10a544:	e51b3010 	ldr	r3, [fp, #-16]
 c10a548:	ebffff46 	bl	c10a268 <lcd_puts>
}
 c10a54c:	e24bd00c 	sub	sp, fp, #12
 c10a550:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10a554:	e12fff1e 	bx	lr

0c10a558 <lcd_putchar_x2>:

void lcd_putchar_x2( uint16 x, uint16 y, uint8 color, char ch )
{
 c10a558:	e1a0c00d 	mov	ip, sp
 c10a55c:	e92dd800 	push	{fp, ip, lr, pc}
 c10a560:	e24cb004 	sub	fp, ip, #4
 c10a564:	e24dd010 	sub	sp, sp, #16
 c10a568:	e14b01b6 	strh	r0, [fp, #-22]	; 0xffffffea
 c10a56c:	e14b11b8 	strh	r1, [fp, #-24]	; 0xffffffe8
 c10a570:	e54b2019 	strb	r2, [fp, #-25]	; 0xffffffe7
 c10a574:	e54b301a 	strb	r3, [fp, #-26]	; 0xffffffe6
	uint8 line, row;
	uint8* bitmap;
	bitmap = font + ch * 16;
 c10a578:	e55b301a 	ldrb	r3, [fp, #-26]	; 0xffffffe6
 c10a57c:	e1a03203 	lsl	r3, r3, #4
 c10a580:	e1a02003 	mov	r2, r3
 c10a584:	e59f3348 	ldr	r3, [pc, #840]	; c10a8d4 <lcd_putchar_x2+0x37c>
 c10a588:	e0823003 	add	r3, r2, r3
 c10a58c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
	for (line = 0; line < 32; line += 2)
 c10a590:	e3a03000 	mov	r3, #0
 c10a594:	e54b300d 	strb	r3, [fp, #-13]
 c10a598:	ea0000c7 	b	c10a8bc <lcd_putchar_x2+0x364>
		for (row = 0; row < 16; row += 2)
 c10a59c:	e3a03000 	mov	r3, #0
 c10a5a0:	e54b300e 	strb	r3, [fp, #-14]
 c10a5a4:	ea0000be 	b	c10a8a4 <lcd_putchar_x2+0x34c>
			if (bitmap[(line / 2)] & (0x80 >> (row / 2))) {
 c10a5a8:	e55b300d 	ldrb	r3, [fp, #-13]
 c10a5ac:	e1a030a3 	lsr	r3, r3, #1
 c10a5b0:	e20330ff 	and	r3, r3, #255	; 0xff
 c10a5b4:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
 c10a5b8:	e0823003 	add	r3, r2, r3
 c10a5bc:	e5d33000 	ldrb	r3, [r3]
 c10a5c0:	e1a02003 	mov	r2, r3
 c10a5c4:	e55b300e 	ldrb	r3, [fp, #-14]
 c10a5c8:	e1a030a3 	lsr	r3, r3, #1
 c10a5cc:	e20330ff 	and	r3, r3, #255	; 0xff
 c10a5d0:	e3a01080 	mov	r1, #128	; 0x80
 c10a5d4:	e1a03351 	asr	r3, r1, r3
 c10a5d8:	e0023003 	and	r3, r2, r3
 c10a5dc:	e3530000 	cmp	r3, #0
 c10a5e0:	0a000058 	beq	c10a748 <lcd_putchar_x2+0x1f0>
				lcd_putpixel(x + row, y + line, color);
 c10a5e4:	e55b300e 	ldrb	r3, [fp, #-14]
 c10a5e8:	e1a03803 	lsl	r3, r3, #16
 c10a5ec:	e1a02823 	lsr	r2, r3, #16
 c10a5f0:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
 c10a5f4:	e0823003 	add	r3, r2, r3
 c10a5f8:	e1a03803 	lsl	r3, r3, #16
 c10a5fc:	e1a01823 	lsr	r1, r3, #16
 c10a600:	e55b300d 	ldrb	r3, [fp, #-13]
 c10a604:	e1a03803 	lsl	r3, r3, #16
 c10a608:	e1a02823 	lsr	r2, r3, #16
 c10a60c:	e15b31b8 	ldrh	r3, [fp, #-24]	; 0xffffffe8
 c10a610:	e0823003 	add	r3, r2, r3
 c10a614:	e1a03803 	lsl	r3, r3, #16
 c10a618:	e1a02823 	lsr	r2, r3, #16
 c10a61c:	e55b3019 	ldrb	r3, [fp, #-25]	; 0xffffffe7
 c10a620:	e1a00001 	mov	r0, r1
 c10a624:	e1a01002 	mov	r1, r2
 c10a628:	e1a02003 	mov	r2, r3
 c10a62c:	ebfffdc0 	bl	c109d34 <lcd_putpixel>
				lcd_putpixel(x + row, (y + line + 1), color);
 c10a630:	e55b300e 	ldrb	r3, [fp, #-14]
 c10a634:	e1a03803 	lsl	r3, r3, #16
 c10a638:	e1a02823 	lsr	r2, r3, #16
 c10a63c:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
 c10a640:	e0823003 	add	r3, r2, r3
 c10a644:	e1a03803 	lsl	r3, r3, #16
 c10a648:	e1a01823 	lsr	r1, r3, #16
 c10a64c:	e55b300d 	ldrb	r3, [fp, #-13]
 c10a650:	e1a03803 	lsl	r3, r3, #16
 c10a654:	e1a02823 	lsr	r2, r3, #16
 c10a658:	e15b31b8 	ldrh	r3, [fp, #-24]	; 0xffffffe8
 c10a65c:	e0823003 	add	r3, r2, r3
 c10a660:	e1a03803 	lsl	r3, r3, #16
 c10a664:	e1a03823 	lsr	r3, r3, #16
 c10a668:	e2833001 	add	r3, r3, #1
 c10a66c:	e1a03803 	lsl	r3, r3, #16
 c10a670:	e1a02823 	lsr	r2, r3, #16
 c10a674:	e55b3019 	ldrb	r3, [fp, #-25]	; 0xffffffe7
 c10a678:	e1a00001 	mov	r0, r1
 c10a67c:	e1a01002 	mov	r1, r2
 c10a680:	e1a02003 	mov	r2, r3
 c10a684:	ebfffdaa 	bl	c109d34 <lcd_putpixel>
				lcd_putpixel((x + row + 1), y + line, color);
 c10a688:	e55b300e 	ldrb	r3, [fp, #-14]
 c10a68c:	e1a03803 	lsl	r3, r3, #16
 c10a690:	e1a02823 	lsr	r2, r3, #16
 c10a694:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
 c10a698:	e0823003 	add	r3, r2, r3
 c10a69c:	e1a03803 	lsl	r3, r3, #16
 c10a6a0:	e1a03823 	lsr	r3, r3, #16
 c10a6a4:	e2833001 	add	r3, r3, #1
 c10a6a8:	e1a03803 	lsl	r3, r3, #16
 c10a6ac:	e1a01823 	lsr	r1, r3, #16
 c10a6b0:	e55b300d 	ldrb	r3, [fp, #-13]
 c10a6b4:	e1a03803 	lsl	r3, r3, #16
 c10a6b8:	e1a02823 	lsr	r2, r3, #16
 c10a6bc:	e15b31b8 	ldrh	r3, [fp, #-24]	; 0xffffffe8
 c10a6c0:	e0823003 	add	r3, r2, r3
 c10a6c4:	e1a03803 	lsl	r3, r3, #16
 c10a6c8:	e1a02823 	lsr	r2, r3, #16
 c10a6cc:	e55b3019 	ldrb	r3, [fp, #-25]	; 0xffffffe7
 c10a6d0:	e1a00001 	mov	r0, r1
 c10a6d4:	e1a01002 	mov	r1, r2
 c10a6d8:	e1a02003 	mov	r2, r3
 c10a6dc:	ebfffd94 	bl	c109d34 <lcd_putpixel>
				lcd_putpixel((x + row + 1), (y + line + 1), color);
 c10a6e0:	e55b300e 	ldrb	r3, [fp, #-14]
 c10a6e4:	e1a03803 	lsl	r3, r3, #16
 c10a6e8:	e1a02823 	lsr	r2, r3, #16
 c10a6ec:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
 c10a6f0:	e0823003 	add	r3, r2, r3
 c10a6f4:	e1a03803 	lsl	r3, r3, #16
 c10a6f8:	e1a03823 	lsr	r3, r3, #16
 c10a6fc:	e2833001 	add	r3, r3, #1
 c10a700:	e1a03803 	lsl	r3, r3, #16
 c10a704:	e1a01823 	lsr	r1, r3, #16
 c10a708:	e55b300d 	ldrb	r3, [fp, #-13]
 c10a70c:	e1a03803 	lsl	r3, r3, #16
 c10a710:	e1a02823 	lsr	r2, r3, #16
 c10a714:	e15b31b8 	ldrh	r3, [fp, #-24]	; 0xffffffe8
 c10a718:	e0823003 	add	r3, r2, r3
 c10a71c:	e1a03803 	lsl	r3, r3, #16
 c10a720:	e1a03823 	lsr	r3, r3, #16
 c10a724:	e2833001 	add	r3, r3, #1
 c10a728:	e1a03803 	lsl	r3, r3, #16
 c10a72c:	e1a02823 	lsr	r2, r3, #16
 c10a730:	e55b3019 	ldrb	r3, [fp, #-25]	; 0xffffffe7
 c10a734:	e1a00001 	mov	r0, r1
 c10a738:	e1a01002 	mov	r1, r2
 c10a73c:	e1a02003 	mov	r2, r3
 c10a740:	ebfffd7b 	bl	c109d34 <lcd_putpixel>
 c10a744:	ea000053 	b	c10a898 <lcd_putchar_x2+0x340>
			}
			else {
				lcd_putpixel(x + row, y + line, WHITE);
 c10a748:	e55b300e 	ldrb	r3, [fp, #-14]
 c10a74c:	e1a03803 	lsl	r3, r3, #16
 c10a750:	e1a02823 	lsr	r2, r3, #16
 c10a754:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
 c10a758:	e0823003 	add	r3, r2, r3
 c10a75c:	e1a03803 	lsl	r3, r3, #16
 c10a760:	e1a02823 	lsr	r2, r3, #16
 c10a764:	e55b300d 	ldrb	r3, [fp, #-13]
 c10a768:	e1a03803 	lsl	r3, r3, #16
 c10a76c:	e1a01823 	lsr	r1, r3, #16
 c10a770:	e15b31b8 	ldrh	r3, [fp, #-24]	; 0xffffffe8
 c10a774:	e0813003 	add	r3, r1, r3
 c10a778:	e1a03803 	lsl	r3, r3, #16
 c10a77c:	e1a03823 	lsr	r3, r3, #16
 c10a780:	e1a00002 	mov	r0, r2
 c10a784:	e1a01003 	mov	r1, r3
 c10a788:	e3a02000 	mov	r2, #0
 c10a78c:	ebfffd68 	bl	c109d34 <lcd_putpixel>
				lcd_putpixel(x + row, (y + line + 1), WHITE);
 c10a790:	e55b300e 	ldrb	r3, [fp, #-14]
 c10a794:	e1a03803 	lsl	r3, r3, #16
 c10a798:	e1a02823 	lsr	r2, r3, #16
 c10a79c:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
 c10a7a0:	e0823003 	add	r3, r2, r3
 c10a7a4:	e1a03803 	lsl	r3, r3, #16
 c10a7a8:	e1a02823 	lsr	r2, r3, #16
 c10a7ac:	e55b300d 	ldrb	r3, [fp, #-13]
 c10a7b0:	e1a03803 	lsl	r3, r3, #16
 c10a7b4:	e1a01823 	lsr	r1, r3, #16
 c10a7b8:	e15b31b8 	ldrh	r3, [fp, #-24]	; 0xffffffe8
 c10a7bc:	e0813003 	add	r3, r1, r3
 c10a7c0:	e1a03803 	lsl	r3, r3, #16
 c10a7c4:	e1a03823 	lsr	r3, r3, #16
 c10a7c8:	e2833001 	add	r3, r3, #1
 c10a7cc:	e1a03803 	lsl	r3, r3, #16
 c10a7d0:	e1a03823 	lsr	r3, r3, #16
 c10a7d4:	e1a00002 	mov	r0, r2
 c10a7d8:	e1a01003 	mov	r1, r3
 c10a7dc:	e3a02000 	mov	r2, #0
 c10a7e0:	ebfffd53 	bl	c109d34 <lcd_putpixel>
				lcd_putpixel((x + row + 1), y + line, WHITE);
 c10a7e4:	e55b300e 	ldrb	r3, [fp, #-14]
 c10a7e8:	e1a03803 	lsl	r3, r3, #16
 c10a7ec:	e1a02823 	lsr	r2, r3, #16
 c10a7f0:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
 c10a7f4:	e0823003 	add	r3, r2, r3
 c10a7f8:	e1a03803 	lsl	r3, r3, #16
 c10a7fc:	e1a03823 	lsr	r3, r3, #16
 c10a800:	e2833001 	add	r3, r3, #1
 c10a804:	e1a03803 	lsl	r3, r3, #16
 c10a808:	e1a02823 	lsr	r2, r3, #16
 c10a80c:	e55b300d 	ldrb	r3, [fp, #-13]
 c10a810:	e1a03803 	lsl	r3, r3, #16
 c10a814:	e1a01823 	lsr	r1, r3, #16
 c10a818:	e15b31b8 	ldrh	r3, [fp, #-24]	; 0xffffffe8
 c10a81c:	e0813003 	add	r3, r1, r3
 c10a820:	e1a03803 	lsl	r3, r3, #16
 c10a824:	e1a03823 	lsr	r3, r3, #16
 c10a828:	e1a00002 	mov	r0, r2
 c10a82c:	e1a01003 	mov	r1, r3
 c10a830:	e3a02000 	mov	r2, #0
 c10a834:	ebfffd3e 	bl	c109d34 <lcd_putpixel>
				lcd_putpixel((x + row + 1), (y + line + 1), WHITE);
 c10a838:	e55b300e 	ldrb	r3, [fp, #-14]
 c10a83c:	e1a03803 	lsl	r3, r3, #16
 c10a840:	e1a02823 	lsr	r2, r3, #16
 c10a844:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
 c10a848:	e0823003 	add	r3, r2, r3
 c10a84c:	e1a03803 	lsl	r3, r3, #16
 c10a850:	e1a03823 	lsr	r3, r3, #16
 c10a854:	e2833001 	add	r3, r3, #1
 c10a858:	e1a03803 	lsl	r3, r3, #16
 c10a85c:	e1a02823 	lsr	r2, r3, #16
 c10a860:	e55b300d 	ldrb	r3, [fp, #-13]
 c10a864:	e1a03803 	lsl	r3, r3, #16
 c10a868:	e1a01823 	lsr	r1, r3, #16
 c10a86c:	e15b31b8 	ldrh	r3, [fp, #-24]	; 0xffffffe8
 c10a870:	e0813003 	add	r3, r1, r3
 c10a874:	e1a03803 	lsl	r3, r3, #16
 c10a878:	e1a03823 	lsr	r3, r3, #16
 c10a87c:	e2833001 	add	r3, r3, #1
 c10a880:	e1a03803 	lsl	r3, r3, #16
 c10a884:	e1a03823 	lsr	r3, r3, #16
 c10a888:	e1a00002 	mov	r0, r2
 c10a88c:	e1a01003 	mov	r1, r3
 c10a890:	e3a02000 	mov	r2, #0
 c10a894:	ebfffd26 	bl	c109d34 <lcd_putpixel>
{
	uint8 line, row;
	uint8* bitmap;
	bitmap = font + ch * 16;
	for (line = 0; line < 32; line += 2)
		for (row = 0; row < 16; row += 2)
 c10a898:	e55b300e 	ldrb	r3, [fp, #-14]
 c10a89c:	e2833002 	add	r3, r3, #2
 c10a8a0:	e54b300e 	strb	r3, [fp, #-14]
 c10a8a4:	e55b300e 	ldrb	r3, [fp, #-14]
 c10a8a8:	e353000f 	cmp	r3, #15
 c10a8ac:	9affff3d 	bls	c10a5a8 <lcd_putchar_x2+0x50>
void lcd_putchar_x2( uint16 x, uint16 y, uint8 color, char ch )
{
	uint8 line, row;
	uint8* bitmap;
	bitmap = font + ch * 16;
	for (line = 0; line < 32; line += 2)
 c10a8b0:	e55b300d 	ldrb	r3, [fp, #-13]
 c10a8b4:	e2833002 	add	r3, r3, #2
 c10a8b8:	e54b300d 	strb	r3, [fp, #-13]
 c10a8bc:	e55b300d 	ldrb	r3, [fp, #-13]
 c10a8c0:	e353001f 	cmp	r3, #31
 c10a8c4:	9affff34 	bls	c10a59c <lcd_putchar_x2+0x44>
				lcd_putpixel(x + row, y + line, WHITE);
				lcd_putpixel(x + row, (y + line + 1), WHITE);
				lcd_putpixel((x + row + 1), y + line, WHITE);
				lcd_putpixel((x + row + 1), (y + line + 1), WHITE);
			}
}
 c10a8c8:	e24bd00c 	sub	sp, fp, #12
 c10a8cc:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10a8d0:	e12fff1e 	bx	lr
 c10a8d4:	0c10ec10 	.word	0x0c10ec10

0c10a8d8 <lcd_puts_x2>:

void lcd_puts_x2( uint16 x, uint16 y, uint8 color, char *s )
{
 c10a8d8:	e1a0c00d 	mov	ip, sp
 c10a8dc:	e92dd800 	push	{fp, ip, lr, pc}
 c10a8e0:	e24cb004 	sub	fp, ip, #4
 c10a8e4:	e24dd018 	sub	sp, sp, #24
 c10a8e8:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
 c10a8ec:	e14b01b6 	strh	r0, [fp, #-22]	; 0xffffffea
 c10a8f0:	e14b11b8 	strh	r1, [fp, #-24]	; 0xffffffe8
 c10a8f4:	e1a03002 	mov	r3, r2
 c10a8f8:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
	uint16 i = y, j;
 c10a8fc:	e15b31b8 	ldrh	r3, [fp, #-24]	; 0xffffffe8
 c10a900:	e14b30be 	strh	r3, [fp, #-14]

	while((*s != '\0')&&(i < LCD_HEIGHT)){
 c10a904:	ea000019 	b	c10a970 <lcd_puts_x2+0x98>
		j = x;
 c10a908:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
 c10a90c:	e14b31b0 	strh	r3, [fp, #-16]
		while((*s != '\0')&&(j < LCD_WIDTH)){
 c10a910:	ea00000b 	b	c10a944 <lcd_puts_x2+0x6c>
			lcd_putchar_x2(j,i,color,*s);
 c10a914:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c10a918:	e5d33000 	ldrb	r3, [r3]
 c10a91c:	e15b01b0 	ldrh	r0, [fp, #-16]
 c10a920:	e15b10be 	ldrh	r1, [fp, #-14]
 c10a924:	e55b2019 	ldrb	r2, [fp, #-25]	; 0xffffffe7
 c10a928:	ebffff0a 	bl	c10a558 <lcd_putchar_x2>
			s++;
 c10a92c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c10a930:	e2833001 	add	r3, r3, #1
 c10a934:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
			j+=16;
 c10a938:	e15b31b0 	ldrh	r3, [fp, #-16]
 c10a93c:	e2833010 	add	r3, r3, #16
 c10a940:	e14b31b0 	strh	r3, [fp, #-16]
{
	uint16 i = y, j;

	while((*s != '\0')&&(i < LCD_HEIGHT)){
		j = x;
		while((*s != '\0')&&(j < LCD_WIDTH)){
 c10a944:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c10a948:	e5d33000 	ldrb	r3, [r3]
 c10a94c:	e3530000 	cmp	r3, #0
 c10a950:	0a000003 	beq	c10a964 <lcd_puts_x2+0x8c>
 c10a954:	e15b21b0 	ldrh	r2, [fp, #-16]
 c10a958:	e59f3038 	ldr	r3, [pc, #56]	; c10a998 <lcd_puts_x2+0xc0>
 c10a95c:	e1520003 	cmp	r2, r3
 c10a960:	9affffeb 	bls	c10a914 <lcd_puts_x2+0x3c>
			lcd_putchar_x2(j,i,color,*s);
			s++;
			j+=16;
		}
		i+=32;
 c10a964:	e15b30be 	ldrh	r3, [fp, #-14]
 c10a968:	e2833020 	add	r3, r3, #32
 c10a96c:	e14b30be 	strh	r3, [fp, #-14]

void lcd_puts_x2( uint16 x, uint16 y, uint8 color, char *s )
{
	uint16 i = y, j;

	while((*s != '\0')&&(i < LCD_HEIGHT)){
 c10a970:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c10a974:	e5d33000 	ldrb	r3, [r3]
 c10a978:	e3530000 	cmp	r3, #0
 c10a97c:	0a000002 	beq	c10a98c <lcd_puts_x2+0xb4>
 c10a980:	e15b30be 	ldrh	r3, [fp, #-14]
 c10a984:	e35300ef 	cmp	r3, #239	; 0xef
 c10a988:	9affffde 	bls	c10a908 <lcd_puts_x2+0x30>
			s++;
			j+=16;
		}
		i+=32;
	}
}
 c10a98c:	e24bd00c 	sub	sp, fp, #12
 c10a990:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10a994:	e12fff1e 	bx	lr
 c10a998:	0000013f 	.word	0x0000013f

0c10a99c <lcd_putint_x2>:

void lcd_putint_x2( uint16 x, uint16 y, uint8 color, int32 i )
{
 c10a99c:	e1a0c00d 	mov	ip, sp
 c10a9a0:	e92dd800 	push	{fp, ip, lr, pc}
 c10a9a4:	e24cb004 	sub	fp, ip, #4
 c10a9a8:	e24dd028 	sub	sp, sp, #40	; 0x28
 c10a9ac:	e50b3030 	str	r3, [fp, #-48]	; 0xffffffd0
 c10a9b0:	e14b02b6 	strh	r0, [fp, #-38]	; 0xffffffda
 c10a9b4:	e14b12b8 	strh	r1, [fp, #-40]	; 0xffffffd8
 c10a9b8:	e1a03002 	mov	r3, r2
 c10a9bc:	e54b3029 	strb	r3, [fp, #-41]	; 0xffffffd7
	uint16 x2 = x, y2 = y;
 c10a9c0:	e15b32b6 	ldrh	r3, [fp, #-38]	; 0xffffffda
 c10a9c4:	e14b31b4 	strh	r3, [fp, #-20]	; 0xffffffec
 c10a9c8:	e15b32b8 	ldrh	r3, [fp, #-40]	; 0xffffffd8
 c10a9cc:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
	char buf[8 + 1];
	char *p = buf + 8;
 c10a9d0:	e24b3020 	sub	r3, fp, #32
 c10a9d4:	e2833008 	add	r3, r3, #8
 c10a9d8:	e50b3010 	str	r3, [fp, #-16]
	uint8 c = 0;
 c10a9dc:	e3a03000 	mov	r3, #0
 c10a9e0:	e54b3017 	strb	r3, [fp, #-23]	; 0xffffffe9
	uint8 neg = 0;
 c10a9e4:	e3a03000 	mov	r3, #0
 c10a9e8:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef

	if(i < 0){
 c10a9ec:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
 c10a9f0:	e3530000 	cmp	r3, #0
 c10a9f4:	aa000004 	bge	c10aa0c <lcd_putint_x2+0x70>
		neg = 1;
 c10a9f8:	e3a03001 	mov	r3, #1
 c10a9fc:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
		i = -i;
 c10aa00:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
 c10aa04:	e2633000 	rsb	r3, r3, #0
 c10aa08:	e50b3030 	str	r3, [fp, #-48]	; 0xffffffd0
	}

	*p = '\0';
 c10aa0c:	e51b3010 	ldr	r3, [fp, #-16]
 c10aa10:	e3a02000 	mov	r2, #0
 c10aa14:	e5c32000 	strb	r2, [r3]
	do {
		c = i % 10;
 c10aa18:	e51b1030 	ldr	r1, [fp, #-48]	; 0xffffffd0
 c10aa1c:	e59f30c0 	ldr	r3, [pc, #192]	; c10aae4 <lcd_putint_x2+0x148>
 c10aa20:	e0c32391 	smull	r2, r3, r1, r3
 c10aa24:	e1a02143 	asr	r2, r3, #2
 c10aa28:	e1a03fc1 	asr	r3, r1, #31
 c10aa2c:	e0632002 	rsb	r2, r3, r2
 c10aa30:	e1a03002 	mov	r3, r2
 c10aa34:	e1a03103 	lsl	r3, r3, #2
 c10aa38:	e0833002 	add	r3, r3, r2
 c10aa3c:	e1a03083 	lsl	r3, r3, #1
 c10aa40:	e0632001 	rsb	r2, r3, r1
 c10aa44:	e1a03002 	mov	r3, r2
 c10aa48:	e54b3017 	strb	r3, [fp, #-23]	; 0xffffffe9
		*--p = '0' + c;
 c10aa4c:	e51b3010 	ldr	r3, [fp, #-16]
 c10aa50:	e2433001 	sub	r3, r3, #1
 c10aa54:	e50b3010 	str	r3, [fp, #-16]
 c10aa58:	e55b3017 	ldrb	r3, [fp, #-23]	; 0xffffffe9
 c10aa5c:	e2833030 	add	r3, r3, #48	; 0x30
 c10aa60:	e20320ff 	and	r2, r3, #255	; 0xff
 c10aa64:	e51b3010 	ldr	r3, [fp, #-16]
 c10aa68:	e5c32000 	strb	r2, [r3]
		i = i / 10;
 c10aa6c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
 c10aa70:	e59f206c 	ldr	r2, [pc, #108]	; c10aae4 <lcd_putint_x2+0x148>
 c10aa74:	e0c21293 	smull	r1, r2, r3, r2
 c10aa78:	e1a02142 	asr	r2, r2, #2
 c10aa7c:	e1a03fc3 	asr	r3, r3, #31
 c10aa80:	e0633002 	rsb	r3, r3, r2
 c10aa84:	e50b3030 	str	r3, [fp, #-48]	; 0xffffffd0
	} while (i);
 c10aa88:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
 c10aa8c:	e3530000 	cmp	r3, #0
 c10aa90:	1affffe0 	bne	c10aa18 <lcd_putint_x2+0x7c>

	if(neg == 1){
 c10aa94:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c10aa98:	e3530001 	cmp	r3, #1
 c10aa9c:	1a000005 	bne	c10aab8 <lcd_putint_x2+0x11c>
		*--p = '-';
 c10aaa0:	e51b3010 	ldr	r3, [fp, #-16]
 c10aaa4:	e2433001 	sub	r3, r3, #1
 c10aaa8:	e50b3010 	str	r3, [fp, #-16]
 c10aaac:	e51b3010 	ldr	r3, [fp, #-16]
 c10aab0:	e3a0202d 	mov	r2, #45	; 0x2d
 c10aab4:	e5c32000 	strb	r2, [r3]
	}

	lcd_puts_x2(x2,y2,color,p);
 c10aab8:	e15b11b4 	ldrh	r1, [fp, #-20]	; 0xffffffec
 c10aabc:	e15b21b6 	ldrh	r2, [fp, #-22]	; 0xffffffea
 c10aac0:	e55b3029 	ldrb	r3, [fp, #-41]	; 0xffffffd7
 c10aac4:	e1a00001 	mov	r0, r1
 c10aac8:	e1a01002 	mov	r1, r2
 c10aacc:	e1a02003 	mov	r2, r3
 c10aad0:	e51b3010 	ldr	r3, [fp, #-16]
 c10aad4:	ebffff7f 	bl	c10a8d8 <lcd_puts_x2>
}
 c10aad8:	e24bd00c 	sub	sp, fp, #12
 c10aadc:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10aae0:	e12fff1e 	bx	lr
 c10aae4:	66666667 	.word	0x66666667

0c10aae8 <lcd_puthex_x2>:

void lcd_puthex_x2( uint16 x, uint16 y, uint8 color, uint32 i )
{
 c10aae8:	e1a0c00d 	mov	ip, sp
 c10aaec:	e92dd800 	push	{fp, ip, lr, pc}
 c10aaf0:	e24cb004 	sub	fp, ip, #4
 c10aaf4:	e24dd020 	sub	sp, sp, #32
 c10aaf8:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
 c10aafc:	e14b01be 	strh	r0, [fp, #-30]	; 0xffffffe2
 c10ab00:	e14b12b0 	strh	r1, [fp, #-32]	; 0xffffffe0
 c10ab04:	e1a03002 	mov	r3, r2
 c10ab08:	e54b3021 	strb	r3, [fp, #-33]	; 0xffffffdf
    char buf[8 + 1];
    char *p = buf + 8;
 c10ab0c:	e24b301c 	sub	r3, fp, #28
 c10ab10:	e2833008 	add	r3, r3, #8
 c10ab14:	e50b3010 	str	r3, [fp, #-16]
    uint8 c;

    *p = '\0';
 c10ab18:	e51b3010 	ldr	r3, [fp, #-16]
 c10ab1c:	e3a02000 	mov	r2, #0
 c10ab20:	e5c32000 	strb	r2, [r3]

    do {
        c = i & 0xf;
 c10ab24:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
 c10ab28:	e20330ff 	and	r3, r3, #255	; 0xff
 c10ab2c:	e203300f 	and	r3, r3, #15
 c10ab30:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
        if( c < 10 )
 c10ab34:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c10ab38:	e3530009 	cmp	r3, #9
 c10ab3c:	8a000008 	bhi	c10ab64 <lcd_puthex_x2+0x7c>
            *--p = '0' + c;
 c10ab40:	e51b3010 	ldr	r3, [fp, #-16]
 c10ab44:	e2433001 	sub	r3, r3, #1
 c10ab48:	e50b3010 	str	r3, [fp, #-16]
 c10ab4c:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c10ab50:	e2833030 	add	r3, r3, #48	; 0x30
 c10ab54:	e20320ff 	and	r2, r3, #255	; 0xff
 c10ab58:	e51b3010 	ldr	r3, [fp, #-16]
 c10ab5c:	e5c32000 	strb	r2, [r3]
 c10ab60:	ea000007 	b	c10ab84 <lcd_puthex_x2+0x9c>
        else
            *--p = 'a' + c - 10;
 c10ab64:	e51b3010 	ldr	r3, [fp, #-16]
 c10ab68:	e2433001 	sub	r3, r3, #1
 c10ab6c:	e50b3010 	str	r3, [fp, #-16]
 c10ab70:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c10ab74:	e2833057 	add	r3, r3, #87	; 0x57
 c10ab78:	e20320ff 	and	r2, r3, #255	; 0xff
 c10ab7c:	e51b3010 	ldr	r3, [fp, #-16]
 c10ab80:	e5c32000 	strb	r2, [r3]
        i = i >> 4;
 c10ab84:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
 c10ab88:	e1a03223 	lsr	r3, r3, #4
 c10ab8c:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
    } while( i );
 c10ab90:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
 c10ab94:	e3530000 	cmp	r3, #0
 c10ab98:	1affffe1 	bne	c10ab24 <lcd_puthex_x2+0x3c>

    lcd_puts_x2(x,y,color,p);
 c10ab9c:	e15b11be 	ldrh	r1, [fp, #-30]	; 0xffffffe2
 c10aba0:	e15b22b0 	ldrh	r2, [fp, #-32]	; 0xffffffe0
 c10aba4:	e55b3021 	ldrb	r3, [fp, #-33]	; 0xffffffdf
 c10aba8:	e1a00001 	mov	r0, r1
 c10abac:	e1a01002 	mov	r1, r2
 c10abb0:	e1a02003 	mov	r2, r3
 c10abb4:	e51b3010 	ldr	r3, [fp, #-16]
 c10abb8:	ebffff46 	bl	c10a8d8 <lcd_puts_x2>
}
 c10abbc:	e24bd00c 	sub	sp, fp, #12
 c10abc0:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10abc4:	e12fff1e 	bx	lr

0c10abc8 <lcd_putWallpaper>:

void lcd_putWallpaper( uint8 *bmp )
{
 c10abc8:	e1a0c00d 	mov	ip, sp
 c10abcc:	e92dd800 	push	{fp, ip, lr, pc}
 c10abd0:	e24cb004 	sub	fp, ip, #4
 c10abd4:	e24dd018 	sub	sp, sp, #24
 c10abd8:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
    uint32 headerSize;

    uint16 x, ySrc, yDst;
    uint16 offsetSrc, offsetDst;

    headerSize = bmp[10] + (bmp[11] << 8) + (bmp[12] << 16) + (bmp[13] << 24);
 c10abdc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c10abe0:	e283300a 	add	r3, r3, #10
 c10abe4:	e5d33000 	ldrb	r3, [r3]
 c10abe8:	e1a02003 	mov	r2, r3
 c10abec:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c10abf0:	e283300b 	add	r3, r3, #11
 c10abf4:	e5d33000 	ldrb	r3, [r3]
 c10abf8:	e1a03403 	lsl	r3, r3, #8
 c10abfc:	e0822003 	add	r2, r2, r3
 c10ac00:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c10ac04:	e283300c 	add	r3, r3, #12
 c10ac08:	e5d33000 	ldrb	r3, [r3]
 c10ac0c:	e1a03803 	lsl	r3, r3, #16
 c10ac10:	e0822003 	add	r2, r2, r3
 c10ac14:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c10ac18:	e283300d 	add	r3, r3, #13
 c10ac1c:	e5d33000 	ldrb	r3, [r3]
 c10ac20:	e1a03c03 	lsl	r3, r3, #24
 c10ac24:	e0823003 	add	r3, r2, r3
 c10ac28:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8

    bmp = bmp + headerSize;
 c10ac2c:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
 c10ac30:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c10ac34:	e0823003 	add	r3, r2, r3
 c10ac38:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
    
    for( ySrc=0, yDst=LCD_HEIGHT-1; ySrc<LCD_HEIGHT; ySrc++, yDst-- )                                                                       
 c10ac3c:	e3a03000 	mov	r3, #0
 c10ac40:	e14b31b0 	strh	r3, [fp, #-16]
 c10ac44:	e3a030ef 	mov	r3, #239	; 0xef
 c10ac48:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
 c10ac4c:	ea00002d 	b	c10ad08 <lcd_putWallpaper+0x140>
    {
        offsetDst = yDst*LCD_WIDTH/2;
 c10ac50:	e15b21b2 	ldrh	r2, [fp, #-18]	; 0xffffffee
 c10ac54:	e1a03002 	mov	r3, r2
 c10ac58:	e1a03103 	lsl	r3, r3, #2
 c10ac5c:	e0833002 	add	r3, r3, r2
 c10ac60:	e1a03303 	lsl	r3, r3, #6
 c10ac64:	e1a02fa3 	lsr	r2, r3, #31
 c10ac68:	e0823003 	add	r3, r2, r3
 c10ac6c:	e1a030c3 	asr	r3, r3, #1
 c10ac70:	e14b31ba 	strh	r3, [fp, #-26]	; 0xffffffe6
        offsetSrc = ySrc*LCD_WIDTH/2;
 c10ac74:	e15b21b0 	ldrh	r2, [fp, #-16]
 c10ac78:	e1a03002 	mov	r3, r2
 c10ac7c:	e1a03103 	lsl	r3, r3, #2
 c10ac80:	e0833002 	add	r3, r3, r2
 c10ac84:	e1a03303 	lsl	r3, r3, #6
 c10ac88:	e1a02fa3 	lsr	r2, r3, #31
 c10ac8c:	e0823003 	add	r3, r2, r3
 c10ac90:	e1a030c3 	asr	r3, r3, #1
 c10ac94:	e14b31bc 	strh	r3, [fp, #-28]	; 0xffffffe4
        for( x=0; x<LCD_WIDTH/2; x++ )
 c10ac98:	e3a03000 	mov	r3, #0
 c10ac9c:	e14b30be 	strh	r3, [fp, #-14]
 c10aca0:	ea00000f 	b	c10ace4 <lcd_putWallpaper+0x11c>
            lcd_buffer[offsetDst+x] = ~bmp[offsetSrc+x];
 c10aca4:	e15b21ba 	ldrh	r2, [fp, #-26]	; 0xffffffe6
 c10aca8:	e15b30be 	ldrh	r3, [fp, #-14]
 c10acac:	e0823003 	add	r3, r2, r3
 c10acb0:	e15b11bc 	ldrh	r1, [fp, #-28]	; 0xffffffe4
 c10acb4:	e15b20be 	ldrh	r2, [fp, #-14]
 c10acb8:	e0812002 	add	r2, r1, r2
 c10acbc:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
 c10acc0:	e0812002 	add	r2, r1, r2
 c10acc4:	e5d22000 	ldrb	r2, [r2]
 c10acc8:	e1e02002 	mvn	r2, r2
 c10accc:	e20210ff 	and	r1, r2, #255	; 0xff
 c10acd0:	e59f2048 	ldr	r2, [pc, #72]	; c10ad20 <lcd_putWallpaper+0x158>
 c10acd4:	e7c21003 	strb	r1, [r2, r3]
    
    for( ySrc=0, yDst=LCD_HEIGHT-1; ySrc<LCD_HEIGHT; ySrc++, yDst-- )                                                                       
    {
        offsetDst = yDst*LCD_WIDTH/2;
        offsetSrc = ySrc*LCD_WIDTH/2;
        for( x=0; x<LCD_WIDTH/2; x++ )
 c10acd8:	e15b30be 	ldrh	r3, [fp, #-14]
 c10acdc:	e2833001 	add	r3, r3, #1
 c10ace0:	e14b30be 	strh	r3, [fp, #-14]
 c10ace4:	e15b30be 	ldrh	r3, [fp, #-14]
 c10ace8:	e353009f 	cmp	r3, #159	; 0x9f
 c10acec:	9affffec 	bls	c10aca4 <lcd_putWallpaper+0xdc>

    headerSize = bmp[10] + (bmp[11] << 8) + (bmp[12] << 16) + (bmp[13] << 24);

    bmp = bmp + headerSize;
    
    for( ySrc=0, yDst=LCD_HEIGHT-1; ySrc<LCD_HEIGHT; ySrc++, yDst-- )                                                                       
 c10acf0:	e15b31b0 	ldrh	r3, [fp, #-16]
 c10acf4:	e2833001 	add	r3, r3, #1
 c10acf8:	e14b31b0 	strh	r3, [fp, #-16]
 c10acfc:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
 c10ad00:	e2433001 	sub	r3, r3, #1
 c10ad04:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
 c10ad08:	e15b31b0 	ldrh	r3, [fp, #-16]
 c10ad0c:	e35300ef 	cmp	r3, #239	; 0xef
 c10ad10:	9affffce 	bls	c10ac50 <lcd_putWallpaper+0x88>
        offsetDst = yDst*LCD_WIDTH/2;
        offsetSrc = ySrc*LCD_WIDTH/2;
        for( x=0; x<LCD_WIDTH/2; x++ )
            lcd_buffer[offsetDst+x] = ~bmp[offsetSrc+x];
    }
}
 c10ad14:	e24bd00c 	sub	sp, fp, #12
 c10ad18:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10ad1c:	e12fff1e 	bx	lr
 c10ad20:	0c10fc18 	.word	0x0c10fc18

0c10ad24 <leds_init>:

#include <s3c44b0x.h>
#include <leds.h>

void leds_init( void )
{
 c10ad24:	e1a0c00d 	mov	ip, sp
 c10ad28:	e92dd800 	push	{fp, ip, lr, pc}
 c10ad2c:	e24cb004 	sub	fp, ip, #4
	PCONB &= ~( (1<<10) | (1<<9) );
 c10ad30:	e59f3028 	ldr	r3, [pc, #40]	; c10ad60 <leds_init+0x3c>
 c10ad34:	e59f2024 	ldr	r2, [pc, #36]	; c10ad60 <leds_init+0x3c>
 c10ad38:	e5922000 	ldr	r2, [r2]
 c10ad3c:	e3c22c06 	bic	r2, r2, #1536	; 0x600
 c10ad40:	e5832000 	str	r2, [r3]
	led_off(LEFT_LED);
 c10ad44:	e3a00001 	mov	r0, #1
 c10ad48:	eb00001d 	bl	c10adc4 <led_off>
	led_off(RIGHT_LED);
 c10ad4c:	e3a00002 	mov	r0, #2
 c10ad50:	eb00001b 	bl	c10adc4 <led_off>
}
 c10ad54:	e24bd00c 	sub	sp, fp, #12
 c10ad58:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10ad5c:	e12fff1e 	bx	lr
 c10ad60:	01d20008 	.word	0x01d20008

0c10ad64 <led_on>:

void led_on( uint8 led )
{
 c10ad64:	e1a0c00d 	mov	ip, sp
 c10ad68:	e92dd800 	push	{fp, ip, lr, pc}
 c10ad6c:	e24cb004 	sub	fp, ip, #4
 c10ad70:	e24dd008 	sub	sp, sp, #8
 c10ad74:	e1a03000 	mov	r3, r0
 c10ad78:	e54b300d 	strb	r3, [fp, #-13]
	if(led == LEFT_LED){
 c10ad7c:	e55b300d 	ldrb	r3, [fp, #-13]
 c10ad80:	e3530001 	cmp	r3, #1
 c10ad84:	1a000005 	bne	c10ada0 <led_on+0x3c>
		PDATB &= ~(1 << 9); //pongo un 0 en la 9 posicion
 c10ad88:	e59f3030 	ldr	r3, [pc, #48]	; c10adc0 <led_on+0x5c>
 c10ad8c:	e59f202c 	ldr	r2, [pc, #44]	; c10adc0 <led_on+0x5c>
 c10ad90:	e5922000 	ldr	r2, [r2]
 c10ad94:	e3c22c02 	bic	r2, r2, #512	; 0x200
 c10ad98:	e5832000 	str	r2, [r3]
 c10ad9c:	ea000004 	b	c10adb4 <led_on+0x50>
	}
	else{
		PDATB &= ~(1 << 10); // pongo un 0 en la décima posición
 c10ada0:	e59f3018 	ldr	r3, [pc, #24]	; c10adc0 <led_on+0x5c>
 c10ada4:	e59f2014 	ldr	r2, [pc, #20]	; c10adc0 <led_on+0x5c>
 c10ada8:	e5922000 	ldr	r2, [r2]
 c10adac:	e3c22b01 	bic	r2, r2, #1024	; 0x400
 c10adb0:	e5832000 	str	r2, [r3]
	}

}
 c10adb4:	e24bd00c 	sub	sp, fp, #12
 c10adb8:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10adbc:	e12fff1e 	bx	lr
 c10adc0:	01d2000c 	.word	0x01d2000c

0c10adc4 <led_off>:

void led_off( uint8 led )
{
 c10adc4:	e1a0c00d 	mov	ip, sp
 c10adc8:	e92dd800 	push	{fp, ip, lr, pc}
 c10adcc:	e24cb004 	sub	fp, ip, #4
 c10add0:	e24dd008 	sub	sp, sp, #8
 c10add4:	e1a03000 	mov	r3, r0
 c10add8:	e54b300d 	strb	r3, [fp, #-13]
	if(led == LEFT_LED){
 c10addc:	e55b300d 	ldrb	r3, [fp, #-13]
 c10ade0:	e3530001 	cmp	r3, #1
 c10ade4:	1a000005 	bne	c10ae00 <led_off+0x3c>
		PDATB |= (1 << 9); // pongo un 1 en la 9 posición
 c10ade8:	e59f3030 	ldr	r3, [pc, #48]	; c10ae20 <led_off+0x5c>
 c10adec:	e59f202c 	ldr	r2, [pc, #44]	; c10ae20 <led_off+0x5c>
 c10adf0:	e5922000 	ldr	r2, [r2]
 c10adf4:	e3822c02 	orr	r2, r2, #512	; 0x200
 c10adf8:	e5832000 	str	r2, [r3]
 c10adfc:	ea000004 	b	c10ae14 <led_off+0x50>
	}

	else{
		PDATB |= (1 << 10); // pongo un 1 en la 10 posición
 c10ae00:	e59f3018 	ldr	r3, [pc, #24]	; c10ae20 <led_off+0x5c>
 c10ae04:	e59f2014 	ldr	r2, [pc, #20]	; c10ae20 <led_off+0x5c>
 c10ae08:	e5922000 	ldr	r2, [r2]
 c10ae0c:	e3822b01 	orr	r2, r2, #1024	; 0x400
 c10ae10:	e5832000 	str	r2, [r3]
	}
}
 c10ae14:	e24bd00c 	sub	sp, fp, #12
 c10ae18:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10ae1c:	e12fff1e 	bx	lr
 c10ae20:	01d2000c 	.word	0x01d2000c

0c10ae24 <led_toggle>:

void led_toggle( uint8 led )
{
 c10ae24:	e1a0c00d 	mov	ip, sp
 c10ae28:	e92dd800 	push	{fp, ip, lr, pc}
 c10ae2c:	e24cb004 	sub	fp, ip, #4
 c10ae30:	e24dd008 	sub	sp, sp, #8
 c10ae34:	e1a03000 	mov	r3, r0
 c10ae38:	e54b300d 	strb	r3, [fp, #-13]
	if(led == LEFT_LED){
 c10ae3c:	e55b300d 	ldrb	r3, [fp, #-13]
 c10ae40:	e3530001 	cmp	r3, #1
 c10ae44:	1a000005 	bne	c10ae60 <led_toggle+0x3c>
		PDATB ^= (1 << 9); //invierto
 c10ae48:	e59f3030 	ldr	r3, [pc, #48]	; c10ae80 <led_toggle+0x5c>
 c10ae4c:	e59f202c 	ldr	r2, [pc, #44]	; c10ae80 <led_toggle+0x5c>
 c10ae50:	e5922000 	ldr	r2, [r2]
 c10ae54:	e2222c02 	eor	r2, r2, #512	; 0x200
 c10ae58:	e5832000 	str	r2, [r3]
 c10ae5c:	ea000004 	b	c10ae74 <led_toggle+0x50>
	}

	else{
		PDATB ^= (1<<10); //invierto
 c10ae60:	e59f3018 	ldr	r3, [pc, #24]	; c10ae80 <led_toggle+0x5c>
 c10ae64:	e59f2014 	ldr	r2, [pc, #20]	; c10ae80 <led_toggle+0x5c>
 c10ae68:	e5922000 	ldr	r2, [r2]
 c10ae6c:	e2222b01 	eor	r2, r2, #1024	; 0x400
 c10ae70:	e5832000 	str	r2, [r3]
	}
}
 c10ae74:	e24bd00c 	sub	sp, fp, #12
 c10ae78:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10ae7c:	e12fff1e 	bx	lr
 c10ae80:	01d2000c 	.word	0x01d2000c

0c10ae84 <led_status>:

uint8 led_status( uint8 led )//a & (1 << 4)si bit 4 vale uno se ejecuta
{
 c10ae84:	e1a0c00d 	mov	ip, sp
 c10ae88:	e92dd800 	push	{fp, ip, lr, pc}
 c10ae8c:	e24cb004 	sub	fp, ip, #4
 c10ae90:	e24dd008 	sub	sp, sp, #8
 c10ae94:	e1a03000 	mov	r3, r0
 c10ae98:	e54b300d 	strb	r3, [fp, #-13]
	if((led == LEFT_LED) && !(PDATB & (1 << 9))){// si es el led izquierdo y está en ON (está a 0)
 c10ae9c:	e55b300d 	ldrb	r3, [fp, #-13]
 c10aea0:	e3530001 	cmp	r3, #1
 c10aea4:	1a000006 	bne	c10aec4 <led_status+0x40>
 c10aea8:	e59f3078 	ldr	r3, [pc, #120]	; c10af28 <led_status+0xa4>
 c10aeac:	e5933000 	ldr	r3, [r3]
 c10aeb0:	e2033c02 	and	r3, r3, #512	; 0x200
 c10aeb4:	e3530000 	cmp	r3, #0
 c10aeb8:	1a000001 	bne	c10aec4 <led_status+0x40>
		return ON;
 c10aebc:	e3a03001 	mov	r3, #1
 c10aec0:	ea000014 	b	c10af18 <led_status+0x94>
	}
	else if((led == LEFT_LED) && (PDATB & (1 << 9))){
 c10aec4:	e55b300d 	ldrb	r3, [fp, #-13]
 c10aec8:	e3530001 	cmp	r3, #1
 c10aecc:	1a000006 	bne	c10aeec <led_status+0x68>
 c10aed0:	e59f3050 	ldr	r3, [pc, #80]	; c10af28 <led_status+0xa4>
 c10aed4:	e5933000 	ldr	r3, [r3]
 c10aed8:	e2033c02 	and	r3, r3, #512	; 0x200
 c10aedc:	e3530000 	cmp	r3, #0
 c10aee0:	0a000001 	beq	c10aeec <led_status+0x68>
		return OFF;
 c10aee4:	e3a03000 	mov	r3, #0
 c10aee8:	ea00000a 	b	c10af18 <led_status+0x94>
	}
	else if((led == RIGHT_LED) && !(PDATB & (1 << 10))){
 c10aeec:	e55b300d 	ldrb	r3, [fp, #-13]
 c10aef0:	e3530002 	cmp	r3, #2
 c10aef4:	1a000006 	bne	c10af14 <led_status+0x90>
 c10aef8:	e59f3028 	ldr	r3, [pc, #40]	; c10af28 <led_status+0xa4>
 c10aefc:	e5933000 	ldr	r3, [r3]
 c10af00:	e2033b01 	and	r3, r3, #1024	; 0x400
 c10af04:	e3530000 	cmp	r3, #0
 c10af08:	1a000001 	bne	c10af14 <led_status+0x90>
		return ON;
 c10af0c:	e3a03001 	mov	r3, #1
 c10af10:	ea000000 	b	c10af18 <led_status+0x94>
	}
	else{
		return OFF;
 c10af14:	e3a03000 	mov	r3, #0
	}
}
 c10af18:	e1a00003 	mov	r0, r3
 c10af1c:	e24bd00c 	sub	sp, fp, #12
 c10af20:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10af24:	e12fff1e 	bx	lr
 c10af28:	01d2000c 	.word	0x01d2000c

0c10af2c <pbs_init>:
#include <timers.h>

extern void isr_PB_dummy( void );

void pbs_init( void )
{
 c10af2c:	e1a0c00d 	mov	ip, sp
 c10af30:	e92dd800 	push	{fp, ip, lr, pc}
 c10af34:	e24cb004 	sub	fp, ip, #4
    timers_init();
 c10af38:	eb000683 	bl	c10c94c <timers_init>
}
 c10af3c:	e24bd00c 	sub	sp, fp, #12
 c10af40:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10af44:	e12fff1e 	bx	lr

0c10af48 <pb_scan>:

uint8 pb_scan( void )
{
 c10af48:	e1a0c00d 	mov	ip, sp
 c10af4c:	e92dd800 	push	{fp, ip, lr, pc}
 c10af50:	e24cb004 	sub	fp, ip, #4
    if( pb_status(PB_LEFT) )
 c10af54:	e3a00040 	mov	r0, #64	; 0x40
 c10af58:	eb000010 	bl	c10afa0 <pb_status>
 c10af5c:	e1a03000 	mov	r3, r0
 c10af60:	e3530000 	cmp	r3, #0
 c10af64:	0a000001 	beq	c10af70 <pb_scan+0x28>
    	return PB_LEFT;
 c10af68:	e3a03040 	mov	r3, #64	; 0x40
 c10af6c:	ea000007 	b	c10af90 <pb_scan+0x48>
    else if( pb_status(PB_RIGHT) )
 c10af70:	e3a00080 	mov	r0, #128	; 0x80
 c10af74:	eb000009 	bl	c10afa0 <pb_status>
 c10af78:	e1a03000 	mov	r3, r0
 c10af7c:	e3530000 	cmp	r3, #0
 c10af80:	0a000001 	beq	c10af8c <pb_scan+0x44>
    	return PB_RIGHT;
 c10af84:	e3a03080 	mov	r3, #128	; 0x80
 c10af88:	ea000000 	b	c10af90 <pb_scan+0x48>
    else
        return PB_FAILURE;
 c10af8c:	e3a030ff 	mov	r3, #255	; 0xff
}
 c10af90:	e1a00003 	mov	r0, r3
 c10af94:	e24bd00c 	sub	sp, fp, #12
 c10af98:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10af9c:	e12fff1e 	bx	lr

0c10afa0 <pb_status>:

uint8 pb_status( uint8 scancode )
{
 c10afa0:	e1a0c00d 	mov	ip, sp
 c10afa4:	e92dd800 	push	{fp, ip, lr, pc}
 c10afa8:	e24cb004 	sub	fp, ip, #4
 c10afac:	e24dd008 	sub	sp, sp, #8
 c10afb0:	e1a03000 	mov	r3, r0
 c10afb4:	e54b300d 	strb	r3, [fp, #-13]
	if((scancode & PDATG) == 0) // devuelo 1 si está pulsado
 c10afb8:	e55b200d 	ldrb	r2, [fp, #-13]
 c10afbc:	e59f3028 	ldr	r3, [pc, #40]	; c10afec <pb_status+0x4c>
 c10afc0:	e5933000 	ldr	r3, [r3]
 c10afc4:	e0023003 	and	r3, r2, r3
 c10afc8:	e3530000 	cmp	r3, #0
 c10afcc:	1a000001 	bne	c10afd8 <pb_status+0x38>
		return 1;
 c10afd0:	e3a03001 	mov	r3, #1
 c10afd4:	ea000000 	b	c10afdc <pb_status+0x3c>
	else // devuelvo 0 si no está pulsado
		return 0;
 c10afd8:	e3a03000 	mov	r3, #0
}
 c10afdc:	e1a00003 	mov	r0, r3
 c10afe0:	e24bd00c 	sub	sp, fp, #12
 c10afe4:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10afe8:	e12fff1e 	bx	lr
 c10afec:	01d20044 	.word	0x01d20044

0c10aff0 <pb_wait_keydown>:

void pb_wait_keydown( uint8 scancode )
{
 c10aff0:	e1a0c00d 	mov	ip, sp
 c10aff4:	e92dd800 	push	{fp, ip, lr, pc}
 c10aff8:	e24cb004 	sub	fp, ip, #4
 c10affc:	e24dd008 	sub	sp, sp, #8
 c10b000:	e1a03000 	mov	r3, r0
 c10b004:	e54b300d 	strb	r3, [fp, #-13]
	while((PDATG & scancode) != 0); // espero a que se presione el boton indicado por el scancode(Left o Right)
 c10b008:	e1a00000 	nop			; (mov r0, r0)
 c10b00c:	e59f3024 	ldr	r3, [pc, #36]	; c10b038 <pb_wait_keydown+0x48>
 c10b010:	e5932000 	ldr	r2, [r3]
 c10b014:	e55b300d 	ldrb	r3, [fp, #-13]
 c10b018:	e0023003 	and	r3, r2, r3
 c10b01c:	e3530000 	cmp	r3, #0
 c10b020:	1afffff9 	bne	c10b00c <pb_wait_keydown+0x1c>
	sw_delay_ms( PB_KEYDOWN_DELAY ); // espera SW(el timer 3 está ocupado) fin de rebotes
 c10b024:	e3a0001e 	mov	r0, #30
 c10b028:	eb0006ed 	bl	c10cbe4 <sw_delay_ms>
}
 c10b02c:	e24bd00c 	sub	sp, fp, #12
 c10b030:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10b034:	e12fff1e 	bx	lr
 c10b038:	01d20044 	.word	0x01d20044

0c10b03c <pb_wait_keyup>:

void pb_wait_keyup( uint8 scancode )
{
 c10b03c:	e1a0c00d 	mov	ip, sp
 c10b040:	e92dd800 	push	{fp, ip, lr, pc}
 c10b044:	e24cb004 	sub	fp, ip, #4
 c10b048:	e24dd008 	sub	sp, sp, #8
 c10b04c:	e1a03000 	mov	r3, r0
 c10b050:	e54b300d 	strb	r3, [fp, #-13]
	while((PDATG & scancode) != 0);// espero a que se presione el boton indicado por el scancode(Left o Right)
 c10b054:	e1a00000 	nop			; (mov r0, r0)
 c10b058:	e59f3048 	ldr	r3, [pc, #72]	; c10b0a8 <pb_wait_keyup+0x6c>
 c10b05c:	e5932000 	ldr	r2, [r3]
 c10b060:	e55b300d 	ldrb	r3, [fp, #-13]
 c10b064:	e0023003 	and	r3, r2, r3
 c10b068:	e3530000 	cmp	r3, #0
 c10b06c:	1afffff9 	bne	c10b058 <pb_wait_keyup+0x1c>
	sw_delay_ms( PB_KEYDOWN_DELAY );// espera SW(el timer 3 está ocupado) fin de rebotes
 c10b070:	e3a0001e 	mov	r0, #30
 c10b074:	eb0006da 	bl	c10cbe4 <sw_delay_ms>
	while((PDATG & scancode) == 0);// espero a que se depresione el boton indicado por el scancode(Left o Right)
 c10b078:	e1a00000 	nop			; (mov r0, r0)
 c10b07c:	e59f3024 	ldr	r3, [pc, #36]	; c10b0a8 <pb_wait_keyup+0x6c>
 c10b080:	e5932000 	ldr	r2, [r3]
 c10b084:	e55b300d 	ldrb	r3, [fp, #-13]
 c10b088:	e0023003 	and	r3, r2, r3
 c10b08c:	e3530000 	cmp	r3, #0
 c10b090:	0afffff9 	beq	c10b07c <pb_wait_keyup+0x40>
	sw_delay_ms( PB_KEYUP_DELAY );// espera SW(el timer 3 está ocupado) fin de rebotes
 c10b094:	e3a00064 	mov	r0, #100	; 0x64
 c10b098:	eb0006d1 	bl	c10cbe4 <sw_delay_ms>
}
 c10b09c:	e24bd00c 	sub	sp, fp, #12
 c10b0a0:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10b0a4:	e12fff1e 	bx	lr
 c10b0a8:	01d20044 	.word	0x01d20044

0c10b0ac <pb_wait_any_keydown>:

void pb_wait_any_keydown( void )
{
 c10b0ac:	e1a0c00d 	mov	ip, sp
 c10b0b0:	e92dd800 	push	{fp, ip, lr, pc}
 c10b0b4:	e24cb004 	sub	fp, ip, #4
	while(((PDATG & 0x40) == 0x40) && ((PDATG & 0x80) == 0x80));// espero a que se pulse cualquier boton
 c10b0b8:	e1a00000 	nop			; (mov r0, r0)
 c10b0bc:	e59f3034 	ldr	r3, [pc, #52]	; c10b0f8 <pb_wait_any_keydown+0x4c>
 c10b0c0:	e5933000 	ldr	r3, [r3]
 c10b0c4:	e2033040 	and	r3, r3, #64	; 0x40
 c10b0c8:	e3530000 	cmp	r3, #0
 c10b0cc:	0a000004 	beq	c10b0e4 <pb_wait_any_keydown+0x38>
 c10b0d0:	e59f3020 	ldr	r3, [pc, #32]	; c10b0f8 <pb_wait_any_keydown+0x4c>
 c10b0d4:	e5933000 	ldr	r3, [r3]
 c10b0d8:	e2033080 	and	r3, r3, #128	; 0x80
 c10b0dc:	e3530000 	cmp	r3, #0
 c10b0e0:	1afffff5 	bne	c10b0bc <pb_wait_any_keydown+0x10>
	sw_delay_ms( PB_KEYDOWN_DELAY );// espera SW(el timer 3 está ocupado) fin de rebotes
 c10b0e4:	e3a0001e 	mov	r0, #30
 c10b0e8:	eb0006bd 	bl	c10cbe4 <sw_delay_ms>
}
 c10b0ec:	e24bd00c 	sub	sp, fp, #12
 c10b0f0:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10b0f4:	e12fff1e 	bx	lr
 c10b0f8:	01d20044 	.word	0x01d20044

0c10b0fc <pb_wait_any_keyup>:

void pb_wait_any_keyup( void )
{
 c10b0fc:	e1a0c00d 	mov	ip, sp
 c10b100:	e92dd800 	push	{fp, ip, lr, pc}
 c10b104:	e24cb004 	sub	fp, ip, #4
	while(((PDATG & 0x40) == 0x40) && ((PDATG & 0x80) == 0x80)); // espero cualquier presión
 c10b108:	e1a00000 	nop			; (mov r0, r0)
 c10b10c:	e59f3068 	ldr	r3, [pc, #104]	; c10b17c <pb_wait_any_keyup+0x80>
 c10b110:	e5933000 	ldr	r3, [r3]
 c10b114:	e2033040 	and	r3, r3, #64	; 0x40
 c10b118:	e3530000 	cmp	r3, #0
 c10b11c:	0a000004 	beq	c10b134 <pb_wait_any_keyup+0x38>
 c10b120:	e59f3054 	ldr	r3, [pc, #84]	; c10b17c <pb_wait_any_keyup+0x80>
 c10b124:	e5933000 	ldr	r3, [r3]
 c10b128:	e2033080 	and	r3, r3, #128	; 0x80
 c10b12c:	e3530000 	cmp	r3, #0
 c10b130:	1afffff5 	bne	c10b10c <pb_wait_any_keyup+0x10>
	sw_delay_ms( PB_KEYDOWN_DELAY ); // eliminación de rebotes
 c10b134:	e3a0001e 	mov	r0, #30
 c10b138:	eb0006a9 	bl	c10cbe4 <sw_delay_ms>
	while(((PDATG & 0x40) == 0x00) && ((PDATG & 0x80) == 0x00)); // espero cualquier depresión
 c10b13c:	e1a00000 	nop			; (mov r0, r0)
 c10b140:	e59f3034 	ldr	r3, [pc, #52]	; c10b17c <pb_wait_any_keyup+0x80>
 c10b144:	e5933000 	ldr	r3, [r3]
 c10b148:	e2033040 	and	r3, r3, #64	; 0x40
 c10b14c:	e3530000 	cmp	r3, #0
 c10b150:	1a000004 	bne	c10b168 <pb_wait_any_keyup+0x6c>
 c10b154:	e59f3020 	ldr	r3, [pc, #32]	; c10b17c <pb_wait_any_keyup+0x80>
 c10b158:	e5933000 	ldr	r3, [r3]
 c10b15c:	e2033080 	and	r3, r3, #128	; 0x80
 c10b160:	e3530000 	cmp	r3, #0
 c10b164:	0afffff5 	beq	c10b140 <pb_wait_any_keyup+0x44>
	sw_delay_ms( PB_KEYUP_DELAY ); // eliminación de rebotes
 c10b168:	e3a00064 	mov	r0, #100	; 0x64
 c10b16c:	eb00069c 	bl	c10cbe4 <sw_delay_ms>
}
 c10b170:	e24bd00c 	sub	sp, fp, #12
 c10b174:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10b178:	e12fff1e 	bx	lr
 c10b17c:	01d20044 	.word	0x01d20044

0c10b180 <pb_getchar>:

uint8 pb_getchar( void )
{
 c10b180:	e1a0c00d 	mov	ip, sp
 c10b184:	e92dd800 	push	{fp, ip, lr, pc}
 c10b188:	e24cb004 	sub	fp, ip, #4
 c10b18c:	e24dd008 	sub	sp, sp, #8
	uint8 scancode;

	pb_wait_any_keydown();
 c10b190:	ebffffc5 	bl	c10b0ac <pb_wait_any_keydown>
	scancode = pb_scan();
 c10b194:	ebffff6b 	bl	c10af48 <pb_scan>
 c10b198:	e1a03000 	mov	r3, r0
 c10b19c:	e54b300d 	strb	r3, [fp, #-13]

	while((scancode & PDATG) == 0); // mientras esté pulsado
 c10b1a0:	e1a00000 	nop			; (mov r0, r0)
 c10b1a4:	e55b200d 	ldrb	r2, [fp, #-13]
 c10b1a8:	e59f3028 	ldr	r3, [pc, #40]	; c10b1d8 <pb_getchar+0x58>
 c10b1ac:	e5933000 	ldr	r3, [r3]
 c10b1b0:	e0023003 	and	r3, r2, r3
 c10b1b4:	e3530000 	cmp	r3, #0
 c10b1b8:	0afffff9 	beq	c10b1a4 <pb_getchar+0x24>
	sw_delay_ms( PB_KEYUP_DELAY );
 c10b1bc:	e3a00064 	mov	r0, #100	; 0x64
 c10b1c0:	eb000687 	bl	c10cbe4 <sw_delay_ms>

	return scancode;
 c10b1c4:	e55b300d 	ldrb	r3, [fp, #-13]
}
 c10b1c8:	e1a00003 	mov	r0, r3
 c10b1cc:	e24bd00c 	sub	sp, fp, #12
 c10b1d0:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10b1d4:	e12fff1e 	bx	lr
 c10b1d8:	01d20044 	.word	0x01d20044

0c10b1dc <pb_getchartime>:

uint8 pb_getchartime( uint16 *ms )
{
 c10b1dc:	e1a0c00d 	mov	ip, sp
 c10b1e0:	e92dd800 	push	{fp, ip, lr, pc}
 c10b1e4:	e24cb004 	sub	fp, ip, #4
 c10b1e8:	e24dd010 	sub	sp, sp, #16
 c10b1ec:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
    uint8 scancode;
    
    while( ((PDATG & 0x40) == 0x40) && ((PDATG & 0x80) == 0x80) );// esperar presión de cualquier pulsador
 c10b1f0:	e1a00000 	nop			; (mov r0, r0)
 c10b1f4:	e59f3098 	ldr	r3, [pc, #152]	; c10b294 <pb_getchartime+0xb8>
 c10b1f8:	e5933000 	ldr	r3, [r3]
 c10b1fc:	e2033040 	and	r3, r3, #64	; 0x40
 c10b200:	e3530000 	cmp	r3, #0
 c10b204:	0a000004 	beq	c10b21c <pb_getchartime+0x40>
 c10b208:	e59f3084 	ldr	r3, [pc, #132]	; c10b294 <pb_getchartime+0xb8>
 c10b20c:	e5933000 	ldr	r3, [r3]
 c10b210:	e2033080 	and	r3, r3, #128	; 0x80
 c10b214:	e3530000 	cmp	r3, #0
 c10b218:	1afffff5 	bne	c10b1f4 <pb_getchartime+0x18>
    timer3_start();// arranca el timer 3 (0,1ms de resolución)
 c10b21c:	eb0006d0 	bl	c10cd64 <timer3_start>
    sw_delay_ms( PB_KEYDOWN_DELAY ); // espera SW(el timer 3 está ocupado) fin de rebotes
 c10b220:	e3a0001e 	mov	r0, #30
 c10b224:	eb00066e 	bl	c10cbe4 <sw_delay_ms>
    
    scancode = pb_scan(); // obtiene el código del pulsador presionado
 c10b228:	ebffff46 	bl	c10af48 <pb_scan>
 c10b22c:	e1a03000 	mov	r3, r0
 c10b230:	e54b300d 	strb	r3, [fp, #-13]
    
    while( (scancode & PDATG) == 0 );// espera depresión del pulsador
 c10b234:	e1a00000 	nop			; (mov r0, r0)
 c10b238:	e55b200d 	ldrb	r2, [fp, #-13]
 c10b23c:	e59f3050 	ldr	r3, [pc, #80]	; c10b294 <pb_getchartime+0xb8>
 c10b240:	e5933000 	ldr	r3, [r3]
 c10b244:	e0023003 	and	r3, r2, r3
 c10b248:	e3530000 	cmp	r3, #0
 c10b24c:	0afffff9 	beq	c10b238 <pb_getchartime+0x5c>
    *ms = timer3_stop() / 10; // detiene el timer 3 y calcula los ms
 c10b250:	eb0006ef 	bl	c10ce14 <timer3_stop>
 c10b254:	e1a03000 	mov	r3, r0
 c10b258:	e1a02003 	mov	r2, r3
 c10b25c:	e59f3034 	ldr	r3, [pc, #52]	; c10b298 <pb_getchartime+0xbc>
 c10b260:	e0831392 	umull	r1, r3, r2, r3
 c10b264:	e1a031a3 	lsr	r3, r3, #3
 c10b268:	e1a03803 	lsl	r3, r3, #16
 c10b26c:	e1a02823 	lsr	r2, r3, #16
 c10b270:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c10b274:	e1c320b0 	strh	r2, [r3]
    sw_delay_ms( PB_KEYUP_DELAY );// espera SW (el timer 3 está ocupado) fin de rebotes
 c10b278:	e3a00064 	mov	r0, #100	; 0x64
 c10b27c:	eb000658 	bl	c10cbe4 <sw_delay_ms>

    return scancode;//devuelve el código del pulsador presionado
 c10b280:	e55b300d 	ldrb	r3, [fp, #-13]
}
 c10b284:	e1a00003 	mov	r0, r3
 c10b288:	e24bd00c 	sub	sp, fp, #12
 c10b28c:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10b290:	e12fff1e 	bx	lr
 c10b294:	01d20044 	.word	0x01d20044
 c10b298:	cccccccd 	.word	0xcccccccd

0c10b29c <pb_timeout_getchar>:

uint8 pb_timeout_getchar( uint16 ms )
{
 c10b29c:	e1a0c00d 	mov	ip, sp
 c10b2a0:	e92dd800 	push	{fp, ip, lr, pc}
 c10b2a4:	e24cb004 	sub	fp, ip, #4
 c10b2a8:	e24dd010 	sub	sp, sp, #16
 c10b2ac:	e1a03000 	mov	r3, r0
 c10b2b0:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
	uint8 scancode;
	timer3_start_timeout(ms);
 c10b2b4:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
 c10b2b8:	e1a00003 	mov	r0, r3
 c10b2bc:	eb0006e9 	bl	c10ce68 <timer3_start_timeout>
	while(timer3_timeout() && ((PDATG & 0x40) == 0x40) && ((PDATG & 0x80) == 0x80));
 c10b2c0:	e1a00000 	nop			; (mov r0, r0)
 c10b2c4:	eb000715 	bl	c10cf20 <timer3_timeout>
 c10b2c8:	e1a03000 	mov	r3, r0
 c10b2cc:	e3530000 	cmp	r3, #0
 c10b2d0:	0a000009 	beq	c10b2fc <pb_timeout_getchar+0x60>
 c10b2d4:	e59f3084 	ldr	r3, [pc, #132]	; c10b360 <pb_timeout_getchar+0xc4>
 c10b2d8:	e5933000 	ldr	r3, [r3]
 c10b2dc:	e2033040 	and	r3, r3, #64	; 0x40
 c10b2e0:	e3530000 	cmp	r3, #0
 c10b2e4:	0a000004 	beq	c10b2fc <pb_timeout_getchar+0x60>
 c10b2e8:	e59f3070 	ldr	r3, [pc, #112]	; c10b360 <pb_timeout_getchar+0xc4>
 c10b2ec:	e5933000 	ldr	r3, [r3]
 c10b2f0:	e2033080 	and	r3, r3, #128	; 0x80
 c10b2f4:	e3530000 	cmp	r3, #0
 c10b2f8:	1afffff1 	bne	c10b2c4 <pb_timeout_getchar+0x28>
	if(!timer3_timeout()){
 c10b2fc:	eb000707 	bl	c10cf20 <timer3_timeout>
 c10b300:	e1a03000 	mov	r3, r0
 c10b304:	e3530000 	cmp	r3, #0
 c10b308:	1a000001 	bne	c10b314 <pb_timeout_getchar+0x78>
	    return PB_TIMEOUT;
 c10b30c:	e3a030fe 	mov	r3, #254	; 0xfe
 c10b310:	ea00000e 	b	c10b350 <pb_timeout_getchar+0xb4>
	}
	else{
		sw_delay_ms( PB_KEYDOWN_DELAY );
 c10b314:	e3a0001e 	mov	r0, #30
 c10b318:	eb000631 	bl	c10cbe4 <sw_delay_ms>
	    scancode = pb_scan();
 c10b31c:	ebffff09 	bl	c10af48 <pb_scan>
 c10b320:	e1a03000 	mov	r3, r0
 c10b324:	e54b300d 	strb	r3, [fp, #-13]
	    while((scancode & PDATG) == 0);
 c10b328:	e1a00000 	nop			; (mov r0, r0)
 c10b32c:	e55b200d 	ldrb	r2, [fp, #-13]
 c10b330:	e59f3028 	ldr	r3, [pc, #40]	; c10b360 <pb_timeout_getchar+0xc4>
 c10b334:	e5933000 	ldr	r3, [r3]
 c10b338:	e0023003 	and	r3, r2, r3
 c10b33c:	e3530000 	cmp	r3, #0
 c10b340:	0afffff9 	beq	c10b32c <pb_timeout_getchar+0x90>
	    sw_delay_ms( PB_KEYUP_DELAY );
 c10b344:	e3a00064 	mov	r0, #100	; 0x64
 c10b348:	eb000625 	bl	c10cbe4 <sw_delay_ms>
	    return scancode;
 c10b34c:	e55b300d 	ldrb	r3, [fp, #-13]
	}
}
 c10b350:	e1a00003 	mov	r0, r3
 c10b354:	e24bd00c 	sub	sp, fp, #12
 c10b358:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10b35c:	e12fff1e 	bx	lr
 c10b360:	01d20044 	.word	0x01d20044

0c10b364 <pbs_open>:

void pbs_open( void (*isr)(void) )
{
 c10b364:	e1a0c00d 	mov	ip, sp
 c10b368:	e92dd800 	push	{fp, ip, lr, pc}
 c10b36c:	e24cb004 	sub	fp, ip, #4
 c10b370:	e24dd008 	sub	sp, sp, #8
 c10b374:	e50b0010 	str	r0, [fp, #-16]
    pISR_PB   = (uint32) isr;
 c10b378:	e59f303c 	ldr	r3, [pc, #60]	; c10b3bc <pbs_open+0x58>
 c10b37c:	e51b2010 	ldr	r2, [fp, #-16]
 c10b380:	e5832000 	str	r2, [r3]
    EXTINTPND = 0xf;
 c10b384:	e59f3034 	ldr	r3, [pc, #52]	; c10b3c0 <pbs_open+0x5c>
 c10b388:	e3a0200f 	mov	r2, #15
 c10b38c:	e5832000 	str	r2, [r3]
    I_ISPC    = BIT_EINT4567;
 c10b390:	e59f302c 	ldr	r3, [pc, #44]	; c10b3c4 <pbs_open+0x60>
 c10b394:	e3a02602 	mov	r2, #2097152	; 0x200000
 c10b398:	e5832000 	str	r2, [r3]
    INTMSK   &= ~(BIT_GLOBAL | BIT_EINT4567);
 c10b39c:	e59f3024 	ldr	r3, [pc, #36]	; c10b3c8 <pbs_open+0x64>
 c10b3a0:	e59f2020 	ldr	r2, [pc, #32]	; c10b3c8 <pbs_open+0x64>
 c10b3a4:	e5922000 	ldr	r2, [r2]
 c10b3a8:	e3c22642 	bic	r2, r2, #69206016	; 0x4200000
 c10b3ac:	e5832000 	str	r2, [r3]
}
 c10b3b0:	e24bd00c 	sub	sp, fp, #12
 c10b3b4:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10b3b8:	e12fff1e 	bx	lr
 c10b3bc:	0c7fff74 	.word	0x0c7fff74
 c10b3c0:	01d20054 	.word	0x01d20054
 c10b3c4:	01e00024 	.word	0x01e00024
 c10b3c8:	01e0000c 	.word	0x01e0000c

0c10b3cc <pbs_close>:

void pbs_close( void )
{
 c10b3cc:	e1a0c00d 	mov	ip, sp
 c10b3d0:	e92dd800 	push	{fp, ip, lr, pc}
 c10b3d4:	e24cb004 	sub	fp, ip, #4
	INTMSK  |= BIT_EINT4567;
 c10b3d8:	e59f3024 	ldr	r3, [pc, #36]	; c10b404 <pbs_close+0x38>
 c10b3dc:	e59f2020 	ldr	r2, [pc, #32]	; c10b404 <pbs_close+0x38>
 c10b3e0:	e5922000 	ldr	r2, [r2]
 c10b3e4:	e3822602 	orr	r2, r2, #2097152	; 0x200000
 c10b3e8:	e5832000 	str	r2, [r3]
	pISR_PB  =(uint32) isr_PB_dummy;
 c10b3ec:	e59f3014 	ldr	r3, [pc, #20]	; c10b408 <pbs_close+0x3c>
 c10b3f0:	e59f2014 	ldr	r2, [pc, #20]	; c10b40c <pbs_close+0x40>
 c10b3f4:	e5832000 	str	r2, [r3]
}
 c10b3f8:	e24bd00c 	sub	sp, fp, #12
 c10b3fc:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10b400:	e12fff1e 	bx	lr
 c10b404:	01e0000c 	.word	0x01e0000c
 c10b408:	0c7fff74 	.word	0x0c7fff74
 c10b40c:	0c10c81c 	.word	0x0c10c81c

0c10b410 <rtc_init>:
#include <rtc.h>

extern void isr_TICK_dummy( void );

void rtc_init( void )
{
 c10b410:	e1a0c00d 	mov	ip, sp
 c10b414:	e92dd800 	push	{fp, ip, lr, pc}
 c10b418:	e24cb004 	sub	fp, ip, #4
	TICNT = 0x00;
 c10b41c:	e59f30e4 	ldr	r3, [pc, #228]	; c10b508 <rtc_init+0xf8>
 c10b420:	e3a02000 	mov	r2, #0
 c10b424:	e5832000 	str	r2, [r3]
    RTCALM = 0x0;
 c10b428:	e59f30dc 	ldr	r3, [pc, #220]	; c10b50c <rtc_init+0xfc>
 c10b42c:	e3a02000 	mov	r2, #0
 c10b430:	e5832000 	str	r2, [r3]
    RTCRST = 0x0;
 c10b434:	e59f30d4 	ldr	r3, [pc, #212]	; c10b510 <rtc_init+0x100>
 c10b438:	e3a02000 	mov	r2, #0
 c10b43c:	e5832000 	str	r2, [r3]


    RTCCON = 0x1;
 c10b440:	e59f30cc 	ldr	r3, [pc, #204]	; c10b514 <rtc_init+0x104>
 c10b444:	e3a02001 	mov	r2, #1
 c10b448:	e5832000 	str	r2, [r3]
    //Inicializa la hora/fecha a las 00:00:00 del martes 1 de enero de 2013
    BCDYEAR = 0x13;
 c10b44c:	e59f30c4 	ldr	r3, [pc, #196]	; c10b518 <rtc_init+0x108>
 c10b450:	e3a02013 	mov	r2, #19
 c10b454:	e5832000 	str	r2, [r3]
    BCDMON = 0x1;
 c10b458:	e59f30bc 	ldr	r3, [pc, #188]	; c10b51c <rtc_init+0x10c>
 c10b45c:	e3a02001 	mov	r2, #1
 c10b460:	e5832000 	str	r2, [r3]
    BCDDAY = 0x1;
 c10b464:	e59f30b4 	ldr	r3, [pc, #180]	; c10b520 <rtc_init+0x110>
 c10b468:	e3a02001 	mov	r2, #1
 c10b46c:	e5832000 	str	r2, [r3]
    BCDDATE = 0x3;
 c10b470:	e59f30ac 	ldr	r3, [pc, #172]	; c10b524 <rtc_init+0x114>
 c10b474:	e3a02003 	mov	r2, #3
 c10b478:	e5832000 	str	r2, [r3]
    BCDHOUR = 0x0;
 c10b47c:	e59f30a4 	ldr	r3, [pc, #164]	; c10b528 <rtc_init+0x118>
 c10b480:	e3a02000 	mov	r2, #0
 c10b484:	e5832000 	str	r2, [r3]
    BCDMIN = 0x0;
 c10b488:	e59f309c 	ldr	r3, [pc, #156]	; c10b52c <rtc_init+0x11c>
 c10b48c:	e3a02000 	mov	r2, #0
 c10b490:	e5832000 	str	r2, [r3]
    BCDSEC = 0x0;
 c10b494:	e59f3094 	ldr	r3, [pc, #148]	; c10b530 <rtc_init+0x120>
 c10b498:	e3a02000 	mov	r2, #0
 c10b49c:	e5832000 	str	r2, [r3]

    ALMYEAR = 0x0;
 c10b4a0:	e59f308c 	ldr	r3, [pc, #140]	; c10b534 <rtc_init+0x124>
 c10b4a4:	e3a02000 	mov	r2, #0
 c10b4a8:	e5832000 	str	r2, [r3]
    ALMMON = 0x0;
 c10b4ac:	e59f3084 	ldr	r3, [pc, #132]	; c10b538 <rtc_init+0x128>
 c10b4b0:	e3a02000 	mov	r2, #0
 c10b4b4:	e5832000 	str	r2, [r3]
    ALMDAY = 0x0;
 c10b4b8:	e59f307c 	ldr	r3, [pc, #124]	; c10b53c <rtc_init+0x12c>
 c10b4bc:	e3a02000 	mov	r2, #0
 c10b4c0:	e5832000 	str	r2, [r3]
    ALMHOUR = 0x0;
 c10b4c4:	e59f3074 	ldr	r3, [pc, #116]	; c10b540 <rtc_init+0x130>
 c10b4c8:	e3a02000 	mov	r2, #0
 c10b4cc:	e5832000 	str	r2, [r3]
    ALMMIN = 0x0;
 c10b4d0:	e59f306c 	ldr	r3, [pc, #108]	; c10b544 <rtc_init+0x134>
 c10b4d4:	e3a02000 	mov	r2, #0
 c10b4d8:	e5832000 	str	r2, [r3]
    ALMSEC = 0x0;
 c10b4dc:	e59f3064 	ldr	r3, [pc, #100]	; c10b548 <rtc_init+0x138>
 c10b4e0:	e3a02000 	mov	r2, #0
 c10b4e4:	e5832000 	str	r2, [r3]


    RTCCON &= ~(1 << 0);
 c10b4e8:	e59f3024 	ldr	r3, [pc, #36]	; c10b514 <rtc_init+0x104>
 c10b4ec:	e59f2020 	ldr	r2, [pc, #32]	; c10b514 <rtc_init+0x104>
 c10b4f0:	e5922000 	ldr	r2, [r2]
 c10b4f4:	e3c22001 	bic	r2, r2, #1
 c10b4f8:	e5832000 	str	r2, [r3]
}
 c10b4fc:	e24bd00c 	sub	sp, fp, #12
 c10b500:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10b504:	e12fff1e 	bx	lr
 c10b508:	01d7008c 	.word	0x01d7008c
 c10b50c:	01d70050 	.word	0x01d70050
 c10b510:	01d7006c 	.word	0x01d7006c
 c10b514:	01d70040 	.word	0x01d70040
 c10b518:	01d70088 	.word	0x01d70088
 c10b51c:	01d70084 	.word	0x01d70084
 c10b520:	01d7007c 	.word	0x01d7007c
 c10b524:	01d70080 	.word	0x01d70080
 c10b528:	01d70078 	.word	0x01d70078
 c10b52c:	01d70074 	.word	0x01d70074
 c10b530:	01d70070 	.word	0x01d70070
 c10b534:	01d70068 	.word	0x01d70068
 c10b538:	01d70064 	.word	0x01d70064
 c10b53c:	01d70060 	.word	0x01d70060
 c10b540:	01d7005c 	.word	0x01d7005c
 c10b544:	01d70058 	.word	0x01d70058
 c10b548:	01d70054 	.word	0x01d70054

0c10b54c <rtc_puttime>:

void rtc_puttime( rtc_time_t *rtc_time )
{
 c10b54c:	e1a0c00d 	mov	ip, sp
 c10b550:	e92dd800 	push	{fp, ip, lr, pc}
 c10b554:	e24cb004 	sub	fp, ip, #4
 c10b558:	e24dd008 	sub	sp, sp, #8
 c10b55c:	e50b0010 	str	r0, [fp, #-16]
    RTCCON |= (1 << 0); //habilita el acceso a los registros de hora/fecha del RTC
 c10b560:	e59f3278 	ldr	r3, [pc, #632]	; c10b7e0 <rtc_puttime+0x294>
 c10b564:	e59f2274 	ldr	r2, [pc, #628]	; c10b7e0 <rtc_puttime+0x294>
 c10b568:	e5922000 	ldr	r2, [r2]
 c10b56c:	e3822001 	orr	r2, r2, #1
 c10b570:	e5832000 	str	r2, [r3]
    //binario a BCD
    BCDYEAR = ((((rtc_time->year)/10)<<4) + (rtc_time->year)%10);
 c10b574:	e59f0268 	ldr	r0, [pc, #616]	; c10b7e4 <rtc_puttime+0x298>
 c10b578:	e51b3010 	ldr	r3, [fp, #-16]
 c10b57c:	e5d32006 	ldrb	r2, [r3, #6]
 c10b580:	e59f3260 	ldr	r3, [pc, #608]	; c10b7e8 <rtc_puttime+0x29c>
 c10b584:	e0831392 	umull	r1, r3, r2, r3
 c10b588:	e1a031a3 	lsr	r3, r3, #3
 c10b58c:	e20330ff 	and	r3, r3, #255	; 0xff
 c10b590:	e1a0c203 	lsl	ip, r3, #4
 c10b594:	e51b3010 	ldr	r3, [fp, #-16]
 c10b598:	e5d32006 	ldrb	r2, [r3, #6]
 c10b59c:	e59f3244 	ldr	r3, [pc, #580]	; c10b7e8 <rtc_puttime+0x29c>
 c10b5a0:	e0831392 	umull	r1, r3, r2, r3
 c10b5a4:	e1a011a3 	lsr	r1, r3, #3
 c10b5a8:	e1a03001 	mov	r3, r1
 c10b5ac:	e1a03103 	lsl	r3, r3, #2
 c10b5b0:	e0833001 	add	r3, r3, r1
 c10b5b4:	e1a03083 	lsl	r3, r3, #1
 c10b5b8:	e0633002 	rsb	r3, r3, r2
 c10b5bc:	e20330ff 	and	r3, r3, #255	; 0xff
 c10b5c0:	e08c3003 	add	r3, ip, r3
 c10b5c4:	e5803000 	str	r3, [r0]
    BCDMON  = ((((rtc_time->mon)/10)<<4) + (rtc_time->mon)%10);
 c10b5c8:	e59f021c 	ldr	r0, [pc, #540]	; c10b7ec <rtc_puttime+0x2a0>
 c10b5cc:	e51b3010 	ldr	r3, [fp, #-16]
 c10b5d0:	e5d32005 	ldrb	r2, [r3, #5]
 c10b5d4:	e59f320c 	ldr	r3, [pc, #524]	; c10b7e8 <rtc_puttime+0x29c>
 c10b5d8:	e0831392 	umull	r1, r3, r2, r3
 c10b5dc:	e1a031a3 	lsr	r3, r3, #3
 c10b5e0:	e20330ff 	and	r3, r3, #255	; 0xff
 c10b5e4:	e1a0c203 	lsl	ip, r3, #4
 c10b5e8:	e51b3010 	ldr	r3, [fp, #-16]
 c10b5ec:	e5d32005 	ldrb	r2, [r3, #5]
 c10b5f0:	e59f31f0 	ldr	r3, [pc, #496]	; c10b7e8 <rtc_puttime+0x29c>
 c10b5f4:	e0831392 	umull	r1, r3, r2, r3
 c10b5f8:	e1a011a3 	lsr	r1, r3, #3
 c10b5fc:	e1a03001 	mov	r3, r1
 c10b600:	e1a03103 	lsl	r3, r3, #2
 c10b604:	e0833001 	add	r3, r3, r1
 c10b608:	e1a03083 	lsl	r3, r3, #1
 c10b60c:	e0633002 	rsb	r3, r3, r2
 c10b610:	e20330ff 	and	r3, r3, #255	; 0xff
 c10b614:	e08c3003 	add	r3, ip, r3
 c10b618:	e5803000 	str	r3, [r0]
    BCDDAY  = ((((rtc_time->mday)/10)<<4) + (rtc_time->mday)%10);
 c10b61c:	e59f01cc 	ldr	r0, [pc, #460]	; c10b7f0 <rtc_puttime+0x2a4>
 c10b620:	e51b3010 	ldr	r3, [fp, #-16]
 c10b624:	e5d32003 	ldrb	r2, [r3, #3]
 c10b628:	e59f31b8 	ldr	r3, [pc, #440]	; c10b7e8 <rtc_puttime+0x29c>
 c10b62c:	e0831392 	umull	r1, r3, r2, r3
 c10b630:	e1a031a3 	lsr	r3, r3, #3
 c10b634:	e20330ff 	and	r3, r3, #255	; 0xff
 c10b638:	e1a0c203 	lsl	ip, r3, #4
 c10b63c:	e51b3010 	ldr	r3, [fp, #-16]
 c10b640:	e5d32003 	ldrb	r2, [r3, #3]
 c10b644:	e59f319c 	ldr	r3, [pc, #412]	; c10b7e8 <rtc_puttime+0x29c>
 c10b648:	e0831392 	umull	r1, r3, r2, r3
 c10b64c:	e1a011a3 	lsr	r1, r3, #3
 c10b650:	e1a03001 	mov	r3, r1
 c10b654:	e1a03103 	lsl	r3, r3, #2
 c10b658:	e0833001 	add	r3, r3, r1
 c10b65c:	e1a03083 	lsl	r3, r3, #1
 c10b660:	e0633002 	rsb	r3, r3, r2
 c10b664:	e20330ff 	and	r3, r3, #255	; 0xff
 c10b668:	e08c3003 	add	r3, ip, r3
 c10b66c:	e5803000 	str	r3, [r0]
    BCDDATE = ((((rtc_time->wday)/10)<<4) + (rtc_time->wday)%10);
 c10b670:	e59f017c 	ldr	r0, [pc, #380]	; c10b7f4 <rtc_puttime+0x2a8>
 c10b674:	e51b3010 	ldr	r3, [fp, #-16]
 c10b678:	e5d32004 	ldrb	r2, [r3, #4]
 c10b67c:	e59f3164 	ldr	r3, [pc, #356]	; c10b7e8 <rtc_puttime+0x29c>
 c10b680:	e0831392 	umull	r1, r3, r2, r3
 c10b684:	e1a031a3 	lsr	r3, r3, #3
 c10b688:	e20330ff 	and	r3, r3, #255	; 0xff
 c10b68c:	e1a0c203 	lsl	ip, r3, #4
 c10b690:	e51b3010 	ldr	r3, [fp, #-16]
 c10b694:	e5d32004 	ldrb	r2, [r3, #4]
 c10b698:	e59f3148 	ldr	r3, [pc, #328]	; c10b7e8 <rtc_puttime+0x29c>
 c10b69c:	e0831392 	umull	r1, r3, r2, r3
 c10b6a0:	e1a011a3 	lsr	r1, r3, #3
 c10b6a4:	e1a03001 	mov	r3, r1
 c10b6a8:	e1a03103 	lsl	r3, r3, #2
 c10b6ac:	e0833001 	add	r3, r3, r1
 c10b6b0:	e1a03083 	lsl	r3, r3, #1
 c10b6b4:	e0633002 	rsb	r3, r3, r2
 c10b6b8:	e20330ff 	and	r3, r3, #255	; 0xff
 c10b6bc:	e08c3003 	add	r3, ip, r3
 c10b6c0:	e5803000 	str	r3, [r0]
    BCDHOUR = ((((rtc_time->hour)/10)<<4) + (rtc_time->hour)%10);
 c10b6c4:	e59f012c 	ldr	r0, [pc, #300]	; c10b7f8 <rtc_puttime+0x2ac>
 c10b6c8:	e51b3010 	ldr	r3, [fp, #-16]
 c10b6cc:	e5d32002 	ldrb	r2, [r3, #2]
 c10b6d0:	e59f3110 	ldr	r3, [pc, #272]	; c10b7e8 <rtc_puttime+0x29c>
 c10b6d4:	e0831392 	umull	r1, r3, r2, r3
 c10b6d8:	e1a031a3 	lsr	r3, r3, #3
 c10b6dc:	e20330ff 	and	r3, r3, #255	; 0xff
 c10b6e0:	e1a0c203 	lsl	ip, r3, #4
 c10b6e4:	e51b3010 	ldr	r3, [fp, #-16]
 c10b6e8:	e5d32002 	ldrb	r2, [r3, #2]
 c10b6ec:	e59f30f4 	ldr	r3, [pc, #244]	; c10b7e8 <rtc_puttime+0x29c>
 c10b6f0:	e0831392 	umull	r1, r3, r2, r3
 c10b6f4:	e1a011a3 	lsr	r1, r3, #3
 c10b6f8:	e1a03001 	mov	r3, r1
 c10b6fc:	e1a03103 	lsl	r3, r3, #2
 c10b700:	e0833001 	add	r3, r3, r1
 c10b704:	e1a03083 	lsl	r3, r3, #1
 c10b708:	e0633002 	rsb	r3, r3, r2
 c10b70c:	e20330ff 	and	r3, r3, #255	; 0xff
 c10b710:	e08c3003 	add	r3, ip, r3
 c10b714:	e5803000 	str	r3, [r0]
    BCDMIN  = ((((rtc_time->min)/10)<<4) + (rtc_time->min)%10);
 c10b718:	e59f00dc 	ldr	r0, [pc, #220]	; c10b7fc <rtc_puttime+0x2b0>
 c10b71c:	e51b3010 	ldr	r3, [fp, #-16]
 c10b720:	e5d32001 	ldrb	r2, [r3, #1]
 c10b724:	e59f30bc 	ldr	r3, [pc, #188]	; c10b7e8 <rtc_puttime+0x29c>
 c10b728:	e0831392 	umull	r1, r3, r2, r3
 c10b72c:	e1a031a3 	lsr	r3, r3, #3
 c10b730:	e20330ff 	and	r3, r3, #255	; 0xff
 c10b734:	e1a0c203 	lsl	ip, r3, #4
 c10b738:	e51b3010 	ldr	r3, [fp, #-16]
 c10b73c:	e5d32001 	ldrb	r2, [r3, #1]
 c10b740:	e59f30a0 	ldr	r3, [pc, #160]	; c10b7e8 <rtc_puttime+0x29c>
 c10b744:	e0831392 	umull	r1, r3, r2, r3
 c10b748:	e1a011a3 	lsr	r1, r3, #3
 c10b74c:	e1a03001 	mov	r3, r1
 c10b750:	e1a03103 	lsl	r3, r3, #2
 c10b754:	e0833001 	add	r3, r3, r1
 c10b758:	e1a03083 	lsl	r3, r3, #1
 c10b75c:	e0633002 	rsb	r3, r3, r2
 c10b760:	e20330ff 	and	r3, r3, #255	; 0xff
 c10b764:	e08c3003 	add	r3, ip, r3
 c10b768:	e5803000 	str	r3, [r0]
    BCDSEC  = ((((rtc_time->sec)/10)<<4) + (rtc_time->sec)%10);
 c10b76c:	e59f008c 	ldr	r0, [pc, #140]	; c10b800 <rtc_puttime+0x2b4>
 c10b770:	e51b3010 	ldr	r3, [fp, #-16]
 c10b774:	e5d32000 	ldrb	r2, [r3]
 c10b778:	e59f3068 	ldr	r3, [pc, #104]	; c10b7e8 <rtc_puttime+0x29c>
 c10b77c:	e0831392 	umull	r1, r3, r2, r3
 c10b780:	e1a031a3 	lsr	r3, r3, #3
 c10b784:	e20330ff 	and	r3, r3, #255	; 0xff
 c10b788:	e1a0c203 	lsl	ip, r3, #4
 c10b78c:	e51b3010 	ldr	r3, [fp, #-16]
 c10b790:	e5d32000 	ldrb	r2, [r3]
 c10b794:	e59f304c 	ldr	r3, [pc, #76]	; c10b7e8 <rtc_puttime+0x29c>
 c10b798:	e0831392 	umull	r1, r3, r2, r3
 c10b79c:	e1a011a3 	lsr	r1, r3, #3
 c10b7a0:	e1a03001 	mov	r3, r1
 c10b7a4:	e1a03103 	lsl	r3, r3, #2
 c10b7a8:	e0833001 	add	r3, r3, r1
 c10b7ac:	e1a03083 	lsl	r3, r3, #1
 c10b7b0:	e0633002 	rsb	r3, r3, r2
 c10b7b4:	e20330ff 	and	r3, r3, #255	; 0xff
 c10b7b8:	e08c3003 	add	r3, ip, r3
 c10b7bc:	e5803000 	str	r3, [r0]
        
    RTCCON &= ~(1 << 0); //deshabilita el acceso a los registros de hora/fecha del RTC
 c10b7c0:	e59f3018 	ldr	r3, [pc, #24]	; c10b7e0 <rtc_puttime+0x294>
 c10b7c4:	e59f2014 	ldr	r2, [pc, #20]	; c10b7e0 <rtc_puttime+0x294>
 c10b7c8:	e5922000 	ldr	r2, [r2]
 c10b7cc:	e3c22001 	bic	r2, r2, #1
 c10b7d0:	e5832000 	str	r2, [r3]
}
 c10b7d4:	e24bd00c 	sub	sp, fp, #12
 c10b7d8:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10b7dc:	e12fff1e 	bx	lr
 c10b7e0:	01d70040 	.word	0x01d70040
 c10b7e4:	01d70088 	.word	0x01d70088
 c10b7e8:	cccccccd 	.word	0xcccccccd
 c10b7ec:	01d70084 	.word	0x01d70084
 c10b7f0:	01d7007c 	.word	0x01d7007c
 c10b7f4:	01d70080 	.word	0x01d70080
 c10b7f8:	01d70078 	.word	0x01d70078
 c10b7fc:	01d70074 	.word	0x01d70074
 c10b800:	01d70070 	.word	0x01d70070

0c10b804 <rtc_gettime>:

void rtc_gettime( rtc_time_t *rtc_time )
{
 c10b804:	e1a0c00d 	mov	ip, sp
 c10b808:	e92dd800 	push	{fp, ip, lr, pc}
 c10b80c:	e24cb004 	sub	fp, ip, #4
 c10b810:	e24dd008 	sub	sp, sp, #8
 c10b814:	e50b0010 	str	r0, [fp, #-16]
	RTCCON |= (1 << 0);
 c10b818:	e59f342c 	ldr	r3, [pc, #1068]	; c10bc4c <rtc_gettime+0x448>
 c10b81c:	e59f2428 	ldr	r2, [pc, #1064]	; c10bc4c <rtc_gettime+0x448>
 c10b820:	e5922000 	ldr	r2, [r2]
 c10b824:	e3822001 	orr	r2, r2, #1
 c10b828:	e5832000 	str	r2, [r3]
    //BCD a binario
    rtc_time->year = (((BCDYEAR)&15) + ((BCDYEAR)>>4)*10);
 c10b82c:	e59f341c 	ldr	r3, [pc, #1052]	; c10bc50 <rtc_gettime+0x44c>
 c10b830:	e5933000 	ldr	r3, [r3]
 c10b834:	e20330ff 	and	r3, r3, #255	; 0xff
 c10b838:	e203300f 	and	r3, r3, #15
 c10b83c:	e20320ff 	and	r2, r3, #255	; 0xff
 c10b840:	e59f3408 	ldr	r3, [pc, #1032]	; c10bc50 <rtc_gettime+0x44c>
 c10b844:	e5933000 	ldr	r3, [r3]
 c10b848:	e1a03223 	lsr	r3, r3, #4
 c10b84c:	e20330ff 	and	r3, r3, #255	; 0xff
 c10b850:	e1a01003 	mov	r1, r3
 c10b854:	e1a01101 	lsl	r1, r1, #2
 c10b858:	e0813003 	add	r3, r1, r3
 c10b85c:	e1a03083 	lsl	r3, r3, #1
 c10b860:	e20330ff 	and	r3, r3, #255	; 0xff
 c10b864:	e0823003 	add	r3, r2, r3
 c10b868:	e20320ff 	and	r2, r3, #255	; 0xff
 c10b86c:	e51b3010 	ldr	r3, [fp, #-16]
 c10b870:	e5c32006 	strb	r2, [r3, #6]
    rtc_time->mon  = (((BCDMON)&15) + ((BCDMON)>>4)*10);
 c10b874:	e59f33d8 	ldr	r3, [pc, #984]	; c10bc54 <rtc_gettime+0x450>
 c10b878:	e5933000 	ldr	r3, [r3]
 c10b87c:	e20330ff 	and	r3, r3, #255	; 0xff
 c10b880:	e203300f 	and	r3, r3, #15
 c10b884:	e20320ff 	and	r2, r3, #255	; 0xff
 c10b888:	e59f33c4 	ldr	r3, [pc, #964]	; c10bc54 <rtc_gettime+0x450>
 c10b88c:	e5933000 	ldr	r3, [r3]
 c10b890:	e1a03223 	lsr	r3, r3, #4
 c10b894:	e20330ff 	and	r3, r3, #255	; 0xff
 c10b898:	e1a01003 	mov	r1, r3
 c10b89c:	e1a01101 	lsl	r1, r1, #2
 c10b8a0:	e0813003 	add	r3, r1, r3
 c10b8a4:	e1a03083 	lsl	r3, r3, #1
 c10b8a8:	e20330ff 	and	r3, r3, #255	; 0xff
 c10b8ac:	e0823003 	add	r3, r2, r3
 c10b8b0:	e20320ff 	and	r2, r3, #255	; 0xff
 c10b8b4:	e51b3010 	ldr	r3, [fp, #-16]
 c10b8b8:	e5c32005 	strb	r2, [r3, #5]
    rtc_time->mday = (((BCDDAY)&15) + ((BCDDAY)>>4)*10);
 c10b8bc:	e59f3394 	ldr	r3, [pc, #916]	; c10bc58 <rtc_gettime+0x454>
 c10b8c0:	e5933000 	ldr	r3, [r3]
 c10b8c4:	e20330ff 	and	r3, r3, #255	; 0xff
 c10b8c8:	e203300f 	and	r3, r3, #15
 c10b8cc:	e20320ff 	and	r2, r3, #255	; 0xff
 c10b8d0:	e59f3380 	ldr	r3, [pc, #896]	; c10bc58 <rtc_gettime+0x454>
 c10b8d4:	e5933000 	ldr	r3, [r3]
 c10b8d8:	e1a03223 	lsr	r3, r3, #4
 c10b8dc:	e20330ff 	and	r3, r3, #255	; 0xff
 c10b8e0:	e1a01003 	mov	r1, r3
 c10b8e4:	e1a01101 	lsl	r1, r1, #2
 c10b8e8:	e0813003 	add	r3, r1, r3
 c10b8ec:	e1a03083 	lsl	r3, r3, #1
 c10b8f0:	e20330ff 	and	r3, r3, #255	; 0xff
 c10b8f4:	e0823003 	add	r3, r2, r3
 c10b8f8:	e20320ff 	and	r2, r3, #255	; 0xff
 c10b8fc:	e51b3010 	ldr	r3, [fp, #-16]
 c10b900:	e5c32003 	strb	r2, [r3, #3]
    rtc_time->wday = (((BCDDATE)&15) + ((BCDDATE)>>4)*10);
 c10b904:	e59f3350 	ldr	r3, [pc, #848]	; c10bc5c <rtc_gettime+0x458>
 c10b908:	e5933000 	ldr	r3, [r3]
 c10b90c:	e20330ff 	and	r3, r3, #255	; 0xff
 c10b910:	e203300f 	and	r3, r3, #15
 c10b914:	e20320ff 	and	r2, r3, #255	; 0xff
 c10b918:	e59f333c 	ldr	r3, [pc, #828]	; c10bc5c <rtc_gettime+0x458>
 c10b91c:	e5933000 	ldr	r3, [r3]
 c10b920:	e1a03223 	lsr	r3, r3, #4
 c10b924:	e20330ff 	and	r3, r3, #255	; 0xff
 c10b928:	e1a01003 	mov	r1, r3
 c10b92c:	e1a01101 	lsl	r1, r1, #2
 c10b930:	e0813003 	add	r3, r1, r3
 c10b934:	e1a03083 	lsl	r3, r3, #1
 c10b938:	e20330ff 	and	r3, r3, #255	; 0xff
 c10b93c:	e0823003 	add	r3, r2, r3
 c10b940:	e20320ff 	and	r2, r3, #255	; 0xff
 c10b944:	e51b3010 	ldr	r3, [fp, #-16]
 c10b948:	e5c32004 	strb	r2, [r3, #4]
    rtc_time->hour = (((BCDHOUR)&15) + ((BCDHOUR)>>4)*10);
 c10b94c:	e59f330c 	ldr	r3, [pc, #780]	; c10bc60 <rtc_gettime+0x45c>
 c10b950:	e5933000 	ldr	r3, [r3]
 c10b954:	e20330ff 	and	r3, r3, #255	; 0xff
 c10b958:	e203300f 	and	r3, r3, #15
 c10b95c:	e20320ff 	and	r2, r3, #255	; 0xff
 c10b960:	e59f32f8 	ldr	r3, [pc, #760]	; c10bc60 <rtc_gettime+0x45c>
 c10b964:	e5933000 	ldr	r3, [r3]
 c10b968:	e1a03223 	lsr	r3, r3, #4
 c10b96c:	e20330ff 	and	r3, r3, #255	; 0xff
 c10b970:	e1a01003 	mov	r1, r3
 c10b974:	e1a01101 	lsl	r1, r1, #2
 c10b978:	e0813003 	add	r3, r1, r3
 c10b97c:	e1a03083 	lsl	r3, r3, #1
 c10b980:	e20330ff 	and	r3, r3, #255	; 0xff
 c10b984:	e0823003 	add	r3, r2, r3
 c10b988:	e20320ff 	and	r2, r3, #255	; 0xff
 c10b98c:	e51b3010 	ldr	r3, [fp, #-16]
 c10b990:	e5c32002 	strb	r2, [r3, #2]
    rtc_time->min  = (((BCDMIN)&15) + ((BCDMIN)>>4)*10);
 c10b994:	e59f32c8 	ldr	r3, [pc, #712]	; c10bc64 <rtc_gettime+0x460>
 c10b998:	e5933000 	ldr	r3, [r3]
 c10b99c:	e20330ff 	and	r3, r3, #255	; 0xff
 c10b9a0:	e203300f 	and	r3, r3, #15
 c10b9a4:	e20320ff 	and	r2, r3, #255	; 0xff
 c10b9a8:	e59f32b4 	ldr	r3, [pc, #692]	; c10bc64 <rtc_gettime+0x460>
 c10b9ac:	e5933000 	ldr	r3, [r3]
 c10b9b0:	e1a03223 	lsr	r3, r3, #4
 c10b9b4:	e20330ff 	and	r3, r3, #255	; 0xff
 c10b9b8:	e1a01003 	mov	r1, r3
 c10b9bc:	e1a01101 	lsl	r1, r1, #2
 c10b9c0:	e0813003 	add	r3, r1, r3
 c10b9c4:	e1a03083 	lsl	r3, r3, #1
 c10b9c8:	e20330ff 	and	r3, r3, #255	; 0xff
 c10b9cc:	e0823003 	add	r3, r2, r3
 c10b9d0:	e20320ff 	and	r2, r3, #255	; 0xff
 c10b9d4:	e51b3010 	ldr	r3, [fp, #-16]
 c10b9d8:	e5c32001 	strb	r2, [r3, #1]
    rtc_time->sec  = (((BCDSEC)&15) + ((BCDSEC)>>4)*10);
 c10b9dc:	e59f3284 	ldr	r3, [pc, #644]	; c10bc68 <rtc_gettime+0x464>
 c10b9e0:	e5933000 	ldr	r3, [r3]
 c10b9e4:	e20330ff 	and	r3, r3, #255	; 0xff
 c10b9e8:	e203300f 	and	r3, r3, #15
 c10b9ec:	e20320ff 	and	r2, r3, #255	; 0xff
 c10b9f0:	e59f3270 	ldr	r3, [pc, #624]	; c10bc68 <rtc_gettime+0x464>
 c10b9f4:	e5933000 	ldr	r3, [r3]
 c10b9f8:	e1a03223 	lsr	r3, r3, #4
 c10b9fc:	e20330ff 	and	r3, r3, #255	; 0xff
 c10ba00:	e1a01003 	mov	r1, r3
 c10ba04:	e1a01101 	lsl	r1, r1, #2
 c10ba08:	e0813003 	add	r3, r1, r3
 c10ba0c:	e1a03083 	lsl	r3, r3, #1
 c10ba10:	e20330ff 	and	r3, r3, #255	; 0xff
 c10ba14:	e0823003 	add	r3, r2, r3
 c10ba18:	e20320ff 	and	r2, r3, #255	; 0xff
 c10ba1c:	e51b3010 	ldr	r3, [fp, #-16]
 c10ba20:	e5c32000 	strb	r2, [r3]
    if( ! rtc_time->sec ){
 c10ba24:	e51b3010 	ldr	r3, [fp, #-16]
 c10ba28:	e5d33000 	ldrb	r3, [r3]
 c10ba2c:	e3530000 	cmp	r3, #0
 c10ba30:	1a00007d 	bne	c10bc2c <rtc_gettime+0x428>
        rtc_time->year = (((BCDYEAR)&15) + ((BCDYEAR)>>4)*10);
 c10ba34:	e59f3214 	ldr	r3, [pc, #532]	; c10bc50 <rtc_gettime+0x44c>
 c10ba38:	e5933000 	ldr	r3, [r3]
 c10ba3c:	e20330ff 	and	r3, r3, #255	; 0xff
 c10ba40:	e203300f 	and	r3, r3, #15
 c10ba44:	e20320ff 	and	r2, r3, #255	; 0xff
 c10ba48:	e59f3200 	ldr	r3, [pc, #512]	; c10bc50 <rtc_gettime+0x44c>
 c10ba4c:	e5933000 	ldr	r3, [r3]
 c10ba50:	e1a03223 	lsr	r3, r3, #4
 c10ba54:	e20330ff 	and	r3, r3, #255	; 0xff
 c10ba58:	e1a01003 	mov	r1, r3
 c10ba5c:	e1a01101 	lsl	r1, r1, #2
 c10ba60:	e0813003 	add	r3, r1, r3
 c10ba64:	e1a03083 	lsl	r3, r3, #1
 c10ba68:	e20330ff 	and	r3, r3, #255	; 0xff
 c10ba6c:	e0823003 	add	r3, r2, r3
 c10ba70:	e20320ff 	and	r2, r3, #255	; 0xff
 c10ba74:	e51b3010 	ldr	r3, [fp, #-16]
 c10ba78:	e5c32006 	strb	r2, [r3, #6]
        rtc_time->mon  = (((BCDMON)&15) + ((BCDMON)>>4)*10);
 c10ba7c:	e59f31d0 	ldr	r3, [pc, #464]	; c10bc54 <rtc_gettime+0x450>
 c10ba80:	e5933000 	ldr	r3, [r3]
 c10ba84:	e20330ff 	and	r3, r3, #255	; 0xff
 c10ba88:	e203300f 	and	r3, r3, #15
 c10ba8c:	e20320ff 	and	r2, r3, #255	; 0xff
 c10ba90:	e59f31bc 	ldr	r3, [pc, #444]	; c10bc54 <rtc_gettime+0x450>
 c10ba94:	e5933000 	ldr	r3, [r3]
 c10ba98:	e1a03223 	lsr	r3, r3, #4
 c10ba9c:	e20330ff 	and	r3, r3, #255	; 0xff
 c10baa0:	e1a01003 	mov	r1, r3
 c10baa4:	e1a01101 	lsl	r1, r1, #2
 c10baa8:	e0813003 	add	r3, r1, r3
 c10baac:	e1a03083 	lsl	r3, r3, #1
 c10bab0:	e20330ff 	and	r3, r3, #255	; 0xff
 c10bab4:	e0823003 	add	r3, r2, r3
 c10bab8:	e20320ff 	and	r2, r3, #255	; 0xff
 c10babc:	e51b3010 	ldr	r3, [fp, #-16]
 c10bac0:	e5c32005 	strb	r2, [r3, #5]
        rtc_time->mday = (((BCDDAY)&15) + ((BCDDAY)>>4)*10);
 c10bac4:	e59f318c 	ldr	r3, [pc, #396]	; c10bc58 <rtc_gettime+0x454>
 c10bac8:	e5933000 	ldr	r3, [r3]
 c10bacc:	e20330ff 	and	r3, r3, #255	; 0xff
 c10bad0:	e203300f 	and	r3, r3, #15
 c10bad4:	e20320ff 	and	r2, r3, #255	; 0xff
 c10bad8:	e59f3178 	ldr	r3, [pc, #376]	; c10bc58 <rtc_gettime+0x454>
 c10badc:	e5933000 	ldr	r3, [r3]
 c10bae0:	e1a03223 	lsr	r3, r3, #4
 c10bae4:	e20330ff 	and	r3, r3, #255	; 0xff
 c10bae8:	e1a01003 	mov	r1, r3
 c10baec:	e1a01101 	lsl	r1, r1, #2
 c10baf0:	e0813003 	add	r3, r1, r3
 c10baf4:	e1a03083 	lsl	r3, r3, #1
 c10baf8:	e20330ff 	and	r3, r3, #255	; 0xff
 c10bafc:	e0823003 	add	r3, r2, r3
 c10bb00:	e20320ff 	and	r2, r3, #255	; 0xff
 c10bb04:	e51b3010 	ldr	r3, [fp, #-16]
 c10bb08:	e5c32003 	strb	r2, [r3, #3]
        rtc_time->wday = (((BCDDATE)&15) + ((BCDDATE)>>4)*10);
 c10bb0c:	e59f3148 	ldr	r3, [pc, #328]	; c10bc5c <rtc_gettime+0x458>
 c10bb10:	e5933000 	ldr	r3, [r3]
 c10bb14:	e20330ff 	and	r3, r3, #255	; 0xff
 c10bb18:	e203300f 	and	r3, r3, #15
 c10bb1c:	e20320ff 	and	r2, r3, #255	; 0xff
 c10bb20:	e59f3134 	ldr	r3, [pc, #308]	; c10bc5c <rtc_gettime+0x458>
 c10bb24:	e5933000 	ldr	r3, [r3]
 c10bb28:	e1a03223 	lsr	r3, r3, #4
 c10bb2c:	e20330ff 	and	r3, r3, #255	; 0xff
 c10bb30:	e1a01003 	mov	r1, r3
 c10bb34:	e1a01101 	lsl	r1, r1, #2
 c10bb38:	e0813003 	add	r3, r1, r3
 c10bb3c:	e1a03083 	lsl	r3, r3, #1
 c10bb40:	e20330ff 	and	r3, r3, #255	; 0xff
 c10bb44:	e0823003 	add	r3, r2, r3
 c10bb48:	e20320ff 	and	r2, r3, #255	; 0xff
 c10bb4c:	e51b3010 	ldr	r3, [fp, #-16]
 c10bb50:	e5c32004 	strb	r2, [r3, #4]
        rtc_time->hour = (((BCDHOUR)&15) + ((BCDHOUR)>>4)*10);
 c10bb54:	e59f3104 	ldr	r3, [pc, #260]	; c10bc60 <rtc_gettime+0x45c>
 c10bb58:	e5933000 	ldr	r3, [r3]
 c10bb5c:	e20330ff 	and	r3, r3, #255	; 0xff
 c10bb60:	e203300f 	and	r3, r3, #15
 c10bb64:	e20320ff 	and	r2, r3, #255	; 0xff
 c10bb68:	e59f30f0 	ldr	r3, [pc, #240]	; c10bc60 <rtc_gettime+0x45c>
 c10bb6c:	e5933000 	ldr	r3, [r3]
 c10bb70:	e1a03223 	lsr	r3, r3, #4
 c10bb74:	e20330ff 	and	r3, r3, #255	; 0xff
 c10bb78:	e1a01003 	mov	r1, r3
 c10bb7c:	e1a01101 	lsl	r1, r1, #2
 c10bb80:	e0813003 	add	r3, r1, r3
 c10bb84:	e1a03083 	lsl	r3, r3, #1
 c10bb88:	e20330ff 	and	r3, r3, #255	; 0xff
 c10bb8c:	e0823003 	add	r3, r2, r3
 c10bb90:	e20320ff 	and	r2, r3, #255	; 0xff
 c10bb94:	e51b3010 	ldr	r3, [fp, #-16]
 c10bb98:	e5c32002 	strb	r2, [r3, #2]
        rtc_time->min  = (((BCDMIN)&15) + ((BCDMIN)>>4)*10);
 c10bb9c:	e59f30c0 	ldr	r3, [pc, #192]	; c10bc64 <rtc_gettime+0x460>
 c10bba0:	e5933000 	ldr	r3, [r3]
 c10bba4:	e20330ff 	and	r3, r3, #255	; 0xff
 c10bba8:	e203300f 	and	r3, r3, #15
 c10bbac:	e20320ff 	and	r2, r3, #255	; 0xff
 c10bbb0:	e59f30ac 	ldr	r3, [pc, #172]	; c10bc64 <rtc_gettime+0x460>
 c10bbb4:	e5933000 	ldr	r3, [r3]
 c10bbb8:	e1a03223 	lsr	r3, r3, #4
 c10bbbc:	e20330ff 	and	r3, r3, #255	; 0xff
 c10bbc0:	e1a01003 	mov	r1, r3
 c10bbc4:	e1a01101 	lsl	r1, r1, #2
 c10bbc8:	e0813003 	add	r3, r1, r3
 c10bbcc:	e1a03083 	lsl	r3, r3, #1
 c10bbd0:	e20330ff 	and	r3, r3, #255	; 0xff
 c10bbd4:	e0823003 	add	r3, r2, r3
 c10bbd8:	e20320ff 	and	r2, r3, #255	; 0xff
 c10bbdc:	e51b3010 	ldr	r3, [fp, #-16]
 c10bbe0:	e5c32001 	strb	r2, [r3, #1]
        rtc_time->sec  = (((BCDSEC)&15) + ((BCDSEC)>>4)*10);
 c10bbe4:	e59f307c 	ldr	r3, [pc, #124]	; c10bc68 <rtc_gettime+0x464>
 c10bbe8:	e5933000 	ldr	r3, [r3]
 c10bbec:	e20330ff 	and	r3, r3, #255	; 0xff
 c10bbf0:	e203300f 	and	r3, r3, #15
 c10bbf4:	e20320ff 	and	r2, r3, #255	; 0xff
 c10bbf8:	e59f3068 	ldr	r3, [pc, #104]	; c10bc68 <rtc_gettime+0x464>
 c10bbfc:	e5933000 	ldr	r3, [r3]
 c10bc00:	e1a03223 	lsr	r3, r3, #4
 c10bc04:	e20330ff 	and	r3, r3, #255	; 0xff
 c10bc08:	e1a01003 	mov	r1, r3
 c10bc0c:	e1a01101 	lsl	r1, r1, #2
 c10bc10:	e0813003 	add	r3, r1, r3
 c10bc14:	e1a03083 	lsl	r3, r3, #1
 c10bc18:	e20330ff 	and	r3, r3, #255	; 0xff
 c10bc1c:	e0823003 	add	r3, r2, r3
 c10bc20:	e20320ff 	and	r2, r3, #255	; 0xff
 c10bc24:	e51b3010 	ldr	r3, [fp, #-16]
 c10bc28:	e5c32000 	strb	r2, [r3]
    };

    RTCCON &= ~(1 << 0);
 c10bc2c:	e59f3018 	ldr	r3, [pc, #24]	; c10bc4c <rtc_gettime+0x448>
 c10bc30:	e59f2014 	ldr	r2, [pc, #20]	; c10bc4c <rtc_gettime+0x448>
 c10bc34:	e5922000 	ldr	r2, [r2]
 c10bc38:	e3c22001 	bic	r2, r2, #1
 c10bc3c:	e5832000 	str	r2, [r3]
}
 c10bc40:	e24bd00c 	sub	sp, fp, #12
 c10bc44:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10bc48:	e12fff1e 	bx	lr
 c10bc4c:	01d70040 	.word	0x01d70040
 c10bc50:	01d70088 	.word	0x01d70088
 c10bc54:	01d70084 	.word	0x01d70084
 c10bc58:	01d7007c 	.word	0x01d7007c
 c10bc5c:	01d70080 	.word	0x01d70080
 c10bc60:	01d70078 	.word	0x01d70078
 c10bc64:	01d70074 	.word	0x01d70074
 c10bc68:	01d70070 	.word	0x01d70070

0c10bc6c <rtc_open>:


void rtc_open( void (*isr)(void), uint8 tick_count )
{
 c10bc6c:	e1a0c00d 	mov	ip, sp
 c10bc70:	e92dd800 	push	{fp, ip, lr, pc}
 c10bc74:	e24cb004 	sub	fp, ip, #4
 c10bc78:	e24dd008 	sub	sp, sp, #8
 c10bc7c:	e50b0010 	str	r0, [fp, #-16]
 c10bc80:	e1a03001 	mov	r3, r1
 c10bc84:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
	pISR_TICK = (uint32) isr; //instala la ISR argumento en la tabla virtual de vectores de IRQ
 c10bc88:	e59f3048 	ldr	r3, [pc, #72]	; c10bcd8 <rtc_open+0x6c>
 c10bc8c:	e51b2010 	ldr	r2, [fp, #-16]
 c10bc90:	e5832000 	str	r2, [r3]
	I_ISPC = (1<<20); //borra flag de interrupción pendiente por ticks de RTC
 c10bc94:	e59f3040 	ldr	r3, [pc, #64]	; c10bcdc <rtc_open+0x70>
 c10bc98:	e3a02601 	mov	r2, #1048576	; 0x100000
 c10bc9c:	e5832000 	str	r2, [r3]
	INTMSK &= ~((1<<26) | (1<<20)); //desenmascara globalmente interrupciones e interrupciones por tick de RTC
 c10bca0:	e59f3038 	ldr	r3, [pc, #56]	; c10bce0 <rtc_open+0x74>
 c10bca4:	e59f2034 	ldr	r2, [pc, #52]	; c10bce0 <rtc_open+0x74>
 c10bca8:	e5922000 	ldr	r2, [r2]
 c10bcac:	e3c22641 	bic	r2, r2, #68157440	; 0x4100000
 c10bcb0:	e5832000 	str	r2, [r3]
	TICNT = (1<<7) | tick_count; //habilita en el RTC la generación de ticks y fija el valor del contador que los genera
 c10bcb4:	e59f2028 	ldr	r2, [pc, #40]	; c10bce4 <rtc_open+0x78>
 c10bcb8:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c10bcbc:	e1e03c83 	mvn	r3, r3, lsl #25
 c10bcc0:	e1e03ca3 	mvn	r3, r3, lsr #25
 c10bcc4:	e20330ff 	and	r3, r3, #255	; 0xff
 c10bcc8:	e5823000 	str	r3, [r2]
}
 c10bccc:	e24bd00c 	sub	sp, fp, #12
 c10bcd0:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10bcd4:	e12fff1e 	bx	lr
 c10bcd8:	0c7fff70 	.word	0x0c7fff70
 c10bcdc:	01e00024 	.word	0x01e00024
 c10bce0:	01e0000c 	.word	0x01e0000c
 c10bce4:	01d7008c 	.word	0x01d7008c

0c10bce8 <rtc_close>:

void rtc_close( void )
{
 c10bce8:	e1a0c00d 	mov	ip, sp
 c10bcec:	e92dd800 	push	{fp, ip, lr, pc}
 c10bcf0:	e24cb004 	sub	fp, ip, #4
    TICNT   &= ~(1<<7); //deshabilita en el RTC la generación de ticks
 c10bcf4:	e59f3038 	ldr	r3, [pc, #56]	; c10bd34 <rtc_close+0x4c>
 c10bcf8:	e59f2034 	ldr	r2, [pc, #52]	; c10bd34 <rtc_close+0x4c>
 c10bcfc:	e5922000 	ldr	r2, [r2]
 c10bd00:	e3c22080 	bic	r2, r2, #128	; 0x80
 c10bd04:	e5832000 	str	r2, [r3]
    INTMSK   |= (1 << 26) | (1 << 20); //enmascara interrupciones por tick de RTC
 c10bd08:	e59f3028 	ldr	r3, [pc, #40]	; c10bd38 <rtc_close+0x50>
 c10bd0c:	e59f2024 	ldr	r2, [pc, #36]	; c10bd38 <rtc_close+0x50>
 c10bd10:	e5922000 	ldr	r2, [r2]
 c10bd14:	e3822641 	orr	r2, r2, #68157440	; 0x4100000
 c10bd18:	e5832000 	str	r2, [r3]
    pISR_TICK = (uint32)isr_TICK_dummy; //instala isr_TICK_dummy en la tabla virtual de vectores de interrupción
 c10bd1c:	e59f3018 	ldr	r3, [pc, #24]	; c10bd3c <rtc_close+0x54>
 c10bd20:	e59f2018 	ldr	r2, [pc, #24]	; c10bd40 <rtc_close+0x58>
 c10bd24:	e5832000 	str	r2, [r3]
}
 c10bd28:	e24bd00c 	sub	sp, fp, #12
 c10bd2c:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10bd30:	e12fff1e 	bx	lr
 c10bd34:	01d7008c 	.word	0x01d7008c
 c10bd38:	01e0000c 	.word	0x01e0000c
 c10bd3c:	0c7fff70 	.word	0x0c7fff70
 c10bd40:	0c10c7f0 	.word	0x0c10c7f0

0c10bd44 <segs_init>:
static const uint8 hex2segs[16] = {0x12, 0x9f, 0x31, 0x15, 0x9c, 0x54, 0x50, 0x1f, 0x10, 0x1c, 0x18, 0xd0, 0x72, 0x91, 0x70, 0x78};

static uint8 state;
        
void segs_init( void )
{
 c10bd44:	e1a0c00d 	mov	ip, sp
 c10bd48:	e92dd800 	push	{fp, ip, lr, pc}
 c10bd4c:	e24cb004 	sub	fp, ip, #4
    segs_off();
 c10bd50:	eb000002 	bl	c10bd60 <segs_off>
}                                  
 c10bd54:	e24bd00c 	sub	sp, fp, #12
 c10bd58:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10bd5c:	e12fff1e 	bx	lr

0c10bd60 <segs_off>:
                          
void segs_off( void )
{
 c10bd60:	e1a0c00d 	mov	ip, sp
 c10bd64:	e92dd800 	push	{fp, ip, lr, pc}
 c10bd68:	e24cb004 	sub	fp, ip, #4
    state = SEGS_OFF;
 c10bd6c:	e59f3020 	ldr	r3, [pc, #32]	; c10bd94 <segs_off+0x34>
 c10bd70:	e3e02000 	mvn	r2, #0
 c10bd74:	e5c32000 	strb	r2, [r3]
    SEGS = state;
 c10bd78:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c10bd7c:	e59f2010 	ldr	r2, [pc, #16]	; c10bd94 <segs_off+0x34>
 c10bd80:	e5d22000 	ldrb	r2, [r2]
 c10bd84:	e5c32000 	strb	r2, [r3]
}
 c10bd88:	e24bd00c 	sub	sp, fp, #12
 c10bd8c:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10bd90:	e12fff1e 	bx	lr
 c10bd94:	0c119218 	.word	0x0c119218

0c10bd98 <segs_putchar>:

void segs_putchar( uint8 n )
{
 c10bd98:	e1a0c00d 	mov	ip, sp
 c10bd9c:	e92dd800 	push	{fp, ip, lr, pc}
 c10bda0:	e24cb004 	sub	fp, ip, #4
 c10bda4:	e24dd008 	sub	sp, sp, #8
 c10bda8:	e1a03000 	mov	r3, r0
 c10bdac:	e54b300d 	strb	r3, [fp, #-13]
    state = n & 0x0f;
 c10bdb0:	e55b300d 	ldrb	r3, [fp, #-13]
 c10bdb4:	e203300f 	and	r3, r3, #15
 c10bdb8:	e20320ff 	and	r2, r3, #255	; 0xff
 c10bdbc:	e59f3024 	ldr	r3, [pc, #36]	; c10bde8 <segs_putchar+0x50>
 c10bdc0:	e5c32000 	strb	r2, [r3]
    SEGS = hex2segs[state];
 c10bdc4:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c10bdc8:	e59f2018 	ldr	r2, [pc, #24]	; c10bde8 <segs_putchar+0x50>
 c10bdcc:	e5d22000 	ldrb	r2, [r2]
 c10bdd0:	e59f1014 	ldr	r1, [pc, #20]	; c10bdec <segs_putchar+0x54>
 c10bdd4:	e7d12002 	ldrb	r2, [r1, r2]
 c10bdd8:	e5c32000 	strb	r2, [r3]
};
 c10bddc:	e24bd00c 	sub	sp, fp, #12
 c10bde0:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10bde4:	e12fff1e 	bx	lr
 c10bde8:	0c119218 	.word	0x0c119218
 c10bdec:	0c10e60c 	.word	0x0c10e60c

0c10bdf0 <segs_status>:

uint8 segs_status( void )
{
 c10bdf0:	e1a0c00d 	mov	ip, sp
 c10bdf4:	e92dd800 	push	{fp, ip, lr, pc}
 c10bdf8:	e24cb004 	sub	fp, ip, #4
    return state;
 c10bdfc:	e59f3010 	ldr	r3, [pc, #16]	; c10be14 <segs_status+0x24>
 c10be00:	e5d33000 	ldrb	r3, [r3]
};
 c10be04:	e1a00003 	mov	r0, r3
 c10be08:	e24bd00c 	sub	sp, fp, #12
 c10be0c:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10be10:	e12fff1e 	bx	lr
 c10be14:	0c119218 	.word	0x0c119218

0c10be18 <sys_init>:
void isr_TS_dummy(void)__attribute__((interrupt ("IRQ")));
void isr_KEYPAD_dummy(void)__attribute__((interrupt ("IRQ")));
void isr_USB_dummy(void)__attribute__((interrupt ("IRQ")));

void sys_init( void )
{
 c10be18:	e1a0c00d 	mov	ip, sp
 c10be1c:	e92dd800 	push	{fp, ip, lr, pc}
 c10be20:	e24cb004 	sub	fp, ip, #4
    WTCON = 0;	//Watchdog deshabilitado
 c10be24:	e59f30ec 	ldr	r3, [pc, #236]	; c10bf18 <sys_init+0x100>
 c10be28:	e3a02000 	mov	r2, #0
 c10be2c:	e5832000 	str	r2, [r3]
    INTMSK = ~0; //Enmascara todas las interrupciones
 c10be30:	e59f30e4 	ldr	r3, [pc, #228]	; c10bf1c <sys_init+0x104>
 c10be34:	e3e02000 	mvn	r2, #0
 c10be38:	e5832000 	str	r2, [r3]

    LOCKTIME = 0xFFF; //Estabilización del PLL: 512 us
 c10be3c:	e59f30dc 	ldr	r3, [pc, #220]	; c10bf20 <sys_init+0x108>
 c10be40:	e59f20dc 	ldr	r2, [pc, #220]	; c10bf24 <sys_init+0x10c>
 c10be44:	e5832000 	str	r2, [r3]
    PLLCON = 0x38021; //Frecuencia del  MCLK_SLOW: 500 KHz
 c10be48:	e3a03776 	mov	r3, #30932992	; 0x1d80000
 c10be4c:	e59f20d4 	ldr	r2, [pc, #212]	; c10bf28 <sys_init+0x110>
 c10be50:	e5832000 	str	r2, [r3]
    CLKSLOW = 0x8; //Frecuencia del MCLK: 64 MHz
 c10be54:	e59f30d0 	ldr	r3, [pc, #208]	; c10bf2c <sys_init+0x114>
 c10be58:	e3a02008 	mov	r2, #8
 c10be5c:	e5832000 	str	r2, [r3]
    CLKCON = 0x7FF8; //Modo de funcionamiento normal y Reloj distribuido a todos lo controladores
 c10be60:	e59f30c8 	ldr	r3, [pc, #200]	; c10bf30 <sys_init+0x118>
 c10be64:	e59f20c8 	ldr	r2, [pc, #200]	; c10bf34 <sys_init+0x11c>
 c10be68:	e5832000 	str	r2, [r3]

    SBUSCON = 0x8000001B; //Prioridades de bus del sistema fijas: LCD > ZDMA > BDMA > IRQ (por defecto)
 c10be6c:	e3a03771 	mov	r3, #29622272	; 0x1c40000
 c10be70:	e3a0216e 	mov	r2, #-2147483621	; 0x8000001b
 c10be74:	e5832000 	str	r2, [r3]

    SYSCFG = 0x0; //Cache deshabilitada
 c10be78:	e3a03507 	mov	r3, #29360128	; 0x1c00000
 c10be7c:	e3a02000 	mov	r2, #0
 c10be80:	e5832000 	str	r2, [r3]
    I_PMST = 0x1F1B; // mGA > mGB > mGC > mGD y EINT0 > EINT1 > EINT2 > EINT3
 c10be84:	e59f30ac 	ldr	r3, [pc, #172]	; c10bf38 <sys_init+0x120>
 c10be88:	e59f20ac 	ldr	r2, [pc, #172]	; c10bf3c <sys_init+0x124>
 c10be8c:	e5832000 	str	r2, [r3]
    I_PSLV = 0x1B1B1B1B; //URxD0 > URxD1 > IIC > SIO y TIMER0> TIMER1 > TIMER2 > TIMER3 y ZDMA0 > ZDMA1 > BDMA0 > BDMA1
 c10be90:	e59f30a8 	ldr	r3, [pc, #168]	; c10bf40 <sys_init+0x128>
 c10be94:	e59f20a8 	ldr	r2, [pc, #168]	; c10bf44 <sys_init+0x12c>
 c10be98:	e5832000 	str	r2, [r3]
    INTMOD = 0x0; // IRQ habilitado y FIQ deshabilitado
 c10be9c:	e59f30a4 	ldr	r3, [pc, #164]	; c10bf48 <sys_init+0x130>
 c10bea0:	e3a02000 	mov	r2, #0
 c10bea4:	e5832000 	str	r2, [r3]
    install_dummy_isr();//Instala RTI por defecto a todas los tipos de interrupción
 c10bea8:	eb00008c 	bl	c10c0e0 <install_dummy_isr>
    EXTINTPND = ~(0);//Borra todas las interrupciones pendientes
 c10beac:	e59f3098 	ldr	r3, [pc, #152]	; c10bf4c <sys_init+0x134>
 c10beb0:	e3e02000 	mvn	r2, #0
 c10beb4:	e5832000 	str	r2, [r3]
    I_ISPC = ~(0);//Borra interrupciones externas pendientes por  la línea EINT[7:4]
 c10beb8:	e59f3090 	ldr	r3, [pc, #144]	; c10bf50 <sys_init+0x138>
 c10bebc:	e3e02000 	mvn	r2, #0
 c10bec0:	e5832000 	str	r2, [r3]
    INTCON = 0x1;
 c10bec4:	e3a0361e 	mov	r3, #31457280	; 0x1e00000
 c10bec8:	e3a02001 	mov	r2, #1
 c10becc:	e5832000 	str	r2, [r3]

    SET_OPMODE(SVCMODE);//Pone el procesador en modo SVC
 c10bed0:	e10f0000 	mrs	r0, CPSR
 c10bed4:	e3c0001f 	bic	r0, r0, #31
 c10bed8:	e3800013 	orr	r0, r0, #19
 c10bedc:	e121f000 	msr	CPSR_c, r0
    SET_IRQFLAG(0);//Habilita en el procesador las interrupciones IRQ
 c10bee0:	e10f0000 	mrs	r0, CPSR
 c10bee4:	e3c00080 	bic	r0, r0, #128	; 0x80
 c10bee8:	e3800000 	orr	r0, r0, #0
 c10beec:	e121f000 	msr	CPSR_c, r0
    SET_FIQFLAG(1);//Deshabilita en el procesador las interrupciones FIQ
 c10bef0:	e10f0000 	mrs	r0, CPSR
 c10bef4:	e3c00040 	bic	r0, r0, #64	; 0x40
 c10bef8:	e3800040 	orr	r0, r0, #64	; 0x40
 c10befc:	e121f000 	msr	CPSR_c, r0

    port_init();
 c10bf00:	eb000013 	bl	c10bf54 <port_init>
    uart0_init();
 c10bf04:	eb00050c 	bl	c10d33c <uart0_init>

    show_sys_info();
 c10bf08:	eb00027a 	bl	c10c8f8 <show_sys_info>

}
 c10bf0c:	e24bd00c 	sub	sp, fp, #12
 c10bf10:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10bf14:	e12fff1e 	bx	lr
 c10bf18:	01d30000 	.word	0x01d30000
 c10bf1c:	01e0000c 	.word	0x01e0000c
 c10bf20:	01d8000c 	.word	0x01d8000c
 c10bf24:	00000fff 	.word	0x00000fff
 c10bf28:	00038021 	.word	0x00038021
 c10bf2c:	01d80008 	.word	0x01d80008
 c10bf30:	01d80004 	.word	0x01d80004
 c10bf34:	00007ff8 	.word	0x00007ff8
 c10bf38:	01e00014 	.word	0x01e00014
 c10bf3c:	00001f1b 	.word	0x00001f1b
 c10bf40:	01e00010 	.word	0x01e00010
 c10bf44:	1b1b1b1b 	.word	0x1b1b1b1b
 c10bf48:	01e00008 	.word	0x01e00008
 c10bf4c:	01d20054 	.word	0x01d20054
 c10bf50:	01e00024 	.word	0x01e00024

0c10bf54 <port_init>:

static void port_init( void )
{
 c10bf54:	e1a0c00d 	mov	ip, sp
 c10bf58:	e92dd800 	push	{fp, ip, lr, pc}
 c10bf5c:	e24cb004 	sub	fp, ip, #4
	//Inicializa los 22 registros mapeados en memoria del controlador interno de puertos de E/S
    PDATA = ~0;
 c10bf60:	e59f3100 	ldr	r3, [pc, #256]	; c10c068 <port_init+0x114>
 c10bf64:	e3e02000 	mvn	r2, #0
 c10bf68:	e5832000 	str	r2, [r3]
    PCONA = 0xFE;
 c10bf6c:	e59f30f8 	ldr	r3, [pc, #248]	; c10c06c <port_init+0x118>
 c10bf70:	e3a020fe 	mov	r2, #254	; 0xfe
 c10bf74:	e5832000 	str	r2, [r3]

    PDATB = ~0;
 c10bf78:	e59f30f0 	ldr	r3, [pc, #240]	; c10c070 <port_init+0x11c>
 c10bf7c:	e3e02000 	mvn	r2, #0
 c10bf80:	e5832000 	str	r2, [r3]
    PCONB = 0x14F;
 c10bf84:	e59f30e8 	ldr	r3, [pc, #232]	; c10c074 <port_init+0x120>
 c10bf88:	e59f20e8 	ldr	r2, [pc, #232]	; c10c078 <port_init+0x124>
 c10bf8c:	e5832000 	str	r2, [r3]

    PDATC = ~0;
 c10bf90:	e59f30e4 	ldr	r3, [pc, #228]	; c10c07c <port_init+0x128>
 c10bf94:	e3e02000 	mvn	r2, #0
 c10bf98:	e5832000 	str	r2, [r3]
    PCONC = 0x5FF555FF;
 c10bf9c:	e59f30dc 	ldr	r3, [pc, #220]	; c10c080 <port_init+0x12c>
 c10bfa0:	e59f20dc 	ldr	r2, [pc, #220]	; c10c084 <port_init+0x130>
 c10bfa4:	e5832000 	str	r2, [r3]
    PUPC = 0x94FB;
 c10bfa8:	e59f30d8 	ldr	r3, [pc, #216]	; c10c088 <port_init+0x134>
 c10bfac:	e59f20d8 	ldr	r2, [pc, #216]	; c10c08c <port_init+0x138>
 c10bfb0:	e5832000 	str	r2, [r3]

    PDATD = ~0;
 c10bfb4:	e59f30d4 	ldr	r3, [pc, #212]	; c10c090 <port_init+0x13c>
 c10bfb8:	e3e02000 	mvn	r2, #0
 c10bfbc:	e5832000 	str	r2, [r3]
    PCOND = 0xAAAA;
 c10bfc0:	e59f30cc 	ldr	r3, [pc, #204]	; c10c094 <port_init+0x140>
 c10bfc4:	e59f20cc 	ldr	r2, [pc, #204]	; c10c098 <port_init+0x144>
 c10bfc8:	e5832000 	str	r2, [r3]
    PUPD = 0xFF;
 c10bfcc:	e59f30c8 	ldr	r3, [pc, #200]	; c10c09c <port_init+0x148>
 c10bfd0:	e3a020ff 	mov	r2, #255	; 0xff
 c10bfd4:	e5832000 	str	r2, [r3]

    PDATE = ~0;
 c10bfd8:	e59f30c0 	ldr	r3, [pc, #192]	; c10c0a0 <port_init+0x14c>
 c10bfdc:	e3e02000 	mvn	r2, #0
 c10bfe0:	e5832000 	str	r2, [r3]
    PCONE = 0x255A9;
 c10bfe4:	e59f30b8 	ldr	r3, [pc, #184]	; c10c0a4 <port_init+0x150>
 c10bfe8:	e59f20b8 	ldr	r2, [pc, #184]	; c10c0a8 <port_init+0x154>
 c10bfec:	e5832000 	str	r2, [r3]
    PUPE = 0x1FB;
 c10bff0:	e59f30b4 	ldr	r3, [pc, #180]	; c10c0ac <port_init+0x158>
 c10bff4:	e59f20b4 	ldr	r2, [pc, #180]	; c10c0b0 <port_init+0x15c>
 c10bff8:	e5832000 	str	r2, [r3]

    PDATF = ~0;
 c10bffc:	e59f30b0 	ldr	r3, [pc, #176]	; c10c0b4 <port_init+0x160>
 c10c000:	e3e02000 	mvn	r2, #0
 c10c004:	e5832000 	str	r2, [r3]
    PCONF = 0x251A;
 c10c008:	e59f30a8 	ldr	r3, [pc, #168]	; c10c0b8 <port_init+0x164>
 c10c00c:	e59f20a8 	ldr	r2, [pc, #168]	; c10c0bc <port_init+0x168>
 c10c010:	e5832000 	str	r2, [r3]
    PUPF = 0x74;
 c10c014:	e59f30a4 	ldr	r3, [pc, #164]	; c10c0c0 <port_init+0x16c>
 c10c018:	e3a02074 	mov	r2, #116	; 0x74
 c10c01c:	e5832000 	str	r2, [r3]

    PDATG = ~0;
 c10c020:	e59f309c 	ldr	r3, [pc, #156]	; c10c0c4 <port_init+0x170>
 c10c024:	e3e02000 	mvn	r2, #0
 c10c028:	e5832000 	str	r2, [r3]
    PCONG = 0xF5FF;
 c10c02c:	e59f3094 	ldr	r3, [pc, #148]	; c10c0c8 <port_init+0x174>
 c10c030:	e59f2094 	ldr	r2, [pc, #148]	; c10c0cc <port_init+0x178>
 c10c034:	e5832000 	str	r2, [r3]
    PUPG = 0x30;
 c10c038:	e59f3090 	ldr	r3, [pc, #144]	; c10c0d0 <port_init+0x17c>
 c10c03c:	e3a02030 	mov	r2, #48	; 0x30
 c10c040:	e5832000 	str	r2, [r3]

    SPUCR = 0x7;
 c10c044:	e59f3088 	ldr	r3, [pc, #136]	; c10c0d4 <port_init+0x180>
 c10c048:	e3a02007 	mov	r2, #7
 c10c04c:	e5832000 	str	r2, [r3]

    EXTINT = 0x22000220;
 c10c050:	e59f3080 	ldr	r3, [pc, #128]	; c10c0d8 <port_init+0x184>
 c10c054:	e59f2080 	ldr	r2, [pc, #128]	; c10c0dc <port_init+0x188>
 c10c058:	e5832000 	str	r2, [r3]

}
 c10c05c:	e24bd00c 	sub	sp, fp, #12
 c10c060:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10c064:	e12fff1e 	bx	lr
 c10c068:	01d20004 	.word	0x01d20004
 c10c06c:	01d20000 	.word	0x01d20000
 c10c070:	01d2000c 	.word	0x01d2000c
 c10c074:	01d20008 	.word	0x01d20008
 c10c078:	0000014f 	.word	0x0000014f
 c10c07c:	01d20014 	.word	0x01d20014
 c10c080:	01d20010 	.word	0x01d20010
 c10c084:	5ff555ff 	.word	0x5ff555ff
 c10c088:	01d20018 	.word	0x01d20018
 c10c08c:	000094fb 	.word	0x000094fb
 c10c090:	01d20020 	.word	0x01d20020
 c10c094:	01d2001c 	.word	0x01d2001c
 c10c098:	0000aaaa 	.word	0x0000aaaa
 c10c09c:	01d20024 	.word	0x01d20024
 c10c0a0:	01d2002c 	.word	0x01d2002c
 c10c0a4:	01d20028 	.word	0x01d20028
 c10c0a8:	000255a9 	.word	0x000255a9
 c10c0ac:	01d20030 	.word	0x01d20030
 c10c0b0:	000001fb 	.word	0x000001fb
 c10c0b4:	01d20038 	.word	0x01d20038
 c10c0b8:	01d20034 	.word	0x01d20034
 c10c0bc:	0000251a 	.word	0x0000251a
 c10c0c0:	01d2003c 	.word	0x01d2003c
 c10c0c4:	01d20044 	.word	0x01d20044
 c10c0c8:	01d20040 	.word	0x01d20040
 c10c0cc:	0000f5ff 	.word	0x0000f5ff
 c10c0d0:	01d20048 	.word	0x01d20048
 c10c0d4:	01d2004c 	.word	0x01d2004c
 c10c0d8:	01d20050 	.word	0x01d20050
 c10c0dc:	22000220 	.word	0x22000220

0c10c0e0 <install_dummy_isr>:

static void install_dummy_isr( void )
{ //Instala cada RTI en su lugar de la tabla virtual de vectores de IRQ (véase s3cev40.h)
 c10c0e0:	e1a0c00d 	mov	ip, sp
 c10c0e4:	e92dd800 	push	{fp, ip, lr, pc}
 c10c0e8:	e24cb004 	sub	fp, ip, #4

    pISR_SWI = (uint32)isr_SWI_dummy;
 c10c0ec:	e59f3184 	ldr	r3, [pc, #388]	; c10c278 <install_dummy_isr+0x198>
 c10c0f0:	e59f2184 	ldr	r2, [pc, #388]	; c10c27c <install_dummy_isr+0x19c>
 c10c0f4:	e5832000 	str	r2, [r3]
    pISR_UNDEF = (uint32)isr_UNDEF_dummy;
 c10c0f8:	e59f3180 	ldr	r3, [pc, #384]	; c10c280 <install_dummy_isr+0x1a0>
 c10c0fc:	e59f2180 	ldr	r2, [pc, #384]	; c10c284 <install_dummy_isr+0x1a4>
 c10c100:	e5832000 	str	r2, [r3]
    pISR_IRQ = (uint32)isr_IRQ_dummy;
 c10c104:	e59f317c 	ldr	r3, [pc, #380]	; c10c288 <install_dummy_isr+0x1a8>
 c10c108:	e59f217c 	ldr	r2, [pc, #380]	; c10c28c <install_dummy_isr+0x1ac>
 c10c10c:	e5832000 	str	r2, [r3]
    pISR_FIQ = (uint32)isr_FIQ_dummy;
 c10c110:	e59f3178 	ldr	r3, [pc, #376]	; c10c290 <install_dummy_isr+0x1b0>
 c10c114:	e59f2178 	ldr	r2, [pc, #376]	; c10c294 <install_dummy_isr+0x1b4>
 c10c118:	e5832000 	str	r2, [r3]
    pISR_PABORT = (uint32)isr_PABORT_dummy;
 c10c11c:	e59f3174 	ldr	r3, [pc, #372]	; c10c298 <install_dummy_isr+0x1b8>
 c10c120:	e59f2174 	ldr	r2, [pc, #372]	; c10c29c <install_dummy_isr+0x1bc>
 c10c124:	e5832000 	str	r2, [r3]
    pISR_DABORT = (uint32)isr_DABORT_dummy;
 c10c128:	e59f3170 	ldr	r3, [pc, #368]	; c10c2a0 <install_dummy_isr+0x1c0>
 c10c12c:	e59f2170 	ldr	r2, [pc, #368]	; c10c2a4 <install_dummy_isr+0x1c4>
 c10c130:	e5832000 	str	r2, [r3]
    pISR_ADC = (uint32)isr_ADC_dummy;
 c10c134:	e59f316c 	ldr	r3, [pc, #364]	; c10c2a8 <install_dummy_isr+0x1c8>
 c10c138:	e59f216c 	ldr	r2, [pc, #364]	; c10c2ac <install_dummy_isr+0x1cc>
 c10c13c:	e5832000 	str	r2, [r3]
    pISR_RTC = (uint32)isr_RTC_dummy;
 c10c140:	e59f3168 	ldr	r3, [pc, #360]	; c10c2b0 <install_dummy_isr+0x1d0>
 c10c144:	e59f2168 	ldr	r2, [pc, #360]	; c10c2b4 <install_dummy_isr+0x1d4>
 c10c148:	e5832000 	str	r2, [r3]
    pISR_UTXD1 = (uint32)isr_UTXD1_dummy;
 c10c14c:	e59f3164 	ldr	r3, [pc, #356]	; c10c2b8 <install_dummy_isr+0x1d8>
 c10c150:	e59f2164 	ldr	r2, [pc, #356]	; c10c2bc <install_dummy_isr+0x1dc>
 c10c154:	e5832000 	str	r2, [r3]
    pISR_UTXD0 = (uint32)isr_UTXD0_dummy;
 c10c158:	e59f3160 	ldr	r3, [pc, #352]	; c10c2c0 <install_dummy_isr+0x1e0>
 c10c15c:	e59f2160 	ldr	r2, [pc, #352]	; c10c2c4 <install_dummy_isr+0x1e4>
 c10c160:	e5832000 	str	r2, [r3]
    pISR_SIO = (uint32)isr_SIO_dummy;
 c10c164:	e59f315c 	ldr	r3, [pc, #348]	; c10c2c8 <install_dummy_isr+0x1e8>
 c10c168:	e59f215c 	ldr	r2, [pc, #348]	; c10c2cc <install_dummy_isr+0x1ec>
 c10c16c:	e5832000 	str	r2, [r3]
    pISR_IIC = (uint32)isr_IIC_dummy;
 c10c170:	e59f3158 	ldr	r3, [pc, #344]	; c10c2d0 <install_dummy_isr+0x1f0>
 c10c174:	e59f2158 	ldr	r2, [pc, #344]	; c10c2d4 <install_dummy_isr+0x1f4>
 c10c178:	e5832000 	str	r2, [r3]
    pISR_URXD1 = (uint32)isr_URXD1_dummy;
 c10c17c:	e59f3154 	ldr	r3, [pc, #340]	; c10c2d8 <install_dummy_isr+0x1f8>
 c10c180:	e59f2154 	ldr	r2, [pc, #340]	; c10c2dc <install_dummy_isr+0x1fc>
 c10c184:	e5832000 	str	r2, [r3]
    pISR_URXD0 = (uint32)isr_URXD0_dummy;
 c10c188:	e59f3150 	ldr	r3, [pc, #336]	; c10c2e0 <install_dummy_isr+0x200>
 c10c18c:	e59f2150 	ldr	r2, [pc, #336]	; c10c2e4 <install_dummy_isr+0x204>
 c10c190:	e5832000 	str	r2, [r3]
    pISR_TIMER5 = (uint32)isr_TIMER5_dummy;
 c10c194:	e59f314c 	ldr	r3, [pc, #332]	; c10c2e8 <install_dummy_isr+0x208>
 c10c198:	e59f214c 	ldr	r2, [pc, #332]	; c10c2ec <install_dummy_isr+0x20c>
 c10c19c:	e5832000 	str	r2, [r3]
    pISR_TIMER4 = (uint32)isr_TIMER4_dummy;
 c10c1a0:	e59f3148 	ldr	r3, [pc, #328]	; c10c2f0 <install_dummy_isr+0x210>
 c10c1a4:	e59f2148 	ldr	r2, [pc, #328]	; c10c2f4 <install_dummy_isr+0x214>
 c10c1a8:	e5832000 	str	r2, [r3]
    pISR_TIMER3 = (uint32)isr_TIMER3_dummy;
 c10c1ac:	e59f3144 	ldr	r3, [pc, #324]	; c10c2f8 <install_dummy_isr+0x218>
 c10c1b0:	e59f2144 	ldr	r2, [pc, #324]	; c10c2fc <install_dummy_isr+0x21c>
 c10c1b4:	e5832000 	str	r2, [r3]
    pISR_TIMER2 = (uint32)isr_TIMER2_dummy;
 c10c1b8:	e59f3140 	ldr	r3, [pc, #320]	; c10c300 <install_dummy_isr+0x220>
 c10c1bc:	e59f2140 	ldr	r2, [pc, #320]	; c10c304 <install_dummy_isr+0x224>
 c10c1c0:	e5832000 	str	r2, [r3]
    pISR_TIMER1 = (uint32)isr_TIMER1_dummy;
 c10c1c4:	e59f313c 	ldr	r3, [pc, #316]	; c10c308 <install_dummy_isr+0x228>
 c10c1c8:	e59f213c 	ldr	r2, [pc, #316]	; c10c30c <install_dummy_isr+0x22c>
 c10c1cc:	e5832000 	str	r2, [r3]
    pISR_TIMER0 = (uint32)isr_TIMER0_dummy;
 c10c1d0:	e59f3138 	ldr	r3, [pc, #312]	; c10c310 <install_dummy_isr+0x230>
 c10c1d4:	e59f2138 	ldr	r2, [pc, #312]	; c10c314 <install_dummy_isr+0x234>
 c10c1d8:	e5832000 	str	r2, [r3]
    pISR_UERR01 = (uint32)isr_UERR01_dummy;
 c10c1dc:	e59f3134 	ldr	r3, [pc, #308]	; c10c318 <install_dummy_isr+0x238>
 c10c1e0:	e59f2134 	ldr	r2, [pc, #308]	; c10c31c <install_dummy_isr+0x23c>
 c10c1e4:	e5832000 	str	r2, [r3]
    pISR_WDT = (uint32)isr_WDT_dummy;
 c10c1e8:	e59f3130 	ldr	r3, [pc, #304]	; c10c320 <install_dummy_isr+0x240>
 c10c1ec:	e59f2130 	ldr	r2, [pc, #304]	; c10c324 <install_dummy_isr+0x244>
 c10c1f0:	e5832000 	str	r2, [r3]
    pISR_BDMA1 = (uint32)isr_BDMA1_dummy;
 c10c1f4:	e59f312c 	ldr	r3, [pc, #300]	; c10c328 <install_dummy_isr+0x248>
 c10c1f8:	e59f212c 	ldr	r2, [pc, #300]	; c10c32c <install_dummy_isr+0x24c>
 c10c1fc:	e5832000 	str	r2, [r3]
    pISR_BDMA0 = (uint32)isr_BDMA0_dummy;
 c10c200:	e59f3128 	ldr	r3, [pc, #296]	; c10c330 <install_dummy_isr+0x250>
 c10c204:	e59f2128 	ldr	r2, [pc, #296]	; c10c334 <install_dummy_isr+0x254>
 c10c208:	e5832000 	str	r2, [r3]
    pISR_ZDMA1 = (uint32)isr_ZDMA1_dummy;
 c10c20c:	e59f3124 	ldr	r3, [pc, #292]	; c10c338 <install_dummy_isr+0x258>
 c10c210:	e59f2124 	ldr	r2, [pc, #292]	; c10c33c <install_dummy_isr+0x25c>
 c10c214:	e5832000 	str	r2, [r3]
    pISR_ZDMA0 = (uint32)isr_ZDMA0_dummy;
 c10c218:	e59f3120 	ldr	r3, [pc, #288]	; c10c340 <install_dummy_isr+0x260>
 c10c21c:	e59f2120 	ldr	r2, [pc, #288]	; c10c344 <install_dummy_isr+0x264>
 c10c220:	e5832000 	str	r2, [r3]
    pISR_TICK = (uint32)isr_TICK_dummy;
 c10c224:	e59f311c 	ldr	r3, [pc, #284]	; c10c348 <install_dummy_isr+0x268>
 c10c228:	e59f211c 	ldr	r2, [pc, #284]	; c10c34c <install_dummy_isr+0x26c>
 c10c22c:	e5832000 	str	r2, [r3]
    pISR_PB = (uint32)isr_PB_dummy;
 c10c230:	e59f3118 	ldr	r3, [pc, #280]	; c10c350 <install_dummy_isr+0x270>
 c10c234:	e59f2118 	ldr	r2, [pc, #280]	; c10c354 <install_dummy_isr+0x274>
 c10c238:	e5832000 	str	r2, [r3]
    pISR_ETHERNET = (uint32)isr_ETHERNET_dummy;
 c10c23c:	e59f3114 	ldr	r3, [pc, #276]	; c10c358 <install_dummy_isr+0x278>
 c10c240:	e59f2114 	ldr	r2, [pc, #276]	; c10c35c <install_dummy_isr+0x27c>
 c10c244:	e5832000 	str	r2, [r3]
    pISR_TS = (uint32)isr_TS_dummy;
 c10c248:	e59f3110 	ldr	r3, [pc, #272]	; c10c360 <install_dummy_isr+0x280>
 c10c24c:	e59f2110 	ldr	r2, [pc, #272]	; c10c364 <install_dummy_isr+0x284>
 c10c250:	e5832000 	str	r2, [r3]
    pISR_KEYPAD = (uint32)isr_KEYPAD_dummy;
 c10c254:	e59f310c 	ldr	r3, [pc, #268]	; c10c368 <install_dummy_isr+0x288>
 c10c258:	e59f210c 	ldr	r2, [pc, #268]	; c10c36c <install_dummy_isr+0x28c>
 c10c25c:	e5832000 	str	r2, [r3]
    pISR_USB = (uint32)isr_USB_dummy;
 c10c260:	e59f3108 	ldr	r3, [pc, #264]	; c10c370 <install_dummy_isr+0x290>
 c10c264:	e59f2108 	ldr	r2, [pc, #264]	; c10c374 <install_dummy_isr+0x294>
 c10c268:	e5832000 	str	r2, [r3]

}        
 c10c26c:	e24bd00c 	sub	sp, fp, #12
 c10c270:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10c274:	e12fff1e 	bx	lr
 c10c278:	0c7fff08 	.word	0x0c7fff08
 c10c27c:	0c10c378 	.word	0x0c10c378
 c10c280:	0c7fff04 	.word	0x0c7fff04
 c10c284:	0c10c3a4 	.word	0x0c10c3a4
 c10c288:	0c7fff18 	.word	0x0c7fff18
 c10c28c:	0c10c3d0 	.word	0x0c10c3d0
 c10c290:	0c7fff1c 	.word	0x0c7fff1c
 c10c294:	0c10c3fc 	.word	0x0c10c3fc
 c10c298:	0c7fff0c 	.word	0x0c7fff0c
 c10c29c:	0c10c428 	.word	0x0c10c428
 c10c2a0:	0c7fff10 	.word	0x0c7fff10
 c10c2a4:	0c10c454 	.word	0x0c10c454
 c10c2a8:	0c7fff20 	.word	0x0c7fff20
 c10c2ac:	0c10c480 	.word	0x0c10c480
 c10c2b0:	0c7fff24 	.word	0x0c7fff24
 c10c2b4:	0c10c4ac 	.word	0x0c10c4ac
 c10c2b8:	0c7fff28 	.word	0x0c7fff28
 c10c2bc:	0c10c4d8 	.word	0x0c10c4d8
 c10c2c0:	0c7fff2c 	.word	0x0c7fff2c
 c10c2c4:	0c10c504 	.word	0x0c10c504
 c10c2c8:	0c7fff30 	.word	0x0c7fff30
 c10c2cc:	0c10c530 	.word	0x0c10c530
 c10c2d0:	0c7fff34 	.word	0x0c7fff34
 c10c2d4:	0c10c55c 	.word	0x0c10c55c
 c10c2d8:	0c7fff38 	.word	0x0c7fff38
 c10c2dc:	0c10c588 	.word	0x0c10c588
 c10c2e0:	0c7fff3c 	.word	0x0c7fff3c
 c10c2e4:	0c10c5b4 	.word	0x0c10c5b4
 c10c2e8:	0c7fff40 	.word	0x0c7fff40
 c10c2ec:	0c10c5e0 	.word	0x0c10c5e0
 c10c2f0:	0c7fff44 	.word	0x0c7fff44
 c10c2f4:	0c10c60c 	.word	0x0c10c60c
 c10c2f8:	0c7fff48 	.word	0x0c7fff48
 c10c2fc:	0c10c638 	.word	0x0c10c638
 c10c300:	0c7fff4c 	.word	0x0c7fff4c
 c10c304:	0c10c664 	.word	0x0c10c664
 c10c308:	0c7fff50 	.word	0x0c7fff50
 c10c30c:	0c10c690 	.word	0x0c10c690
 c10c310:	0c7fff54 	.word	0x0c7fff54
 c10c314:	0c10c6bc 	.word	0x0c10c6bc
 c10c318:	0c7fff58 	.word	0x0c7fff58
 c10c31c:	0c10c6e8 	.word	0x0c10c6e8
 c10c320:	0c7fff5c 	.word	0x0c7fff5c
 c10c324:	0c10c714 	.word	0x0c10c714
 c10c328:	0c7fff60 	.word	0x0c7fff60
 c10c32c:	0c10c740 	.word	0x0c10c740
 c10c330:	0c7fff64 	.word	0x0c7fff64
 c10c334:	0c10c76c 	.word	0x0c10c76c
 c10c338:	0c7fff68 	.word	0x0c7fff68
 c10c33c:	0c10c798 	.word	0x0c10c798
 c10c340:	0c7fff6c 	.word	0x0c7fff6c
 c10c344:	0c10c7c4 	.word	0x0c10c7c4
 c10c348:	0c7fff70 	.word	0x0c7fff70
 c10c34c:	0c10c7f0 	.word	0x0c10c7f0
 c10c350:	0c7fff74 	.word	0x0c7fff74
 c10c354:	0c10c81c 	.word	0x0c10c81c
 c10c358:	0c7fff78 	.word	0x0c7fff78
 c10c35c:	0c10c848 	.word	0x0c10c848
 c10c360:	0c7fff7c 	.word	0x0c7fff7c
 c10c364:	0c10c874 	.word	0x0c10c874
 c10c368:	0c7fff80 	.word	0x0c7fff80
 c10c36c:	0c10c8a0 	.word	0x0c10c8a0
 c10c370:	0c7fff84 	.word	0x0c7fff84
 c10c374:	0c10c8cc 	.word	0x0c10c8cc

0c10c378 <isr_SWI_dummy>:

void isr_SWI_dummy( void ) //Cada RTI muestra algún mensaje de error y bloquea el sistema
{
 c10c378:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c10c37c:	e1a0c00d 	mov	ip, sp
 c10c380:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c10c384:	e24cb004 	sub	fp, ip, #4
    uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_SWI_dummy");
 c10c388:	e59f0010 	ldr	r0, [pc, #16]	; c10c3a0 <isr_SWI_dummy+0x28>
 c10c38c:	eb000429 	bl	c10d438 <uart0_puts>
    SEGS = 0x75;
 c10c390:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c10c394:	e3a02075 	mov	r2, #117	; 0x75
 c10c398:	e5c32000 	strb	r2, [r3]
    while (1);
 c10c39c:	eafffffe 	b	c10c39c <isr_SWI_dummy+0x24>
 c10c3a0:	0c10e61c 	.word	0x0c10e61c

0c10c3a4 <isr_UNDEF_dummy>:
}

void isr_UNDEF_dummy( void )
{
 c10c3a4:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c10c3a8:	e1a0c00d 	mov	ip, sp
 c10c3ac:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c10c3b0:	e24cb004 	sub	fp, ip, #4
    uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_UNDEF_dummy");
 c10c3b4:	e59f0010 	ldr	r0, [pc, #16]	; c10c3cc <isr_UNDEF_dummy+0x28>
 c10c3b8:	eb00041e 	bl	c10d438 <uart0_puts>
    SEGS = 0x75;
 c10c3bc:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c10c3c0:	e3a02075 	mov	r2, #117	; 0x75
 c10c3c4:	e5c32000 	strb	r2, [r3]
    while (1);
 c10c3c8:	eafffffe 	b	c10c3c8 <isr_UNDEF_dummy+0x24>
 c10c3cc:	0c10e648 	.word	0x0c10e648

0c10c3d0 <isr_IRQ_dummy>:
}

void isr_IRQ_dummy( void )
{
 c10c3d0:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c10c3d4:	e1a0c00d 	mov	ip, sp
 c10c3d8:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c10c3dc:	e24cb004 	sub	fp, ip, #4
    uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_IRQ_dummy");
 c10c3e0:	e59f0010 	ldr	r0, [pc, #16]	; c10c3f8 <isr_IRQ_dummy+0x28>
 c10c3e4:	eb000413 	bl	c10d438 <uart0_puts>
    SEGS = 0x75;
 c10c3e8:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c10c3ec:	e3a02075 	mov	r2, #117	; 0x75
 c10c3f0:	e5c32000 	strb	r2, [r3]
    while (1);
 c10c3f4:	eafffffe 	b	c10c3f4 <isr_IRQ_dummy+0x24>
 c10c3f8:	0c10e678 	.word	0x0c10e678

0c10c3fc <isr_FIQ_dummy>:
}

void isr_FIQ_dummy( void )
{
 c10c3fc:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c10c400:	e1a0c00d 	mov	ip, sp
 c10c404:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c10c408:	e24cb004 	sub	fp, ip, #4
    uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_FIQ_dummy");
 c10c40c:	e59f0010 	ldr	r0, [pc, #16]	; c10c424 <isr_FIQ_dummy+0x28>
 c10c410:	eb000408 	bl	c10d438 <uart0_puts>
    SEGS = 0x75;
 c10c414:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c10c418:	e3a02075 	mov	r2, #117	; 0x75
 c10c41c:	e5c32000 	strb	r2, [r3]
    while (1);
 c10c420:	eafffffe 	b	c10c420 <isr_FIQ_dummy+0x24>
 c10c424:	0c10e6a4 	.word	0x0c10e6a4

0c10c428 <isr_PABORT_dummy>:
}

void isr_PABORT_dummy( void )
{
 c10c428:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c10c42c:	e1a0c00d 	mov	ip, sp
 c10c430:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c10c434:	e24cb004 	sub	fp, ip, #4
	uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_PABORT_dummy");
 c10c438:	e59f0010 	ldr	r0, [pc, #16]	; c10c450 <isr_PABORT_dummy+0x28>
 c10c43c:	eb0003fd 	bl	c10d438 <uart0_puts>
    SEGS = 0x75;
 c10c440:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c10c444:	e3a02075 	mov	r2, #117	; 0x75
 c10c448:	e5c32000 	strb	r2, [r3]
    while (1);
 c10c44c:	eafffffe 	b	c10c44c <isr_PABORT_dummy+0x24>
 c10c450:	0c10e6d0 	.word	0x0c10e6d0

0c10c454 <isr_DABORT_dummy>:
}

void isr_DABORT_dummy( void )
{
 c10c454:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c10c458:	e1a0c00d 	mov	ip, sp
 c10c45c:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c10c460:	e24cb004 	sub	fp, ip, #4
    uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_DABORT_dummy");
 c10c464:	e59f0010 	ldr	r0, [pc, #16]	; c10c47c <isr_DABORT_dummy+0x28>
 c10c468:	eb0003f2 	bl	c10d438 <uart0_puts>
    SEGS = 0x75;
 c10c46c:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c10c470:	e3a02075 	mov	r2, #117	; 0x75
 c10c474:	e5c32000 	strb	r2, [r3]
    while (1);
 c10c478:	eafffffe 	b	c10c478 <isr_DABORT_dummy+0x24>
 c10c47c:	0c10e700 	.word	0x0c10e700

0c10c480 <isr_ADC_dummy>:
}

void isr_ADC_dummy( void )
{
 c10c480:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c10c484:	e1a0c00d 	mov	ip, sp
 c10c488:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c10c48c:	e24cb004 	sub	fp, ip, #4
    uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_ADC_dummy");
 c10c490:	e59f0010 	ldr	r0, [pc, #16]	; c10c4a8 <isr_ADC_dummy+0x28>
 c10c494:	eb0003e7 	bl	c10d438 <uart0_puts>
    SEGS = 0x75;
 c10c498:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c10c49c:	e3a02075 	mov	r2, #117	; 0x75
 c10c4a0:	e5c32000 	strb	r2, [r3]
    while (1);
 c10c4a4:	eafffffe 	b	c10c4a4 <isr_ADC_dummy+0x24>
 c10c4a8:	0c10e730 	.word	0x0c10e730

0c10c4ac <isr_RTC_dummy>:
}

void isr_RTC_dummy( void )
{
 c10c4ac:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c10c4b0:	e1a0c00d 	mov	ip, sp
 c10c4b4:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c10c4b8:	e24cb004 	sub	fp, ip, #4
    uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_RTC_dummy");
 c10c4bc:	e59f0010 	ldr	r0, [pc, #16]	; c10c4d4 <isr_RTC_dummy+0x28>
 c10c4c0:	eb0003dc 	bl	c10d438 <uart0_puts>
    SEGS = 0x75;
 c10c4c4:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c10c4c8:	e3a02075 	mov	r2, #117	; 0x75
 c10c4cc:	e5c32000 	strb	r2, [r3]
    while (1);
 c10c4d0:	eafffffe 	b	c10c4d0 <isr_RTC_dummy+0x24>
 c10c4d4:	0c10e75c 	.word	0x0c10e75c

0c10c4d8 <isr_UTXD1_dummy>:
}

void isr_UTXD1_dummy( void )
{
 c10c4d8:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c10c4dc:	e1a0c00d 	mov	ip, sp
 c10c4e0:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c10c4e4:	e24cb004 	sub	fp, ip, #4
    uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_UTXD1_dummy");
 c10c4e8:	e59f0010 	ldr	r0, [pc, #16]	; c10c500 <isr_UTXD1_dummy+0x28>
 c10c4ec:	eb0003d1 	bl	c10d438 <uart0_puts>
    SEGS = 0x75;
 c10c4f0:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c10c4f4:	e3a02075 	mov	r2, #117	; 0x75
 c10c4f8:	e5c32000 	strb	r2, [r3]
    while (1);
 c10c4fc:	eafffffe 	b	c10c4fc <isr_UTXD1_dummy+0x24>
 c10c500:	0c10e788 	.word	0x0c10e788

0c10c504 <isr_UTXD0_dummy>:
}

void isr_UTXD0_dummy( void )
{
 c10c504:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c10c508:	e1a0c00d 	mov	ip, sp
 c10c50c:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c10c510:	e24cb004 	sub	fp, ip, #4
	uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_UTXD0_dummy");
 c10c514:	e59f0010 	ldr	r0, [pc, #16]	; c10c52c <isr_UTXD0_dummy+0x28>
 c10c518:	eb0003c6 	bl	c10d438 <uart0_puts>
    SEGS = 0x75;
 c10c51c:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c10c520:	e3a02075 	mov	r2, #117	; 0x75
 c10c524:	e5c32000 	strb	r2, [r3]
    while (1);
 c10c528:	eafffffe 	b	c10c528 <isr_UTXD0_dummy+0x24>
 c10c52c:	0c10e7b8 	.word	0x0c10e7b8

0c10c530 <isr_SIO_dummy>:
}

void isr_SIO_dummy( void )
{
 c10c530:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c10c534:	e1a0c00d 	mov	ip, sp
 c10c538:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c10c53c:	e24cb004 	sub	fp, ip, #4
    uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_SIO_dummy");
 c10c540:	e59f0010 	ldr	r0, [pc, #16]	; c10c558 <isr_SIO_dummy+0x28>
 c10c544:	eb0003bb 	bl	c10d438 <uart0_puts>
    SEGS = 0x75;
 c10c548:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c10c54c:	e3a02075 	mov	r2, #117	; 0x75
 c10c550:	e5c32000 	strb	r2, [r3]
    while (1);
 c10c554:	eafffffe 	b	c10c554 <isr_SIO_dummy+0x24>
 c10c558:	0c10e7e8 	.word	0x0c10e7e8

0c10c55c <isr_IIC_dummy>:
}

void isr_IIC_dummy( void )
{
 c10c55c:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c10c560:	e1a0c00d 	mov	ip, sp
 c10c564:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c10c568:	e24cb004 	sub	fp, ip, #4
    uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_IIC_dummy");
 c10c56c:	e59f0010 	ldr	r0, [pc, #16]	; c10c584 <isr_IIC_dummy+0x28>
 c10c570:	eb0003b0 	bl	c10d438 <uart0_puts>
    SEGS = 0x75;
 c10c574:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c10c578:	e3a02075 	mov	r2, #117	; 0x75
 c10c57c:	e5c32000 	strb	r2, [r3]
    while (1);
 c10c580:	eafffffe 	b	c10c580 <isr_IIC_dummy+0x24>
 c10c584:	0c10e814 	.word	0x0c10e814

0c10c588 <isr_URXD1_dummy>:
}

void isr_URXD1_dummy( void )
{
 c10c588:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c10c58c:	e1a0c00d 	mov	ip, sp
 c10c590:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c10c594:	e24cb004 	sub	fp, ip, #4
	uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_URXD1_dummy");
 c10c598:	e59f0010 	ldr	r0, [pc, #16]	; c10c5b0 <isr_URXD1_dummy+0x28>
 c10c59c:	eb0003a5 	bl	c10d438 <uart0_puts>
    SEGS = 0x75;
 c10c5a0:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c10c5a4:	e3a02075 	mov	r2, #117	; 0x75
 c10c5a8:	e5c32000 	strb	r2, [r3]
    while (1);
 c10c5ac:	eafffffe 	b	c10c5ac <isr_URXD1_dummy+0x24>
 c10c5b0:	0c10e840 	.word	0x0c10e840

0c10c5b4 <isr_URXD0_dummy>:
}

void isr_URXD0_dummy( void )
{
 c10c5b4:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c10c5b8:	e1a0c00d 	mov	ip, sp
 c10c5bc:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c10c5c0:	e24cb004 	sub	fp, ip, #4
    uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_URXD0_dummy");
 c10c5c4:	e59f0010 	ldr	r0, [pc, #16]	; c10c5dc <isr_URXD0_dummy+0x28>
 c10c5c8:	eb00039a 	bl	c10d438 <uart0_puts>
    SEGS = 0x75;
 c10c5cc:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c10c5d0:	e3a02075 	mov	r2, #117	; 0x75
 c10c5d4:	e5c32000 	strb	r2, [r3]
    while (1);
 c10c5d8:	eafffffe 	b	c10c5d8 <isr_URXD0_dummy+0x24>
 c10c5dc:	0c10e870 	.word	0x0c10e870

0c10c5e0 <isr_TIMER5_dummy>:
}

void isr_TIMER5_dummy( void )
{
 c10c5e0:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c10c5e4:	e1a0c00d 	mov	ip, sp
 c10c5e8:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c10c5ec:	e24cb004 	sub	fp, ip, #4
    uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_TIMER5_dummy");
 c10c5f0:	e59f0010 	ldr	r0, [pc, #16]	; c10c608 <isr_TIMER5_dummy+0x28>
 c10c5f4:	eb00038f 	bl	c10d438 <uart0_puts>
    SEGS = 0x75;
 c10c5f8:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c10c5fc:	e3a02075 	mov	r2, #117	; 0x75
 c10c600:	e5c32000 	strb	r2, [r3]
    while (1);
 c10c604:	eafffffe 	b	c10c604 <isr_TIMER5_dummy+0x24>
 c10c608:	0c10e8a0 	.word	0x0c10e8a0

0c10c60c <isr_TIMER4_dummy>:
}

void isr_TIMER4_dummy( void )
{
 c10c60c:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c10c610:	e1a0c00d 	mov	ip, sp
 c10c614:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c10c618:	e24cb004 	sub	fp, ip, #4
    uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_TIMER4_dummy");
 c10c61c:	e59f0010 	ldr	r0, [pc, #16]	; c10c634 <isr_TIMER4_dummy+0x28>
 c10c620:	eb000384 	bl	c10d438 <uart0_puts>
    SEGS = 0x75;
 c10c624:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c10c628:	e3a02075 	mov	r2, #117	; 0x75
 c10c62c:	e5c32000 	strb	r2, [r3]
    while (1);
 c10c630:	eafffffe 	b	c10c630 <isr_TIMER4_dummy+0x24>
 c10c634:	0c10e8d0 	.word	0x0c10e8d0

0c10c638 <isr_TIMER3_dummy>:
}

void isr_TIMER3_dummy( void )
{
 c10c638:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c10c63c:	e1a0c00d 	mov	ip, sp
 c10c640:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c10c644:	e24cb004 	sub	fp, ip, #4
    uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_TIMER3_dummy");
 c10c648:	e59f0010 	ldr	r0, [pc, #16]	; c10c660 <isr_TIMER3_dummy+0x28>
 c10c64c:	eb000379 	bl	c10d438 <uart0_puts>
    SEGS = 0x75;
 c10c650:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c10c654:	e3a02075 	mov	r2, #117	; 0x75
 c10c658:	e5c32000 	strb	r2, [r3]
    while (1);
 c10c65c:	eafffffe 	b	c10c65c <isr_TIMER3_dummy+0x24>
 c10c660:	0c10e900 	.word	0x0c10e900

0c10c664 <isr_TIMER2_dummy>:
}

void isr_TIMER2_dummy( void )
{
 c10c664:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c10c668:	e1a0c00d 	mov	ip, sp
 c10c66c:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c10c670:	e24cb004 	sub	fp, ip, #4
    uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_TIMER2_dummy");
 c10c674:	e59f0010 	ldr	r0, [pc, #16]	; c10c68c <isr_TIMER2_dummy+0x28>
 c10c678:	eb00036e 	bl	c10d438 <uart0_puts>
    SEGS = 0x75;
 c10c67c:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c10c680:	e3a02075 	mov	r2, #117	; 0x75
 c10c684:	e5c32000 	strb	r2, [r3]
    while (1);
 c10c688:	eafffffe 	b	c10c688 <isr_TIMER2_dummy+0x24>
 c10c68c:	0c10e930 	.word	0x0c10e930

0c10c690 <isr_TIMER1_dummy>:
}

void isr_TIMER1_dummy( void )
{
 c10c690:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c10c694:	e1a0c00d 	mov	ip, sp
 c10c698:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c10c69c:	e24cb004 	sub	fp, ip, #4
    uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_TIMER1_dummy");
 c10c6a0:	e59f0010 	ldr	r0, [pc, #16]	; c10c6b8 <isr_TIMER1_dummy+0x28>
 c10c6a4:	eb000363 	bl	c10d438 <uart0_puts>
    SEGS = 0x75;
 c10c6a8:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c10c6ac:	e3a02075 	mov	r2, #117	; 0x75
 c10c6b0:	e5c32000 	strb	r2, [r3]
    while (1);
 c10c6b4:	eafffffe 	b	c10c6b4 <isr_TIMER1_dummy+0x24>
 c10c6b8:	0c10e960 	.word	0x0c10e960

0c10c6bc <isr_TIMER0_dummy>:
}

void isr_TIMER0_dummy( void )
{
 c10c6bc:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c10c6c0:	e1a0c00d 	mov	ip, sp
 c10c6c4:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c10c6c8:	e24cb004 	sub	fp, ip, #4
    uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_TIMER0_dummy");
 c10c6cc:	e59f0010 	ldr	r0, [pc, #16]	; c10c6e4 <isr_TIMER0_dummy+0x28>
 c10c6d0:	eb000358 	bl	c10d438 <uart0_puts>
    SEGS = 0x75;
 c10c6d4:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c10c6d8:	e3a02075 	mov	r2, #117	; 0x75
 c10c6dc:	e5c32000 	strb	r2, [r3]
    while (1);
 c10c6e0:	eafffffe 	b	c10c6e0 <isr_TIMER0_dummy+0x24>
 c10c6e4:	0c10e990 	.word	0x0c10e990

0c10c6e8 <isr_UERR01_dummy>:
}

void isr_UERR01_dummy( void )
{
 c10c6e8:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c10c6ec:	e1a0c00d 	mov	ip, sp
 c10c6f0:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c10c6f4:	e24cb004 	sub	fp, ip, #4
    uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_UERR01_dummy");
 c10c6f8:	e59f0010 	ldr	r0, [pc, #16]	; c10c710 <isr_UERR01_dummy+0x28>
 c10c6fc:	eb00034d 	bl	c10d438 <uart0_puts>
    SEGS = 0x75;
 c10c700:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c10c704:	e3a02075 	mov	r2, #117	; 0x75
 c10c708:	e5c32000 	strb	r2, [r3]
    while (1);
 c10c70c:	eafffffe 	b	c10c70c <isr_UERR01_dummy+0x24>
 c10c710:	0c10e9c0 	.word	0x0c10e9c0

0c10c714 <isr_WDT_dummy>:
}

void isr_WDT_dummy( void )
{
 c10c714:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c10c718:	e1a0c00d 	mov	ip, sp
 c10c71c:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c10c720:	e24cb004 	sub	fp, ip, #4
    uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_WDT_dummy");
 c10c724:	e59f0010 	ldr	r0, [pc, #16]	; c10c73c <isr_WDT_dummy+0x28>
 c10c728:	eb000342 	bl	c10d438 <uart0_puts>
    SEGS = 0x75;
 c10c72c:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c10c730:	e3a02075 	mov	r2, #117	; 0x75
 c10c734:	e5c32000 	strb	r2, [r3]
    while (1);
 c10c738:	eafffffe 	b	c10c738 <isr_WDT_dummy+0x24>
 c10c73c:	0c10e9f0 	.word	0x0c10e9f0

0c10c740 <isr_BDMA1_dummy>:
}

void isr_BDMA1_dummy( void )
{
 c10c740:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c10c744:	e1a0c00d 	mov	ip, sp
 c10c748:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c10c74c:	e24cb004 	sub	fp, ip, #4
    uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_BDMA1_dummy");
 c10c750:	e59f0010 	ldr	r0, [pc, #16]	; c10c768 <isr_BDMA1_dummy+0x28>
 c10c754:	eb000337 	bl	c10d438 <uart0_puts>
    SEGS = 0x75;
 c10c758:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c10c75c:	e3a02075 	mov	r2, #117	; 0x75
 c10c760:	e5c32000 	strb	r2, [r3]
    while (1);
 c10c764:	eafffffe 	b	c10c764 <isr_BDMA1_dummy+0x24>
 c10c768:	0c10ea1c 	.word	0x0c10ea1c

0c10c76c <isr_BDMA0_dummy>:
}

void isr_BDMA0_dummy( void )
{
 c10c76c:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c10c770:	e1a0c00d 	mov	ip, sp
 c10c774:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c10c778:	e24cb004 	sub	fp, ip, #4
    uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_BDMA0_dummy");
 c10c77c:	e59f0010 	ldr	r0, [pc, #16]	; c10c794 <isr_BDMA0_dummy+0x28>
 c10c780:	eb00032c 	bl	c10d438 <uart0_puts>
    SEGS = 0x75;
 c10c784:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c10c788:	e3a02075 	mov	r2, #117	; 0x75
 c10c78c:	e5c32000 	strb	r2, [r3]
    while (1);
 c10c790:	eafffffe 	b	c10c790 <isr_BDMA0_dummy+0x24>
 c10c794:	0c10ea4c 	.word	0x0c10ea4c

0c10c798 <isr_ZDMA1_dummy>:
}

void isr_ZDMA1_dummy( void )
{
 c10c798:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c10c79c:	e1a0c00d 	mov	ip, sp
 c10c7a0:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c10c7a4:	e24cb004 	sub	fp, ip, #4
    uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_ZDMA1_dummy");
 c10c7a8:	e59f0010 	ldr	r0, [pc, #16]	; c10c7c0 <isr_ZDMA1_dummy+0x28>
 c10c7ac:	eb000321 	bl	c10d438 <uart0_puts>
    SEGS = 0x75;
 c10c7b0:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c10c7b4:	e3a02075 	mov	r2, #117	; 0x75
 c10c7b8:	e5c32000 	strb	r2, [r3]
    while (1);
 c10c7bc:	eafffffe 	b	c10c7bc <isr_ZDMA1_dummy+0x24>
 c10c7c0:	0c10ea7c 	.word	0x0c10ea7c

0c10c7c4 <isr_ZDMA0_dummy>:
}

void isr_ZDMA0_dummy( void )
{
 c10c7c4:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c10c7c8:	e1a0c00d 	mov	ip, sp
 c10c7cc:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c10c7d0:	e24cb004 	sub	fp, ip, #4
    uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_ZDMA0_dummy");
 c10c7d4:	e59f0010 	ldr	r0, [pc, #16]	; c10c7ec <isr_ZDMA0_dummy+0x28>
 c10c7d8:	eb000316 	bl	c10d438 <uart0_puts>
    SEGS = 0x75;
 c10c7dc:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c10c7e0:	e3a02075 	mov	r2, #117	; 0x75
 c10c7e4:	e5c32000 	strb	r2, [r3]
    while (1);
 c10c7e8:	eafffffe 	b	c10c7e8 <isr_ZDMA0_dummy+0x24>
 c10c7ec:	0c10eaac 	.word	0x0c10eaac

0c10c7f0 <isr_TICK_dummy>:
}

void isr_TICK_dummy( void )
{
 c10c7f0:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c10c7f4:	e1a0c00d 	mov	ip, sp
 c10c7f8:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c10c7fc:	e24cb004 	sub	fp, ip, #4
    uart0_puts( "\n\n*** ERROR FATAL: ejecutando isr_TICK_dummy" );
 c10c800:	e59f0010 	ldr	r0, [pc, #16]	; c10c818 <isr_TICK_dummy+0x28>
 c10c804:	eb00030b 	bl	c10d438 <uart0_puts>
    SEGS = 0x75;
 c10c808:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c10c80c:	e3a02075 	mov	r2, #117	; 0x75
 c10c810:	e5c32000 	strb	r2, [r3]
    while( 1 );
 c10c814:	eafffffe 	b	c10c814 <isr_TICK_dummy+0x24>
 c10c818:	0c10eadc 	.word	0x0c10eadc

0c10c81c <isr_PB_dummy>:
}

void isr_PB_dummy( void )
{
 c10c81c:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c10c820:	e1a0c00d 	mov	ip, sp
 c10c824:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c10c828:	e24cb004 	sub	fp, ip, #4
    uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_PB_dummy");
 c10c82c:	e59f0010 	ldr	r0, [pc, #16]	; c10c844 <isr_PB_dummy+0x28>
 c10c830:	eb000300 	bl	c10d438 <uart0_puts>
    SEGS = 0x75;
 c10c834:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c10c838:	e3a02075 	mov	r2, #117	; 0x75
 c10c83c:	e5c32000 	strb	r2, [r3]
    while (1);
 c10c840:	eafffffe 	b	c10c840 <isr_PB_dummy+0x24>
 c10c844:	0c10eb0c 	.word	0x0c10eb0c

0c10c848 <isr_ETHERNET_dummy>:
}

void isr_ETHERNET_dummy( void )
{
 c10c848:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c10c84c:	e1a0c00d 	mov	ip, sp
 c10c850:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c10c854:	e24cb004 	sub	fp, ip, #4
    uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_ETHERNET_dummy");
 c10c858:	e59f0010 	ldr	r0, [pc, #16]	; c10c870 <isr_ETHERNET_dummy+0x28>
 c10c85c:	eb0002f5 	bl	c10d438 <uart0_puts>
    SEGS = 0x75;
 c10c860:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c10c864:	e3a02075 	mov	r2, #117	; 0x75
 c10c868:	e5c32000 	strb	r2, [r3]
    while (1);
 c10c86c:	eafffffe 	b	c10c86c <isr_ETHERNET_dummy+0x24>
 c10c870:	0c10eb38 	.word	0x0c10eb38

0c10c874 <isr_TS_dummy>:
}

void isr_TS_dummy( void )
{
 c10c874:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c10c878:	e1a0c00d 	mov	ip, sp
 c10c87c:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c10c880:	e24cb004 	sub	fp, ip, #4
    uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_TS_dummy");
 c10c884:	e59f0010 	ldr	r0, [pc, #16]	; c10c89c <isr_TS_dummy+0x28>
 c10c888:	eb0002ea 	bl	c10d438 <uart0_puts>
    SEGS = 0x75;
 c10c88c:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c10c890:	e3a02075 	mov	r2, #117	; 0x75
 c10c894:	e5c32000 	strb	r2, [r3]
    while (1);
 c10c898:	eafffffe 	b	c10c898 <isr_TS_dummy+0x24>
 c10c89c:	0c10eb6c 	.word	0x0c10eb6c

0c10c8a0 <isr_KEYPAD_dummy>:
}

void isr_KEYPAD_dummy( void )
{
 c10c8a0:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c10c8a4:	e1a0c00d 	mov	ip, sp
 c10c8a8:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c10c8ac:	e24cb004 	sub	fp, ip, #4
    uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_KEYPAD_dummy");
 c10c8b0:	e59f0010 	ldr	r0, [pc, #16]	; c10c8c8 <isr_KEYPAD_dummy+0x28>
 c10c8b4:	eb0002df 	bl	c10d438 <uart0_puts>
    SEGS = 0x75;
 c10c8b8:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c10c8bc:	e3a02075 	mov	r2, #117	; 0x75
 c10c8c0:	e5c32000 	strb	r2, [r3]
    while (1);
 c10c8c4:	eafffffe 	b	c10c8c4 <isr_KEYPAD_dummy+0x24>
 c10c8c8:	0c10eb98 	.word	0x0c10eb98

0c10c8cc <isr_USB_dummy>:
}

void isr_USB_dummy( void )
{
 c10c8cc:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c10c8d0:	e1a0c00d 	mov	ip, sp
 c10c8d4:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c10c8d8:	e24cb004 	sub	fp, ip, #4
    uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_USB_dummy");
 c10c8dc:	e59f0010 	ldr	r0, [pc, #16]	; c10c8f4 <isr_USB_dummy+0x28>
 c10c8e0:	eb0002d4 	bl	c10d438 <uart0_puts>
    SEGS = 0x75;
 c10c8e4:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c10c8e8:	e3a02075 	mov	r2, #117	; 0x75
 c10c8ec:	e5c32000 	strb	r2, [r3]
    while (1);
 c10c8f0:	eafffffe 	b	c10c8f0 <isr_USB_dummy+0x24>
 c10c8f4:	0c10ebc8 	.word	0x0c10ebc8

0c10c8f8 <show_sys_info>:
}

static void show_sys_info( void )
{
 c10c8f8:	e1a0c00d 	mov	ip, sp
 c10c8fc:	e92dd800 	push	{fp, ip, lr, pc}
 c10c900:	e24cb004 	sub	fp, ip, #4
    uart0_puts("\n\n****Mensaje inicial****");
 c10c904:	e59f000c 	ldr	r0, [pc, #12]	; c10c918 <show_sys_info+0x20>
 c10c908:	eb0002ca 	bl	c10d438 <uart0_puts>
}
 c10c90c:	e24bd00c 	sub	sp, fp, #12
 c10c910:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10c914:	e12fff1e 	bx	lr
 c10c918:	0c10ebf4 	.word	0x0c10ebf4

0c10c91c <sleep>:

inline void sleep( void )
{
 c10c91c:	e1a0c00d 	mov	ip, sp
 c10c920:	e92dd800 	push	{fp, ip, lr, pc}
 c10c924:	e24cb004 	sub	fp, ip, #4
    CLKCON |= (1 << 2);    // Pone a la CPU en estado IDLE
 c10c928:	e59f3018 	ldr	r3, [pc, #24]	; c10c948 <sleep+0x2c>
 c10c92c:	e59f2014 	ldr	r2, [pc, #20]	; c10c948 <sleep+0x2c>
 c10c930:	e5922000 	ldr	r2, [r2]
 c10c934:	e3822004 	orr	r2, r2, #4
 c10c938:	e5832000 	str	r2, [r3]
}
 c10c93c:	e24bd00c 	sub	sp, fp, #12
 c10c940:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10c944:	e12fff1e 	bx	lr
 c10c948:	01d80004 	.word	0x01d80004

0c10c94c <timers_init>:
static uint32 loop_s = 0;

static void sw_delay_init( void );

void timers_init( void )
{
 c10c94c:	e1a0c00d 	mov	ip, sp
 c10c950:	e92dd800 	push	{fp, ip, lr, pc}
 c10c954:	e24cb004 	sub	fp, ip, #4
	TCFG0 =  0x00000000;
 c10c958:	e59f30b8 	ldr	r3, [pc, #184]	; c10ca18 <timers_init+0xcc>
 c10c95c:	e3a02000 	mov	r2, #0
 c10c960:	e5832000 	str	r2, [r3]
	TCFG1 =  0x00000000;
 c10c964:	e59f30b0 	ldr	r3, [pc, #176]	; c10ca1c <timers_init+0xd0>
 c10c968:	e3a02000 	mov	r2, #0
 c10c96c:	e5832000 	str	r2, [r3]

	TCNTB0 = 0x0000;
 c10c970:	e59f30a8 	ldr	r3, [pc, #168]	; c10ca20 <timers_init+0xd4>
 c10c974:	e3a02000 	mov	r2, #0
 c10c978:	e5832000 	str	r2, [r3]
	TCNTB2 = 0x0000;
 c10c97c:	e59f30a0 	ldr	r3, [pc, #160]	; c10ca24 <timers_init+0xd8>
 c10c980:	e3a02000 	mov	r2, #0
 c10c984:	e5832000 	str	r2, [r3]
	TCNTB3 = 0x0000;
 c10c988:	e59f3098 	ldr	r3, [pc, #152]	; c10ca28 <timers_init+0xdc>
 c10c98c:	e3a02000 	mov	r2, #0
 c10c990:	e5832000 	str	r2, [r3]
	TCNTB4 = 0x0000;
 c10c994:	e59f3090 	ldr	r3, [pc, #144]	; c10ca2c <timers_init+0xe0>
 c10c998:	e3a02000 	mov	r2, #0
 c10c99c:	e5832000 	str	r2, [r3]
	TCNTB5 = 0x0000;
 c10c9a0:	e59f3088 	ldr	r3, [pc, #136]	; c10ca30 <timers_init+0xe4>
 c10c9a4:	e3a02000 	mov	r2, #0
 c10c9a8:	e5832000 	str	r2, [r3]
	TCMPB0 = 0x0000;
 c10c9ac:	e59f3080 	ldr	r3, [pc, #128]	; c10ca34 <timers_init+0xe8>
 c10c9b0:	e3a02000 	mov	r2, #0
 c10c9b4:	e5832000 	str	r2, [r3]
	TCMPB1 = 0x0000;
 c10c9b8:	e59f3078 	ldr	r3, [pc, #120]	; c10ca38 <timers_init+0xec>
 c10c9bc:	e3a02000 	mov	r2, #0
 c10c9c0:	e5832000 	str	r2, [r3]
	TCMPB2 = 0x0000;
 c10c9c4:	e59f3070 	ldr	r3, [pc, #112]	; c10ca3c <timers_init+0xf0>
 c10c9c8:	e3a02000 	mov	r2, #0
 c10c9cc:	e5832000 	str	r2, [r3]
	TCMPB3 = 0x0000;
 c10c9d0:	e59f3068 	ldr	r3, [pc, #104]	; c10ca40 <timers_init+0xf4>
 c10c9d4:	e3a02000 	mov	r2, #0
 c10c9d8:	e5832000 	str	r2, [r3]
	TCMPB4 = 0x0000;
 c10c9dc:	e59f3060 	ldr	r3, [pc, #96]	; c10ca44 <timers_init+0xf8>
 c10c9e0:	e3a02000 	mov	r2, #0
 c10c9e4:	e5832000 	str	r2, [r3]

    TCON = ((1<<25) | (1<<21) | (1<<17) | (1<<13) | (1<<9) | (1<<1));
 c10c9e8:	e59f3058 	ldr	r3, [pc, #88]	; c10ca48 <timers_init+0xfc>
 c10c9ec:	e59f2058 	ldr	r2, [pc, #88]	; c10ca4c <timers_init+0x100>
 c10c9f0:	e5832000 	str	r2, [r3]
    TCON = (TCON & ~(0xfffffff));
 c10c9f4:	e59f304c 	ldr	r3, [pc, #76]	; c10ca48 <timers_init+0xfc>
 c10c9f8:	e59f2048 	ldr	r2, [pc, #72]	; c10ca48 <timers_init+0xfc>
 c10c9fc:	e5922000 	ldr	r2, [r2]
 c10ca00:	e202220f 	and	r2, r2, #-268435456	; 0xf0000000
 c10ca04:	e5832000 	str	r2, [r3]

    sw_delay_init();
 c10ca08:	eb000010 	bl	c10ca50 <sw_delay_init>
}
 c10ca0c:	e24bd00c 	sub	sp, fp, #12
 c10ca10:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10ca14:	e12fff1e 	bx	lr
 c10ca18:	01d50000 	.word	0x01d50000
 c10ca1c:	01d50004 	.word	0x01d50004
 c10ca20:	01d5000c 	.word	0x01d5000c
 c10ca24:	01d50024 	.word	0x01d50024
 c10ca28:	01d50030 	.word	0x01d50030
 c10ca2c:	01d5003c 	.word	0x01d5003c
 c10ca30:	01d50048 	.word	0x01d50048
 c10ca34:	01d50010 	.word	0x01d50010
 c10ca38:	01d5001c 	.word	0x01d5001c
 c10ca3c:	01d50028 	.word	0x01d50028
 c10ca40:	01d50034 	.word	0x01d50034
 c10ca44:	01d50040 	.word	0x01d50040
 c10ca48:	01d50008 	.word	0x01d50008
 c10ca4c:	02222202 	.word	0x02222202

0c10ca50 <sw_delay_init>:

static void sw_delay_init( void )
{
 c10ca50:	e1a0c00d 	mov	ip, sp
 c10ca54:	e92dd810 	push	{r4, fp, ip, lr, pc}
 c10ca58:	e24cb004 	sub	fp, ip, #4
 c10ca5c:	e24dd00c 	sub	sp, sp, #12
    uint32 i;
    
    timer3_start();
 c10ca60:	eb0000bf 	bl	c10cd64 <timer3_start>
    for( i=1000000; i; i--);
 c10ca64:	e59f3088 	ldr	r3, [pc, #136]	; c10caf4 <sw_delay_init+0xa4>
 c10ca68:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
 c10ca6c:	ea000002 	b	c10ca7c <sw_delay_init+0x2c>
 c10ca70:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c10ca74:	e2433001 	sub	r3, r3, #1
 c10ca78:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
 c10ca7c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c10ca80:	e3530000 	cmp	r3, #0
 c10ca84:	1afffff9 	bne	c10ca70 <sw_delay_init+0x20>
    loop_s = ((uint64)1000000*10000)/timer3_stop();
 c10ca88:	eb0000e1 	bl	c10ce14 <timer3_stop>
 c10ca8c:	e1a03000 	mov	r3, r0
 c10ca90:	e1a02003 	mov	r2, r3
 c10ca94:	e1a03002 	mov	r3, r2
 c10ca98:	e3a04000 	mov	r4, #0
 c10ca9c:	e3a00315 	mov	r0, #1409286144	; 0x54000000
 c10caa0:	e2800abe 	add	r0, r0, #778240	; 0xbe000
 c10caa4:	e2800b01 	add	r0, r0, #1024	; 0x400
 c10caa8:	e3a01002 	mov	r1, #2
 c10caac:	e1a02003 	mov	r2, r3
 c10cab0:	e1a03004 	mov	r3, r4
 c10cab4:	eb0003ce 	bl	c10d9f4 <__aeabi_uldivmod>
 c10cab8:	e1a03000 	mov	r3, r0
 c10cabc:	e1a04001 	mov	r4, r1
 c10cac0:	e1a02003 	mov	r2, r3
 c10cac4:	e59f302c 	ldr	r3, [pc, #44]	; c10caf8 <sw_delay_init+0xa8>
 c10cac8:	e5832000 	str	r2, [r3]
    loop_ms = loop_s / 1000;
 c10cacc:	e59f3024 	ldr	r3, [pc, #36]	; c10caf8 <sw_delay_init+0xa8>
 c10cad0:	e5932000 	ldr	r2, [r3]
 c10cad4:	e59f3020 	ldr	r3, [pc, #32]	; c10cafc <sw_delay_init+0xac>
 c10cad8:	e0831392 	umull	r1, r3, r2, r3
 c10cadc:	e1a02323 	lsr	r2, r3, #6
 c10cae0:	e59f3018 	ldr	r3, [pc, #24]	; c10cb00 <sw_delay_init+0xb0>
 c10cae4:	e5832000 	str	r2, [r3]
};
 c10cae8:	e24bd010 	sub	sp, fp, #16
 c10caec:	e89d6810 	ldm	sp, {r4, fp, sp, lr}
 c10caf0:	e12fff1e 	bx	lr
 c10caf4:	000f4240 	.word	0x000f4240
 c10caf8:	0c119220 	.word	0x0c119220
 c10cafc:	10624dd3 	.word	0x10624dd3
 c10cb00:	0c11921c 	.word	0x0c11921c

0c10cb04 <timer3_delay_ms>:

void timer3_delay_ms( uint16 n )
{
 c10cb04:	e1a0c00d 	mov	ip, sp
 c10cb08:	e92dd800 	push	{fp, ip, lr, pc}
 c10cb0c:	e24cb004 	sub	fp, ip, #4
 c10cb10:	e24dd008 	sub	sp, sp, #8
 c10cb14:	e1a03000 	mov	r3, r0
 c10cb18:	e14b30be 	strh	r3, [fp, #-14]
    for( ; n; n-- )
 c10cb1c:	ea000025 	b	c10cbb8 <timer3_delay_ms+0xb4>
    {
    	TCFG0 = (TCFG0 & ~(0xff << 8)) | (0 << 8);
 c10cb20:	e59f30a8 	ldr	r3, [pc, #168]	; c10cbd0 <timer3_delay_ms+0xcc>
 c10cb24:	e59f20a4 	ldr	r2, [pc, #164]	; c10cbd0 <timer3_delay_ms+0xcc>
 c10cb28:	e5922000 	ldr	r2, [r2]
 c10cb2c:	e3c22cff 	bic	r2, r2, #65280	; 0xff00
 c10cb30:	e5832000 	str	r2, [r3]
    	TCFG1 = (TCFG1 & ~(0xf << 12)) | (0 << 12);
 c10cb34:	e59f3098 	ldr	r3, [pc, #152]	; c10cbd4 <timer3_delay_ms+0xd0>
 c10cb38:	e59f2094 	ldr	r2, [pc, #148]	; c10cbd4 <timer3_delay_ms+0xd0>
 c10cb3c:	e5922000 	ldr	r2, [r2]
 c10cb40:	e3c22a0f 	bic	r2, r2, #61440	; 0xf000
 c10cb44:	e5832000 	str	r2, [r3]
    	TCNTB3 = 32000;
 c10cb48:	e59f3088 	ldr	r3, [pc, #136]	; c10cbd8 <timer3_delay_ms+0xd4>
 c10cb4c:	e3a02c7d 	mov	r2, #32000	; 0x7d00
 c10cb50:	e5832000 	str	r2, [r3]
    	TCON = (TCON & ~(0xf << 16)) | (1 << 17);
 c10cb54:	e59f3080 	ldr	r3, [pc, #128]	; c10cbdc <timer3_delay_ms+0xd8>
 c10cb58:	e59f207c 	ldr	r2, [pc, #124]	; c10cbdc <timer3_delay_ms+0xd8>
 c10cb5c:	e5922000 	ldr	r2, [r2]
 c10cb60:	e3c2280f 	bic	r2, r2, #983040	; 0xf0000
 c10cb64:	e3822802 	orr	r2, r2, #131072	; 0x20000
 c10cb68:	e5832000 	str	r2, [r3]
    	TCON = (TCON & ~(0xf << 16)) | (1 << 16);
 c10cb6c:	e59f3068 	ldr	r3, [pc, #104]	; c10cbdc <timer3_delay_ms+0xd8>
 c10cb70:	e59f2064 	ldr	r2, [pc, #100]	; c10cbdc <timer3_delay_ms+0xd8>
 c10cb74:	e5922000 	ldr	r2, [r2]
 c10cb78:	e3c2280f 	bic	r2, r2, #983040	; 0xf0000
 c10cb7c:	e3822801 	orr	r2, r2, #65536	; 0x10000
 c10cb80:	e5832000 	str	r2, [r3]
    	while( !TCNTO3 );
 c10cb84:	e1a00000 	nop			; (mov r0, r0)
 c10cb88:	e59f3050 	ldr	r3, [pc, #80]	; c10cbe0 <timer3_delay_ms+0xdc>
 c10cb8c:	e5933000 	ldr	r3, [r3]
 c10cb90:	e3530000 	cmp	r3, #0
 c10cb94:	0afffffb 	beq	c10cb88 <timer3_delay_ms+0x84>
    	while( TCNTO3 );
 c10cb98:	e1a00000 	nop			; (mov r0, r0)
 c10cb9c:	e59f303c 	ldr	r3, [pc, #60]	; c10cbe0 <timer3_delay_ms+0xdc>
 c10cba0:	e5933000 	ldr	r3, [r3]
 c10cba4:	e3530000 	cmp	r3, #0
 c10cba8:	1afffffb 	bne	c10cb9c <timer3_delay_ms+0x98>
    loop_ms = loop_s / 1000;
};

void timer3_delay_ms( uint16 n )
{
    for( ; n; n-- )
 c10cbac:	e15b30be 	ldrh	r3, [fp, #-14]
 c10cbb0:	e2433001 	sub	r3, r3, #1
 c10cbb4:	e14b30be 	strh	r3, [fp, #-14]
 c10cbb8:	e15b30be 	ldrh	r3, [fp, #-14]
 c10cbbc:	e3530000 	cmp	r3, #0
 c10cbc0:	1affffd6 	bne	c10cb20 <timer3_delay_ms+0x1c>
    	TCON = (TCON & ~(0xf << 16)) | (1 << 17);
    	TCON = (TCON & ~(0xf << 16)) | (1 << 16);
    	while( !TCNTO3 );
    	while( TCNTO3 );
    }
}
 c10cbc4:	e24bd00c 	sub	sp, fp, #12
 c10cbc8:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10cbcc:	e12fff1e 	bx	lr
 c10cbd0:	01d50000 	.word	0x01d50000
 c10cbd4:	01d50004 	.word	0x01d50004
 c10cbd8:	01d50030 	.word	0x01d50030
 c10cbdc:	01d50008 	.word	0x01d50008
 c10cbe0:	01d50038 	.word	0x01d50038

0c10cbe4 <sw_delay_ms>:

void sw_delay_ms( uint16 n )
{
 c10cbe4:	e1a0c00d 	mov	ip, sp
 c10cbe8:	e92dd800 	push	{fp, ip, lr, pc}
 c10cbec:	e24cb004 	sub	fp, ip, #4
 c10cbf0:	e24dd010 	sub	sp, sp, #16
 c10cbf4:	e1a03000 	mov	r3, r0
 c10cbf8:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
    uint32 i;
    
    for( i=loop_ms*n; i; i-- );
 c10cbfc:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
 c10cc00:	e59f2030 	ldr	r2, [pc, #48]	; c10cc38 <sw_delay_ms+0x54>
 c10cc04:	e5922000 	ldr	r2, [r2]
 c10cc08:	e0030392 	mul	r3, r2, r3
 c10cc0c:	e50b3010 	str	r3, [fp, #-16]
 c10cc10:	ea000002 	b	c10cc20 <sw_delay_ms+0x3c>
 c10cc14:	e51b3010 	ldr	r3, [fp, #-16]
 c10cc18:	e2433001 	sub	r3, r3, #1
 c10cc1c:	e50b3010 	str	r3, [fp, #-16]
 c10cc20:	e51b3010 	ldr	r3, [fp, #-16]
 c10cc24:	e3530000 	cmp	r3, #0
 c10cc28:	1afffff9 	bne	c10cc14 <sw_delay_ms+0x30>
}
 c10cc2c:	e24bd00c 	sub	sp, fp, #12
 c10cc30:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10cc34:	e12fff1e 	bx	lr
 c10cc38:	0c11921c 	.word	0x0c11921c

0c10cc3c <timer3_delay_s>:

void timer3_delay_s( uint16 n )
{
 c10cc3c:	e1a0c00d 	mov	ip, sp
 c10cc40:	e92dd800 	push	{fp, ip, lr, pc}
 c10cc44:	e24cb004 	sub	fp, ip, #4
 c10cc48:	e24dd008 	sub	sp, sp, #8
 c10cc4c:	e1a03000 	mov	r3, r0
 c10cc50:	e14b30be 	strh	r3, [fp, #-14]
	//(N+1)âD = (63+1)â32
	//1s -> N = 63 D = 32 (63+1)â32/(64 MHz)= 32microsegundos  (1 s)/(32micros)= 31250
    TCFG0 = (TCFG0 & ~(0xff << 8)) | (63 << 8);//T2âT3 prescaler: N=63
 c10cc54:	e59f3098 	ldr	r3, [pc, #152]	; c10ccf4 <timer3_delay_s+0xb8>
 c10cc58:	e59f2094 	ldr	r2, [pc, #148]	; c10ccf4 <timer3_delay_s+0xb8>
 c10cc5c:	e5922000 	ldr	r2, [r2]
 c10cc60:	e3c22cff 	bic	r2, r2, #65280	; 0xff00
 c10cc64:	e3822c3f 	orr	r2, r2, #16128	; 0x3f00
 c10cc68:	e5832000 	str	r2, [r3]
    TCFG1 = (TCFG1 & ~(0xf << 12)) | (4 << 12);//T3 divisor (1/32): D=32
 c10cc6c:	e59f3084 	ldr	r3, [pc, #132]	; c10ccf8 <timer3_delay_s+0xbc>
 c10cc70:	e59f2080 	ldr	r2, [pc, #128]	; c10ccf8 <timer3_delay_s+0xbc>
 c10cc74:	e5922000 	ldr	r2, [r2]
 c10cc78:	e3c22a0f 	bic	r2, r2, #61440	; 0xf000
 c10cc7c:	e3822901 	orr	r2, r2, #16384	; 0x4000
 c10cc80:	e5832000 	str	r2, [r3]
    TCNTB3 = 31250;//T3 count: C = 31250
 c10cc84:	e59f3070 	ldr	r3, [pc, #112]	; c10ccfc <timer3_delay_s+0xc0>
 c10cc88:	e59f2070 	ldr	r2, [pc, #112]	; c10cd00 <timer3_delay_s+0xc4>
 c10cc8c:	e5832000 	str	r2, [r3]
    TCON = (TCON & ~(0xf << 16)) | (1 << 17);//one shot, carga TCNT3, stop T3
 c10cc90:	e59f306c 	ldr	r3, [pc, #108]	; c10cd04 <timer3_delay_s+0xc8>
 c10cc94:	e59f2068 	ldr	r2, [pc, #104]	; c10cd04 <timer3_delay_s+0xc8>
 c10cc98:	e5922000 	ldr	r2, [r2]
 c10cc9c:	e3c2280f 	bic	r2, r2, #983040	; 0xf0000
 c10cca0:	e3822802 	orr	r2, r2, #131072	; 0x20000
 c10cca4:	e5832000 	str	r2, [r3]
    TCON = (TCON & ~(0xf << 16)) | (1 << 16);//one shot, no carga TCNT3, start T3
 c10cca8:	e59f3054 	ldr	r3, [pc, #84]	; c10cd04 <timer3_delay_s+0xc8>
 c10ccac:	e59f2050 	ldr	r2, [pc, #80]	; c10cd04 <timer3_delay_s+0xc8>
 c10ccb0:	e5922000 	ldr	r2, [r2]
 c10ccb4:	e3c2280f 	bic	r2, r2, #983040	; 0xf0000
 c10ccb8:	e3822801 	orr	r2, r2, #65536	; 0x10000
 c10ccbc:	e5832000 	str	r2, [r3]
    while( !TCNTO3 );//espera a que TCNTO3 se actualice
 c10ccc0:	e1a00000 	nop			; (mov r0, r0)
 c10ccc4:	e59f303c 	ldr	r3, [pc, #60]	; c10cd08 <timer3_delay_s+0xcc>
 c10ccc8:	e5933000 	ldr	r3, [r3]
 c10cccc:	e3530000 	cmp	r3, #0
 c10ccd0:	0afffffb 	beq	c10ccc4 <timer3_delay_s+0x88>
    while( TCNTO3 );//espera a que TCNTO3 sea 0
 c10ccd4:	e1a00000 	nop			; (mov r0, r0)
 c10ccd8:	e59f3028 	ldr	r3, [pc, #40]	; c10cd08 <timer3_delay_s+0xcc>
 c10ccdc:	e5933000 	ldr	r3, [r3]
 c10cce0:	e3530000 	cmp	r3, #0
 c10cce4:	1afffffb 	bne	c10ccd8 <timer3_delay_s+0x9c>
}
 c10cce8:	e24bd00c 	sub	sp, fp, #12
 c10ccec:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10ccf0:	e12fff1e 	bx	lr
 c10ccf4:	01d50000 	.word	0x01d50000
 c10ccf8:	01d50004 	.word	0x01d50004
 c10ccfc:	01d50030 	.word	0x01d50030
 c10cd00:	00007a12 	.word	0x00007a12
 c10cd04:	01d50008 	.word	0x01d50008
 c10cd08:	01d50038 	.word	0x01d50038

0c10cd0c <sw_delay_s>:

void sw_delay_s( uint16 n )
{
 c10cd0c:	e1a0c00d 	mov	ip, sp
 c10cd10:	e92dd800 	push	{fp, ip, lr, pc}
 c10cd14:	e24cb004 	sub	fp, ip, #4
 c10cd18:	e24dd010 	sub	sp, sp, #16
 c10cd1c:	e1a03000 	mov	r3, r0
 c10cd20:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
    uint32 i;
    
    for( i=loop_s*n; i; i-- );
 c10cd24:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
 c10cd28:	e59f2030 	ldr	r2, [pc, #48]	; c10cd60 <sw_delay_s+0x54>
 c10cd2c:	e5922000 	ldr	r2, [r2]
 c10cd30:	e0030392 	mul	r3, r2, r3
 c10cd34:	e50b3010 	str	r3, [fp, #-16]
 c10cd38:	ea000002 	b	c10cd48 <sw_delay_s+0x3c>
 c10cd3c:	e51b3010 	ldr	r3, [fp, #-16]
 c10cd40:	e2433001 	sub	r3, r3, #1
 c10cd44:	e50b3010 	str	r3, [fp, #-16]
 c10cd48:	e51b3010 	ldr	r3, [fp, #-16]
 c10cd4c:	e3530000 	cmp	r3, #0
 c10cd50:	1afffff9 	bne	c10cd3c <sw_delay_s+0x30>
}
 c10cd54:	e24bd00c 	sub	sp, fp, #12
 c10cd58:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10cd5c:	e12fff1e 	bx	lr
 c10cd60:	0c119220 	.word	0x0c119220

0c10cd64 <timer3_start>:

void timer3_start( void ) 
{
 c10cd64:	e1a0c00d 	mov	ip, sp
 c10cd68:	e92dd800 	push	{fp, ip, lr, pc}
 c10cd6c:	e24cb004 	sub	fp, ip, #4
    TCFG0 = (TCFG0 & ~(0xff << 8)) | (199 << 8);//T2âT3 prescaler: N=199
 c10cd70:	e59f3084 	ldr	r3, [pc, #132]	; c10cdfc <timer3_start+0x98>
 c10cd74:	e59f2080 	ldr	r2, [pc, #128]	; c10cdfc <timer3_start+0x98>
 c10cd78:	e5922000 	ldr	r2, [r2]
 c10cd7c:	e3c22cff 	bic	r2, r2, #65280	; 0xff00
 c10cd80:	e3822cc7 	orr	r2, r2, #50944	; 0xc700
 c10cd84:	e5832000 	str	r2, [r3]
    TCFG1 = (TCFG1 & ~(0xf << 12)) | (4 << 12);//T3 divisor (1/32): D=32
 c10cd88:	e59f3070 	ldr	r3, [pc, #112]	; c10ce00 <timer3_start+0x9c>
 c10cd8c:	e59f206c 	ldr	r2, [pc, #108]	; c10ce00 <timer3_start+0x9c>
 c10cd90:	e5922000 	ldr	r2, [r2]
 c10cd94:	e3c22a0f 	bic	r2, r2, #61440	; 0xf000
 c10cd98:	e3822901 	orr	r2, r2, #16384	; 0x4000
 c10cd9c:	e5832000 	str	r2, [r3]
    
    TCNTB3 = 0xffff; //T3 count:C = mÃ¡ximo
 c10cda0:	e59f305c 	ldr	r3, [pc, #92]	; c10ce04 <timer3_start+0xa0>
 c10cda4:	e59f205c 	ldr	r2, [pc, #92]	; c10ce08 <timer3_start+0xa4>
 c10cda8:	e5832000 	str	r2, [r3]
    TCON = (TCON & ~(0xf << 16)) | (1 << 17);//one shot, carga TCNT3, stop T3
 c10cdac:	e59f3058 	ldr	r3, [pc, #88]	; c10ce0c <timer3_start+0xa8>
 c10cdb0:	e59f2054 	ldr	r2, [pc, #84]	; c10ce0c <timer3_start+0xa8>
 c10cdb4:	e5922000 	ldr	r2, [r2]
 c10cdb8:	e3c2280f 	bic	r2, r2, #983040	; 0xf0000
 c10cdbc:	e3822802 	orr	r2, r2, #131072	; 0x20000
 c10cdc0:	e5832000 	str	r2, [r3]
    TCON = (TCON & ~(0xf << 16)) | (1 << 16);//one shot, no carga TCNT3, start T3
 c10cdc4:	e59f3040 	ldr	r3, [pc, #64]	; c10ce0c <timer3_start+0xa8>
 c10cdc8:	e59f203c 	ldr	r2, [pc, #60]	; c10ce0c <timer3_start+0xa8>
 c10cdcc:	e5922000 	ldr	r2, [r2]
 c10cdd0:	e3c2280f 	bic	r2, r2, #983040	; 0xf0000
 c10cdd4:	e3822801 	orr	r2, r2, #65536	; 0x10000
 c10cdd8:	e5832000 	str	r2, [r3]
    while( !TCNTO3 );//espera a que TCNTO3 se actualice
 c10cddc:	e1a00000 	nop			; (mov r0, r0)
 c10cde0:	e59f3028 	ldr	r3, [pc, #40]	; c10ce10 <timer3_start+0xac>
 c10cde4:	e5933000 	ldr	r3, [r3]
 c10cde8:	e3530000 	cmp	r3, #0
 c10cdec:	0afffffb 	beq	c10cde0 <timer3_start+0x7c>
}
 c10cdf0:	e24bd00c 	sub	sp, fp, #12
 c10cdf4:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10cdf8:	e12fff1e 	bx	lr
 c10cdfc:	01d50000 	.word	0x01d50000
 c10ce00:	01d50004 	.word	0x01d50004
 c10ce04:	01d50030 	.word	0x01d50030
 c10ce08:	0000ffff 	.word	0x0000ffff
 c10ce0c:	01d50008 	.word	0x01d50008
 c10ce10:	01d50038 	.word	0x01d50038

0c10ce14 <timer3_stop>:

uint16 timer3_stop( void )
{
 c10ce14:	e1a0c00d 	mov	ip, sp
 c10ce18:	e92dd800 	push	{fp, ip, lr, pc}
 c10ce1c:	e24cb004 	sub	fp, ip, #4
    TCON &= ~(1 << 16); // Detiene el timer
 c10ce20:	e59f3038 	ldr	r3, [pc, #56]	; c10ce60 <timer3_stop+0x4c>
 c10ce24:	e59f2034 	ldr	r2, [pc, #52]	; c10ce60 <timer3_stop+0x4c>
 c10ce28:	e5922000 	ldr	r2, [r2]
 c10ce2c:	e3c22801 	bic	r2, r2, #65536	; 0x10000
 c10ce30:	e5832000 	str	r2, [r3]
    return 0xffff - TCNTO3;// calcula los ciclos de cuenta transcurridos
 c10ce34:	e59f3028 	ldr	r3, [pc, #40]	; c10ce64 <timer3_stop+0x50>
 c10ce38:	e5933000 	ldr	r3, [r3]
 c10ce3c:	e1a03803 	lsl	r3, r3, #16
 c10ce40:	e1a03823 	lsr	r3, r3, #16
 c10ce44:	e1e03003 	mvn	r3, r3
 c10ce48:	e1a03803 	lsl	r3, r3, #16
 c10ce4c:	e1a03823 	lsr	r3, r3, #16
}
 c10ce50:	e1a00003 	mov	r0, r3
 c10ce54:	e24bd00c 	sub	sp, fp, #12
 c10ce58:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10ce5c:	e12fff1e 	bx	lr
 c10ce60:	01d50008 	.word	0x01d50008
 c10ce64:	01d50038 	.word	0x01d50038

0c10ce68 <timer3_start_timeout>:

void timer3_start_timeout( uint16 n ) 
{
 c10ce68:	e1a0c00d 	mov	ip, sp
 c10ce6c:	e92dd800 	push	{fp, ip, lr, pc}
 c10ce70:	e24cb004 	sub	fp, ip, #4
 c10ce74:	e24dd008 	sub	sp, sp, #8
 c10ce78:	e1a03000 	mov	r3, r0
 c10ce7c:	e14b30be 	strh	r3, [fp, #-14]
    TCFG0 = (TCFG0 & ~(0xff << 8)) | (199 << 8);//T2âT3 prescaler: N=199
 c10ce80:	e59f3084 	ldr	r3, [pc, #132]	; c10cf0c <timer3_start_timeout+0xa4>
 c10ce84:	e59f2080 	ldr	r2, [pc, #128]	; c10cf0c <timer3_start_timeout+0xa4>
 c10ce88:	e5922000 	ldr	r2, [r2]
 c10ce8c:	e3c22cff 	bic	r2, r2, #65280	; 0xff00
 c10ce90:	e3822cc7 	orr	r2, r2, #50944	; 0xc700
 c10ce94:	e5832000 	str	r2, [r3]
    TCFG1 = (TCFG1 & ~(0xf << 12)) | (4 << 12);//T3 divisor (1/32): D=32
 c10ce98:	e59f3070 	ldr	r3, [pc, #112]	; c10cf10 <timer3_start_timeout+0xa8>
 c10ce9c:	e59f206c 	ldr	r2, [pc, #108]	; c10cf10 <timer3_start_timeout+0xa8>
 c10cea0:	e5922000 	ldr	r2, [r2]
 c10cea4:	e3c22a0f 	bic	r2, r2, #61440	; 0xf000
 c10cea8:	e3822901 	orr	r2, r2, #16384	; 0x4000
 c10ceac:	e5832000 	str	r2, [r3]
    
    TCNTB3 = n; //T3 count: C = timeout
 c10ceb0:	e59f305c 	ldr	r3, [pc, #92]	; c10cf14 <timer3_start_timeout+0xac>
 c10ceb4:	e15b20be 	ldrh	r2, [fp, #-14]
 c10ceb8:	e5832000 	str	r2, [r3]
    TCON = (TCON & ~(0xf << 16)) | (1 << 17);//one shot, carga TCNT3, stop T3
 c10cebc:	e59f3054 	ldr	r3, [pc, #84]	; c10cf18 <timer3_start_timeout+0xb0>
 c10cec0:	e59f2050 	ldr	r2, [pc, #80]	; c10cf18 <timer3_start_timeout+0xb0>
 c10cec4:	e5922000 	ldr	r2, [r2]
 c10cec8:	e3c2280f 	bic	r2, r2, #983040	; 0xf0000
 c10cecc:	e3822802 	orr	r2, r2, #131072	; 0x20000
 c10ced0:	e5832000 	str	r2, [r3]
    TCON = (TCON & ~(0xf << 16)) | (1 << 16);//one shot, no carga TCNT3, start T3
 c10ced4:	e59f303c 	ldr	r3, [pc, #60]	; c10cf18 <timer3_start_timeout+0xb0>
 c10ced8:	e59f2038 	ldr	r2, [pc, #56]	; c10cf18 <timer3_start_timeout+0xb0>
 c10cedc:	e5922000 	ldr	r2, [r2]
 c10cee0:	e3c2280f 	bic	r2, r2, #983040	; 0xf0000
 c10cee4:	e3822801 	orr	r2, r2, #65536	; 0x10000
 c10cee8:	e5832000 	str	r2, [r3]
    while( !TCNTO3 );//espera a que TCNTO3 se actualice
 c10ceec:	e1a00000 	nop			; (mov r0, r0)
 c10cef0:	e59f3024 	ldr	r3, [pc, #36]	; c10cf1c <timer3_start_timeout+0xb4>
 c10cef4:	e5933000 	ldr	r3, [r3]
 c10cef8:	e3530000 	cmp	r3, #0
 c10cefc:	0afffffb 	beq	c10cef0 <timer3_start_timeout+0x88>
}
 c10cf00:	e24bd00c 	sub	sp, fp, #12
 c10cf04:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10cf08:	e12fff1e 	bx	lr
 c10cf0c:	01d50000 	.word	0x01d50000
 c10cf10:	01d50004 	.word	0x01d50004
 c10cf14:	01d50030 	.word	0x01d50030
 c10cf18:	01d50008 	.word	0x01d50008
 c10cf1c:	01d50038 	.word	0x01d50038

0c10cf20 <timer3_timeout>:

uint16 timer3_timeout( )
{
 c10cf20:	e1a0c00d 	mov	ip, sp
 c10cf24:	e92dd800 	push	{fp, ip, lr, pc}
 c10cf28:	e24cb004 	sub	fp, ip, #4
    return !TCNTO3;
 c10cf2c:	e59f3024 	ldr	r3, [pc, #36]	; c10cf58 <timer3_timeout+0x38>
 c10cf30:	e5933000 	ldr	r3, [r3]
 c10cf34:	e3530000 	cmp	r3, #0
 c10cf38:	13a03000 	movne	r3, #0
 c10cf3c:	03a03001 	moveq	r3, #1
 c10cf40:	e1a03803 	lsl	r3, r3, #16
 c10cf44:	e1a03823 	lsr	r3, r3, #16
}    
 c10cf48:	e1a00003 	mov	r0, r3
 c10cf4c:	e24bd00c 	sub	sp, fp, #12
 c10cf50:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10cf54:	e12fff1e 	bx	lr
 c10cf58:	01d50038 	.word	0x01d50038

0c10cf5c <timer0_open_tick>:

void timer0_open_tick( void (*isr)(void), uint16 tps )
{
 c10cf5c:	e1a0c00d 	mov	ip, sp
 c10cf60:	e92dd810 	push	{r4, fp, ip, lr, pc}
 c10cf64:	e24cb004 	sub	fp, ip, #4
 c10cf68:	e24dd00c 	sub	sp, sp, #12
 c10cf6c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
 c10cf70:	e1a03001 	mov	r3, r1
 c10cf74:	e14b31ba 	strh	r3, [fp, #-26]	; 0xffffffe6
    pISR_TIMER0 = (uint32)isr;
 c10cf78:	e59f31f0 	ldr	r3, [pc, #496]	; c10d170 <timer0_open_tick+0x214>
 c10cf7c:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
 c10cf80:	e5832000 	str	r2, [r3]
    I_ISPC      = BIT_TIMER0;
 c10cf84:	e59f31e8 	ldr	r3, [pc, #488]	; c10d174 <timer0_open_tick+0x218>
 c10cf88:	e3a02a02 	mov	r2, #8192	; 0x2000
 c10cf8c:	e5832000 	str	r2, [r3]
    INTMSK     &= ~(BIT_GLOBAL | BIT_TIMER0);
 c10cf90:	e59f21e0 	ldr	r2, [pc, #480]	; c10d178 <timer0_open_tick+0x21c>
 c10cf94:	e59f31dc 	ldr	r3, [pc, #476]	; c10d178 <timer0_open_tick+0x21c>
 c10cf98:	e5933000 	ldr	r3, [r3]
 c10cf9c:	e3c33301 	bic	r3, r3, #67108864	; 0x4000000
 c10cfa0:	e3c33a02 	bic	r3, r3, #8192	; 0x2000
 c10cfa4:	e5823000 	str	r3, [r2]

    if( tps > 0 && tps <= 10 ) { //programa el T0 con resoluciÃ³n de 25micros (40 KHz)
 c10cfa8:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
 c10cfac:	e3530000 	cmp	r3, #0
 c10cfb0:	0a000018 	beq	c10d018 <timer0_open_tick+0xbc>
 c10cfb4:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
 c10cfb8:	e353000a 	cmp	r3, #10
 c10cfbc:	8a000015 	bhi	c10d018 <timer0_open_tick+0xbc>
    	TCFG0  = (TCFG0 & ~(0xff)) | (49);
 c10cfc0:	e59f31b4 	ldr	r3, [pc, #436]	; c10d17c <timer0_open_tick+0x220>
 c10cfc4:	e59f21b0 	ldr	r2, [pc, #432]	; c10d17c <timer0_open_tick+0x220>
 c10cfc8:	e5922000 	ldr	r2, [r2]
 c10cfcc:	e3c220ff 	bic	r2, r2, #255	; 0xff
 c10cfd0:	e3822031 	orr	r2, r2, #49	; 0x31
 c10cfd4:	e5832000 	str	r2, [r3]
        TCFG1  = (TCFG1 & ~(0xf)) | (4);
 c10cfd8:	e59f31a0 	ldr	r3, [pc, #416]	; c10d180 <timer0_open_tick+0x224>
 c10cfdc:	e59f219c 	ldr	r2, [pc, #412]	; c10d180 <timer0_open_tick+0x224>
 c10cfe0:	e5922000 	ldr	r2, [r2]
 c10cfe4:	e3c2200f 	bic	r2, r2, #15
 c10cfe8:	e3822004 	orr	r2, r2, #4
 c10cfec:	e5832000 	str	r2, [r3]
        TCNTB0 = (40000U / tps);
 c10cff0:	e59f418c 	ldr	r4, [pc, #396]	; c10d184 <timer0_open_tick+0x228>
 c10cff4:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
 c10cff8:	e59f0188 	ldr	r0, [pc, #392]	; c10d188 <timer0_open_tick+0x22c>
 c10cffc:	e1a01003 	mov	r1, r3
 c10d000:	eb000235 	bl	c10d8dc <__aeabi_uidiv>
 c10d004:	e1a03000 	mov	r3, r0
 c10d008:	e1a03803 	lsl	r3, r3, #16
 c10d00c:	e1a03823 	lsr	r3, r3, #16
 c10d010:	e5843000 	str	r3, [r4]
 c10d014:	ea000046 	b	c10d134 <timer0_open_tick+0x1d8>
    } else if( tps > 10 && tps <= 100 ) { //programa el T0 con resoluciÃ³n de 2,5micros (400 KHz)
 c10d018:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
 c10d01c:	e353000a 	cmp	r3, #10
 c10d020:	9a000016 	bls	c10d080 <timer0_open_tick+0x124>
 c10d024:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
 c10d028:	e3530064 	cmp	r3, #100	; 0x64
 c10d02c:	8a000013 	bhi	c10d080 <timer0_open_tick+0x124>
    	TCFG0  = (TCFG0 & ~(0xff)) | (19);
 c10d030:	e59f3144 	ldr	r3, [pc, #324]	; c10d17c <timer0_open_tick+0x220>
 c10d034:	e59f2140 	ldr	r2, [pc, #320]	; c10d17c <timer0_open_tick+0x220>
 c10d038:	e5922000 	ldr	r2, [r2]
 c10d03c:	e3c220ff 	bic	r2, r2, #255	; 0xff
 c10d040:	e3822013 	orr	r2, r2, #19
 c10d044:	e5832000 	str	r2, [r3]
    	TCFG1  = (TCFG1 & ~(0xf)) | (2);
 c10d048:	e59f3130 	ldr	r3, [pc, #304]	; c10d180 <timer0_open_tick+0x224>
 c10d04c:	e59f212c 	ldr	r2, [pc, #300]	; c10d180 <timer0_open_tick+0x224>
 c10d050:	e5922000 	ldr	r2, [r2]
 c10d054:	e3c2200f 	bic	r2, r2, #15
 c10d058:	e3822002 	orr	r2, r2, #2
 c10d05c:	e5832000 	str	r2, [r3]
        TCNTB0 = (400000U / (uint32) tps);
 c10d060:	e59f411c 	ldr	r4, [pc, #284]	; c10d184 <timer0_open_tick+0x228>
 c10d064:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
 c10d068:	e59f011c 	ldr	r0, [pc, #284]	; c10d18c <timer0_open_tick+0x230>
 c10d06c:	e1a01003 	mov	r1, r3
 c10d070:	eb000219 	bl	c10d8dc <__aeabi_uidiv>
 c10d074:	e1a03000 	mov	r3, r0
 c10d078:	e5843000 	str	r3, [r4]
 c10d07c:	ea00002c 	b	c10d134 <timer0_open_tick+0x1d8>
    } else if( tps > 100 && tps <= 1000 ) { //programa el T0 con resoluciÃ³n de 0,25micros (4 MHz)
 c10d080:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
 c10d084:	e3530064 	cmp	r3, #100	; 0x64
 c10d088:	9a000015 	bls	c10d0e4 <timer0_open_tick+0x188>
 c10d08c:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
 c10d090:	e3530ffa 	cmp	r3, #1000	; 0x3e8
 c10d094:	8a000012 	bhi	c10d0e4 <timer0_open_tick+0x188>
    	TCFG0  = (TCFG0 & ~(0xff)) | (7);
 c10d098:	e59f30dc 	ldr	r3, [pc, #220]	; c10d17c <timer0_open_tick+0x220>
 c10d09c:	e59f20d8 	ldr	r2, [pc, #216]	; c10d17c <timer0_open_tick+0x220>
 c10d0a0:	e5922000 	ldr	r2, [r2]
 c10d0a4:	e3c220ff 	bic	r2, r2, #255	; 0xff
 c10d0a8:	e3822007 	orr	r2, r2, #7
 c10d0ac:	e5832000 	str	r2, [r3]
        TCFG1  = (TCFG1 & ~(0xf)) | (0);
 c10d0b0:	e59f30c8 	ldr	r3, [pc, #200]	; c10d180 <timer0_open_tick+0x224>
 c10d0b4:	e59f20c4 	ldr	r2, [pc, #196]	; c10d180 <timer0_open_tick+0x224>
 c10d0b8:	e5922000 	ldr	r2, [r2]
 c10d0bc:	e3c2200f 	bic	r2, r2, #15
 c10d0c0:	e5832000 	str	r2, [r3]
        TCNTB0 = (4000000U / (uint32) tps);
 c10d0c4:	e59f40b8 	ldr	r4, [pc, #184]	; c10d184 <timer0_open_tick+0x228>
 c10d0c8:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
 c10d0cc:	e59f00bc 	ldr	r0, [pc, #188]	; c10d190 <timer0_open_tick+0x234>
 c10d0d0:	e1a01003 	mov	r1, r3
 c10d0d4:	eb000200 	bl	c10d8dc <__aeabi_uidiv>
 c10d0d8:	e1a03000 	mov	r3, r0
 c10d0dc:	e5843000 	str	r3, [r4]
 c10d0e0:	ea000013 	b	c10d134 <timer0_open_tick+0x1d8>
    } else if ( tps > 1000 ) { //programa el T0 con resoluciÃ³n de 31,25 ns (32 MHz)
 c10d0e4:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
 c10d0e8:	e3530ffa 	cmp	r3, #1000	; 0x3e8
 c10d0ec:	9a000010 	bls	c10d134 <timer0_open_tick+0x1d8>
    	TCFG0  = (TCFG0 & ~(0xff));
 c10d0f0:	e59f3084 	ldr	r3, [pc, #132]	; c10d17c <timer0_open_tick+0x220>
 c10d0f4:	e59f2080 	ldr	r2, [pc, #128]	; c10d17c <timer0_open_tick+0x220>
 c10d0f8:	e5922000 	ldr	r2, [r2]
 c10d0fc:	e3c220ff 	bic	r2, r2, #255	; 0xff
 c10d100:	e5832000 	str	r2, [r3]
    	TCFG1  = (TCFG1 & ~(0xf));
 c10d104:	e59f3074 	ldr	r3, [pc, #116]	; c10d180 <timer0_open_tick+0x224>
 c10d108:	e59f2070 	ldr	r2, [pc, #112]	; c10d180 <timer0_open_tick+0x224>
 c10d10c:	e5922000 	ldr	r2, [r2]
 c10d110:	e3c2200f 	bic	r2, r2, #15
 c10d114:	e5832000 	str	r2, [r3]
        TCNTB0 = (32000000U / (uint32) tps);
 c10d118:	e59f4064 	ldr	r4, [pc, #100]	; c10d184 <timer0_open_tick+0x228>
 c10d11c:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
 c10d120:	e59f006c 	ldr	r0, [pc, #108]	; c10d194 <timer0_open_tick+0x238>
 c10d124:	e1a01003 	mov	r1, r3
 c10d128:	eb0001eb 	bl	c10d8dc <__aeabi_uidiv>
 c10d12c:	e1a03000 	mov	r3, r0
 c10d130:	e5843000 	str	r3, [r4]
    }

    TCON = (TCON & ~(0xf << 0)) | (1 << 3)| (1 << 1);//interval, carga TCNT0, stop T0
 c10d134:	e59f305c 	ldr	r3, [pc, #92]	; c10d198 <timer0_open_tick+0x23c>
 c10d138:	e59f2058 	ldr	r2, [pc, #88]	; c10d198 <timer0_open_tick+0x23c>
 c10d13c:	e5922000 	ldr	r2, [r2]
 c10d140:	e3c2200f 	bic	r2, r2, #15
 c10d144:	e382200a 	orr	r2, r2, #10
 c10d148:	e5832000 	str	r2, [r3]
    TCON = (TCON & ~(0xf << 0)) | (1 << 3) | (1 << 0);//interval, no carga TCNT0, start T0
 c10d14c:	e59f3044 	ldr	r3, [pc, #68]	; c10d198 <timer0_open_tick+0x23c>
 c10d150:	e59f2040 	ldr	r2, [pc, #64]	; c10d198 <timer0_open_tick+0x23c>
 c10d154:	e5922000 	ldr	r2, [r2]
 c10d158:	e3c2200f 	bic	r2, r2, #15
 c10d15c:	e3822009 	orr	r2, r2, #9
 c10d160:	e5832000 	str	r2, [r3]
}
 c10d164:	e24bd010 	sub	sp, fp, #16
 c10d168:	e89d6810 	ldm	sp, {r4, fp, sp, lr}
 c10d16c:	e12fff1e 	bx	lr
 c10d170:	0c7fff54 	.word	0x0c7fff54
 c10d174:	01e00024 	.word	0x01e00024
 c10d178:	01e0000c 	.word	0x01e0000c
 c10d17c:	01d50000 	.word	0x01d50000
 c10d180:	01d50004 	.word	0x01d50004
 c10d184:	01d5000c 	.word	0x01d5000c
 c10d188:	00009c40 	.word	0x00009c40
 c10d18c:	00061a80 	.word	0x00061a80
 c10d190:	003d0900 	.word	0x003d0900
 c10d194:	01e84800 	.word	0x01e84800
 c10d198:	01d50008 	.word	0x01d50008

0c10d19c <timer0_open_ms>:

void timer0_open_ms( void (*isr)(void), uint16 ms, uint8 mode )
{
 c10d19c:	e1a0c00d 	mov	ip, sp
 c10d1a0:	e92dd800 	push	{fp, ip, lr, pc}
 c10d1a4:	e24cb004 	sub	fp, ip, #4
 c10d1a8:	e24dd008 	sub	sp, sp, #8
 c10d1ac:	e50b0010 	str	r0, [fp, #-16]
 c10d1b0:	e1a03002 	mov	r3, r2
 c10d1b4:	e14b11b2 	strh	r1, [fp, #-18]	; 0xffffffee
 c10d1b8:	e54b3013 	strb	r3, [fp, #-19]	; 0xffffffed
	pISR_TIMER0 = (uint32)isr;
 c10d1bc:	e59f30c8 	ldr	r3, [pc, #200]	; c10d28c <timer0_open_ms+0xf0>
 c10d1c0:	e51b2010 	ldr	r2, [fp, #-16]
 c10d1c4:	e5832000 	str	r2, [r3]
	I_ISPC      = BIT_TIMER0;
 c10d1c8:	e59f30c0 	ldr	r3, [pc, #192]	; c10d290 <timer0_open_ms+0xf4>
 c10d1cc:	e3a02a02 	mov	r2, #8192	; 0x2000
 c10d1d0:	e5832000 	str	r2, [r3]
	INTMSK     &= ~(BIT_GLOBAL | BIT_TIMER0);
 c10d1d4:	e59f20b8 	ldr	r2, [pc, #184]	; c10d294 <timer0_open_ms+0xf8>
 c10d1d8:	e59f30b4 	ldr	r3, [pc, #180]	; c10d294 <timer0_open_ms+0xf8>
 c10d1dc:	e5933000 	ldr	r3, [r3]
 c10d1e0:	e3c33301 	bic	r3, r3, #67108864	; 0x4000000
 c10d1e4:	e3c33a02 	bic	r3, r3, #8192	; 0x2000
 c10d1e8:	e5823000 	str	r3, [r2]

	TCFG0 = (TCFG0 & ~(0xff)) | (199);
 c10d1ec:	e59f30a4 	ldr	r3, [pc, #164]	; c10d298 <timer0_open_ms+0xfc>
 c10d1f0:	e59f20a0 	ldr	r2, [pc, #160]	; c10d298 <timer0_open_ms+0xfc>
 c10d1f4:	e5922000 	ldr	r2, [r2]
 c10d1f8:	e3c220ff 	bic	r2, r2, #255	; 0xff
 c10d1fc:	e38220c7 	orr	r2, r2, #199	; 0xc7
 c10d200:	e5832000 	str	r2, [r3]
	TCFG1 = (TCFG1 & ~(0xf)) | (4);
 c10d204:	e59f3090 	ldr	r3, [pc, #144]	; c10d29c <timer0_open_ms+0x100>
 c10d208:	e59f208c 	ldr	r2, [pc, #140]	; c10d29c <timer0_open_ms+0x100>
 c10d20c:	e5922000 	ldr	r2, [r2]
 c10d210:	e3c2200f 	bic	r2, r2, #15
 c10d214:	e3822004 	orr	r2, r2, #4
 c10d218:	e5832000 	str	r2, [r3]
    TCNTB0 = 10*ms;
 c10d21c:	e59f107c 	ldr	r1, [pc, #124]	; c10d2a0 <timer0_open_ms+0x104>
 c10d220:	e15b21b2 	ldrh	r2, [fp, #-18]	; 0xffffffee
 c10d224:	e1a03002 	mov	r3, r2
 c10d228:	e1a03103 	lsl	r3, r3, #2
 c10d22c:	e0833002 	add	r3, r3, r2
 c10d230:	e1a03083 	lsl	r3, r3, #1
 c10d234:	e5813000 	str	r3, [r1]

	TCON = (TCON & ~(0xf << 0)) | (mode << 3)| (1 << 1);
 c10d238:	e59f3064 	ldr	r3, [pc, #100]	; c10d2a4 <timer0_open_ms+0x108>
 c10d23c:	e59f2060 	ldr	r2, [pc, #96]	; c10d2a4 <timer0_open_ms+0x108>
 c10d240:	e5922000 	ldr	r2, [r2]
 c10d244:	e3c2100f 	bic	r1, r2, #15
 c10d248:	e55b2013 	ldrb	r2, [fp, #-19]	; 0xffffffed
 c10d24c:	e1a02182 	lsl	r2, r2, #3
 c10d250:	e1812002 	orr	r2, r1, r2
 c10d254:	e3822002 	orr	r2, r2, #2
 c10d258:	e5832000 	str	r2, [r3]
	TCON = (TCON & ~(0xf << 0)) | (mode << 3) | (1 << 0);
 c10d25c:	e59f3040 	ldr	r3, [pc, #64]	; c10d2a4 <timer0_open_ms+0x108>
 c10d260:	e59f203c 	ldr	r2, [pc, #60]	; c10d2a4 <timer0_open_ms+0x108>
 c10d264:	e5922000 	ldr	r2, [r2]
 c10d268:	e3c2100f 	bic	r1, r2, #15
 c10d26c:	e55b2013 	ldrb	r2, [fp, #-19]	; 0xffffffed
 c10d270:	e1a02182 	lsl	r2, r2, #3
 c10d274:	e1812002 	orr	r2, r1, r2
 c10d278:	e3822001 	orr	r2, r2, #1
 c10d27c:	e5832000 	str	r2, [r3]
}
 c10d280:	e24bd00c 	sub	sp, fp, #12
 c10d284:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10d288:	e12fff1e 	bx	lr
 c10d28c:	0c7fff54 	.word	0x0c7fff54
 c10d290:	01e00024 	.word	0x01e00024
 c10d294:	01e0000c 	.word	0x01e0000c
 c10d298:	01d50000 	.word	0x01d50000
 c10d29c:	01d50004 	.word	0x01d50004
 c10d2a0:	01d5000c 	.word	0x01d5000c
 c10d2a4:	01d50008 	.word	0x01d50008

0c10d2a8 <timer0_close>:

void timer0_close( void )
{
 c10d2a8:	e1a0c00d 	mov	ip, sp
 c10d2ac:	e92dd800 	push	{fp, ip, lr, pc}
 c10d2b0:	e24cb004 	sub	fp, ip, #4
	TCNTB0 = 0x0000;
 c10d2b4:	e59f3068 	ldr	r3, [pc, #104]	; c10d324 <timer0_close+0x7c>
 c10d2b8:	e3a02000 	mov	r2, #0
 c10d2bc:	e5832000 	str	r2, [r3]
	TCMPB0 = 0x0000;
 c10d2c0:	e59f3060 	ldr	r3, [pc, #96]	; c10d328 <timer0_close+0x80>
 c10d2c4:	e3a02000 	mov	r2, #0
 c10d2c8:	e5832000 	str	r2, [r3]

    TCON = (TCON & ~(0xf << 0)) | (1 << 1);
 c10d2cc:	e59f3058 	ldr	r3, [pc, #88]	; c10d32c <timer0_close+0x84>
 c10d2d0:	e59f2054 	ldr	r2, [pc, #84]	; c10d32c <timer0_close+0x84>
 c10d2d4:	e5922000 	ldr	r2, [r2]
 c10d2d8:	e3c2200f 	bic	r2, r2, #15
 c10d2dc:	e3822002 	orr	r2, r2, #2
 c10d2e0:	e5832000 	str	r2, [r3]
	TCON = (TCON & ~(0xf << 0));
 c10d2e4:	e59f3040 	ldr	r3, [pc, #64]	; c10d32c <timer0_close+0x84>
 c10d2e8:	e59f203c 	ldr	r2, [pc, #60]	; c10d32c <timer0_close+0x84>
 c10d2ec:	e5922000 	ldr	r2, [r2]
 c10d2f0:	e3c2200f 	bic	r2, r2, #15
 c10d2f4:	e5832000 	str	r2, [r3]

	INTMSK     |= BIT_TIMER0;
 c10d2f8:	e59f3030 	ldr	r3, [pc, #48]	; c10d330 <timer0_close+0x88>
 c10d2fc:	e59f202c 	ldr	r2, [pc, #44]	; c10d330 <timer0_close+0x88>
 c10d300:	e5922000 	ldr	r2, [r2]
 c10d304:	e3822a02 	orr	r2, r2, #8192	; 0x2000
 c10d308:	e5832000 	str	r2, [r3]
    pISR_TIMER0 = (uint32)isr_TIMER0_dummy;
 c10d30c:	e59f3020 	ldr	r3, [pc, #32]	; c10d334 <timer0_close+0x8c>
 c10d310:	e59f2020 	ldr	r2, [pc, #32]	; c10d338 <timer0_close+0x90>
 c10d314:	e5832000 	str	r2, [r3]
}
 c10d318:	e24bd00c 	sub	sp, fp, #12
 c10d31c:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10d320:	e12fff1e 	bx	lr
 c10d324:	01d5000c 	.word	0x01d5000c
 c10d328:	01d50010 	.word	0x01d50010
 c10d32c:	01d50008 	.word	0x01d50008
 c10d330:	01e0000c 	.word	0x01e0000c
 c10d334:	0c7fff54 	.word	0x0c7fff54
 c10d338:	0c10c6bc 	.word	0x0c10c6bc

0c10d33c <uart0_init>:

#include <s3c44b0x.h>
#include <uart.h>

void uart0_init( void )
{
 c10d33c:	e1a0c00d 	mov	ip, sp
 c10d340:	e92dd800 	push	{fp, ip, lr, pc}
 c10d344:	e24cb004 	sub	fp, ip, #4
	UFCON0 =  0x1;
 c10d348:	e59f3040 	ldr	r3, [pc, #64]	; c10d390 <uart0_init+0x54>
 c10d34c:	e3a02001 	mov	r2, #1
 c10d350:	e5832000 	str	r2, [r3]
	UMCON0 =  0x0;
 c10d354:	e59f3038 	ldr	r3, [pc, #56]	; c10d394 <uart0_init+0x58>
 c10d358:	e3a02000 	mov	r2, #0
 c10d35c:	e5832000 	str	r2, [r3]
	ULCON0 =  0x3;
 c10d360:	e3a0361d 	mov	r3, #30408704	; 0x1d00000
 c10d364:	e3a02003 	mov	r2, #3
 c10d368:	e5832000 	str	r2, [r3]
	UBRDIV0 = 0x22;
 c10d36c:	e59f3024 	ldr	r3, [pc, #36]	; c10d398 <uart0_init+0x5c>
 c10d370:	e3a02022 	mov	r2, #34	; 0x22
 c10d374:	e5832000 	str	r2, [r3]
	UCON0 =  0x5;
 c10d378:	e59f301c 	ldr	r3, [pc, #28]	; c10d39c <uart0_init+0x60>
 c10d37c:	e3a02005 	mov	r2, #5
 c10d380:	e5832000 	str	r2, [r3]
}
 c10d384:	e24bd00c 	sub	sp, fp, #12
 c10d388:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10d38c:	e12fff1e 	bx	lr
 c10d390:	01d00008 	.word	0x01d00008
 c10d394:	01d0000c 	.word	0x01d0000c
 c10d398:	01d00028 	.word	0x01d00028
 c10d39c:	01d00004 	.word	0x01d00004

0c10d3a0 <uart0_putchar>:

void uart0_putchar( char ch )
{
 c10d3a0:	e1a0c00d 	mov	ip, sp
 c10d3a4:	e92dd800 	push	{fp, ip, lr, pc}
 c10d3a8:	e24cb004 	sub	fp, ip, #4
 c10d3ac:	e24dd008 	sub	sp, sp, #8
 c10d3b0:	e1a03000 	mov	r3, r0
 c10d3b4:	e54b300d 	strb	r3, [fp, #-13]
    while( UFSTAT0 & (1<<9) ); // mientras este lleno rx no puedo poner el char
 c10d3b8:	e1a00000 	nop			; (mov r0, r0)
 c10d3bc:	e59f3024 	ldr	r3, [pc, #36]	; c10d3e8 <uart0_putchar+0x48>
 c10d3c0:	e5933000 	ldr	r3, [r3]
 c10d3c4:	e2033c02 	and	r3, r3, #512	; 0x200
 c10d3c8:	e3530000 	cmp	r3, #0
 c10d3cc:	1afffffa 	bne	c10d3bc <uart0_putchar+0x1c>
    UTXH0 = ch;
 c10d3d0:	e59f3014 	ldr	r3, [pc, #20]	; c10d3ec <uart0_putchar+0x4c>
 c10d3d4:	e55b200d 	ldrb	r2, [fp, #-13]
 c10d3d8:	e5832000 	str	r2, [r3]
}        
 c10d3dc:	e24bd00c 	sub	sp, fp, #12
 c10d3e0:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10d3e4:	e12fff1e 	bx	lr
 c10d3e8:	01d00018 	.word	0x01d00018
 c10d3ec:	01d00020 	.word	0x01d00020

0c10d3f0 <uart0_getchar>:

char uart0_getchar( void )
{
 c10d3f0:	e1a0c00d 	mov	ip, sp
 c10d3f4:	e92dd800 	push	{fp, ip, lr, pc}
 c10d3f8:	e24cb004 	sub	fp, ip, #4
	while(!(UFSTAT0 & 15)); // mientras no introduzca algo el usuario me quedo en el bucle
 c10d3fc:	e1a00000 	nop			; (mov r0, r0)
 c10d400:	e59f3028 	ldr	r3, [pc, #40]	; c10d430 <uart0_getchar+0x40>
 c10d404:	e5933000 	ldr	r3, [r3]
 c10d408:	e203300f 	and	r3, r3, #15
 c10d40c:	e3530000 	cmp	r3, #0
 c10d410:	0afffffa 	beq	c10d400 <uart0_getchar+0x10>
	return URXH0;
 c10d414:	e59f3018 	ldr	r3, [pc, #24]	; c10d434 <uart0_getchar+0x44>
 c10d418:	e5933000 	ldr	r3, [r3]
 c10d41c:	e20330ff 	and	r3, r3, #255	; 0xff
}
 c10d420:	e1a00003 	mov	r0, r3
 c10d424:	e24bd00c 	sub	sp, fp, #12
 c10d428:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10d42c:	e12fff1e 	bx	lr
 c10d430:	01d00018 	.word	0x01d00018
 c10d434:	01d00024 	.word	0x01d00024

0c10d438 <uart0_puts>:

void uart0_puts( char *s )
{
 c10d438:	e1a0c00d 	mov	ip, sp
 c10d43c:	e92dd800 	push	{fp, ip, lr, pc}
 c10d440:	e24cb004 	sub	fp, ip, #4
 c10d444:	e24dd008 	sub	sp, sp, #8
 c10d448:	e50b0010 	str	r0, [fp, #-16]
	while(*s != '\0'){ // no llego al fin de línea
 c10d44c:	ea000006 	b	c10d46c <uart0_puts+0x34>
		uart0_putchar(*s); // meto el caracter
 c10d450:	e51b3010 	ldr	r3, [fp, #-16]
 c10d454:	e5d33000 	ldrb	r3, [r3]
 c10d458:	e1a00003 	mov	r0, r3
 c10d45c:	ebffffcf 	bl	c10d3a0 <uart0_putchar>
		s++; // aumento el puntero
 c10d460:	e51b3010 	ldr	r3, [fp, #-16]
 c10d464:	e2833001 	add	r3, r3, #1
 c10d468:	e50b3010 	str	r3, [fp, #-16]
	return URXH0;
}

void uart0_puts( char *s )
{
	while(*s != '\0'){ // no llego al fin de línea
 c10d46c:	e51b3010 	ldr	r3, [fp, #-16]
 c10d470:	e5d33000 	ldrb	r3, [r3]
 c10d474:	e3530000 	cmp	r3, #0
 c10d478:	1afffff4 	bne	c10d450 <uart0_puts+0x18>
		uart0_putchar(*s); // meto el caracter
		s++; // aumento el puntero
	}
}
 c10d47c:	e24bd00c 	sub	sp, fp, #12
 c10d480:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10d484:	e12fff1e 	bx	lr

0c10d488 <uart0_putint>:

void uart0_putint( int32 i )
{
 c10d488:	e1a0c00d 	mov	ip, sp
 c10d48c:	e92dd800 	push	{fp, ip, lr, pc}
 c10d490:	e24cb004 	sub	fp, ip, #4
 c10d494:	e24dd018 	sub	sp, sp, #24
 c10d498:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
	char buf[8 + 1];
	char *p = buf + 8;
 c10d49c:	e24b301c 	sub	r3, fp, #28
 c10d4a0:	e2833008 	add	r3, r3, #8
 c10d4a4:	e50b3010 	str	r3, [fp, #-16]
	uint8 c = 0;
 c10d4a8:	e3a03000 	mov	r3, #0
 c10d4ac:	e54b3012 	strb	r3, [fp, #-18]	; 0xffffffee
	uint8 neg = 0;
 c10d4b0:	e3a03000 	mov	r3, #0
 c10d4b4:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef

	if(i < 0){
 c10d4b8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c10d4bc:	e3530000 	cmp	r3, #0
 c10d4c0:	aa000004 	bge	c10d4d8 <uart0_putint+0x50>
		neg = 1;
 c10d4c4:	e3a03001 	mov	r3, #1
 c10d4c8:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
		i = -i;
 c10d4cc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c10d4d0:	e2633000 	rsb	r3, r3, #0
 c10d4d4:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
	}

	*p = '\0';
 c10d4d8:	e51b3010 	ldr	r3, [fp, #-16]
 c10d4dc:	e3a02000 	mov	r2, #0
 c10d4e0:	e5c32000 	strb	r2, [r3]
	do {
		c = i % 10; // cojo el resto
 c10d4e4:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
 c10d4e8:	e59f30a8 	ldr	r3, [pc, #168]	; c10d598 <uart0_putint+0x110>
 c10d4ec:	e0c32391 	smull	r2, r3, r1, r3
 c10d4f0:	e1a02143 	asr	r2, r3, #2
 c10d4f4:	e1a03fc1 	asr	r3, r1, #31
 c10d4f8:	e0632002 	rsb	r2, r3, r2
 c10d4fc:	e1a03002 	mov	r3, r2
 c10d500:	e1a03103 	lsl	r3, r3, #2
 c10d504:	e0833002 	add	r3, r3, r2
 c10d508:	e1a03083 	lsl	r3, r3, #1
 c10d50c:	e0632001 	rsb	r2, r3, r1
 c10d510:	e1a03002 	mov	r3, r2
 c10d514:	e54b3012 	strb	r3, [fp, #-18]	; 0xffffffee
		*--p = '0' + c; // lo sumo a la posicion que toca el array
 c10d518:	e51b3010 	ldr	r3, [fp, #-16]
 c10d51c:	e2433001 	sub	r3, r3, #1
 c10d520:	e50b3010 	str	r3, [fp, #-16]
 c10d524:	e55b3012 	ldrb	r3, [fp, #-18]	; 0xffffffee
 c10d528:	e2833030 	add	r3, r3, #48	; 0x30
 c10d52c:	e20320ff 	and	r2, r3, #255	; 0xff
 c10d530:	e51b3010 	ldr	r3, [fp, #-16]
 c10d534:	e5c32000 	strb	r2, [r3]
		i = i / 10; // divido entre 10
 c10d538:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c10d53c:	e59f2054 	ldr	r2, [pc, #84]	; c10d598 <uart0_putint+0x110>
 c10d540:	e0c21293 	smull	r1, r2, r3, r2
 c10d544:	e1a02142 	asr	r2, r2, #2
 c10d548:	e1a03fc3 	asr	r3, r3, #31
 c10d54c:	e0633002 	rsb	r3, r3, r2
 c10d550:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
	} while (i);
 c10d554:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c10d558:	e3530000 	cmp	r3, #0
 c10d55c:	1affffe0 	bne	c10d4e4 <uart0_putint+0x5c>

	if(neg == 1){
 c10d560:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c10d564:	e3530001 	cmp	r3, #1
 c10d568:	1a000005 	bne	c10d584 <uart0_putint+0xfc>
		*--p = '-';
 c10d56c:	e51b3010 	ldr	r3, [fp, #-16]
 c10d570:	e2433001 	sub	r3, r3, #1
 c10d574:	e50b3010 	str	r3, [fp, #-16]
 c10d578:	e51b3010 	ldr	r3, [fp, #-16]
 c10d57c:	e3a0202d 	mov	r2, #45	; 0x2d
 c10d580:	e5c32000 	strb	r2, [r3]
	}

	uart0_puts(p);
 c10d584:	e51b0010 	ldr	r0, [fp, #-16]
 c10d588:	ebffffaa 	bl	c10d438 <uart0_puts>
}
 c10d58c:	e24bd00c 	sub	sp, fp, #12
 c10d590:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10d594:	e12fff1e 	bx	lr
 c10d598:	66666667 	.word	0x66666667

0c10d59c <uart0_puthex>:

void uart0_puthex( uint32 i )
{
 c10d59c:	e1a0c00d 	mov	ip, sp
 c10d5a0:	e92dd800 	push	{fp, ip, lr, pc}
 c10d5a4:	e24cb004 	sub	fp, ip, #4
 c10d5a8:	e24dd018 	sub	sp, sp, #24
 c10d5ac:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
    char buf[8 + 1];
    char *p = buf + 8;
 c10d5b0:	e24b301c 	sub	r3, fp, #28
 c10d5b4:	e2833008 	add	r3, r3, #8
 c10d5b8:	e50b3010 	str	r3, [fp, #-16]
    uint8 c;

    *p = '\0';
 c10d5bc:	e51b3010 	ldr	r3, [fp, #-16]
 c10d5c0:	e3a02000 	mov	r2, #0
 c10d5c4:	e5c32000 	strb	r2, [r3]

    do {
        c = i & 0xf; // resto de la division
 c10d5c8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c10d5cc:	e20330ff 	and	r3, r3, #255	; 0xff
 c10d5d0:	e203300f 	and	r3, r3, #15
 c10d5d4:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
        if( c < 10 )
 c10d5d8:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c10d5dc:	e3530009 	cmp	r3, #9
 c10d5e0:	8a000008 	bhi	c10d608 <uart0_puthex+0x6c>
            *--p = '0' + c; // si esta en letra
 c10d5e4:	e51b3010 	ldr	r3, [fp, #-16]
 c10d5e8:	e2433001 	sub	r3, r3, #1
 c10d5ec:	e50b3010 	str	r3, [fp, #-16]
 c10d5f0:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c10d5f4:	e2833030 	add	r3, r3, #48	; 0x30
 c10d5f8:	e20320ff 	and	r2, r3, #255	; 0xff
 c10d5fc:	e51b3010 	ldr	r3, [fp, #-16]
 c10d600:	e5c32000 	strb	r2, [r3]
 c10d604:	ea000007 	b	c10d628 <uart0_puthex+0x8c>
        else
            *--p = 'a' + c - 10; // si esta en numero
 c10d608:	e51b3010 	ldr	r3, [fp, #-16]
 c10d60c:	e2433001 	sub	r3, r3, #1
 c10d610:	e50b3010 	str	r3, [fp, #-16]
 c10d614:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c10d618:	e2833057 	add	r3, r3, #87	; 0x57
 c10d61c:	e20320ff 	and	r2, r3, #255	; 0xff
 c10d620:	e51b3010 	ldr	r3, [fp, #-16]
 c10d624:	e5c32000 	strb	r2, [r3]
        i = i >> 4; // divido entre 16
 c10d628:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c10d62c:	e1a03223 	lsr	r3, r3, #4
 c10d630:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
    } while( i );
 c10d634:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c10d638:	e3530000 	cmp	r3, #0
 c10d63c:	1affffe1 	bne	c10d5c8 <uart0_puthex+0x2c>

    uart0_puts( p );
 c10d640:	e51b0010 	ldr	r0, [fp, #-16]
 c10d644:	ebffff7b 	bl	c10d438 <uart0_puts>
}
 c10d648:	e24bd00c 	sub	sp, fp, #12
 c10d64c:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10d650:	e12fff1e 	bx	lr

0c10d654 <uart0_gets>:

void uart0_gets( char *s )
{
 c10d654:	e1a0c00d 	mov	ip, sp
 c10d658:	e92dd800 	push	{fp, ip, lr, pc}
 c10d65c:	e24cb004 	sub	fp, ip, #4
 c10d660:	e24dd010 	sub	sp, sp, #16
 c10d664:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
	char caracter = uart0_getchar();
 c10d668:	ebffff60 	bl	c10d3f0 <uart0_getchar>
 c10d66c:	e1a03000 	mov	r3, r0
 c10d670:	e54b300d 	strb	r3, [fp, #-13]

	while(caracter != '\n'){ // mientras no llegue al final
 c10d674:	ea000008 	b	c10d69c <uart0_gets+0x48>
		*s = caracter;
 c10d678:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c10d67c:	e55b200d 	ldrb	r2, [fp, #-13]
 c10d680:	e5c32000 	strb	r2, [r3]
		s++;
 c10d684:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c10d688:	e2833001 	add	r3, r3, #1
 c10d68c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
		caracter = uart0_getchar();
 c10d690:	ebffff56 	bl	c10d3f0 <uart0_getchar>
 c10d694:	e1a03000 	mov	r3, r0
 c10d698:	e54b300d 	strb	r3, [fp, #-13]

void uart0_gets( char *s )
{
	char caracter = uart0_getchar();

	while(caracter != '\n'){ // mientras no llegue al final
 c10d69c:	e55b300d 	ldrb	r3, [fp, #-13]
 c10d6a0:	e353000a 	cmp	r3, #10
 c10d6a4:	1afffff3 	bne	c10d678 <uart0_gets+0x24>
		*s = caracter;
		s++;
		caracter = uart0_getchar();
	}
	*s = '\0';
 c10d6a8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c10d6ac:	e3a02000 	mov	r2, #0
 c10d6b0:	e5c32000 	strb	r2, [r3]
}
 c10d6b4:	e24bd00c 	sub	sp, fp, #12
 c10d6b8:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10d6bc:	e12fff1e 	bx	lr

0c10d6c0 <uart0_getint>:

int32 uart0_getint( void )
{
 c10d6c0:	e1a0c00d 	mov	ip, sp
 c10d6c4:	e92dd800 	push	{fp, ip, lr, pc}
 c10d6c8:	e24cb004 	sub	fp, ip, #4
 c10d6cc:	e24dd090 	sub	sp, sp, #144	; 0x90
	int32 dev = 0;
 c10d6d0:	e3a03000 	mov	r3, #0
 c10d6d4:	e50b3010 	str	r3, [fp, #-16]
	int8 negativo = 1;
 c10d6d8:	e3a03001 	mov	r3, #1
 c10d6dc:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
	char n[128], *p;
	uart0_gets(n);
 c10d6e0:	e24b3098 	sub	r3, fp, #152	; 0x98
 c10d6e4:	e1a00003 	mov	r0, r3
 c10d6e8:	ebffffd9 	bl	c10d654 <uart0_gets>
	p = n;
 c10d6ec:	e24b3098 	sub	r3, fp, #152	; 0x98
 c10d6f0:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
	if(*p == '-'){
 c10d6f4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c10d6f8:	e5d33000 	ldrb	r3, [r3]
 c10d6fc:	e353002d 	cmp	r3, #45	; 0x2d
 c10d700:	1a00001a 	bne	c10d770 <uart0_getint+0xb0>
		negativo = 0;
 c10d704:	e3a03000 	mov	r3, #0
 c10d708:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
		p++;
 c10d70c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c10d710:	e2833001 	add	r3, r3, #1
 c10d714:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
	}
	while(*p != '\0'){
 c10d718:	ea000015 	b	c10d774 <uart0_getint+0xb4>
		dev = dev + *p - '0';
 c10d71c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c10d720:	e5d33000 	ldrb	r3, [r3]
 c10d724:	e1a02003 	mov	r2, r3
 c10d728:	e51b3010 	ldr	r3, [fp, #-16]
 c10d72c:	e0823003 	add	r3, r2, r3
 c10d730:	e2433030 	sub	r3, r3, #48	; 0x30
 c10d734:	e50b3010 	str	r3, [fp, #-16]
		if(*p != '\0'){ // no llego a final de linea
 c10d738:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c10d73c:	e5d33000 	ldrb	r3, [r3]
 c10d740:	e3530000 	cmp	r3, #0
 c10d744:	0a000005 	beq	c10d760 <uart0_getint+0xa0>
			dev *= 10;
 c10d748:	e51b2010 	ldr	r2, [fp, #-16]
 c10d74c:	e1a03002 	mov	r3, r2
 c10d750:	e1a03103 	lsl	r3, r3, #2
 c10d754:	e0833002 	add	r3, r3, r2
 c10d758:	e1a03083 	lsl	r3, r3, #1
 c10d75c:	e50b3010 	str	r3, [fp, #-16]
		}
		++p;
 c10d760:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c10d764:	e2833001 	add	r3, r3, #1
 c10d768:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
 c10d76c:	ea000000 	b	c10d774 <uart0_getint+0xb4>
	p = n;
	if(*p == '-'){
		negativo = 0;
		p++;
	}
	while(*p != '\0'){
 c10d770:	e1a00000 	nop			; (mov r0, r0)
 c10d774:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c10d778:	e5d33000 	ldrb	r3, [r3]
 c10d77c:	e3530000 	cmp	r3, #0
 c10d780:	1affffe5 	bne	c10d71c <uart0_getint+0x5c>
		if(*p != '\0'){ // no llego a final de linea
			dev *= 10;
		}
		++p;
	}
	if(negativo == 0){
 c10d784:	e15b31d1 	ldrsb	r3, [fp, #-17]	; 0xffffffef
 c10d788:	e3530000 	cmp	r3, #0
 c10d78c:	1a000002 	bne	c10d79c <uart0_getint+0xdc>
		dev *= -1;
 c10d790:	e51b3010 	ldr	r3, [fp, #-16]
 c10d794:	e2633000 	rsb	r3, r3, #0
 c10d798:	e50b3010 	str	r3, [fp, #-16]
	}
	return dev;
 c10d79c:	e51b3010 	ldr	r3, [fp, #-16]
}
 c10d7a0:	e1a00003 	mov	r0, r3
 c10d7a4:	e24bd00c 	sub	sp, fp, #12
 c10d7a8:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10d7ac:	e12fff1e 	bx	lr

0c10d7b0 <uart0_gethex>:

uint32 uart0_gethex( void )
{
 c10d7b0:	e1a0c00d 	mov	ip, sp
 c10d7b4:	e92dd800 	push	{fp, ip, lr, pc}
 c10d7b8:	e24cb004 	sub	fp, ip, #4
 c10d7bc:	e24dd090 	sub	sp, sp, #144	; 0x90
	char buf[128];
	char *p = buf;
 c10d7c0:	e24b3098 	sub	r3, fp, #152	; 0x98
 c10d7c4:	e50b3010 	str	r3, [fp, #-16]
	uint32 c;
	uint32 aux = 0;
 c10d7c8:	e3a03000 	mov	r3, #0
 c10d7cc:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8

	uart0_gets(p);
 c10d7d0:	e51b0010 	ldr	r0, [fp, #-16]
 c10d7d4:	ebffff9e 	bl	c10d654 <uart0_gets>
	do {
		if (*p <= '9')
 c10d7d8:	e51b3010 	ldr	r3, [fp, #-16]
 c10d7dc:	e5d33000 	ldrb	r3, [r3]
 c10d7e0:	e3530039 	cmp	r3, #57	; 0x39
 c10d7e4:	8a000004 	bhi	c10d7fc <uart0_gethex+0x4c>
			c = *p - '0';
 c10d7e8:	e51b3010 	ldr	r3, [fp, #-16]
 c10d7ec:	e5d33000 	ldrb	r3, [r3]
 c10d7f0:	e2433030 	sub	r3, r3, #48	; 0x30
 c10d7f4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
 c10d7f8:	ea000020 	b	c10d880 <uart0_gethex+0xd0>
		else if((*p == 'A' || *p == 'B' || *p == 'C' || *p == 'D' || *p == 'E' || *p == 'F'))
 c10d7fc:	e51b3010 	ldr	r3, [fp, #-16]
 c10d800:	e5d33000 	ldrb	r3, [r3]
 c10d804:	e3530041 	cmp	r3, #65	; 0x41
 c10d808:	0a000013 	beq	c10d85c <uart0_gethex+0xac>
 c10d80c:	e51b3010 	ldr	r3, [fp, #-16]
 c10d810:	e5d33000 	ldrb	r3, [r3]
 c10d814:	e3530042 	cmp	r3, #66	; 0x42
 c10d818:	0a00000f 	beq	c10d85c <uart0_gethex+0xac>
 c10d81c:	e51b3010 	ldr	r3, [fp, #-16]
 c10d820:	e5d33000 	ldrb	r3, [r3]
 c10d824:	e3530043 	cmp	r3, #67	; 0x43
 c10d828:	0a00000b 	beq	c10d85c <uart0_gethex+0xac>
 c10d82c:	e51b3010 	ldr	r3, [fp, #-16]
 c10d830:	e5d33000 	ldrb	r3, [r3]
 c10d834:	e3530044 	cmp	r3, #68	; 0x44
 c10d838:	0a000007 	beq	c10d85c <uart0_gethex+0xac>
 c10d83c:	e51b3010 	ldr	r3, [fp, #-16]
 c10d840:	e5d33000 	ldrb	r3, [r3]
 c10d844:	e3530045 	cmp	r3, #69	; 0x45
 c10d848:	0a000003 	beq	c10d85c <uart0_gethex+0xac>
 c10d84c:	e51b3010 	ldr	r3, [fp, #-16]
 c10d850:	e5d33000 	ldrb	r3, [r3]
 c10d854:	e3530046 	cmp	r3, #70	; 0x46
 c10d858:	1a000004 	bne	c10d870 <uart0_gethex+0xc0>
			c = *p - 'A' + 10;
 c10d85c:	e51b3010 	ldr	r3, [fp, #-16]
 c10d860:	e5d33000 	ldrb	r3, [r3]
 c10d864:	e2433037 	sub	r3, r3, #55	; 0x37
 c10d868:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
 c10d86c:	ea000003 	b	c10d880 <uart0_gethex+0xd0>
		else
			c = *p - 'a' + 10;
 c10d870:	e51b3010 	ldr	r3, [fp, #-16]
 c10d874:	e5d33000 	ldrb	r3, [r3]
 c10d878:	e2433057 	sub	r3, r3, #87	; 0x57
 c10d87c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

		aux += c;
 c10d880:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
 c10d884:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c10d888:	e0823003 	add	r3, r2, r3
 c10d88c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
		++p;
 c10d890:	e51b3010 	ldr	r3, [fp, #-16]
 c10d894:	e2833001 	add	r3, r3, #1
 c10d898:	e50b3010 	str	r3, [fp, #-16]
		if (*p != '\0') {
 c10d89c:	e51b3010 	ldr	r3, [fp, #-16]
 c10d8a0:	e5d33000 	ldrb	r3, [r3]
 c10d8a4:	e3530000 	cmp	r3, #0
 c10d8a8:	0a000002 	beq	c10d8b8 <uart0_gethex+0x108>
			aux = aux << 4;
 c10d8ac:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c10d8b0:	e1a03203 	lsl	r3, r3, #4
 c10d8b4:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
		}
	} while (*p != '\0');
 c10d8b8:	e51b3010 	ldr	r3, [fp, #-16]
 c10d8bc:	e5d33000 	ldrb	r3, [r3]
 c10d8c0:	e3530000 	cmp	r3, #0
 c10d8c4:	1affffc3 	bne	c10d7d8 <uart0_gethex+0x28>
	return aux;
 c10d8c8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
}
 c10d8cc:	e1a00003 	mov	r0, r3
 c10d8d0:	e24bd00c 	sub	sp, fp, #12
 c10d8d4:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10d8d8:	e12fff1e 	bx	lr

0c10d8dc <__aeabi_uidiv>:
 c10d8dc:	e2512001 	subs	r2, r1, #1
 c10d8e0:	012fff1e 	bxeq	lr
 c10d8e4:	3a000036 	bcc	c10d9c4 <__aeabi_uidiv+0xe8>
 c10d8e8:	e1500001 	cmp	r0, r1
 c10d8ec:	9a000022 	bls	c10d97c <__aeabi_uidiv+0xa0>
 c10d8f0:	e1110002 	tst	r1, r2
 c10d8f4:	0a000023 	beq	c10d988 <__aeabi_uidiv+0xac>
 c10d8f8:	e311020e 	tst	r1, #-536870912	; 0xe0000000
 c10d8fc:	01a01181 	lsleq	r1, r1, #3
 c10d900:	03a03008 	moveq	r3, #8
 c10d904:	13a03001 	movne	r3, #1
 c10d908:	e3510201 	cmp	r1, #268435456	; 0x10000000
 c10d90c:	31510000 	cmpcc	r1, r0
 c10d910:	31a01201 	lslcc	r1, r1, #4
 c10d914:	31a03203 	lslcc	r3, r3, #4
 c10d918:	3afffffa 	bcc	c10d908 <__aeabi_uidiv+0x2c>
 c10d91c:	e3510102 	cmp	r1, #-2147483648	; 0x80000000
 c10d920:	31510000 	cmpcc	r1, r0
 c10d924:	31a01081 	lslcc	r1, r1, #1
 c10d928:	31a03083 	lslcc	r3, r3, #1
 c10d92c:	3afffffa 	bcc	c10d91c <__aeabi_uidiv+0x40>
 c10d930:	e3a02000 	mov	r2, #0
 c10d934:	e1500001 	cmp	r0, r1
 c10d938:	20400001 	subcs	r0, r0, r1
 c10d93c:	21822003 	orrcs	r2, r2, r3
 c10d940:	e15000a1 	cmp	r0, r1, lsr #1
 c10d944:	204000a1 	subcs	r0, r0, r1, lsr #1
 c10d948:	218220a3 	orrcs	r2, r2, r3, lsr #1
 c10d94c:	e1500121 	cmp	r0, r1, lsr #2
 c10d950:	20400121 	subcs	r0, r0, r1, lsr #2
 c10d954:	21822123 	orrcs	r2, r2, r3, lsr #2
 c10d958:	e15001a1 	cmp	r0, r1, lsr #3
 c10d95c:	204001a1 	subcs	r0, r0, r1, lsr #3
 c10d960:	218221a3 	orrcs	r2, r2, r3, lsr #3
 c10d964:	e3500000 	cmp	r0, #0
 c10d968:	11b03223 	lsrsne	r3, r3, #4
 c10d96c:	11a01221 	lsrne	r1, r1, #4
 c10d970:	1affffef 	bne	c10d934 <__aeabi_uidiv+0x58>
 c10d974:	e1a00002 	mov	r0, r2
 c10d978:	e12fff1e 	bx	lr
 c10d97c:	03a00001 	moveq	r0, #1
 c10d980:	13a00000 	movne	r0, #0
 c10d984:	e12fff1e 	bx	lr
 c10d988:	e3510801 	cmp	r1, #65536	; 0x10000
 c10d98c:	21a01821 	lsrcs	r1, r1, #16
 c10d990:	23a02010 	movcs	r2, #16
 c10d994:	33a02000 	movcc	r2, #0
 c10d998:	e3510c01 	cmp	r1, #256	; 0x100
 c10d99c:	21a01421 	lsrcs	r1, r1, #8
 c10d9a0:	22822008 	addcs	r2, r2, #8
 c10d9a4:	e3510010 	cmp	r1, #16
 c10d9a8:	21a01221 	lsrcs	r1, r1, #4
 c10d9ac:	22822004 	addcs	r2, r2, #4
 c10d9b0:	e3510004 	cmp	r1, #4
 c10d9b4:	82822003 	addhi	r2, r2, #3
 c10d9b8:	908220a1 	addls	r2, r2, r1, lsr #1
 c10d9bc:	e1a00230 	lsr	r0, r0, r2
 c10d9c0:	e12fff1e 	bx	lr
 c10d9c4:	e3500000 	cmp	r0, #0
 c10d9c8:	13e00000 	mvnne	r0, #0
 c10d9cc:	ea000007 	b	c10d9f0 <__aeabi_idiv0>

0c10d9d0 <__aeabi_uidivmod>:
 c10d9d0:	e3510000 	cmp	r1, #0
 c10d9d4:	0afffffa 	beq	c10d9c4 <__aeabi_uidiv+0xe8>
 c10d9d8:	e92d4003 	push	{r0, r1, lr}
 c10d9dc:	ebffffbe 	bl	c10d8dc <__aeabi_uidiv>
 c10d9e0:	e8bd4006 	pop	{r1, r2, lr}
 c10d9e4:	e0030092 	mul	r3, r2, r0
 c10d9e8:	e0411003 	sub	r1, r1, r3
 c10d9ec:	e12fff1e 	bx	lr

0c10d9f0 <__aeabi_idiv0>:
 c10d9f0:	e12fff1e 	bx	lr

0c10d9f4 <__aeabi_uldivmod>:
 c10d9f4:	e3530000 	cmp	r3, #0
 c10d9f8:	03520000 	cmpeq	r2, #0
 c10d9fc:	1a000004 	bne	c10da14 <__aeabi_uldivmod+0x20>
 c10da00:	e3510000 	cmp	r1, #0
 c10da04:	03500000 	cmpeq	r0, #0
 c10da08:	13e01000 	mvnne	r1, #0
 c10da0c:	13e00000 	mvnne	r0, #0
 c10da10:	eafffff6 	b	c10d9f0 <__aeabi_idiv0>
 c10da14:	e24dd008 	sub	sp, sp, #8
 c10da18:	e92d6000 	push	{sp, lr}
 c10da1c:	eb000013 	bl	c10da70 <__gnu_uldivmod_helper>
 c10da20:	e59de004 	ldr	lr, [sp, #4]
 c10da24:	e28dd008 	add	sp, sp, #8
 c10da28:	e8bd000c 	pop	{r2, r3}
 c10da2c:	e12fff1e 	bx	lr

0c10da30 <__gnu_ldivmod_helper>:
 c10da30:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
 c10da34:	e1a04002 	mov	r4, r2
 c10da38:	e1a07003 	mov	r7, r3
 c10da3c:	e1a05000 	mov	r5, r0
 c10da40:	e1a06001 	mov	r6, r1
 c10da44:	eb000019 	bl	c10dab0 <__divdi3>
 c10da48:	e0070790 	mul	r7, r0, r7
 c10da4c:	e0832490 	umull	r2, r3, r0, r4
 c10da50:	e0247491 	mla	r4, r1, r4, r7
 c10da54:	e0843003 	add	r3, r4, r3
 c10da58:	e0555002 	subs	r5, r5, r2
 c10da5c:	e0c66003 	sbc	r6, r6, r3
 c10da60:	e59d3018 	ldr	r3, [sp, #24]
 c10da64:	e8830060 	stm	r3, {r5, r6}
 c10da68:	e8bd40f8 	pop	{r3, r4, r5, r6, r7, lr}
 c10da6c:	e12fff1e 	bx	lr

0c10da70 <__gnu_uldivmod_helper>:
 c10da70:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
 c10da74:	e1a04002 	mov	r4, r2
 c10da78:	e1a07003 	mov	r7, r3
 c10da7c:	e1a05000 	mov	r5, r0
 c10da80:	e1a06001 	mov	r6, r1
 c10da84:	eb000133 	bl	c10df58 <__udivdi3>
 c10da88:	e0070790 	mul	r7, r0, r7
 c10da8c:	e0832490 	umull	r2, r3, r0, r4
 c10da90:	e0247491 	mla	r4, r1, r4, r7
 c10da94:	e0843003 	add	r3, r4, r3
 c10da98:	e0555002 	subs	r5, r5, r2
 c10da9c:	e0c66003 	sbc	r6, r6, r3
 c10daa0:	e59d3018 	ldr	r3, [sp, #24]
 c10daa4:	e8830060 	stm	r3, {r5, r6}
 c10daa8:	e8bd40f8 	pop	{r3, r4, r5, r6, r7, lr}
 c10daac:	e12fff1e 	bx	lr

0c10dab0 <__divdi3>:
 c10dab0:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c10dab4:	e3510000 	cmp	r1, #0
 c10dab8:	e24dd014 	sub	sp, sp, #20
 c10dabc:	e1a0c003 	mov	ip, r3
 c10dac0:	a3a07000 	movge	r7, #0
 c10dac4:	ba000094 	blt	c10dd1c <__divdi3+0x26c>
 c10dac8:	e35c0000 	cmp	ip, #0
 c10dacc:	ba00008e 	blt	c10dd0c <__divdi3+0x25c>
 c10dad0:	e253a000 	subs	sl, r3, #0
 c10dad4:	e1a0b000 	mov	fp, r0
 c10dad8:	e1a08001 	mov	r8, r1
 c10dadc:	e1a09002 	mov	r9, r2
 c10dae0:	e1a04002 	mov	r4, r2
 c10dae4:	e1a05000 	mov	r5, r0
 c10dae8:	e1a06001 	mov	r6, r1
 c10daec:	1a00003e 	bne	c10dbec <__divdi3+0x13c>
 c10daf0:	e1520001 	cmp	r2, r1
 c10daf4:	9a00004c 	bls	c10dc2c <__divdi3+0x17c>
 c10daf8:	e1a00002 	mov	r0, r2
 c10dafc:	eb000222 	bl	c10e38c <__clzsi2>
 c10db00:	e3500000 	cmp	r0, #0
 c10db04:	12603020 	rsbne	r3, r0, #32
 c10db08:	11a0333b 	lsrne	r3, fp, r3
 c10db0c:	11a04019 	lslne	r4, r9, r0
 c10db10:	11836018 	orrne	r6, r3, r8, lsl r0
 c10db14:	e1a09824 	lsr	r9, r4, #16
 c10db18:	11a0501b 	lslne	r5, fp, r0
 c10db1c:	e1a01009 	mov	r1, r9
 c10db20:	e1a00006 	mov	r0, r6
 c10db24:	ebffff6c 	bl	c10d8dc <__aeabi_uidiv>
 c10db28:	e1a01009 	mov	r1, r9
 c10db2c:	e1a0a000 	mov	sl, r0
 c10db30:	e1a00006 	mov	r0, r6
 c10db34:	ebffffa5 	bl	c10d9d0 <__aeabi_uidivmod>
 c10db38:	e1a08804 	lsl	r8, r4, #16
 c10db3c:	e1a08828 	lsr	r8, r8, #16
 c10db40:	e0030a98 	mul	r3, r8, sl
 c10db44:	e1a0b825 	lsr	fp, r5, #16
 c10db48:	e18bb801 	orr	fp, fp, r1, lsl #16
 c10db4c:	e153000b 	cmp	r3, fp
 c10db50:	9a000005 	bls	c10db6c <__divdi3+0xbc>
 c10db54:	e09bb004 	adds	fp, fp, r4
 c10db58:	e24aa001 	sub	sl, sl, #1
 c10db5c:	2a000002 	bcs	c10db6c <__divdi3+0xbc>
 c10db60:	e153000b 	cmp	r3, fp
 c10db64:	824aa001 	subhi	sl, sl, #1
 c10db68:	808bb004 	addhi	fp, fp, r4
 c10db6c:	e063b00b 	rsb	fp, r3, fp
 c10db70:	e1a01009 	mov	r1, r9
 c10db74:	e1a0000b 	mov	r0, fp
 c10db78:	ebffff57 	bl	c10d8dc <__aeabi_uidiv>
 c10db7c:	e1a01009 	mov	r1, r9
 c10db80:	e1a06000 	mov	r6, r0
 c10db84:	e1a0000b 	mov	r0, fp
 c10db88:	ebffff90 	bl	c10d9d0 <__aeabi_uidivmod>
 c10db8c:	e0080896 	mul	r8, r6, r8
 c10db90:	e1a00805 	lsl	r0, r5, #16
 c10db94:	e1a05820 	lsr	r5, r0, #16
 c10db98:	e1855801 	orr	r5, r5, r1, lsl #16
 c10db9c:	e1580005 	cmp	r8, r5
 c10dba0:	9a000004 	bls	c10dbb8 <__divdi3+0x108>
 c10dba4:	e0955004 	adds	r5, r5, r4
 c10dba8:	e2466001 	sub	r6, r6, #1
 c10dbac:	2a000001 	bcs	c10dbb8 <__divdi3+0x108>
 c10dbb0:	e1580005 	cmp	r8, r5
 c10dbb4:	82466001 	subhi	r6, r6, #1
 c10dbb8:	e186680a 	orr	r6, r6, sl, lsl #16
 c10dbbc:	e3a09000 	mov	r9, #0
 c10dbc0:	e3570000 	cmp	r7, #0
 c10dbc4:	e1a03006 	mov	r3, r6
 c10dbc8:	e1a04009 	mov	r4, r9
 c10dbcc:	0a000001 	beq	c10dbd8 <__divdi3+0x128>
 c10dbd0:	e2733000 	rsbs	r3, r3, #0
 c10dbd4:	e2e44000 	rsc	r4, r4, #0
 c10dbd8:	e1a00003 	mov	r0, r3
 c10dbdc:	e1a01004 	mov	r1, r4
 c10dbe0:	e28dd014 	add	sp, sp, #20
 c10dbe4:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c10dbe8:	e12fff1e 	bx	lr
 c10dbec:	e15a0001 	cmp	sl, r1
 c10dbf0:	83a09000 	movhi	r9, #0
 c10dbf4:	81a06009 	movhi	r6, r9
 c10dbf8:	8afffff0 	bhi	c10dbc0 <__divdi3+0x110>
 c10dbfc:	e1a00003 	mov	r0, r3
 c10dc00:	eb0001e1 	bl	c10e38c <__clzsi2>
 c10dc04:	e2504000 	subs	r4, r0, #0
 c10dc08:	1a00007a 	bne	c10ddf8 <__divdi3+0x348>
 c10dc0c:	e15a0008 	cmp	sl, r8
 c10dc10:	2159000b 	cmpcs	r9, fp
 c10dc14:	83a09000 	movhi	r9, #0
 c10dc18:	93a09001 	movls	r9, #1
 c10dc1c:	93a06001 	movls	r6, #1
 c10dc20:	91a09004 	movls	r9, r4
 c10dc24:	81a06009 	movhi	r6, r9
 c10dc28:	eaffffe4 	b	c10dbc0 <__divdi3+0x110>
 c10dc2c:	e3520000 	cmp	r2, #0
 c10dc30:	1a000003 	bne	c10dc44 <__divdi3+0x194>
 c10dc34:	e3a00001 	mov	r0, #1
 c10dc38:	e1a01002 	mov	r1, r2
 c10dc3c:	ebffff26 	bl	c10d8dc <__aeabi_uidiv>
 c10dc40:	e1a04000 	mov	r4, r0
 c10dc44:	e1a00004 	mov	r0, r4
 c10dc48:	eb0001cf 	bl	c10e38c <__clzsi2>
 c10dc4c:	e2503000 	subs	r3, r0, #0
 c10dc50:	1a000035 	bne	c10dd2c <__divdi3+0x27c>
 c10dc54:	e3a01001 	mov	r1, #1
 c10dc58:	e1a09804 	lsl	r9, r4, #16
 c10dc5c:	e58d1008 	str	r1, [sp, #8]
 c10dc60:	e0646006 	rsb	r6, r4, r6
 c10dc64:	e1a08824 	lsr	r8, r4, #16
 c10dc68:	e1a09829 	lsr	r9, r9, #16
 c10dc6c:	e1a01008 	mov	r1, r8
 c10dc70:	e1a00006 	mov	r0, r6
 c10dc74:	ebffff18 	bl	c10d8dc <__aeabi_uidiv>
 c10dc78:	e1a01008 	mov	r1, r8
 c10dc7c:	e1a0a000 	mov	sl, r0
 c10dc80:	e1a00006 	mov	r0, r6
 c10dc84:	ebffff51 	bl	c10d9d0 <__aeabi_uidivmod>
 c10dc88:	e0030a99 	mul	r3, r9, sl
 c10dc8c:	e1a0c825 	lsr	ip, r5, #16
 c10dc90:	e18cb801 	orr	fp, ip, r1, lsl #16
 c10dc94:	e153000b 	cmp	r3, fp
 c10dc98:	9a000005 	bls	c10dcb4 <__divdi3+0x204>
 c10dc9c:	e09bb004 	adds	fp, fp, r4
 c10dca0:	e24aa001 	sub	sl, sl, #1
 c10dca4:	2a000002 	bcs	c10dcb4 <__divdi3+0x204>
 c10dca8:	e153000b 	cmp	r3, fp
 c10dcac:	824aa001 	subhi	sl, sl, #1
 c10dcb0:	808bb004 	addhi	fp, fp, r4
 c10dcb4:	e063b00b 	rsb	fp, r3, fp
 c10dcb8:	e1a01008 	mov	r1, r8
 c10dcbc:	e1a0000b 	mov	r0, fp
 c10dcc0:	ebffff05 	bl	c10d8dc <__aeabi_uidiv>
 c10dcc4:	e1a01008 	mov	r1, r8
 c10dcc8:	e1a06000 	mov	r6, r0
 c10dccc:	e1a0000b 	mov	r0, fp
 c10dcd0:	ebffff3e 	bl	c10d9d0 <__aeabi_uidivmod>
 c10dcd4:	e0090996 	mul	r9, r6, r9
 c10dcd8:	e1a00805 	lsl	r0, r5, #16
 c10dcdc:	e1a05820 	lsr	r5, r0, #16
 c10dce0:	e1855801 	orr	r5, r5, r1, lsl #16
 c10dce4:	e1590005 	cmp	r9, r5
 c10dce8:	9a000004 	bls	c10dd00 <__divdi3+0x250>
 c10dcec:	e0955004 	adds	r5, r5, r4
 c10dcf0:	e2466001 	sub	r6, r6, #1
 c10dcf4:	2a000001 	bcs	c10dd00 <__divdi3+0x250>
 c10dcf8:	e1590005 	cmp	r9, r5
 c10dcfc:	82466001 	subhi	r6, r6, #1
 c10dd00:	e186680a 	orr	r6, r6, sl, lsl #16
 c10dd04:	e59d9008 	ldr	r9, [sp, #8]
 c10dd08:	eaffffac 	b	c10dbc0 <__divdi3+0x110>
 c10dd0c:	e1e07007 	mvn	r7, r7
 c10dd10:	e2722000 	rsbs	r2, r2, #0
 c10dd14:	e2e33000 	rsc	r3, r3, #0
 c10dd18:	eaffff6c 	b	c10dad0 <__divdi3+0x20>
 c10dd1c:	e2700000 	rsbs	r0, r0, #0
 c10dd20:	e2e11000 	rsc	r1, r1, #0
 c10dd24:	e3e07000 	mvn	r7, #0
 c10dd28:	eaffff66 	b	c10dac8 <__divdi3+0x18>
 c10dd2c:	e2638020 	rsb	r8, r3, #32
 c10dd30:	e1a0b835 	lsr	fp, r5, r8
 c10dd34:	e1a04314 	lsl	r4, r4, r3
 c10dd38:	e1a0a836 	lsr	sl, r6, r8
 c10dd3c:	e18be316 	orr	lr, fp, r6, lsl r3
 c10dd40:	e1a08824 	lsr	r8, r4, #16
 c10dd44:	e1a0c804 	lsl	ip, r4, #16
 c10dd48:	e1a01008 	mov	r1, r8
 c10dd4c:	e1a0000a 	mov	r0, sl
 c10dd50:	e1a0982c 	lsr	r9, ip, #16
 c10dd54:	e1a05315 	lsl	r5, r5, r3
 c10dd58:	e58de008 	str	lr, [sp, #8]
 c10dd5c:	ebfffede 	bl	c10d8dc <__aeabi_uidiv>
 c10dd60:	e1a01008 	mov	r1, r8
 c10dd64:	e1a0b000 	mov	fp, r0
 c10dd68:	e1a0000a 	mov	r0, sl
 c10dd6c:	ebffff17 	bl	c10d9d0 <__aeabi_uidivmod>
 c10dd70:	e0030b99 	mul	r3, r9, fp
 c10dd74:	e59d2008 	ldr	r2, [sp, #8]
 c10dd78:	e1a06822 	lsr	r6, r2, #16
 c10dd7c:	e1866801 	orr	r6, r6, r1, lsl #16
 c10dd80:	e1530006 	cmp	r3, r6
 c10dd84:	9a000002 	bls	c10dd94 <__divdi3+0x2e4>
 c10dd88:	e0966004 	adds	r6, r6, r4
 c10dd8c:	e24bb001 	sub	fp, fp, #1
 c10dd90:	3a00006c 	bcc	c10df48 <__divdi3+0x498>
 c10dd94:	e0636006 	rsb	r6, r3, r6
 c10dd98:	e1a01008 	mov	r1, r8
 c10dd9c:	e1a00006 	mov	r0, r6
 c10dda0:	ebfffecd 	bl	c10d8dc <__aeabi_uidiv>
 c10dda4:	e1a01008 	mov	r1, r8
 c10dda8:	e1a0a000 	mov	sl, r0
 c10ddac:	e1a00006 	mov	r0, r6
 c10ddb0:	ebffff06 	bl	c10d9d0 <__aeabi_uidivmod>
 c10ddb4:	e0030a99 	mul	r3, r9, sl
 c10ddb8:	e59d2008 	ldr	r2, [sp, #8]
 c10ddbc:	e1a06802 	lsl	r6, r2, #16
 c10ddc0:	e1a00826 	lsr	r0, r6, #16
 c10ddc4:	e1806801 	orr	r6, r0, r1, lsl #16
 c10ddc8:	e1530006 	cmp	r3, r6
 c10ddcc:	9a000005 	bls	c10dde8 <__divdi3+0x338>
 c10ddd0:	e0966004 	adds	r6, r6, r4
 c10ddd4:	e24aa001 	sub	sl, sl, #1
 c10ddd8:	2a000002 	bcs	c10dde8 <__divdi3+0x338>
 c10dddc:	e1530006 	cmp	r3, r6
 c10dde0:	824aa001 	subhi	sl, sl, #1
 c10dde4:	80866004 	addhi	r6, r6, r4
 c10dde8:	e0636006 	rsb	r6, r3, r6
 c10ddec:	e18a380b 	orr	r3, sl, fp, lsl #16
 c10ddf0:	e58d3008 	str	r3, [sp, #8]
 c10ddf4:	eaffff9c 	b	c10dc6c <__divdi3+0x1bc>
 c10ddf8:	e2641020 	rsb	r1, r4, #32
 c10ddfc:	e1a00139 	lsr	r0, r9, r1
 c10de00:	e1a0213b 	lsr	r2, fp, r1
 c10de04:	e180a41a 	orr	sl, r0, sl, lsl r4
 c10de08:	e1a06138 	lsr	r6, r8, r1
 c10de0c:	e1828418 	orr	r8, r2, r8, lsl r4
 c10de10:	e1a0380a 	lsl	r3, sl, #16
 c10de14:	e1a0b82a 	lsr	fp, sl, #16
 c10de18:	e1a0e823 	lsr	lr, r3, #16
 c10de1c:	e1a0100b 	mov	r1, fp
 c10de20:	e1a00006 	mov	r0, r6
 c10de24:	e58d8008 	str	r8, [sp, #8]
 c10de28:	e58de00c 	str	lr, [sp, #12]
 c10de2c:	ebfffeaa 	bl	c10d8dc <__aeabi_uidiv>
 c10de30:	e1a0100b 	mov	r1, fp
 c10de34:	e1a08000 	mov	r8, r0
 c10de38:	e1a00006 	mov	r0, r6
 c10de3c:	ebfffee3 	bl	c10d9d0 <__aeabi_uidivmod>
 c10de40:	e59dc00c 	ldr	ip, [sp, #12]
 c10de44:	e002089c 	mul	r2, ip, r8
 c10de48:	e59d3008 	ldr	r3, [sp, #8]
 c10de4c:	e1a06823 	lsr	r6, r3, #16
 c10de50:	e1861801 	orr	r1, r6, r1, lsl #16
 c10de54:	e1520001 	cmp	r2, r1
 c10de58:	e1a03419 	lsl	r3, r9, r4
 c10de5c:	9a000002 	bls	c10de6c <__divdi3+0x3bc>
 c10de60:	e091100a 	adds	r1, r1, sl
 c10de64:	e2488001 	sub	r8, r8, #1
 c10de68:	3a000032 	bcc	c10df38 <__divdi3+0x488>
 c10de6c:	e0629001 	rsb	r9, r2, r1
 c10de70:	e1a00009 	mov	r0, r9
 c10de74:	e1a0100b 	mov	r1, fp
 c10de78:	e58d3004 	str	r3, [sp, #4]
 c10de7c:	ebfffe96 	bl	c10d8dc <__aeabi_uidiv>
 c10de80:	e1a0100b 	mov	r1, fp
 c10de84:	e1a06000 	mov	r6, r0
 c10de88:	e1a00009 	mov	r0, r9
 c10de8c:	ebfffecf 	bl	c10d9d0 <__aeabi_uidivmod>
 c10de90:	e59d000c 	ldr	r0, [sp, #12]
 c10de94:	e0020690 	mul	r2, r0, r6
 c10de98:	e59d3008 	ldr	r3, [sp, #8]
 c10de9c:	e1a0c803 	lsl	ip, r3, #16
 c10dea0:	e1a0982c 	lsr	r9, ip, #16
 c10dea4:	e1890801 	orr	r0, r9, r1, lsl #16
 c10dea8:	e1520000 	cmp	r2, r0
 c10deac:	e59d3004 	ldr	r3, [sp, #4]
 c10deb0:	9a000002 	bls	c10dec0 <__divdi3+0x410>
 c10deb4:	e090000a 	adds	r0, r0, sl
 c10deb8:	e2466001 	sub	r6, r6, #1
 c10debc:	3a000019 	bcc	c10df28 <__divdi3+0x478>
 c10dec0:	e062e000 	rsb	lr, r2, r0
 c10dec4:	e1866808 	orr	r6, r6, r8, lsl #16
 c10dec8:	e1a02826 	lsr	r2, r6, #16
 c10decc:	e1a01823 	lsr	r1, r3, #16
 c10ded0:	e1c6c802 	bic	ip, r6, r2, lsl #16
 c10ded4:	e1c39801 	bic	r9, r3, r1, lsl #16
 c10ded8:	e003099c 	mul	r3, ip, r9
 c10dedc:	e0090992 	mul	r9, r2, r9
 c10dee0:	e00c0c91 	mul	ip, r1, ip
 c10dee4:	e0010192 	mul	r1, r2, r1
 c10dee8:	e099c00c 	adds	ip, r9, ip
 c10deec:	22811801 	addcs	r1, r1, #65536	; 0x10000
 c10def0:	e093380c 	adds	r3, r3, ip, lsl #16
 c10def4:	e0a1182c 	adc	r1, r1, ip, lsr #16
 c10def8:	e15e0001 	cmp	lr, r1
 c10defc:	3a000006 	bcc	c10df1c <__divdi3+0x46c>
 c10df00:	13a02000 	movne	r2, #0
 c10df04:	03a02001 	moveq	r2, #1
 c10df08:	e1530415 	cmp	r3, r5, lsl r4
 c10df0c:	93a09000 	movls	r9, #0
 c10df10:	82029001 	andhi	r9, r2, #1
 c10df14:	e3590000 	cmp	r9, #0
 c10df18:	0affff28 	beq	c10dbc0 <__divdi3+0x110>
 c10df1c:	e2466001 	sub	r6, r6, #1
 c10df20:	e3a09000 	mov	r9, #0
 c10df24:	eaffff25 	b	c10dbc0 <__divdi3+0x110>
 c10df28:	e1520000 	cmp	r2, r0
 c10df2c:	82466001 	subhi	r6, r6, #1
 c10df30:	8080000a 	addhi	r0, r0, sl
 c10df34:	eaffffe1 	b	c10dec0 <__divdi3+0x410>
 c10df38:	e1520001 	cmp	r2, r1
 c10df3c:	82488001 	subhi	r8, r8, #1
 c10df40:	8081100a 	addhi	r1, r1, sl
 c10df44:	eaffffc8 	b	c10de6c <__divdi3+0x3bc>
 c10df48:	e1530006 	cmp	r3, r6
 c10df4c:	824bb001 	subhi	fp, fp, #1
 c10df50:	80866004 	addhi	r6, r6, r4
 c10df54:	eaffff8e 	b	c10dd94 <__divdi3+0x2e4>

0c10df58 <__udivdi3>:
 c10df58:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c10df5c:	e2538000 	subs	r8, r3, #0
 c10df60:	e24dd00c 	sub	sp, sp, #12
 c10df64:	e1a05000 	mov	r5, r0
 c10df68:	e1a04001 	mov	r4, r1
 c10df6c:	e1a06002 	mov	r6, r2
 c10df70:	e1a0a002 	mov	sl, r2
 c10df74:	e1a0b000 	mov	fp, r0
 c10df78:	e1a07001 	mov	r7, r1
 c10df7c:	1a000037 	bne	c10e060 <__udivdi3+0x108>
 c10df80:	e1520001 	cmp	r2, r1
 c10df84:	9a000045 	bls	c10e0a0 <__udivdi3+0x148>
 c10df88:	e1a00002 	mov	r0, r2
 c10df8c:	eb0000fe 	bl	c10e38c <__clzsi2>
 c10df90:	e3500000 	cmp	r0, #0
 c10df94:	12603020 	rsbne	r3, r0, #32
 c10df98:	11a03335 	lsrne	r3, r5, r3
 c10df9c:	11a0a016 	lslne	sl, r6, r0
 c10dfa0:	11837014 	orrne	r7, r3, r4, lsl r0
 c10dfa4:	e1a0482a 	lsr	r4, sl, #16
 c10dfa8:	11a0b015 	lslne	fp, r5, r0
 c10dfac:	e1a01004 	mov	r1, r4
 c10dfb0:	e1a00007 	mov	r0, r7
 c10dfb4:	ebfffe48 	bl	c10d8dc <__aeabi_uidiv>
 c10dfb8:	e1a01004 	mov	r1, r4
 c10dfbc:	e1a08000 	mov	r8, r0
 c10dfc0:	e1a00007 	mov	r0, r7
 c10dfc4:	ebfffe81 	bl	c10d9d0 <__aeabi_uidivmod>
 c10dfc8:	e1a0680a 	lsl	r6, sl, #16
 c10dfcc:	e1a06826 	lsr	r6, r6, #16
 c10dfd0:	e0030896 	mul	r3, r6, r8
 c10dfd4:	e1a0782b 	lsr	r7, fp, #16
 c10dfd8:	e1877801 	orr	r7, r7, r1, lsl #16
 c10dfdc:	e1530007 	cmp	r3, r7
 c10dfe0:	9a000005 	bls	c10dffc <__udivdi3+0xa4>
 c10dfe4:	e097700a 	adds	r7, r7, sl
 c10dfe8:	e2488001 	sub	r8, r8, #1
 c10dfec:	2a000002 	bcs	c10dffc <__udivdi3+0xa4>
 c10dff0:	e1530007 	cmp	r3, r7
 c10dff4:	82488001 	subhi	r8, r8, #1
 c10dff8:	8087700a 	addhi	r7, r7, sl
 c10dffc:	e0637007 	rsb	r7, r3, r7
 c10e000:	e1a01004 	mov	r1, r4
 c10e004:	e1a00007 	mov	r0, r7
 c10e008:	ebfffe33 	bl	c10d8dc <__aeabi_uidiv>
 c10e00c:	e1a01004 	mov	r1, r4
 c10e010:	e1a05000 	mov	r5, r0
 c10e014:	e1a00007 	mov	r0, r7
 c10e018:	ebfffe6c 	bl	c10d9d0 <__aeabi_uidivmod>
 c10e01c:	e0060695 	mul	r6, r5, r6
 c10e020:	e1a0080b 	lsl	r0, fp, #16
 c10e024:	e1a0b820 	lsr	fp, r0, #16
 c10e028:	e18bb801 	orr	fp, fp, r1, lsl #16
 c10e02c:	e156000b 	cmp	r6, fp
 c10e030:	9a000004 	bls	c10e048 <__udivdi3+0xf0>
 c10e034:	e09bb00a 	adds	fp, fp, sl
 c10e038:	e2455001 	sub	r5, r5, #1
 c10e03c:	2a000001 	bcs	c10e048 <__udivdi3+0xf0>
 c10e040:	e156000b 	cmp	r6, fp
 c10e044:	82455001 	subhi	r5, r5, #1
 c10e048:	e1858808 	orr	r8, r5, r8, lsl #16
 c10e04c:	e3a01000 	mov	r1, #0
 c10e050:	e1a00008 	mov	r0, r8
 c10e054:	e28dd00c 	add	sp, sp, #12
 c10e058:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c10e05c:	e12fff1e 	bx	lr
 c10e060:	e1580001 	cmp	r8, r1
 c10e064:	83a01000 	movhi	r1, #0
 c10e068:	81a08001 	movhi	r8, r1
 c10e06c:	8afffff7 	bhi	c10e050 <__udivdi3+0xf8>
 c10e070:	e1a00008 	mov	r0, r8
 c10e074:	eb0000c4 	bl	c10e38c <__clzsi2>
 c10e078:	e2507000 	subs	r7, r0, #0
 c10e07c:	1a00003e 	bne	c10e17c <__udivdi3+0x224>
 c10e080:	e1580004 	cmp	r8, r4
 c10e084:	21560005 	cmpcs	r6, r5
 c10e088:	83a01000 	movhi	r1, #0
 c10e08c:	93a01001 	movls	r1, #1
 c10e090:	93a08001 	movls	r8, #1
 c10e094:	91a01007 	movls	r1, r7
 c10e098:	81a08001 	movhi	r8, r1
 c10e09c:	eaffffeb 	b	c10e050 <__udivdi3+0xf8>
 c10e0a0:	e3520000 	cmp	r2, #0
 c10e0a4:	1a000003 	bne	c10e0b8 <__udivdi3+0x160>
 c10e0a8:	e3a00001 	mov	r0, #1
 c10e0ac:	e1a01002 	mov	r1, r2
 c10e0b0:	ebfffe09 	bl	c10d8dc <__aeabi_uidiv>
 c10e0b4:	e1a0a000 	mov	sl, r0
 c10e0b8:	e1a0000a 	mov	r0, sl
 c10e0bc:	eb0000b2 	bl	c10e38c <__clzsi2>
 c10e0c0:	e2503000 	subs	r3, r0, #0
 c10e0c4:	1a000075 	bne	c10e2a0 <__udivdi3+0x348>
 c10e0c8:	e1a0180a 	lsl	r1, sl, #16
 c10e0cc:	e06a4004 	rsb	r4, sl, r4
 c10e0d0:	e1a0982a 	lsr	r9, sl, #16
 c10e0d4:	e1a06821 	lsr	r6, r1, #16
 c10e0d8:	e3a07001 	mov	r7, #1
 c10e0dc:	e1a01009 	mov	r1, r9
 c10e0e0:	e1a00004 	mov	r0, r4
 c10e0e4:	ebfffdfc 	bl	c10d8dc <__aeabi_uidiv>
 c10e0e8:	e1a01009 	mov	r1, r9
 c10e0ec:	e1a05000 	mov	r5, r0
 c10e0f0:	e1a00004 	mov	r0, r4
 c10e0f4:	ebfffe35 	bl	c10d9d0 <__aeabi_uidivmod>
 c10e0f8:	e0030596 	mul	r3, r6, r5
 c10e0fc:	e1a0282b 	lsr	r2, fp, #16
 c10e100:	e1824801 	orr	r4, r2, r1, lsl #16
 c10e104:	e1530004 	cmp	r3, r4
 c10e108:	9a000005 	bls	c10e124 <__udivdi3+0x1cc>
 c10e10c:	e094400a 	adds	r4, r4, sl
 c10e110:	e2455001 	sub	r5, r5, #1
 c10e114:	2a000002 	bcs	c10e124 <__udivdi3+0x1cc>
 c10e118:	e1530004 	cmp	r3, r4
 c10e11c:	82455001 	subhi	r5, r5, #1
 c10e120:	8084400a 	addhi	r4, r4, sl
 c10e124:	e0634004 	rsb	r4, r3, r4
 c10e128:	e1a01009 	mov	r1, r9
 c10e12c:	e1a00004 	mov	r0, r4
 c10e130:	ebfffde9 	bl	c10d8dc <__aeabi_uidiv>
 c10e134:	e1a01009 	mov	r1, r9
 c10e138:	e1a08000 	mov	r8, r0
 c10e13c:	e1a00004 	mov	r0, r4
 c10e140:	ebfffe22 	bl	c10d9d0 <__aeabi_uidivmod>
 c10e144:	e0060698 	mul	r6, r8, r6
 c10e148:	e1a0b80b 	lsl	fp, fp, #16
 c10e14c:	e1a0382b 	lsr	r3, fp, #16
 c10e150:	e183b801 	orr	fp, r3, r1, lsl #16
 c10e154:	e156000b 	cmp	r6, fp
 c10e158:	9a000004 	bls	c10e170 <__udivdi3+0x218>
 c10e15c:	e09bb00a 	adds	fp, fp, sl
 c10e160:	e2488001 	sub	r8, r8, #1
 c10e164:	2a000001 	bcs	c10e170 <__udivdi3+0x218>
 c10e168:	e156000b 	cmp	r6, fp
 c10e16c:	82488001 	subhi	r8, r8, #1
 c10e170:	e1888805 	orr	r8, r8, r5, lsl #16
 c10e174:	e1a01007 	mov	r1, r7
 c10e178:	eaffffb4 	b	c10e050 <__udivdi3+0xf8>
 c10e17c:	e267a020 	rsb	sl, r7, #32
 c10e180:	e1a01a36 	lsr	r1, r6, sl
 c10e184:	e1a02a35 	lsr	r2, r5, sl
 c10e188:	e1818718 	orr	r8, r1, r8, lsl r7
 c10e18c:	e1a0ba34 	lsr	fp, r4, sl
 c10e190:	e1829714 	orr	r9, r2, r4, lsl r7
 c10e194:	e1a0a828 	lsr	sl, r8, #16
 c10e198:	e1a0e808 	lsl	lr, r8, #16
 c10e19c:	e1a0100a 	mov	r1, sl
 c10e1a0:	e1a0000b 	mov	r0, fp
 c10e1a4:	e1a0482e 	lsr	r4, lr, #16
 c10e1a8:	e58d9004 	str	r9, [sp, #4]
 c10e1ac:	ebfffdca 	bl	c10d8dc <__aeabi_uidiv>
 c10e1b0:	e1a0100a 	mov	r1, sl
 c10e1b4:	e1a09000 	mov	r9, r0
 c10e1b8:	e1a0000b 	mov	r0, fp
 c10e1bc:	ebfffe03 	bl	c10d9d0 <__aeabi_uidivmod>
 c10e1c0:	e0020994 	mul	r2, r4, r9
 c10e1c4:	e59d0004 	ldr	r0, [sp, #4]
 c10e1c8:	e1a0c820 	lsr	ip, r0, #16
 c10e1cc:	e18cb801 	orr	fp, ip, r1, lsl #16
 c10e1d0:	e152000b 	cmp	r2, fp
 c10e1d4:	e1a03716 	lsl	r3, r6, r7
 c10e1d8:	9a000002 	bls	c10e1e8 <__udivdi3+0x290>
 c10e1dc:	e09bb008 	adds	fp, fp, r8
 c10e1e0:	e2499001 	sub	r9, r9, #1
 c10e1e4:	3a000060 	bcc	c10e36c <__udivdi3+0x414>
 c10e1e8:	e062b00b 	rsb	fp, r2, fp
 c10e1ec:	e1a0100a 	mov	r1, sl
 c10e1f0:	e1a0000b 	mov	r0, fp
 c10e1f4:	e58d3000 	str	r3, [sp]
 c10e1f8:	ebfffdb7 	bl	c10d8dc <__aeabi_uidiv>
 c10e1fc:	e1a0100a 	mov	r1, sl
 c10e200:	e1a06000 	mov	r6, r0
 c10e204:	e1a0000b 	mov	r0, fp
 c10e208:	ebfffdf0 	bl	c10d9d0 <__aeabi_uidivmod>
 c10e20c:	e0040496 	mul	r4, r6, r4
 c10e210:	e59d0004 	ldr	r0, [sp, #4]
 c10e214:	e1a0c800 	lsl	ip, r0, #16
 c10e218:	e1a0382c 	lsr	r3, ip, #16
 c10e21c:	e1832801 	orr	r2, r3, r1, lsl #16
 c10e220:	e1540002 	cmp	r4, r2
 c10e224:	e59d3000 	ldr	r3, [sp]
 c10e228:	9a000002 	bls	c10e238 <__udivdi3+0x2e0>
 c10e22c:	e0922008 	adds	r2, r2, r8
 c10e230:	e2466001 	sub	r6, r6, #1
 c10e234:	3a000048 	bcc	c10e35c <__udivdi3+0x404>
 c10e238:	e0644002 	rsb	r4, r4, r2
 c10e23c:	e1868809 	orr	r8, r6, r9, lsl #16
 c10e240:	e1a02828 	lsr	r2, r8, #16
 c10e244:	e1a0e823 	lsr	lr, r3, #16
 c10e248:	e1c80802 	bic	r0, r8, r2, lsl #16
 c10e24c:	e1c3680e 	bic	r6, r3, lr, lsl #16
 c10e250:	e0030690 	mul	r3, r0, r6
 c10e254:	e0060692 	mul	r6, r2, r6
 c10e258:	e000009e 	mul	r0, lr, r0
 c10e25c:	e00e0e92 	mul	lr, r2, lr
 c10e260:	e0960000 	adds	r0, r6, r0
 c10e264:	228ee801 	addcs	lr, lr, #65536	; 0x10000
 c10e268:	e0933800 	adds	r3, r3, r0, lsl #16
 c10e26c:	e0aee820 	adc	lr, lr, r0, lsr #16
 c10e270:	e154000e 	cmp	r4, lr
 c10e274:	3a000006 	bcc	c10e294 <__udivdi3+0x33c>
 c10e278:	13a02000 	movne	r2, #0
 c10e27c:	03a02001 	moveq	r2, #1
 c10e280:	e1530715 	cmp	r3, r5, lsl r7
 c10e284:	93a01000 	movls	r1, #0
 c10e288:	82021001 	andhi	r1, r2, #1
 c10e28c:	e3510000 	cmp	r1, #0
 c10e290:	0affff6e 	beq	c10e050 <__udivdi3+0xf8>
 c10e294:	e2488001 	sub	r8, r8, #1
 c10e298:	e3a01000 	mov	r1, #0
 c10e29c:	eaffff6b 	b	c10e050 <__udivdi3+0xf8>
 c10e2a0:	e2639020 	rsb	r9, r3, #32
 c10e2a4:	e1a0a31a 	lsl	sl, sl, r3
 c10e2a8:	e1a07934 	lsr	r7, r4, r9
 c10e2ac:	e1a08935 	lsr	r8, r5, r9
 c10e2b0:	e1a0982a 	lsr	r9, sl, #16
 c10e2b4:	e1a0280a 	lsl	r2, sl, #16
 c10e2b8:	e1a01009 	mov	r1, r9
 c10e2bc:	e1a00007 	mov	r0, r7
 c10e2c0:	e1888314 	orr	r8, r8, r4, lsl r3
 c10e2c4:	e1a0b315 	lsl	fp, r5, r3
 c10e2c8:	e1a06822 	lsr	r6, r2, #16
 c10e2cc:	ebfffd82 	bl	c10d8dc <__aeabi_uidiv>
 c10e2d0:	e1a01009 	mov	r1, r9
 c10e2d4:	e1a05000 	mov	r5, r0
 c10e2d8:	e1a00007 	mov	r0, r7
 c10e2dc:	ebfffdbb 	bl	c10d9d0 <__aeabi_uidivmod>
 c10e2e0:	e0030596 	mul	r3, r6, r5
 c10e2e4:	e1a04828 	lsr	r4, r8, #16
 c10e2e8:	e1844801 	orr	r4, r4, r1, lsl #16
 c10e2ec:	e1530004 	cmp	r3, r4
 c10e2f0:	9a000002 	bls	c10e300 <__udivdi3+0x3a8>
 c10e2f4:	e094400a 	adds	r4, r4, sl
 c10e2f8:	e2455001 	sub	r5, r5, #1
 c10e2fc:	3a00001e 	bcc	c10e37c <__udivdi3+0x424>
 c10e300:	e0634004 	rsb	r4, r3, r4
 c10e304:	e1a01009 	mov	r1, r9
 c10e308:	e1a00004 	mov	r0, r4
 c10e30c:	ebfffd72 	bl	c10d8dc <__aeabi_uidiv>
 c10e310:	e1a01009 	mov	r1, r9
 c10e314:	e1a07000 	mov	r7, r0
 c10e318:	e1a00004 	mov	r0, r4
 c10e31c:	ebfffdab 	bl	c10d9d0 <__aeabi_uidivmod>
 c10e320:	e0030796 	mul	r3, r6, r7
 c10e324:	e1a00808 	lsl	r0, r8, #16
 c10e328:	e1a0c820 	lsr	ip, r0, #16
 c10e32c:	e18c4801 	orr	r4, ip, r1, lsl #16
 c10e330:	e1530004 	cmp	r3, r4
 c10e334:	9a000005 	bls	c10e350 <__udivdi3+0x3f8>
 c10e338:	e094400a 	adds	r4, r4, sl
 c10e33c:	e2477001 	sub	r7, r7, #1
 c10e340:	2a000002 	bcs	c10e350 <__udivdi3+0x3f8>
 c10e344:	e1530004 	cmp	r3, r4
 c10e348:	82477001 	subhi	r7, r7, #1
 c10e34c:	8084400a 	addhi	r4, r4, sl
 c10e350:	e0634004 	rsb	r4, r3, r4
 c10e354:	e1877805 	orr	r7, r7, r5, lsl #16
 c10e358:	eaffff5f 	b	c10e0dc <__udivdi3+0x184>
 c10e35c:	e1540002 	cmp	r4, r2
 c10e360:	82466001 	subhi	r6, r6, #1
 c10e364:	80822008 	addhi	r2, r2, r8
 c10e368:	eaffffb2 	b	c10e238 <__udivdi3+0x2e0>
 c10e36c:	e152000b 	cmp	r2, fp
 c10e370:	82499001 	subhi	r9, r9, #1
 c10e374:	808bb008 	addhi	fp, fp, r8
 c10e378:	eaffff9a 	b	c10e1e8 <__udivdi3+0x290>
 c10e37c:	e1530004 	cmp	r3, r4
 c10e380:	82455001 	subhi	r5, r5, #1
 c10e384:	8084400a 	addhi	r4, r4, sl
 c10e388:	eaffffdc 	b	c10e300 <__udivdi3+0x3a8>

0c10e38c <__clzsi2>:
 c10e38c:	e3a0101c 	mov	r1, #28
 c10e390:	e3500801 	cmp	r0, #65536	; 0x10000
 c10e394:	21a00820 	lsrcs	r0, r0, #16
 c10e398:	22411010 	subcs	r1, r1, #16
 c10e39c:	e3500c01 	cmp	r0, #256	; 0x100
 c10e3a0:	21a00420 	lsrcs	r0, r0, #8
 c10e3a4:	22411008 	subcs	r1, r1, #8
 c10e3a8:	e3500010 	cmp	r0, #16
 c10e3ac:	21a00220 	lsrcs	r0, r0, #4
 c10e3b0:	22411004 	subcs	r1, r1, #4
 c10e3b4:	e28f2008 	add	r2, pc, #8
 c10e3b8:	e7d20000 	ldrb	r0, [r2, r0]
 c10e3bc:	e0800001 	add	r0, r0, r1
 c10e3c0:	e12fff1e 	bx	lr
 c10e3c4:	02020304 	.word	0x02020304
 c10e3c8:	01010101 	.word	0x01010101
	...
