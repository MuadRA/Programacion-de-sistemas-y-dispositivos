
lab7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000254c  0c100000  0c100000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       00001688  0c10254c  0c10254c  0000a54c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .bss          00009600  0c103bd4  0c103bd4  0000bbd4  2**2
                  ALLOC
  3 .debug_abbrev 000003b0  00000000  00000000  0000bbd4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000f8b  00000000  00000000  0000bf84  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000006e2  00000000  00000000  0000cf0f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_macinfo 00014801  00000000  00000000  0000d5f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_loc    00000b84  00000000  00000000  00021df2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 000004c7  00000000  00000000  00022976  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_pubtypes 000000e0  00000000  00000000  00022e3d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000080  00000000  00000000  00022f1d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000053c  00000000  00000000  00022f9d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .comment      0000002a  00000000  00000000  000234d9  2**0
                  CONTENTS, READONLY
 13 .ARM.attributes 00000032  00000000  00000000  00023503  2**0
                  CONTENTS, READONLY
 14 .debug_frame  00000a24  00000000  00000000  00023538  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0c100000 <main>:
#define MAPA       ((uint8 *)0x0c270000)

void delay( void );

void main( void )
{
 c100000:	e1a0c00d 	mov	ip, sp
 c100004:	e92dd800 	push	{fp, ip, lr, pc}
 c100008:	e24cb004 	sub	fp, ip, #4
 c10000c:	e24dd008 	sub	sp, sp, #8
    sys_init();
 c100010:	eb000518 	bl	c101478 <sys_init>
    lcd_init();
 c100014:	eb000071 	bl	c1001e0 <lcd_init>
    
    lcd_clear();
 c100018:	eb0000f7 	bl	c1003fc <lcd_clear>
    lcd_on();
 c10001c:	eb0000d0 	bl	c100364 <lcd_on>
    
    while( 1 )
    {
        /************************************/

        lcd_draw_box( 10, 10, 310, 230, BLACK, 5 );
 c100020:	e3a0300f 	mov	r3, #15
 c100024:	e58d3000 	str	r3, [sp]
 c100028:	e3a03005 	mov	r3, #5
 c10002c:	e58d3004 	str	r3, [sp, #4]
 c100030:	e3a0000a 	mov	r0, #10
 c100034:	e3a0100a 	mov	r1, #10
 c100038:	e59f212c 	ldr	r2, [pc, #300]	; c10016c <main+0x16c>
 c10003c:	e3a030e6 	mov	r3, #230	; 0xe6
 c100040:	eb0001da 	bl	c1007b0 <lcd_draw_box>

        /************************************/

        lcd_puts( 20, 16, BLACK, "ABCDEFGHIJKLMNÑOPQRSTUVWXYZ" );
 c100044:	e3a00014 	mov	r0, #20
 c100048:	e3a01010 	mov	r1, #16
 c10004c:	e3a0200f 	mov	r2, #15
 c100050:	e59f3118 	ldr	r3, [pc, #280]	; c100170 <main+0x170>
 c100054:	eb000258 	bl	c1009bc <lcd_puts>
        lcd_puts( 20, 32, BLACK, "abcdefghijklmnñopqrstuvwxyz" );
 c100058:	e3a00014 	mov	r0, #20
 c10005c:	e3a01020 	mov	r1, #32
 c100060:	e3a0200f 	mov	r2, #15
 c100064:	e59f3108 	ldr	r3, [pc, #264]	; c100174 <main+0x174>
 c100068:	eb000253 	bl	c1009bc <lcd_puts>
        lcd_puts( 20, 48, BLACK, "0123456789!$%&/()=^*+{}-.,;: " );
 c10006c:	e3a00014 	mov	r0, #20
 c100070:	e3a01030 	mov	r1, #48	; 0x30
 c100074:	e3a0200f 	mov	r2, #15
 c100078:	e59f30f8 	ldr	r3, [pc, #248]	; c100178 <main+0x178>
 c10007c:	eb00024e 	bl	c1009bc <lcd_puts>
        lcd_putint( 20, 64, BLACK, 1234567890 );
 c100080:	e3a00014 	mov	r0, #20
 c100084:	e3a01040 	mov	r1, #64	; 0x40
 c100088:	e3a0200f 	mov	r2, #15
 c10008c:	e59f30e8 	ldr	r3, [pc, #232]	; c10017c <main+0x17c>
 c100090:	eb00027a 	bl	c100a80 <lcd_putint>
        lcd_puthex( 108, 64, BLACK, 0xabcdef );
 c100094:	e3a0006c 	mov	r0, #108	; 0x6c
 c100098:	e3a01040 	mov	r1, #64	; 0x40
 c10009c:	e3a0200f 	mov	r2, #15
 c1000a0:	e59f30d8 	ldr	r3, [pc, #216]	; c100180 <main+0x180>
 c1000a4:	eb0002c8 	bl	c100bcc <lcd_puthex>

        /************************************/

        lcd_puts_x2( 20, 80, BLACK, "ABCDEFGHIJKLMNÑOP" );
 c1000a8:	e3a00014 	mov	r0, #20
 c1000ac:	e3a01050 	mov	r1, #80	; 0x50
 c1000b0:	e3a0200f 	mov	r2, #15
 c1000b4:	e59f30c8 	ldr	r3, [pc, #200]	; c100184 <main+0x184>
 c1000b8:	eb0003db 	bl	c10102c <lcd_puts_x2>
        lcd_puts_x2( 20, 112, BLACK, "abcdefghijklmnñop" );
 c1000bc:	e3a00014 	mov	r0, #20
 c1000c0:	e3a01070 	mov	r1, #112	; 0x70
 c1000c4:	e3a0200f 	mov	r2, #15
 c1000c8:	e59f30b8 	ldr	r3, [pc, #184]	; c100188 <main+0x188>
 c1000cc:	eb0003d6 	bl	c10102c <lcd_puts_x2>
        lcd_puts_x2( 20, 144, BLACK, "0123456789!$%&/()" );
 c1000d0:	e3a00014 	mov	r0, #20
 c1000d4:	e3a01090 	mov	r1, #144	; 0x90
 c1000d8:	e3a0200f 	mov	r2, #15
 c1000dc:	e59f30a8 	ldr	r3, [pc, #168]	; c10018c <main+0x18c>
 c1000e0:	eb0003d1 	bl	c10102c <lcd_puts_x2>
        lcd_putint_x2( 20, 176, BLACK, 1234567890 );
 c1000e4:	e3a00014 	mov	r0, #20
 c1000e8:	e3a010b0 	mov	r1, #176	; 0xb0
 c1000ec:	e3a0200f 	mov	r2, #15
 c1000f0:	e59f3084 	ldr	r3, [pc, #132]	; c10017c <main+0x17c>
 c1000f4:	eb0003fd 	bl	c1010f0 <lcd_putint_x2>
        lcd_puthex_x2( 196, 176, BLACK, 0xabcdef );
 c1000f8:	e3a000c4 	mov	r0, #196	; 0xc4
 c1000fc:	e3a010b0 	mov	r1, #176	; 0xb0
 c100100:	e3a0200f 	mov	r2, #15
 c100104:	e59f3074 	ldr	r3, [pc, #116]	; c100180 <main+0x180>
 c100108:	eb00044b 	bl	c10123c <lcd_puthex_x2>

        /************************************/

        delay();
 c10010c:	eb000026 	bl	c1001ac <delay>
        lcd_putWallpaper( ARBOL );
 c100110:	e59f0078 	ldr	r0, [pc, #120]	; c100190 <main+0x190>
 c100114:	eb000480 	bl	c10131c <lcd_putWallpaper>
        delay();
 c100118:	eb000023 	bl	c1001ac <delay>
        lcd_putWallpaper( PADRINO );
 c10011c:	e59f0070 	ldr	r0, [pc, #112]	; c100194 <main+0x194>
 c100120:	eb00047d 	bl	c10131c <lcd_putWallpaper>
        delay();
 c100124:	eb000020 	bl	c1001ac <delay>
        lcd_putWallpaper( PICACHU );
 c100128:	e59f0068 	ldr	r0, [pc, #104]	; c100198 <main+0x198>
 c10012c:	eb00047a 	bl	c10131c <lcd_putWallpaper>
        delay();
 c100130:	eb00001d 	bl	c1001ac <delay>
        lcd_putWallpaper( HARRY );
 c100134:	e59f0060 	ldr	r0, [pc, #96]	; c10019c <main+0x19c>
 c100138:	eb000477 	bl	c10131c <lcd_putWallpaper>
        delay();
 c10013c:	eb00001a 	bl	c1001ac <delay>
        lcd_putWallpaper( CHAPLIN );
 c100140:	e59f0058 	ldr	r0, [pc, #88]	; c1001a0 <main+0x1a0>
 c100144:	eb000474 	bl	c10131c <lcd_putWallpaper>
        delay();
 c100148:	eb000017 	bl	c1001ac <delay>
        lcd_putWallpaper( PULP );
 c10014c:	e59f0050 	ldr	r0, [pc, #80]	; c1001a4 <main+0x1a4>
 c100150:	eb000471 	bl	c10131c <lcd_putWallpaper>
        delay();
 c100154:	eb000014 	bl	c1001ac <delay>
        lcd_putWallpaper( MAPA );
 c100158:	e59f0048 	ldr	r0, [pc, #72]	; c1001a8 <main+0x1a8>
 c10015c:	eb00046e 	bl	c10131c <lcd_putWallpaper>

        /************************************/

        delay();
 c100160:	eb000011 	bl	c1001ac <delay>
        lcd_clear();
 c100164:	eb0000a4 	bl	c1003fc <lcd_clear>
    }
 c100168:	eaffffac 	b	c100020 <main+0x20>
 c10016c:	00000136 	.word	0x00000136
 c100170:	0c10254c 	.word	0x0c10254c
 c100174:	0c102568 	.word	0x0c102568
 c100178:	0c102584 	.word	0x0c102584
 c10017c:	499602d2 	.word	0x499602d2
 c100180:	00abcdef 	.word	0x00abcdef
 c100184:	0c1025a4 	.word	0x0c1025a4
 c100188:	0c1025b8 	.word	0x0c1025b8
 c10018c:	0c1025cc 	.word	0x0c1025cc
 c100190:	0c210000 	.word	0x0c210000
 c100194:	0c220000 	.word	0x0c220000
 c100198:	0c230000 	.word	0x0c230000
 c10019c:	0c240000 	.word	0x0c240000
 c1001a0:	0c250000 	.word	0x0c250000
 c1001a4:	0c260000 	.word	0x0c260000
 c1001a8:	0c270000 	.word	0x0c270000

0c1001ac <delay>:
}

void delay( void )
{
 c1001ac:	e1a0c00d 	mov	ip, sp
 c1001b0:	e92dd810 	push	{r4, fp, ip, lr, pc}
 c1001b4:	e24cb004 	sub	fp, ip, #4
    register uint32 i;

    for( i=0; i<2000000; i++ );
 c1001b8:	e3a04000 	mov	r4, #0
 c1001bc:	ea000000 	b	c1001c4 <delay+0x18>
 c1001c0:	e2844001 	add	r4, r4, #1
 c1001c4:	e59f3010 	ldr	r3, [pc, #16]	; c1001dc <delay+0x30>
 c1001c8:	e1540003 	cmp	r4, r3
 c1001cc:	9afffffb 	bls	c1001c0 <delay+0x14>
 c1001d0:	e24bd010 	sub	sp, fp, #16
 c1001d4:	e89d6810 	ldm	sp, {r4, fp, sp, lr}
 c1001d8:	e12fff1e 	bx	lr
 c1001dc:	001e847f 	.word	0x001e847f

0c1001e0 <lcd_init>:
static uint8 lcd_buffer[LCD_BUFFER_SIZE];

//static uint8 state;

void lcd_init( void )
{      
 c1001e0:	e1a0c00d 	mov	ip, sp
 c1001e4:	e92dd800 	push	{fp, ip, lr, pc}
 c1001e8:	e24cb004 	sub	fp, ip, #4
    DITHMODE = 0x12210;
 c1001ec:	e59f30fc 	ldr	r3, [pc, #252]	; c1002f0 <lcd_init+0x110>
 c1001f0:	e59f20fc 	ldr	r2, [pc, #252]	; c1002f4 <lcd_init+0x114>
 c1001f4:	e5832000 	str	r2, [r3]
    DP1_2    = 0xA5A5;
 c1001f8:	e59f30f8 	ldr	r3, [pc, #248]	; c1002f8 <lcd_init+0x118>
 c1001fc:	e59f20f8 	ldr	r2, [pc, #248]	; c1002fc <lcd_init+0x11c>
 c100200:	e5832000 	str	r2, [r3]
    DP4_7    = 0xBA5DA65;
 c100204:	e59f30f4 	ldr	r3, [pc, #244]	; c100300 <lcd_init+0x120>
 c100208:	e59f20f4 	ldr	r2, [pc, #244]	; c100304 <lcd_init+0x124>
 c10020c:	e5832000 	str	r2, [r3]
    DP3_5    = 0xA5A5F;
 c100210:	e59f30f0 	ldr	r3, [pc, #240]	; c100308 <lcd_init+0x128>
 c100214:	e59f20f0 	ldr	r2, [pc, #240]	; c10030c <lcd_init+0x12c>
 c100218:	e5832000 	str	r2, [r3]
    DP2_3    = 0xD6B;
 c10021c:	e59f30ec 	ldr	r3, [pc, #236]	; c100310 <lcd_init+0x130>
 c100220:	e59f20ec 	ldr	r2, [pc, #236]	; c100314 <lcd_init+0x134>
 c100224:	e5832000 	str	r2, [r3]
    DP5_7    = 0xEB7B5ED;
 c100228:	e59f30e8 	ldr	r3, [pc, #232]	; c100318 <lcd_init+0x138>
 c10022c:	e59f20e8 	ldr	r2, [pc, #232]	; c10031c <lcd_init+0x13c>
 c100230:	e5832000 	str	r2, [r3]
    DP3_4    = 0x7DBE;
 c100234:	e59f30e4 	ldr	r3, [pc, #228]	; c100320 <lcd_init+0x140>
 c100238:	e59f20e4 	ldr	r2, [pc, #228]	; c100324 <lcd_init+0x144>
 c10023c:	e5832000 	str	r2, [r3]
    DP4_5    = 0x7EBDF ;
 c100240:	e59f30e0 	ldr	r3, [pc, #224]	; c100328 <lcd_init+0x148>
 c100244:	e59f20e0 	ldr	r2, [pc, #224]	; c10032c <lcd_init+0x14c>
 c100248:	e5832000 	str	r2, [r3]
    DP6_7    = 0x7FDFBFE;
 c10024c:	e59f30dc 	ldr	r3, [pc, #220]	; c100330 <lcd_init+0x150>
 c100250:	e59f20dc 	ldr	r2, [pc, #220]	; c100334 <lcd_init+0x154>
 c100254:	e5832000 	str	r2, [r3]
    
    REDLUT   = 0x0;
 c100258:	e59f30d8 	ldr	r3, [pc, #216]	; c100338 <lcd_init+0x158>
 c10025c:	e3a02000 	mov	r2, #0
 c100260:	e5832000 	str	r2, [r3]
    GREENLUT = 0x0;
 c100264:	e59f30d0 	ldr	r3, [pc, #208]	; c10033c <lcd_init+0x15c>
 c100268:	e3a02000 	mov	r2, #0
 c10026c:	e5832000 	str	r2, [r3]
    BLUELUT  = 0x0;
 c100270:	e59f30c8 	ldr	r3, [pc, #200]	; c100340 <lcd_init+0x160>
 c100274:	e3a02000 	mov	r2, #0
 c100278:	e5832000 	str	r2, [r3]

    LCDCON1  = 0x1C020;
 c10027c:	e3a0361f 	mov	r3, #32505856	; 0x1f00000
 c100280:	e59f20bc 	ldr	r2, [pc, #188]	; c100344 <lcd_init+0x164>
 c100284:	e5832000 	str	r2, [r3]
    LCDCON2  = 0x13CEF;
 c100288:	e59f30b8 	ldr	r3, [pc, #184]	; c100348 <lcd_init+0x168>
 c10028c:	e59f20b8 	ldr	r2, [pc, #184]	; c10034c <lcd_init+0x16c>
 c100290:	e5832000 	str	r2, [r3]
    LCDCON3  = 0x0;
 c100294:	e59f30b4 	ldr	r3, [pc, #180]	; c100350 <lcd_init+0x170>
 c100298:	e3a02000 	mov	r2, #0
 c10029c:	e5832000 	str	r2, [r3]

    LCDSADDR1 = (2 << 27) | ((uint32)lcd_buffer >> 1);
 c1002a0:	e59f30ac 	ldr	r3, [pc, #172]	; c100354 <lcd_init+0x174>
 c1002a4:	e59f20ac 	ldr	r2, [pc, #172]	; c100358 <lcd_init+0x178>
 c1002a8:	e1a020a2 	lsr	r2, r2, #1
 c1002ac:	e3822201 	orr	r2, r2, #268435456	; 0x10000000
 c1002b0:	e5832000 	str	r2, [r3]
    LCDSADDR2 = (1 << 29) | (((uint32)lcd_buffer + LCD_BUFFER_SIZE) & 0x3FFFFF) >> 1;
 c1002b4:	e59f20a0 	ldr	r2, [pc, #160]	; c10035c <lcd_init+0x17c>
 c1002b8:	e59f3098 	ldr	r3, [pc, #152]	; c100358 <lcd_init+0x178>
 c1002bc:	e2833c96 	add	r3, r3, #38400	; 0x9600
 c1002c0:	e3c334ff 	bic	r3, r3, #-16777216	; 0xff000000
 c1002c4:	e3c33503 	bic	r3, r3, #12582912	; 0xc00000
 c1002c8:	e1a030a3 	lsr	r3, r3, #1
 c1002cc:	e3833202 	orr	r3, r3, #536870912	; 0x20000000
 c1002d0:	e5823000 	str	r3, [r2]
    LCDSADDR3 = 0x50;
 c1002d4:	e59f3084 	ldr	r3, [pc, #132]	; c100360 <lcd_init+0x180>
 c1002d8:	e3a02050 	mov	r2, #80	; 0x50
 c1002dc:	e5832000 	str	r2, [r3]
    
    lcd_off();
 c1002e0:	eb00002a 	bl	c100390 <lcd_off>
}
 c1002e4:	e24bd00c 	sub	sp, fp, #12
 c1002e8:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1002ec:	e12fff1e 	bx	lr
 c1002f0:	01f00044 	.word	0x01f00044
 c1002f4:	00012210 	.word	0x00012210
 c1002f8:	01f00020 	.word	0x01f00020
 c1002fc:	0000a5a5 	.word	0x0000a5a5
 c100300:	01f00024 	.word	0x01f00024
 c100304:	0ba5da65 	.word	0x0ba5da65
 c100308:	01f00028 	.word	0x01f00028
 c10030c:	000a5a5f 	.word	0x000a5a5f
 c100310:	01f0002c 	.word	0x01f0002c
 c100314:	00000d6b 	.word	0x00000d6b
 c100318:	01f00030 	.word	0x01f00030
 c10031c:	0eb7b5ed 	.word	0x0eb7b5ed
 c100320:	01f00034 	.word	0x01f00034
 c100324:	00007dbe 	.word	0x00007dbe
 c100328:	01f00038 	.word	0x01f00038
 c10032c:	0007ebdf 	.word	0x0007ebdf
 c100330:	01f0003c 	.word	0x01f0003c
 c100334:	07fdfbfe 	.word	0x07fdfbfe
 c100338:	01f00014 	.word	0x01f00014
 c10033c:	01f00018 	.word	0x01f00018
 c100340:	01f0001c 	.word	0x01f0001c
 c100344:	0001c020 	.word	0x0001c020
 c100348:	01f00004 	.word	0x01f00004
 c10034c:	00013cef 	.word	0x00013cef
 c100350:	01f00040 	.word	0x01f00040
 c100354:	01f00008 	.word	0x01f00008
 c100358:	0c103bd4 	.word	0x0c103bd4
 c10035c:	01f0000c 	.word	0x01f0000c
 c100360:	01f00010 	.word	0x01f00010

0c100364 <lcd_on>:

void lcd_on( void )
{
 c100364:	e1a0c00d 	mov	ip, sp
 c100368:	e92dd800 	push	{fp, ip, lr, pc}
 c10036c:	e24cb004 	sub	fp, ip, #4
    LCDCON1 |= (1 << 0);
 c100370:	e3a0361f 	mov	r3, #32505856	; 0x1f00000
 c100374:	e3a0261f 	mov	r2, #32505856	; 0x1f00000
 c100378:	e5922000 	ldr	r2, [r2]
 c10037c:	e3822001 	orr	r2, r2, #1
 c100380:	e5832000 	str	r2, [r3]
}
 c100384:	e24bd00c 	sub	sp, fp, #12
 c100388:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10038c:	e12fff1e 	bx	lr

0c100390 <lcd_off>:

void lcd_off( void )
{
 c100390:	e1a0c00d 	mov	ip, sp
 c100394:	e92dd800 	push	{fp, ip, lr, pc}
 c100398:	e24cb004 	sub	fp, ip, #4
	LCDCON1 &= ~(1 << 0);
 c10039c:	e3a0361f 	mov	r3, #32505856	; 0x1f00000
 c1003a0:	e3a0261f 	mov	r2, #32505856	; 0x1f00000
 c1003a4:	e5922000 	ldr	r2, [r2]
 c1003a8:	e3c22001 	bic	r2, r2, #1
 c1003ac:	e5832000 	str	r2, [r3]
}
 c1003b0:	e24bd00c 	sub	sp, fp, #12
 c1003b4:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1003b8:	e12fff1e 	bx	lr

0c1003bc <lcd_status>:

uint8 lcd_status( void )
{
 c1003bc:	e1a0c00d 	mov	ip, sp
 c1003c0:	e92dd800 	push	{fp, ip, lr, pc}
 c1003c4:	e24cb004 	sub	fp, ip, #4
    if(LCDCON1 & (1 << 0)){
 c1003c8:	e3a0361f 	mov	r3, #32505856	; 0x1f00000
 c1003cc:	e5933000 	ldr	r3, [r3]
 c1003d0:	e2033001 	and	r3, r3, #1
 c1003d4:	e20330ff 	and	r3, r3, #255	; 0xff
 c1003d8:	e3530000 	cmp	r3, #0
 c1003dc:	0a000001 	beq	c1003e8 <lcd_status+0x2c>
    	return ON;
 c1003e0:	e3a03001 	mov	r3, #1
 c1003e4:	ea000000 	b	c1003ec <lcd_status+0x30>
    }
    else{
    	return OFF;
 c1003e8:	e3a03000 	mov	r3, #0
    }
}
 c1003ec:	e1a00003 	mov	r0, r3
 c1003f0:	e24bd00c 	sub	sp, fp, #12
 c1003f4:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1003f8:	e12fff1e 	bx	lr

0c1003fc <lcd_clear>:

void lcd_clear( void )
{
 c1003fc:	e1a0c00d 	mov	ip, sp
 c100400:	e92dd800 	push	{fp, ip, lr, pc}
 c100404:	e24cb004 	sub	fp, ip, #4
 c100408:	e24dd008 	sub	sp, sp, #8
	//fila 1: (0,0) (1,0) ... (319,0)etc.
	//fila 239(ultima): (0,239) (1,239) ... (319,239)
	int i,j;
    for(i = 0; i <= LCD_HEIGHT;i++){
 c10040c:	e3a03000 	mov	r3, #0
 c100410:	e50b3010 	str	r3, [fp, #-16]
 c100414:	ea000015 	b	c100470 <lcd_clear+0x74>
    	for(j = 0; j <= LCD_WIDTH; j++){
 c100418:	e3a03000 	mov	r3, #0
 c10041c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
 c100420:	ea00000c 	b	c100458 <lcd_clear+0x5c>
    		lcd_putpixel(j,i,WHITE); // relleno en blanco todo
 c100424:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c100428:	e1a03803 	lsl	r3, r3, #16
 c10042c:	e1a02823 	lsr	r2, r3, #16
 c100430:	e51b3010 	ldr	r3, [fp, #-16]
 c100434:	e1a03803 	lsl	r3, r3, #16
 c100438:	e1a03823 	lsr	r3, r3, #16
 c10043c:	e1a00002 	mov	r0, r2
 c100440:	e1a01003 	mov	r1, r3
 c100444:	e3a02000 	mov	r2, #0
 c100448:	eb00000e 	bl	c100488 <lcd_putpixel>
{
	//fila 1: (0,0) (1,0) ... (319,0)etc.
	//fila 239(ultima): (0,239) (1,239) ... (319,239)
	int i,j;
    for(i = 0; i <= LCD_HEIGHT;i++){
    	for(j = 0; j <= LCD_WIDTH; j++){
 c10044c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c100450:	e2833001 	add	r3, r3, #1
 c100454:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
 c100458:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c10045c:	e3530d05 	cmp	r3, #320	; 0x140
 c100460:	daffffef 	ble	c100424 <lcd_clear+0x28>
void lcd_clear( void )
{
	//fila 1: (0,0) (1,0) ... (319,0)etc.
	//fila 239(ultima): (0,239) (1,239) ... (319,239)
	int i,j;
    for(i = 0; i <= LCD_HEIGHT;i++){
 c100464:	e51b3010 	ldr	r3, [fp, #-16]
 c100468:	e2833001 	add	r3, r3, #1
 c10046c:	e50b3010 	str	r3, [fp, #-16]
 c100470:	e51b3010 	ldr	r3, [fp, #-16]
 c100474:	e35300f0 	cmp	r3, #240	; 0xf0
 c100478:	daffffe6 	ble	c100418 <lcd_clear+0x1c>
    	for(j = 0; j <= LCD_WIDTH; j++){
    		lcd_putpixel(j,i,WHITE); // relleno en blanco todo
    	}
    }
}
 c10047c:	e24bd00c 	sub	sp, fp, #12
 c100480:	e89d6800 	ldm	sp, {fp, sp, lr}
 c100484:	e12fff1e 	bx	lr

0c100488 <lcd_putpixel>:

void lcd_putpixel( uint16 x, uint16 y, uint8 c)
{
 c100488:	e1a0c00d 	mov	ip, sp
 c10048c:	e92dd800 	push	{fp, ip, lr, pc}
 c100490:	e24cb004 	sub	fp, ip, #4
 c100494:	e24dd010 	sub	sp, sp, #16
 c100498:	e1a03002 	mov	r3, r2
 c10049c:	e14b01b6 	strh	r0, [fp, #-22]	; 0xffffffea
 c1004a0:	e14b11b8 	strh	r1, [fp, #-24]	; 0xffffffe8
 c1004a4:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
    uint8 byte, bit;
    uint16 i;

    i = x/2 + y*(LCD_WIDTH/2);
 c1004a8:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
 c1004ac:	e1a030a3 	lsr	r3, r3, #1
 c1004b0:	e1a03803 	lsl	r3, r3, #16
 c1004b4:	e1a02823 	lsr	r2, r3, #16
 c1004b8:	e15b31b8 	ldrh	r3, [fp, #-24]	; 0xffffffe8
 c1004bc:	e1a01003 	mov	r1, r3
 c1004c0:	e1a01101 	lsl	r1, r1, #2
 c1004c4:	e0813003 	add	r3, r1, r3
 c1004c8:	e1a03283 	lsl	r3, r3, #5
 c1004cc:	e1a03803 	lsl	r3, r3, #16
 c1004d0:	e1a03823 	lsr	r3, r3, #16
 c1004d4:	e0823003 	add	r3, r2, r3
 c1004d8:	e14b30be 	strh	r3, [fp, #-14]
    bit = (1-x%2)*4;
 c1004dc:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
 c1004e0:	e2033001 	and	r3, r3, #1
 c1004e4:	e3530000 	cmp	r3, #0
 c1004e8:	1a000001 	bne	c1004f4 <lcd_putpixel+0x6c>
 c1004ec:	e3a03004 	mov	r3, #4
 c1004f0:	ea000000 	b	c1004f8 <lcd_putpixel+0x70>
 c1004f4:	e3a03000 	mov	r3, #0
 c1004f8:	e54b300f 	strb	r3, [fp, #-15]
    
    byte = lcd_buffer[i];
 c1004fc:	e15b30be 	ldrh	r3, [fp, #-14]
 c100500:	e59f2068 	ldr	r2, [pc, #104]	; c100570 <lcd_putpixel+0xe8>
 c100504:	e7d23003 	ldrb	r3, [r2, r3]
 c100508:	e54b3010 	strb	r3, [fp, #-16]
    byte &= ~(0xF << bit);
 c10050c:	e55b300f 	ldrb	r3, [fp, #-15]
 c100510:	e3a0200f 	mov	r2, #15
 c100514:	e1a03312 	lsl	r3, r2, r3
 c100518:	e20330ff 	and	r3, r3, #255	; 0xff
 c10051c:	e1e03003 	mvn	r3, r3
 c100520:	e20320ff 	and	r2, r3, #255	; 0xff
 c100524:	e55b3010 	ldrb	r3, [fp, #-16]
 c100528:	e0023003 	and	r3, r2, r3
 c10052c:	e20330ff 	and	r3, r3, #255	; 0xff
 c100530:	e54b3010 	strb	r3, [fp, #-16]
    byte |= c << bit;
 c100534:	e55b2019 	ldrb	r2, [fp, #-25]	; 0xffffffe7
 c100538:	e55b300f 	ldrb	r3, [fp, #-15]
 c10053c:	e1a03312 	lsl	r3, r2, r3
 c100540:	e20320ff 	and	r2, r3, #255	; 0xff
 c100544:	e55b3010 	ldrb	r3, [fp, #-16]
 c100548:	e1823003 	orr	r3, r2, r3
 c10054c:	e20330ff 	and	r3, r3, #255	; 0xff
 c100550:	e54b3010 	strb	r3, [fp, #-16]
    lcd_buffer[i] = byte;
 c100554:	e15b30be 	ldrh	r3, [fp, #-14]
 c100558:	e59f2010 	ldr	r2, [pc, #16]	; c100570 <lcd_putpixel+0xe8>
 c10055c:	e55b1010 	ldrb	r1, [fp, #-16]
 c100560:	e7c21003 	strb	r1, [r2, r3]
}
 c100564:	e24bd00c 	sub	sp, fp, #12
 c100568:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10056c:	e12fff1e 	bx	lr
 c100570:	0c103bd4 	.word	0x0c103bd4

0c100574 <lcd_getpixel>:

uint8 lcd_getpixel( uint16 x, uint16 y )
{
 c100574:	e1a0c00d 	mov	ip, sp
 c100578:	e92dd800 	push	{fp, ip, lr, pc}
 c10057c:	e24cb004 	sub	fp, ip, #4
 c100580:	e24dd010 	sub	sp, sp, #16
 c100584:	e1a02000 	mov	r2, r0
 c100588:	e1a03001 	mov	r3, r1
 c10058c:	e14b21b6 	strh	r2, [fp, #-22]	; 0xffffffea
 c100590:	e14b31b8 	strh	r3, [fp, #-24]	; 0xffffffe8
    uint8 byte, bit, ret;
    uint16 i;

    i = x/2 + y*(LCD_WIDTH/2);
 c100594:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
 c100598:	e1a030a3 	lsr	r3, r3, #1
 c10059c:	e1a03803 	lsl	r3, r3, #16
 c1005a0:	e1a02823 	lsr	r2, r3, #16
 c1005a4:	e15b31b8 	ldrh	r3, [fp, #-24]	; 0xffffffe8
 c1005a8:	e1a01003 	mov	r1, r3
 c1005ac:	e1a01101 	lsl	r1, r1, #2
 c1005b0:	e0813003 	add	r3, r1, r3
 c1005b4:	e1a03283 	lsl	r3, r3, #5
 c1005b8:	e1a03803 	lsl	r3, r3, #16
 c1005bc:	e1a03823 	lsr	r3, r3, #16
 c1005c0:	e0823003 	add	r3, r2, r3
 c1005c4:	e14b31b0 	strh	r3, [fp, #-16]
    bit = (1-x%2)*4;
 c1005c8:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
 c1005cc:	e2033001 	and	r3, r3, #1
 c1005d0:	e3530000 	cmp	r3, #0
 c1005d4:	1a000001 	bne	c1005e0 <lcd_getpixel+0x6c>
 c1005d8:	e3a03004 	mov	r3, #4
 c1005dc:	ea000000 	b	c1005e4 <lcd_getpixel+0x70>
 c1005e0:	e3a03000 	mov	r3, #0
 c1005e4:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef

    byte = lcd_buffer[i];
 c1005e8:	e15b31b0 	ldrh	r3, [fp, #-16]
 c1005ec:	e59f2058 	ldr	r2, [pc, #88]	; c10064c <lcd_getpixel+0xd8>
 c1005f0:	e7d23003 	ldrb	r3, [r2, r3]
 c1005f4:	e54b3012 	strb	r3, [fp, #-18]	; 0xffffffee

    if(bit == 0){
 c1005f8:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c1005fc:	e3530000 	cmp	r3, #0
 c100600:	1a000005 	bne	c10061c <lcd_getpixel+0xa8>
    	byte &= ~(0xF << 4);
 c100604:	e55b3012 	ldrb	r3, [fp, #-18]	; 0xffffffee
 c100608:	e203300f 	and	r3, r3, #15
 c10060c:	e54b3012 	strb	r3, [fp, #-18]	; 0xffffffee
    	ret = byte;
 c100610:	e55b3012 	ldrb	r3, [fp, #-18]	; 0xffffffee
 c100614:	e54b300d 	strb	r3, [fp, #-13]
 c100618:	ea000006 	b	c100638 <lcd_getpixel+0xc4>
    }
    else{
    	byte &= ~(0xF << 0);
 c10061c:	e55b3012 	ldrb	r3, [fp, #-18]	; 0xffffffee
 c100620:	e3c3300f 	bic	r3, r3, #15
 c100624:	e54b3012 	strb	r3, [fp, #-18]	; 0xffffffee
    	ret = byte >> bit;
 c100628:	e55b2012 	ldrb	r2, [fp, #-18]	; 0xffffffee
 c10062c:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c100630:	e1a03352 	asr	r3, r2, r3
 c100634:	e54b300d 	strb	r3, [fp, #-13]
    }

    return ret;
 c100638:	e55b300d 	ldrb	r3, [fp, #-13]
}
 c10063c:	e1a00003 	mov	r0, r3
 c100640:	e24bd00c 	sub	sp, fp, #12
 c100644:	e89d6800 	ldm	sp, {fp, sp, lr}
 c100648:	e12fff1e 	bx	lr
 c10064c:	0c103bd4 	.word	0x0c103bd4

0c100650 <lcd_draw_hline>:

void lcd_draw_hline( uint16 xleft, uint16 xright, uint16 y, uint8 color, uint16 width )
{
 c100650:	e1a0c00d 	mov	ip, sp
 c100654:	e92dd800 	push	{fp, ip, lr, pc}
 c100658:	e24cb004 	sub	fp, ip, #4
 c10065c:	e24dd010 	sub	sp, sp, #16
 c100660:	e14b01b6 	strh	r0, [fp, #-22]	; 0xffffffea
 c100664:	e14b11b8 	strh	r1, [fp, #-24]	; 0xffffffe8
 c100668:	e14b21ba 	strh	r2, [fp, #-26]	; 0xffffffe6
 c10066c:	e54b301b 	strb	r3, [fp, #-27]	; 0xffffffe5
	int i,j;
	for(i = y; i < (y+width); i++ ){
 c100670:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
 c100674:	e50b3010 	str	r3, [fp, #-16]
 c100678:	ea000017 	b	c1006dc <lcd_draw_hline+0x8c>
		for(j = xleft; j < xright; j++){
 c10067c:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
 c100680:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
 c100684:	ea00000d 	b	c1006c0 <lcd_draw_hline+0x70>
			lcd_putpixel(j,i,color);
 c100688:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c10068c:	e1a03803 	lsl	r3, r3, #16
 c100690:	e1a01823 	lsr	r1, r3, #16
 c100694:	e51b3010 	ldr	r3, [fp, #-16]
 c100698:	e1a03803 	lsl	r3, r3, #16
 c10069c:	e1a02823 	lsr	r2, r3, #16
 c1006a0:	e55b301b 	ldrb	r3, [fp, #-27]	; 0xffffffe5
 c1006a4:	e1a00001 	mov	r0, r1
 c1006a8:	e1a01002 	mov	r1, r2
 c1006ac:	e1a02003 	mov	r2, r3
 c1006b0:	ebffff74 	bl	c100488 <lcd_putpixel>

void lcd_draw_hline( uint16 xleft, uint16 xright, uint16 y, uint8 color, uint16 width )
{
	int i,j;
	for(i = y; i < (y+width); i++ ){
		for(j = xleft; j < xright; j++){
 c1006b4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c1006b8:	e2833001 	add	r3, r3, #1
 c1006bc:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
 c1006c0:	e15b21b8 	ldrh	r2, [fp, #-24]	; 0xffffffe8
 c1006c4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c1006c8:	e1520003 	cmp	r2, r3
 c1006cc:	caffffed 	bgt	c100688 <lcd_draw_hline+0x38>
}

void lcd_draw_hline( uint16 xleft, uint16 xright, uint16 y, uint8 color, uint16 width )
{
	int i,j;
	for(i = y; i < (y+width); i++ ){
 c1006d0:	e51b3010 	ldr	r3, [fp, #-16]
 c1006d4:	e2833001 	add	r3, r3, #1
 c1006d8:	e50b3010 	str	r3, [fp, #-16]
 c1006dc:	e15b21ba 	ldrh	r2, [fp, #-26]	; 0xffffffe6
 c1006e0:	e1db30b4 	ldrh	r3, [fp, #4]
 c1006e4:	e0822003 	add	r2, r2, r3
 c1006e8:	e51b3010 	ldr	r3, [fp, #-16]
 c1006ec:	e1520003 	cmp	r2, r3
 c1006f0:	caffffe1 	bgt	c10067c <lcd_draw_hline+0x2c>
		for(j = xleft; j < xright; j++){
			lcd_putpixel(j,i,color);
		}
	}
}
 c1006f4:	e24bd00c 	sub	sp, fp, #12
 c1006f8:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1006fc:	e12fff1e 	bx	lr

0c100700 <lcd_draw_vline>:

void lcd_draw_vline( uint16 yup, uint16 ydown, uint16 x, uint8 color, uint16 width )
{
 c100700:	e1a0c00d 	mov	ip, sp
 c100704:	e92dd800 	push	{fp, ip, lr, pc}
 c100708:	e24cb004 	sub	fp, ip, #4
 c10070c:	e24dd010 	sub	sp, sp, #16
 c100710:	e14b01b6 	strh	r0, [fp, #-22]	; 0xffffffea
 c100714:	e14b11b8 	strh	r1, [fp, #-24]	; 0xffffffe8
 c100718:	e14b21ba 	strh	r2, [fp, #-26]	; 0xffffffe6
 c10071c:	e54b301b 	strb	r3, [fp, #-27]	; 0xffffffe5
	int i,j;
	for (i = yup; i < ydown; i++) {
 c100720:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
 c100724:	e50b3010 	str	r3, [fp, #-16]
 c100728:	ea000019 	b	c100794 <lcd_draw_vline+0x94>
		for (j = x; j < (x + width); j++) {
 c10072c:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
 c100730:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
 c100734:	ea00000d 	b	c100770 <lcd_draw_vline+0x70>
			lcd_putpixel(j, i, color);
 c100738:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c10073c:	e1a03803 	lsl	r3, r3, #16
 c100740:	e1a01823 	lsr	r1, r3, #16
 c100744:	e51b3010 	ldr	r3, [fp, #-16]
 c100748:	e1a03803 	lsl	r3, r3, #16
 c10074c:	e1a02823 	lsr	r2, r3, #16
 c100750:	e55b301b 	ldrb	r3, [fp, #-27]	; 0xffffffe5
 c100754:	e1a00001 	mov	r0, r1
 c100758:	e1a01002 	mov	r1, r2
 c10075c:	e1a02003 	mov	r2, r3
 c100760:	ebffff48 	bl	c100488 <lcd_putpixel>

void lcd_draw_vline( uint16 yup, uint16 ydown, uint16 x, uint8 color, uint16 width )
{
	int i,j;
	for (i = yup; i < ydown; i++) {
		for (j = x; j < (x + width); j++) {
 c100764:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c100768:	e2833001 	add	r3, r3, #1
 c10076c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
 c100770:	e15b21ba 	ldrh	r2, [fp, #-26]	; 0xffffffe6
 c100774:	e1db30b4 	ldrh	r3, [fp, #4]
 c100778:	e0822003 	add	r2, r2, r3
 c10077c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c100780:	e1520003 	cmp	r2, r3
 c100784:	caffffeb 	bgt	c100738 <lcd_draw_vline+0x38>
}

void lcd_draw_vline( uint16 yup, uint16 ydown, uint16 x, uint8 color, uint16 width )
{
	int i,j;
	for (i = yup; i < ydown; i++) {
 c100788:	e51b3010 	ldr	r3, [fp, #-16]
 c10078c:	e2833001 	add	r3, r3, #1
 c100790:	e50b3010 	str	r3, [fp, #-16]
 c100794:	e15b21b8 	ldrh	r2, [fp, #-24]	; 0xffffffe8
 c100798:	e51b3010 	ldr	r3, [fp, #-16]
 c10079c:	e1520003 	cmp	r2, r3
 c1007a0:	caffffe1 	bgt	c10072c <lcd_draw_vline+0x2c>
		for (j = x; j < (x + width); j++) {
			lcd_putpixel(j, i, color);
		}
	}
}
 c1007a4:	e24bd00c 	sub	sp, fp, #12
 c1007a8:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1007ac:	e12fff1e 	bx	lr

0c1007b0 <lcd_draw_box>:

void lcd_draw_box( uint16 xleft, uint16 yup, uint16 xright, uint16 ydown, uint8 color, uint16 width )
{
 c1007b0:	e1a0c00d 	mov	ip, sp
 c1007b4:	e92dd800 	push	{fp, ip, lr, pc}
 c1007b8:	e24cb004 	sub	fp, ip, #4
 c1007bc:	e24dd010 	sub	sp, sp, #16
 c1007c0:	e14b00be 	strh	r0, [fp, #-14]
 c1007c4:	e14b11b0 	strh	r1, [fp, #-16]
 c1007c8:	e14b21b2 	strh	r2, [fp, #-18]	; 0xffffffee
 c1007cc:	e14b31b4 	strh	r3, [fp, #-20]	; 0xffffffec
	lcd_draw_hline(xleft, xright, yup, color, width);
 c1007d0:	e15b00be 	ldrh	r0, [fp, #-14]
 c1007d4:	e15b11b2 	ldrh	r1, [fp, #-18]	; 0xffffffee
 c1007d8:	e15b21b0 	ldrh	r2, [fp, #-16]
 c1007dc:	e5db3004 	ldrb	r3, [fp, #4]
 c1007e0:	e1dbc0b8 	ldrh	ip, [fp, #8]
 c1007e4:	e58dc000 	str	ip, [sp]
 c1007e8:	ebffff98 	bl	c100650 <lcd_draw_hline>
	lcd_draw_vline(yup, ydown, xleft, color, width);
 c1007ec:	e15b01b0 	ldrh	r0, [fp, #-16]
 c1007f0:	e15b11b4 	ldrh	r1, [fp, #-20]	; 0xffffffec
 c1007f4:	e15b20be 	ldrh	r2, [fp, #-14]
 c1007f8:	e5db3004 	ldrb	r3, [fp, #4]
 c1007fc:	e1dbc0b8 	ldrh	ip, [fp, #8]
 c100800:	e58dc000 	str	ip, [sp]
 c100804:	ebffffbd 	bl	c100700 <lcd_draw_vline>
	lcd_draw_hline(xleft, xright, ydown, color, width);
 c100808:	e15b00be 	ldrh	r0, [fp, #-14]
 c10080c:	e15b11b2 	ldrh	r1, [fp, #-18]	; 0xffffffee
 c100810:	e15b21b4 	ldrh	r2, [fp, #-20]	; 0xffffffec
 c100814:	e5db3004 	ldrb	r3, [fp, #4]
 c100818:	e1dbc0b8 	ldrh	ip, [fp, #8]
 c10081c:	e58dc000 	str	ip, [sp]
 c100820:	ebffff8a 	bl	c100650 <lcd_draw_hline>
	lcd_draw_vline(yup, ydown + width + 1, xright, color, width);
 c100824:	e15b21b4 	ldrh	r2, [fp, #-20]	; 0xffffffec
 c100828:	e1db30b8 	ldrh	r3, [fp, #8]
 c10082c:	e0823003 	add	r3, r2, r3
 c100830:	e1a03803 	lsl	r3, r3, #16
 c100834:	e1a03823 	lsr	r3, r3, #16
 c100838:	e2833001 	add	r3, r3, #1
 c10083c:	e1a03803 	lsl	r3, r3, #16
 c100840:	e1a01823 	lsr	r1, r3, #16
 c100844:	e15b01b0 	ldrh	r0, [fp, #-16]
 c100848:	e15b21b2 	ldrh	r2, [fp, #-18]	; 0xffffffee
 c10084c:	e5db3004 	ldrb	r3, [fp, #4]
 c100850:	e1dbc0b8 	ldrh	ip, [fp, #8]
 c100854:	e58dc000 	str	ip, [sp]
 c100858:	ebffffa8 	bl	c100700 <lcd_draw_vline>
}
 c10085c:	e24bd00c 	sub	sp, fp, #12
 c100860:	e89d6800 	ldm	sp, {fp, sp, lr}
 c100864:	e12fff1e 	bx	lr

0c100868 <lcd_putchar>:

void lcd_putchar( uint16 x, uint16 y, uint8 color, char ch )
{
 c100868:	e1a0c00d 	mov	ip, sp
 c10086c:	e92dd800 	push	{fp, ip, lr, pc}
 c100870:	e24cb004 	sub	fp, ip, #4
 c100874:	e24dd010 	sub	sp, sp, #16
 c100878:	e14b01b6 	strh	r0, [fp, #-22]	; 0xffffffea
 c10087c:	e14b11b8 	strh	r1, [fp, #-24]	; 0xffffffe8
 c100880:	e54b2019 	strb	r2, [fp, #-25]	; 0xffffffe7
 c100884:	e54b301a 	strb	r3, [fp, #-26]	; 0xffffffe6
    uint8 line, row;
    uint8 *bitmap;

    bitmap = font + ch*16;
 c100888:	e55b301a 	ldrb	r3, [fp, #-26]	; 0xffffffe6
 c10088c:	e1a03203 	lsl	r3, r3, #4
 c100890:	e1a02003 	mov	r2, r3
 c100894:	e59f311c 	ldr	r3, [pc, #284]	; c1009b8 <lcd_putchar+0x150>
 c100898:	e0823003 	add	r3, r2, r3
 c10089c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    for( line=0; line<16; line++ )
 c1008a0:	e3a03000 	mov	r3, #0
 c1008a4:	e54b300d 	strb	r3, [fp, #-13]
 c1008a8:	ea00003c 	b	c1009a0 <lcd_putchar+0x138>
        for( row=0; row<8; row++ )                    
 c1008ac:	e3a03000 	mov	r3, #0
 c1008b0:	e54b300e 	strb	r3, [fp, #-14]
 c1008b4:	ea000033 	b	c100988 <lcd_putchar+0x120>
            if( bitmap[line] & (0x80 >> row) )
 c1008b8:	e55b300d 	ldrb	r3, [fp, #-13]
 c1008bc:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
 c1008c0:	e0823003 	add	r3, r2, r3
 c1008c4:	e5d33000 	ldrb	r3, [r3]
 c1008c8:	e1a02003 	mov	r2, r3
 c1008cc:	e55b300e 	ldrb	r3, [fp, #-14]
 c1008d0:	e3a01080 	mov	r1, #128	; 0x80
 c1008d4:	e1a03351 	asr	r3, r1, r3
 c1008d8:	e0023003 	and	r3, r2, r3
 c1008dc:	e3530000 	cmp	r3, #0
 c1008e0:	0a000013 	beq	c100934 <lcd_putchar+0xcc>
                lcd_putpixel( x+row, y+line, color );
 c1008e4:	e55b300e 	ldrb	r3, [fp, #-14]
 c1008e8:	e1a03803 	lsl	r3, r3, #16
 c1008ec:	e1a02823 	lsr	r2, r3, #16
 c1008f0:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
 c1008f4:	e0823003 	add	r3, r2, r3
 c1008f8:	e1a03803 	lsl	r3, r3, #16
 c1008fc:	e1a01823 	lsr	r1, r3, #16
 c100900:	e55b300d 	ldrb	r3, [fp, #-13]
 c100904:	e1a03803 	lsl	r3, r3, #16
 c100908:	e1a02823 	lsr	r2, r3, #16
 c10090c:	e15b31b8 	ldrh	r3, [fp, #-24]	; 0xffffffe8
 c100910:	e0823003 	add	r3, r2, r3
 c100914:	e1a03803 	lsl	r3, r3, #16
 c100918:	e1a02823 	lsr	r2, r3, #16
 c10091c:	e55b3019 	ldrb	r3, [fp, #-25]	; 0xffffffe7
 c100920:	e1a00001 	mov	r0, r1
 c100924:	e1a01002 	mov	r1, r2
 c100928:	e1a02003 	mov	r2, r3
 c10092c:	ebfffed5 	bl	c100488 <lcd_putpixel>
 c100930:	ea000011 	b	c10097c <lcd_putchar+0x114>
            else
                lcd_putpixel( x+row, y+line, WHITE );
 c100934:	e55b300e 	ldrb	r3, [fp, #-14]
 c100938:	e1a03803 	lsl	r3, r3, #16
 c10093c:	e1a02823 	lsr	r2, r3, #16
 c100940:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
 c100944:	e0823003 	add	r3, r2, r3
 c100948:	e1a03803 	lsl	r3, r3, #16
 c10094c:	e1a02823 	lsr	r2, r3, #16
 c100950:	e55b300d 	ldrb	r3, [fp, #-13]
 c100954:	e1a03803 	lsl	r3, r3, #16
 c100958:	e1a01823 	lsr	r1, r3, #16
 c10095c:	e15b31b8 	ldrh	r3, [fp, #-24]	; 0xffffffe8
 c100960:	e0813003 	add	r3, r1, r3
 c100964:	e1a03803 	lsl	r3, r3, #16
 c100968:	e1a03823 	lsr	r3, r3, #16
 c10096c:	e1a00002 	mov	r0, r2
 c100970:	e1a01003 	mov	r1, r3
 c100974:	e3a02000 	mov	r2, #0
 c100978:	ebfffec2 	bl	c100488 <lcd_putpixel>
    uint8 line, row;
    uint8 *bitmap;

    bitmap = font + ch*16;
    for( line=0; line<16; line++ )
        for( row=0; row<8; row++ )                    
 c10097c:	e55b300e 	ldrb	r3, [fp, #-14]
 c100980:	e2833001 	add	r3, r3, #1
 c100984:	e54b300e 	strb	r3, [fp, #-14]
 c100988:	e55b300e 	ldrb	r3, [fp, #-14]
 c10098c:	e3530007 	cmp	r3, #7
 c100990:	9affffc8 	bls	c1008b8 <lcd_putchar+0x50>
{
    uint8 line, row;
    uint8 *bitmap;

    bitmap = font + ch*16;
    for( line=0; line<16; line++ )
 c100994:	e55b300d 	ldrb	r3, [fp, #-13]
 c100998:	e2833001 	add	r3, r3, #1
 c10099c:	e54b300d 	strb	r3, [fp, #-13]
 c1009a0:	e55b300d 	ldrb	r3, [fp, #-13]
 c1009a4:	e353000f 	cmp	r3, #15
 c1009a8:	9affffbf 	bls	c1008ac <lcd_putchar+0x44>
        for( row=0; row<8; row++ )                    
            if( bitmap[line] & (0x80 >> row) )
                lcd_putpixel( x+row, y+line, color );
            else
                lcd_putpixel( x+row, y+line, WHITE );
}
 c1009ac:	e24bd00c 	sub	sp, fp, #12
 c1009b0:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1009b4:	e12fff1e 	bx	lr
 c1009b8:	0c102bd4 	.word	0x0c102bd4

0c1009bc <lcd_puts>:

void lcd_puts( uint16 x, uint16 y, uint8 color, char *s )
{
 c1009bc:	e1a0c00d 	mov	ip, sp
 c1009c0:	e92dd800 	push	{fp, ip, lr, pc}
 c1009c4:	e24cb004 	sub	fp, ip, #4
 c1009c8:	e24dd018 	sub	sp, sp, #24
 c1009cc:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
 c1009d0:	e14b01b6 	strh	r0, [fp, #-22]	; 0xffffffea
 c1009d4:	e14b11b8 	strh	r1, [fp, #-24]	; 0xffffffe8
 c1009d8:	e1a03002 	mov	r3, r2
 c1009dc:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
	uint16 i = y, j;
 c1009e0:	e15b31b8 	ldrh	r3, [fp, #-24]	; 0xffffffe8
 c1009e4:	e14b30be 	strh	r3, [fp, #-14]

	while((*s != '\0')&&(i < LCD_HEIGHT)){
 c1009e8:	ea000019 	b	c100a54 <lcd_puts+0x98>
		j = x;
 c1009ec:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
 c1009f0:	e14b31b0 	strh	r3, [fp, #-16]
		while((*s != '\0')&&(j < LCD_WIDTH)){
 c1009f4:	ea00000b 	b	c100a28 <lcd_puts+0x6c>
			lcd_putchar(j,i,color,*s);
 c1009f8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c1009fc:	e5d33000 	ldrb	r3, [r3]
 c100a00:	e15b01b0 	ldrh	r0, [fp, #-16]
 c100a04:	e15b10be 	ldrh	r1, [fp, #-14]
 c100a08:	e55b2019 	ldrb	r2, [fp, #-25]	; 0xffffffe7
 c100a0c:	ebffff95 	bl	c100868 <lcd_putchar>
			s++;
 c100a10:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c100a14:	e2833001 	add	r3, r3, #1
 c100a18:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
			j+=8;
 c100a1c:	e15b31b0 	ldrh	r3, [fp, #-16]
 c100a20:	e2833008 	add	r3, r3, #8
 c100a24:	e14b31b0 	strh	r3, [fp, #-16]
{
	uint16 i = y, j;

	while((*s != '\0')&&(i < LCD_HEIGHT)){
		j = x;
		while((*s != '\0')&&(j < LCD_WIDTH)){
 c100a28:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c100a2c:	e5d33000 	ldrb	r3, [r3]
 c100a30:	e3530000 	cmp	r3, #0
 c100a34:	0a000003 	beq	c100a48 <lcd_puts+0x8c>
 c100a38:	e15b21b0 	ldrh	r2, [fp, #-16]
 c100a3c:	e59f3038 	ldr	r3, [pc, #56]	; c100a7c <lcd_puts+0xc0>
 c100a40:	e1520003 	cmp	r2, r3
 c100a44:	9affffeb 	bls	c1009f8 <lcd_puts+0x3c>
			lcd_putchar(j,i,color,*s);
			s++;
			j+=8;
		}
		i+=16;
 c100a48:	e15b30be 	ldrh	r3, [fp, #-14]
 c100a4c:	e2833010 	add	r3, r3, #16
 c100a50:	e14b30be 	strh	r3, [fp, #-14]

void lcd_puts( uint16 x, uint16 y, uint8 color, char *s )
{
	uint16 i = y, j;

	while((*s != '\0')&&(i < LCD_HEIGHT)){
 c100a54:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c100a58:	e5d33000 	ldrb	r3, [r3]
 c100a5c:	e3530000 	cmp	r3, #0
 c100a60:	0a000002 	beq	c100a70 <lcd_puts+0xb4>
 c100a64:	e15b30be 	ldrh	r3, [fp, #-14]
 c100a68:	e35300ef 	cmp	r3, #239	; 0xef
 c100a6c:	9affffde 	bls	c1009ec <lcd_puts+0x30>
			s++;
			j+=8;
		}
		i+=16;
	}
}
 c100a70:	e24bd00c 	sub	sp, fp, #12
 c100a74:	e89d6800 	ldm	sp, {fp, sp, lr}
 c100a78:	e12fff1e 	bx	lr
 c100a7c:	0000013f 	.word	0x0000013f

0c100a80 <lcd_putint>:

void lcd_putint( uint16 x, uint16 y, uint8 color, int32 i )
{
 c100a80:	e1a0c00d 	mov	ip, sp
 c100a84:	e92dd800 	push	{fp, ip, lr, pc}
 c100a88:	e24cb004 	sub	fp, ip, #4
 c100a8c:	e24dd028 	sub	sp, sp, #40	; 0x28
 c100a90:	e50b3030 	str	r3, [fp, #-48]	; 0xffffffd0
 c100a94:	e14b02b6 	strh	r0, [fp, #-38]	; 0xffffffda
 c100a98:	e14b12b8 	strh	r1, [fp, #-40]	; 0xffffffd8
 c100a9c:	e1a03002 	mov	r3, r2
 c100aa0:	e54b3029 	strb	r3, [fp, #-41]	; 0xffffffd7
	uint16 x2 = x, y2 = y;
 c100aa4:	e15b32b6 	ldrh	r3, [fp, #-38]	; 0xffffffda
 c100aa8:	e14b31b4 	strh	r3, [fp, #-20]	; 0xffffffec
 c100aac:	e15b32b8 	ldrh	r3, [fp, #-40]	; 0xffffffd8
 c100ab0:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
	char buf[8 + 1];
	char *p = buf + 8;
 c100ab4:	e24b3020 	sub	r3, fp, #32
 c100ab8:	e2833008 	add	r3, r3, #8
 c100abc:	e50b3010 	str	r3, [fp, #-16]
	uint8 c = 0;
 c100ac0:	e3a03000 	mov	r3, #0
 c100ac4:	e54b3017 	strb	r3, [fp, #-23]	; 0xffffffe9
	uint8 neg = 0;
 c100ac8:	e3a03000 	mov	r3, #0
 c100acc:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef

	if(i < 0){
 c100ad0:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
 c100ad4:	e3530000 	cmp	r3, #0
 c100ad8:	aa000004 	bge	c100af0 <lcd_putint+0x70>
		neg = 1;
 c100adc:	e3a03001 	mov	r3, #1
 c100ae0:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
		i = -i;
 c100ae4:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
 c100ae8:	e2633000 	rsb	r3, r3, #0
 c100aec:	e50b3030 	str	r3, [fp, #-48]	; 0xffffffd0
	}

	*p = '\0';
 c100af0:	e51b3010 	ldr	r3, [fp, #-16]
 c100af4:	e3a02000 	mov	r2, #0
 c100af8:	e5c32000 	strb	r2, [r3]
	do {
		c = i % 10;
 c100afc:	e51b1030 	ldr	r1, [fp, #-48]	; 0xffffffd0
 c100b00:	e59f30c0 	ldr	r3, [pc, #192]	; c100bc8 <lcd_putint+0x148>
 c100b04:	e0c32391 	smull	r2, r3, r1, r3
 c100b08:	e1a02143 	asr	r2, r3, #2
 c100b0c:	e1a03fc1 	asr	r3, r1, #31
 c100b10:	e0632002 	rsb	r2, r3, r2
 c100b14:	e1a03002 	mov	r3, r2
 c100b18:	e1a03103 	lsl	r3, r3, #2
 c100b1c:	e0833002 	add	r3, r3, r2
 c100b20:	e1a03083 	lsl	r3, r3, #1
 c100b24:	e0632001 	rsb	r2, r3, r1
 c100b28:	e1a03002 	mov	r3, r2
 c100b2c:	e54b3017 	strb	r3, [fp, #-23]	; 0xffffffe9
		*--p = '0' + c;
 c100b30:	e51b3010 	ldr	r3, [fp, #-16]
 c100b34:	e2433001 	sub	r3, r3, #1
 c100b38:	e50b3010 	str	r3, [fp, #-16]
 c100b3c:	e55b3017 	ldrb	r3, [fp, #-23]	; 0xffffffe9
 c100b40:	e2833030 	add	r3, r3, #48	; 0x30
 c100b44:	e20320ff 	and	r2, r3, #255	; 0xff
 c100b48:	e51b3010 	ldr	r3, [fp, #-16]
 c100b4c:	e5c32000 	strb	r2, [r3]
		i = i / 10;
 c100b50:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
 c100b54:	e59f206c 	ldr	r2, [pc, #108]	; c100bc8 <lcd_putint+0x148>
 c100b58:	e0c21293 	smull	r1, r2, r3, r2
 c100b5c:	e1a02142 	asr	r2, r2, #2
 c100b60:	e1a03fc3 	asr	r3, r3, #31
 c100b64:	e0633002 	rsb	r3, r3, r2
 c100b68:	e50b3030 	str	r3, [fp, #-48]	; 0xffffffd0
	} while (i);
 c100b6c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
 c100b70:	e3530000 	cmp	r3, #0
 c100b74:	1affffe0 	bne	c100afc <lcd_putint+0x7c>

	if(neg == 1){
 c100b78:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c100b7c:	e3530001 	cmp	r3, #1
 c100b80:	1a000005 	bne	c100b9c <lcd_putint+0x11c>
		*--p = '-';
 c100b84:	e51b3010 	ldr	r3, [fp, #-16]
 c100b88:	e2433001 	sub	r3, r3, #1
 c100b8c:	e50b3010 	str	r3, [fp, #-16]
 c100b90:	e51b3010 	ldr	r3, [fp, #-16]
 c100b94:	e3a0202d 	mov	r2, #45	; 0x2d
 c100b98:	e5c32000 	strb	r2, [r3]
	}

	lcd_puts(x2,y2,color,p);
 c100b9c:	e15b11b4 	ldrh	r1, [fp, #-20]	; 0xffffffec
 c100ba0:	e15b21b6 	ldrh	r2, [fp, #-22]	; 0xffffffea
 c100ba4:	e55b3029 	ldrb	r3, [fp, #-41]	; 0xffffffd7
 c100ba8:	e1a00001 	mov	r0, r1
 c100bac:	e1a01002 	mov	r1, r2
 c100bb0:	e1a02003 	mov	r2, r3
 c100bb4:	e51b3010 	ldr	r3, [fp, #-16]
 c100bb8:	ebffff7f 	bl	c1009bc <lcd_puts>
}
 c100bbc:	e24bd00c 	sub	sp, fp, #12
 c100bc0:	e89d6800 	ldm	sp, {fp, sp, lr}
 c100bc4:	e12fff1e 	bx	lr
 c100bc8:	66666667 	.word	0x66666667

0c100bcc <lcd_puthex>:

void lcd_puthex( uint16 x, uint16 y, uint8 color, uint32 i )
{
 c100bcc:	e1a0c00d 	mov	ip, sp
 c100bd0:	e92dd800 	push	{fp, ip, lr, pc}
 c100bd4:	e24cb004 	sub	fp, ip, #4
 c100bd8:	e24dd020 	sub	sp, sp, #32
 c100bdc:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
 c100be0:	e14b01be 	strh	r0, [fp, #-30]	; 0xffffffe2
 c100be4:	e14b12b0 	strh	r1, [fp, #-32]	; 0xffffffe0
 c100be8:	e1a03002 	mov	r3, r2
 c100bec:	e54b3021 	strb	r3, [fp, #-33]	; 0xffffffdf
    char buf[8 + 1];
    char *p = buf + 8;
 c100bf0:	e24b301c 	sub	r3, fp, #28
 c100bf4:	e2833008 	add	r3, r3, #8
 c100bf8:	e50b3010 	str	r3, [fp, #-16]
    uint8 c;

    *p = '\0';
 c100bfc:	e51b3010 	ldr	r3, [fp, #-16]
 c100c00:	e3a02000 	mov	r2, #0
 c100c04:	e5c32000 	strb	r2, [r3]

    do {
        c = i & 0xf;
 c100c08:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
 c100c0c:	e20330ff 	and	r3, r3, #255	; 0xff
 c100c10:	e203300f 	and	r3, r3, #15
 c100c14:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
        if( c < 10 )
 c100c18:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c100c1c:	e3530009 	cmp	r3, #9
 c100c20:	8a000008 	bhi	c100c48 <lcd_puthex+0x7c>
            *--p = '0' + c;
 c100c24:	e51b3010 	ldr	r3, [fp, #-16]
 c100c28:	e2433001 	sub	r3, r3, #1
 c100c2c:	e50b3010 	str	r3, [fp, #-16]
 c100c30:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c100c34:	e2833030 	add	r3, r3, #48	; 0x30
 c100c38:	e20320ff 	and	r2, r3, #255	; 0xff
 c100c3c:	e51b3010 	ldr	r3, [fp, #-16]
 c100c40:	e5c32000 	strb	r2, [r3]
 c100c44:	ea000007 	b	c100c68 <lcd_puthex+0x9c>
        else
            *--p = 'a' + c - 10;
 c100c48:	e51b3010 	ldr	r3, [fp, #-16]
 c100c4c:	e2433001 	sub	r3, r3, #1
 c100c50:	e50b3010 	str	r3, [fp, #-16]
 c100c54:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c100c58:	e2833057 	add	r3, r3, #87	; 0x57
 c100c5c:	e20320ff 	and	r2, r3, #255	; 0xff
 c100c60:	e51b3010 	ldr	r3, [fp, #-16]
 c100c64:	e5c32000 	strb	r2, [r3]
        i = i >> 4;
 c100c68:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
 c100c6c:	e1a03223 	lsr	r3, r3, #4
 c100c70:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
    } while( i );
 c100c74:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
 c100c78:	e3530000 	cmp	r3, #0
 c100c7c:	1affffe1 	bne	c100c08 <lcd_puthex+0x3c>

    lcd_puts(x,y,color,p);
 c100c80:	e15b11be 	ldrh	r1, [fp, #-30]	; 0xffffffe2
 c100c84:	e15b22b0 	ldrh	r2, [fp, #-32]	; 0xffffffe0
 c100c88:	e55b3021 	ldrb	r3, [fp, #-33]	; 0xffffffdf
 c100c8c:	e1a00001 	mov	r0, r1
 c100c90:	e1a01002 	mov	r1, r2
 c100c94:	e1a02003 	mov	r2, r3
 c100c98:	e51b3010 	ldr	r3, [fp, #-16]
 c100c9c:	ebffff46 	bl	c1009bc <lcd_puts>
}
 c100ca0:	e24bd00c 	sub	sp, fp, #12
 c100ca4:	e89d6800 	ldm	sp, {fp, sp, lr}
 c100ca8:	e12fff1e 	bx	lr

0c100cac <lcd_putchar_x2>:

void lcd_putchar_x2( uint16 x, uint16 y, uint8 color, char ch )
{
 c100cac:	e1a0c00d 	mov	ip, sp
 c100cb0:	e92dd800 	push	{fp, ip, lr, pc}
 c100cb4:	e24cb004 	sub	fp, ip, #4
 c100cb8:	e24dd010 	sub	sp, sp, #16
 c100cbc:	e14b01b6 	strh	r0, [fp, #-22]	; 0xffffffea
 c100cc0:	e14b11b8 	strh	r1, [fp, #-24]	; 0xffffffe8
 c100cc4:	e54b2019 	strb	r2, [fp, #-25]	; 0xffffffe7
 c100cc8:	e54b301a 	strb	r3, [fp, #-26]	; 0xffffffe6
	uint8 line, row;
	uint8* bitmap;
	bitmap = font + ch * 16;
 c100ccc:	e55b301a 	ldrb	r3, [fp, #-26]	; 0xffffffe6
 c100cd0:	e1a03203 	lsl	r3, r3, #4
 c100cd4:	e1a02003 	mov	r2, r3
 c100cd8:	e59f3348 	ldr	r3, [pc, #840]	; c101028 <lcd_putchar_x2+0x37c>
 c100cdc:	e0823003 	add	r3, r2, r3
 c100ce0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
	for (line = 0; line < 32; line += 2)
 c100ce4:	e3a03000 	mov	r3, #0
 c100ce8:	e54b300d 	strb	r3, [fp, #-13]
 c100cec:	ea0000c7 	b	c101010 <lcd_putchar_x2+0x364>
		for (row = 0; row < 16; row += 2)
 c100cf0:	e3a03000 	mov	r3, #0
 c100cf4:	e54b300e 	strb	r3, [fp, #-14]
 c100cf8:	ea0000be 	b	c100ff8 <lcd_putchar_x2+0x34c>
			if (bitmap[(line / 2)] & (0x80 >> (row / 2))) {
 c100cfc:	e55b300d 	ldrb	r3, [fp, #-13]
 c100d00:	e1a030a3 	lsr	r3, r3, #1
 c100d04:	e20330ff 	and	r3, r3, #255	; 0xff
 c100d08:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
 c100d0c:	e0823003 	add	r3, r2, r3
 c100d10:	e5d33000 	ldrb	r3, [r3]
 c100d14:	e1a02003 	mov	r2, r3
 c100d18:	e55b300e 	ldrb	r3, [fp, #-14]
 c100d1c:	e1a030a3 	lsr	r3, r3, #1
 c100d20:	e20330ff 	and	r3, r3, #255	; 0xff
 c100d24:	e3a01080 	mov	r1, #128	; 0x80
 c100d28:	e1a03351 	asr	r3, r1, r3
 c100d2c:	e0023003 	and	r3, r2, r3
 c100d30:	e3530000 	cmp	r3, #0
 c100d34:	0a000058 	beq	c100e9c <lcd_putchar_x2+0x1f0>
				lcd_putpixel(x + row, y + line, color);
 c100d38:	e55b300e 	ldrb	r3, [fp, #-14]
 c100d3c:	e1a03803 	lsl	r3, r3, #16
 c100d40:	e1a02823 	lsr	r2, r3, #16
 c100d44:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
 c100d48:	e0823003 	add	r3, r2, r3
 c100d4c:	e1a03803 	lsl	r3, r3, #16
 c100d50:	e1a01823 	lsr	r1, r3, #16
 c100d54:	e55b300d 	ldrb	r3, [fp, #-13]
 c100d58:	e1a03803 	lsl	r3, r3, #16
 c100d5c:	e1a02823 	lsr	r2, r3, #16
 c100d60:	e15b31b8 	ldrh	r3, [fp, #-24]	; 0xffffffe8
 c100d64:	e0823003 	add	r3, r2, r3
 c100d68:	e1a03803 	lsl	r3, r3, #16
 c100d6c:	e1a02823 	lsr	r2, r3, #16
 c100d70:	e55b3019 	ldrb	r3, [fp, #-25]	; 0xffffffe7
 c100d74:	e1a00001 	mov	r0, r1
 c100d78:	e1a01002 	mov	r1, r2
 c100d7c:	e1a02003 	mov	r2, r3
 c100d80:	ebfffdc0 	bl	c100488 <lcd_putpixel>
				lcd_putpixel(x + row, (y + line + 1), color);
 c100d84:	e55b300e 	ldrb	r3, [fp, #-14]
 c100d88:	e1a03803 	lsl	r3, r3, #16
 c100d8c:	e1a02823 	lsr	r2, r3, #16
 c100d90:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
 c100d94:	e0823003 	add	r3, r2, r3
 c100d98:	e1a03803 	lsl	r3, r3, #16
 c100d9c:	e1a01823 	lsr	r1, r3, #16
 c100da0:	e55b300d 	ldrb	r3, [fp, #-13]
 c100da4:	e1a03803 	lsl	r3, r3, #16
 c100da8:	e1a02823 	lsr	r2, r3, #16
 c100dac:	e15b31b8 	ldrh	r3, [fp, #-24]	; 0xffffffe8
 c100db0:	e0823003 	add	r3, r2, r3
 c100db4:	e1a03803 	lsl	r3, r3, #16
 c100db8:	e1a03823 	lsr	r3, r3, #16
 c100dbc:	e2833001 	add	r3, r3, #1
 c100dc0:	e1a03803 	lsl	r3, r3, #16
 c100dc4:	e1a02823 	lsr	r2, r3, #16
 c100dc8:	e55b3019 	ldrb	r3, [fp, #-25]	; 0xffffffe7
 c100dcc:	e1a00001 	mov	r0, r1
 c100dd0:	e1a01002 	mov	r1, r2
 c100dd4:	e1a02003 	mov	r2, r3
 c100dd8:	ebfffdaa 	bl	c100488 <lcd_putpixel>
				lcd_putpixel((x + row + 1), y + line, color);
 c100ddc:	e55b300e 	ldrb	r3, [fp, #-14]
 c100de0:	e1a03803 	lsl	r3, r3, #16
 c100de4:	e1a02823 	lsr	r2, r3, #16
 c100de8:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
 c100dec:	e0823003 	add	r3, r2, r3
 c100df0:	e1a03803 	lsl	r3, r3, #16
 c100df4:	e1a03823 	lsr	r3, r3, #16
 c100df8:	e2833001 	add	r3, r3, #1
 c100dfc:	e1a03803 	lsl	r3, r3, #16
 c100e00:	e1a01823 	lsr	r1, r3, #16
 c100e04:	e55b300d 	ldrb	r3, [fp, #-13]
 c100e08:	e1a03803 	lsl	r3, r3, #16
 c100e0c:	e1a02823 	lsr	r2, r3, #16
 c100e10:	e15b31b8 	ldrh	r3, [fp, #-24]	; 0xffffffe8
 c100e14:	e0823003 	add	r3, r2, r3
 c100e18:	e1a03803 	lsl	r3, r3, #16
 c100e1c:	e1a02823 	lsr	r2, r3, #16
 c100e20:	e55b3019 	ldrb	r3, [fp, #-25]	; 0xffffffe7
 c100e24:	e1a00001 	mov	r0, r1
 c100e28:	e1a01002 	mov	r1, r2
 c100e2c:	e1a02003 	mov	r2, r3
 c100e30:	ebfffd94 	bl	c100488 <lcd_putpixel>
				lcd_putpixel((x + row + 1), (y + line + 1), color);
 c100e34:	e55b300e 	ldrb	r3, [fp, #-14]
 c100e38:	e1a03803 	lsl	r3, r3, #16
 c100e3c:	e1a02823 	lsr	r2, r3, #16
 c100e40:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
 c100e44:	e0823003 	add	r3, r2, r3
 c100e48:	e1a03803 	lsl	r3, r3, #16
 c100e4c:	e1a03823 	lsr	r3, r3, #16
 c100e50:	e2833001 	add	r3, r3, #1
 c100e54:	e1a03803 	lsl	r3, r3, #16
 c100e58:	e1a01823 	lsr	r1, r3, #16
 c100e5c:	e55b300d 	ldrb	r3, [fp, #-13]
 c100e60:	e1a03803 	lsl	r3, r3, #16
 c100e64:	e1a02823 	lsr	r2, r3, #16
 c100e68:	e15b31b8 	ldrh	r3, [fp, #-24]	; 0xffffffe8
 c100e6c:	e0823003 	add	r3, r2, r3
 c100e70:	e1a03803 	lsl	r3, r3, #16
 c100e74:	e1a03823 	lsr	r3, r3, #16
 c100e78:	e2833001 	add	r3, r3, #1
 c100e7c:	e1a03803 	lsl	r3, r3, #16
 c100e80:	e1a02823 	lsr	r2, r3, #16
 c100e84:	e55b3019 	ldrb	r3, [fp, #-25]	; 0xffffffe7
 c100e88:	e1a00001 	mov	r0, r1
 c100e8c:	e1a01002 	mov	r1, r2
 c100e90:	e1a02003 	mov	r2, r3
 c100e94:	ebfffd7b 	bl	c100488 <lcd_putpixel>
 c100e98:	ea000053 	b	c100fec <lcd_putchar_x2+0x340>
			}
			else {
				lcd_putpixel(x + row, y + line, WHITE);
 c100e9c:	e55b300e 	ldrb	r3, [fp, #-14]
 c100ea0:	e1a03803 	lsl	r3, r3, #16
 c100ea4:	e1a02823 	lsr	r2, r3, #16
 c100ea8:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
 c100eac:	e0823003 	add	r3, r2, r3
 c100eb0:	e1a03803 	lsl	r3, r3, #16
 c100eb4:	e1a02823 	lsr	r2, r3, #16
 c100eb8:	e55b300d 	ldrb	r3, [fp, #-13]
 c100ebc:	e1a03803 	lsl	r3, r3, #16
 c100ec0:	e1a01823 	lsr	r1, r3, #16
 c100ec4:	e15b31b8 	ldrh	r3, [fp, #-24]	; 0xffffffe8
 c100ec8:	e0813003 	add	r3, r1, r3
 c100ecc:	e1a03803 	lsl	r3, r3, #16
 c100ed0:	e1a03823 	lsr	r3, r3, #16
 c100ed4:	e1a00002 	mov	r0, r2
 c100ed8:	e1a01003 	mov	r1, r3
 c100edc:	e3a02000 	mov	r2, #0
 c100ee0:	ebfffd68 	bl	c100488 <lcd_putpixel>
				lcd_putpixel(x + row, (y + line + 1), WHITE);
 c100ee4:	e55b300e 	ldrb	r3, [fp, #-14]
 c100ee8:	e1a03803 	lsl	r3, r3, #16
 c100eec:	e1a02823 	lsr	r2, r3, #16
 c100ef0:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
 c100ef4:	e0823003 	add	r3, r2, r3
 c100ef8:	e1a03803 	lsl	r3, r3, #16
 c100efc:	e1a02823 	lsr	r2, r3, #16
 c100f00:	e55b300d 	ldrb	r3, [fp, #-13]
 c100f04:	e1a03803 	lsl	r3, r3, #16
 c100f08:	e1a01823 	lsr	r1, r3, #16
 c100f0c:	e15b31b8 	ldrh	r3, [fp, #-24]	; 0xffffffe8
 c100f10:	e0813003 	add	r3, r1, r3
 c100f14:	e1a03803 	lsl	r3, r3, #16
 c100f18:	e1a03823 	lsr	r3, r3, #16
 c100f1c:	e2833001 	add	r3, r3, #1
 c100f20:	e1a03803 	lsl	r3, r3, #16
 c100f24:	e1a03823 	lsr	r3, r3, #16
 c100f28:	e1a00002 	mov	r0, r2
 c100f2c:	e1a01003 	mov	r1, r3
 c100f30:	e3a02000 	mov	r2, #0
 c100f34:	ebfffd53 	bl	c100488 <lcd_putpixel>
				lcd_putpixel((x + row + 1), y + line, WHITE);
 c100f38:	e55b300e 	ldrb	r3, [fp, #-14]
 c100f3c:	e1a03803 	lsl	r3, r3, #16
 c100f40:	e1a02823 	lsr	r2, r3, #16
 c100f44:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
 c100f48:	e0823003 	add	r3, r2, r3
 c100f4c:	e1a03803 	lsl	r3, r3, #16
 c100f50:	e1a03823 	lsr	r3, r3, #16
 c100f54:	e2833001 	add	r3, r3, #1
 c100f58:	e1a03803 	lsl	r3, r3, #16
 c100f5c:	e1a02823 	lsr	r2, r3, #16
 c100f60:	e55b300d 	ldrb	r3, [fp, #-13]
 c100f64:	e1a03803 	lsl	r3, r3, #16
 c100f68:	e1a01823 	lsr	r1, r3, #16
 c100f6c:	e15b31b8 	ldrh	r3, [fp, #-24]	; 0xffffffe8
 c100f70:	e0813003 	add	r3, r1, r3
 c100f74:	e1a03803 	lsl	r3, r3, #16
 c100f78:	e1a03823 	lsr	r3, r3, #16
 c100f7c:	e1a00002 	mov	r0, r2
 c100f80:	e1a01003 	mov	r1, r3
 c100f84:	e3a02000 	mov	r2, #0
 c100f88:	ebfffd3e 	bl	c100488 <lcd_putpixel>
				lcd_putpixel((x + row + 1), (y + line + 1), WHITE);
 c100f8c:	e55b300e 	ldrb	r3, [fp, #-14]
 c100f90:	e1a03803 	lsl	r3, r3, #16
 c100f94:	e1a02823 	lsr	r2, r3, #16
 c100f98:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
 c100f9c:	e0823003 	add	r3, r2, r3
 c100fa0:	e1a03803 	lsl	r3, r3, #16
 c100fa4:	e1a03823 	lsr	r3, r3, #16
 c100fa8:	e2833001 	add	r3, r3, #1
 c100fac:	e1a03803 	lsl	r3, r3, #16
 c100fb0:	e1a02823 	lsr	r2, r3, #16
 c100fb4:	e55b300d 	ldrb	r3, [fp, #-13]
 c100fb8:	e1a03803 	lsl	r3, r3, #16
 c100fbc:	e1a01823 	lsr	r1, r3, #16
 c100fc0:	e15b31b8 	ldrh	r3, [fp, #-24]	; 0xffffffe8
 c100fc4:	e0813003 	add	r3, r1, r3
 c100fc8:	e1a03803 	lsl	r3, r3, #16
 c100fcc:	e1a03823 	lsr	r3, r3, #16
 c100fd0:	e2833001 	add	r3, r3, #1
 c100fd4:	e1a03803 	lsl	r3, r3, #16
 c100fd8:	e1a03823 	lsr	r3, r3, #16
 c100fdc:	e1a00002 	mov	r0, r2
 c100fe0:	e1a01003 	mov	r1, r3
 c100fe4:	e3a02000 	mov	r2, #0
 c100fe8:	ebfffd26 	bl	c100488 <lcd_putpixel>
{
	uint8 line, row;
	uint8* bitmap;
	bitmap = font + ch * 16;
	for (line = 0; line < 32; line += 2)
		for (row = 0; row < 16; row += 2)
 c100fec:	e55b300e 	ldrb	r3, [fp, #-14]
 c100ff0:	e2833002 	add	r3, r3, #2
 c100ff4:	e54b300e 	strb	r3, [fp, #-14]
 c100ff8:	e55b300e 	ldrb	r3, [fp, #-14]
 c100ffc:	e353000f 	cmp	r3, #15
 c101000:	9affff3d 	bls	c100cfc <lcd_putchar_x2+0x50>
void lcd_putchar_x2( uint16 x, uint16 y, uint8 color, char ch )
{
	uint8 line, row;
	uint8* bitmap;
	bitmap = font + ch * 16;
	for (line = 0; line < 32; line += 2)
 c101004:	e55b300d 	ldrb	r3, [fp, #-13]
 c101008:	e2833002 	add	r3, r3, #2
 c10100c:	e54b300d 	strb	r3, [fp, #-13]
 c101010:	e55b300d 	ldrb	r3, [fp, #-13]
 c101014:	e353001f 	cmp	r3, #31
 c101018:	9affff34 	bls	c100cf0 <lcd_putchar_x2+0x44>
				lcd_putpixel(x + row, y + line, WHITE);
				lcd_putpixel(x + row, (y + line + 1), WHITE);
				lcd_putpixel((x + row + 1), y + line, WHITE);
				lcd_putpixel((x + row + 1), (y + line + 1), WHITE);
			}
}
 c10101c:	e24bd00c 	sub	sp, fp, #12
 c101020:	e89d6800 	ldm	sp, {fp, sp, lr}
 c101024:	e12fff1e 	bx	lr
 c101028:	0c102bd4 	.word	0x0c102bd4

0c10102c <lcd_puts_x2>:

void lcd_puts_x2( uint16 x, uint16 y, uint8 color, char *s )
{
 c10102c:	e1a0c00d 	mov	ip, sp
 c101030:	e92dd800 	push	{fp, ip, lr, pc}
 c101034:	e24cb004 	sub	fp, ip, #4
 c101038:	e24dd018 	sub	sp, sp, #24
 c10103c:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
 c101040:	e14b01b6 	strh	r0, [fp, #-22]	; 0xffffffea
 c101044:	e14b11b8 	strh	r1, [fp, #-24]	; 0xffffffe8
 c101048:	e1a03002 	mov	r3, r2
 c10104c:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
	uint16 i = y, j;
 c101050:	e15b31b8 	ldrh	r3, [fp, #-24]	; 0xffffffe8
 c101054:	e14b30be 	strh	r3, [fp, #-14]

	while((*s != '\0')&&(i < LCD_HEIGHT)){
 c101058:	ea000019 	b	c1010c4 <lcd_puts_x2+0x98>
		j = x;
 c10105c:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
 c101060:	e14b31b0 	strh	r3, [fp, #-16]
		while((*s != '\0')&&(j < LCD_WIDTH)){
 c101064:	ea00000b 	b	c101098 <lcd_puts_x2+0x6c>
			lcd_putchar_x2(j,i,color,*s);
 c101068:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c10106c:	e5d33000 	ldrb	r3, [r3]
 c101070:	e15b01b0 	ldrh	r0, [fp, #-16]
 c101074:	e15b10be 	ldrh	r1, [fp, #-14]
 c101078:	e55b2019 	ldrb	r2, [fp, #-25]	; 0xffffffe7
 c10107c:	ebffff0a 	bl	c100cac <lcd_putchar_x2>
			s++;
 c101080:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c101084:	e2833001 	add	r3, r3, #1
 c101088:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
			j+=16;
 c10108c:	e15b31b0 	ldrh	r3, [fp, #-16]
 c101090:	e2833010 	add	r3, r3, #16
 c101094:	e14b31b0 	strh	r3, [fp, #-16]
{
	uint16 i = y, j;

	while((*s != '\0')&&(i < LCD_HEIGHT)){
		j = x;
		while((*s != '\0')&&(j < LCD_WIDTH)){
 c101098:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c10109c:	e5d33000 	ldrb	r3, [r3]
 c1010a0:	e3530000 	cmp	r3, #0
 c1010a4:	0a000003 	beq	c1010b8 <lcd_puts_x2+0x8c>
 c1010a8:	e15b21b0 	ldrh	r2, [fp, #-16]
 c1010ac:	e59f3038 	ldr	r3, [pc, #56]	; c1010ec <lcd_puts_x2+0xc0>
 c1010b0:	e1520003 	cmp	r2, r3
 c1010b4:	9affffeb 	bls	c101068 <lcd_puts_x2+0x3c>
			lcd_putchar_x2(j,i,color,*s);
			s++;
			j+=16;
		}
		i+=32;
 c1010b8:	e15b30be 	ldrh	r3, [fp, #-14]
 c1010bc:	e2833020 	add	r3, r3, #32
 c1010c0:	e14b30be 	strh	r3, [fp, #-14]

void lcd_puts_x2( uint16 x, uint16 y, uint8 color, char *s )
{
	uint16 i = y, j;

	while((*s != '\0')&&(i < LCD_HEIGHT)){
 c1010c4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c1010c8:	e5d33000 	ldrb	r3, [r3]
 c1010cc:	e3530000 	cmp	r3, #0
 c1010d0:	0a000002 	beq	c1010e0 <lcd_puts_x2+0xb4>
 c1010d4:	e15b30be 	ldrh	r3, [fp, #-14]
 c1010d8:	e35300ef 	cmp	r3, #239	; 0xef
 c1010dc:	9affffde 	bls	c10105c <lcd_puts_x2+0x30>
			s++;
			j+=16;
		}
		i+=32;
	}
}
 c1010e0:	e24bd00c 	sub	sp, fp, #12
 c1010e4:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1010e8:	e12fff1e 	bx	lr
 c1010ec:	0000013f 	.word	0x0000013f

0c1010f0 <lcd_putint_x2>:

void lcd_putint_x2( uint16 x, uint16 y, uint8 color, int32 i )
{
 c1010f0:	e1a0c00d 	mov	ip, sp
 c1010f4:	e92dd800 	push	{fp, ip, lr, pc}
 c1010f8:	e24cb004 	sub	fp, ip, #4
 c1010fc:	e24dd028 	sub	sp, sp, #40	; 0x28
 c101100:	e50b3030 	str	r3, [fp, #-48]	; 0xffffffd0
 c101104:	e14b02b6 	strh	r0, [fp, #-38]	; 0xffffffda
 c101108:	e14b12b8 	strh	r1, [fp, #-40]	; 0xffffffd8
 c10110c:	e1a03002 	mov	r3, r2
 c101110:	e54b3029 	strb	r3, [fp, #-41]	; 0xffffffd7
	uint16 x2 = x, y2 = y;
 c101114:	e15b32b6 	ldrh	r3, [fp, #-38]	; 0xffffffda
 c101118:	e14b31b4 	strh	r3, [fp, #-20]	; 0xffffffec
 c10111c:	e15b32b8 	ldrh	r3, [fp, #-40]	; 0xffffffd8
 c101120:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
	char buf[8 + 1];
	char *p = buf + 8;
 c101124:	e24b3020 	sub	r3, fp, #32
 c101128:	e2833008 	add	r3, r3, #8
 c10112c:	e50b3010 	str	r3, [fp, #-16]
	uint8 c = 0;
 c101130:	e3a03000 	mov	r3, #0
 c101134:	e54b3017 	strb	r3, [fp, #-23]	; 0xffffffe9
	uint8 neg = 0;
 c101138:	e3a03000 	mov	r3, #0
 c10113c:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef

	if(i < 0){
 c101140:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
 c101144:	e3530000 	cmp	r3, #0
 c101148:	aa000004 	bge	c101160 <lcd_putint_x2+0x70>
		neg = 1;
 c10114c:	e3a03001 	mov	r3, #1
 c101150:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
		i = -i;
 c101154:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
 c101158:	e2633000 	rsb	r3, r3, #0
 c10115c:	e50b3030 	str	r3, [fp, #-48]	; 0xffffffd0
	}

	*p = '\0';
 c101160:	e51b3010 	ldr	r3, [fp, #-16]
 c101164:	e3a02000 	mov	r2, #0
 c101168:	e5c32000 	strb	r2, [r3]
	do {
		c = i % 10;
 c10116c:	e51b1030 	ldr	r1, [fp, #-48]	; 0xffffffd0
 c101170:	e59f30c0 	ldr	r3, [pc, #192]	; c101238 <lcd_putint_x2+0x148>
 c101174:	e0c32391 	smull	r2, r3, r1, r3
 c101178:	e1a02143 	asr	r2, r3, #2
 c10117c:	e1a03fc1 	asr	r3, r1, #31
 c101180:	e0632002 	rsb	r2, r3, r2
 c101184:	e1a03002 	mov	r3, r2
 c101188:	e1a03103 	lsl	r3, r3, #2
 c10118c:	e0833002 	add	r3, r3, r2
 c101190:	e1a03083 	lsl	r3, r3, #1
 c101194:	e0632001 	rsb	r2, r3, r1
 c101198:	e1a03002 	mov	r3, r2
 c10119c:	e54b3017 	strb	r3, [fp, #-23]	; 0xffffffe9
		*--p = '0' + c;
 c1011a0:	e51b3010 	ldr	r3, [fp, #-16]
 c1011a4:	e2433001 	sub	r3, r3, #1
 c1011a8:	e50b3010 	str	r3, [fp, #-16]
 c1011ac:	e55b3017 	ldrb	r3, [fp, #-23]	; 0xffffffe9
 c1011b0:	e2833030 	add	r3, r3, #48	; 0x30
 c1011b4:	e20320ff 	and	r2, r3, #255	; 0xff
 c1011b8:	e51b3010 	ldr	r3, [fp, #-16]
 c1011bc:	e5c32000 	strb	r2, [r3]
		i = i / 10;
 c1011c0:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
 c1011c4:	e59f206c 	ldr	r2, [pc, #108]	; c101238 <lcd_putint_x2+0x148>
 c1011c8:	e0c21293 	smull	r1, r2, r3, r2
 c1011cc:	e1a02142 	asr	r2, r2, #2
 c1011d0:	e1a03fc3 	asr	r3, r3, #31
 c1011d4:	e0633002 	rsb	r3, r3, r2
 c1011d8:	e50b3030 	str	r3, [fp, #-48]	; 0xffffffd0
	} while (i);
 c1011dc:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
 c1011e0:	e3530000 	cmp	r3, #0
 c1011e4:	1affffe0 	bne	c10116c <lcd_putint_x2+0x7c>

	if(neg == 1){
 c1011e8:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c1011ec:	e3530001 	cmp	r3, #1
 c1011f0:	1a000005 	bne	c10120c <lcd_putint_x2+0x11c>
		*--p = '-';
 c1011f4:	e51b3010 	ldr	r3, [fp, #-16]
 c1011f8:	e2433001 	sub	r3, r3, #1
 c1011fc:	e50b3010 	str	r3, [fp, #-16]
 c101200:	e51b3010 	ldr	r3, [fp, #-16]
 c101204:	e3a0202d 	mov	r2, #45	; 0x2d
 c101208:	e5c32000 	strb	r2, [r3]
	}

	lcd_puts_x2(x2,y2,color,p);
 c10120c:	e15b11b4 	ldrh	r1, [fp, #-20]	; 0xffffffec
 c101210:	e15b21b6 	ldrh	r2, [fp, #-22]	; 0xffffffea
 c101214:	e55b3029 	ldrb	r3, [fp, #-41]	; 0xffffffd7
 c101218:	e1a00001 	mov	r0, r1
 c10121c:	e1a01002 	mov	r1, r2
 c101220:	e1a02003 	mov	r2, r3
 c101224:	e51b3010 	ldr	r3, [fp, #-16]
 c101228:	ebffff7f 	bl	c10102c <lcd_puts_x2>
}
 c10122c:	e24bd00c 	sub	sp, fp, #12
 c101230:	e89d6800 	ldm	sp, {fp, sp, lr}
 c101234:	e12fff1e 	bx	lr
 c101238:	66666667 	.word	0x66666667

0c10123c <lcd_puthex_x2>:

void lcd_puthex_x2( uint16 x, uint16 y, uint8 color, uint32 i )
{
 c10123c:	e1a0c00d 	mov	ip, sp
 c101240:	e92dd800 	push	{fp, ip, lr, pc}
 c101244:	e24cb004 	sub	fp, ip, #4
 c101248:	e24dd020 	sub	sp, sp, #32
 c10124c:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
 c101250:	e14b01be 	strh	r0, [fp, #-30]	; 0xffffffe2
 c101254:	e14b12b0 	strh	r1, [fp, #-32]	; 0xffffffe0
 c101258:	e1a03002 	mov	r3, r2
 c10125c:	e54b3021 	strb	r3, [fp, #-33]	; 0xffffffdf
    char buf[8 + 1];
    char *p = buf + 8;
 c101260:	e24b301c 	sub	r3, fp, #28
 c101264:	e2833008 	add	r3, r3, #8
 c101268:	e50b3010 	str	r3, [fp, #-16]
    uint8 c;

    *p = '\0';
 c10126c:	e51b3010 	ldr	r3, [fp, #-16]
 c101270:	e3a02000 	mov	r2, #0
 c101274:	e5c32000 	strb	r2, [r3]

    do {
        c = i & 0xf;
 c101278:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
 c10127c:	e20330ff 	and	r3, r3, #255	; 0xff
 c101280:	e203300f 	and	r3, r3, #15
 c101284:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
        if( c < 10 )
 c101288:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c10128c:	e3530009 	cmp	r3, #9
 c101290:	8a000008 	bhi	c1012b8 <lcd_puthex_x2+0x7c>
            *--p = '0' + c;
 c101294:	e51b3010 	ldr	r3, [fp, #-16]
 c101298:	e2433001 	sub	r3, r3, #1
 c10129c:	e50b3010 	str	r3, [fp, #-16]
 c1012a0:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c1012a4:	e2833030 	add	r3, r3, #48	; 0x30
 c1012a8:	e20320ff 	and	r2, r3, #255	; 0xff
 c1012ac:	e51b3010 	ldr	r3, [fp, #-16]
 c1012b0:	e5c32000 	strb	r2, [r3]
 c1012b4:	ea000007 	b	c1012d8 <lcd_puthex_x2+0x9c>
        else
            *--p = 'a' + c - 10;
 c1012b8:	e51b3010 	ldr	r3, [fp, #-16]
 c1012bc:	e2433001 	sub	r3, r3, #1
 c1012c0:	e50b3010 	str	r3, [fp, #-16]
 c1012c4:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c1012c8:	e2833057 	add	r3, r3, #87	; 0x57
 c1012cc:	e20320ff 	and	r2, r3, #255	; 0xff
 c1012d0:	e51b3010 	ldr	r3, [fp, #-16]
 c1012d4:	e5c32000 	strb	r2, [r3]
        i = i >> 4;
 c1012d8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
 c1012dc:	e1a03223 	lsr	r3, r3, #4
 c1012e0:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
    } while( i );
 c1012e4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
 c1012e8:	e3530000 	cmp	r3, #0
 c1012ec:	1affffe1 	bne	c101278 <lcd_puthex_x2+0x3c>

    lcd_puts_x2(x,y,color,p);
 c1012f0:	e15b11be 	ldrh	r1, [fp, #-30]	; 0xffffffe2
 c1012f4:	e15b22b0 	ldrh	r2, [fp, #-32]	; 0xffffffe0
 c1012f8:	e55b3021 	ldrb	r3, [fp, #-33]	; 0xffffffdf
 c1012fc:	e1a00001 	mov	r0, r1
 c101300:	e1a01002 	mov	r1, r2
 c101304:	e1a02003 	mov	r2, r3
 c101308:	e51b3010 	ldr	r3, [fp, #-16]
 c10130c:	ebffff46 	bl	c10102c <lcd_puts_x2>
}
 c101310:	e24bd00c 	sub	sp, fp, #12
 c101314:	e89d6800 	ldm	sp, {fp, sp, lr}
 c101318:	e12fff1e 	bx	lr

0c10131c <lcd_putWallpaper>:

void lcd_putWallpaper( uint8 *bmp )
{
 c10131c:	e1a0c00d 	mov	ip, sp
 c101320:	e92dd800 	push	{fp, ip, lr, pc}
 c101324:	e24cb004 	sub	fp, ip, #4
 c101328:	e24dd018 	sub	sp, sp, #24
 c10132c:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
    uint32 headerSize;

    uint16 x, ySrc, yDst;
    uint16 offsetSrc, offsetDst;

    headerSize = bmp[10] + (bmp[11] << 8) + (bmp[12] << 16) + (bmp[13] << 24);
 c101330:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c101334:	e283300a 	add	r3, r3, #10
 c101338:	e5d33000 	ldrb	r3, [r3]
 c10133c:	e1a02003 	mov	r2, r3
 c101340:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c101344:	e283300b 	add	r3, r3, #11
 c101348:	e5d33000 	ldrb	r3, [r3]
 c10134c:	e1a03403 	lsl	r3, r3, #8
 c101350:	e0822003 	add	r2, r2, r3
 c101354:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c101358:	e283300c 	add	r3, r3, #12
 c10135c:	e5d33000 	ldrb	r3, [r3]
 c101360:	e1a03803 	lsl	r3, r3, #16
 c101364:	e0822003 	add	r2, r2, r3
 c101368:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c10136c:	e283300d 	add	r3, r3, #13
 c101370:	e5d33000 	ldrb	r3, [r3]
 c101374:	e1a03c03 	lsl	r3, r3, #24
 c101378:	e0823003 	add	r3, r2, r3
 c10137c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8

    bmp = bmp + headerSize;
 c101380:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
 c101384:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c101388:	e0823003 	add	r3, r2, r3
 c10138c:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
    
    for( ySrc=0, yDst=LCD_HEIGHT-1; ySrc<LCD_HEIGHT; ySrc++, yDst-- )                                                                       
 c101390:	e3a03000 	mov	r3, #0
 c101394:	e14b31b0 	strh	r3, [fp, #-16]
 c101398:	e3a030ef 	mov	r3, #239	; 0xef
 c10139c:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
 c1013a0:	ea00002d 	b	c10145c <lcd_putWallpaper+0x140>
    {
        offsetDst = yDst*LCD_WIDTH/2;
 c1013a4:	e15b21b2 	ldrh	r2, [fp, #-18]	; 0xffffffee
 c1013a8:	e1a03002 	mov	r3, r2
 c1013ac:	e1a03103 	lsl	r3, r3, #2
 c1013b0:	e0833002 	add	r3, r3, r2
 c1013b4:	e1a03303 	lsl	r3, r3, #6
 c1013b8:	e1a02fa3 	lsr	r2, r3, #31
 c1013bc:	e0823003 	add	r3, r2, r3
 c1013c0:	e1a030c3 	asr	r3, r3, #1
 c1013c4:	e14b31ba 	strh	r3, [fp, #-26]	; 0xffffffe6
        offsetSrc = ySrc*LCD_WIDTH/2;
 c1013c8:	e15b21b0 	ldrh	r2, [fp, #-16]
 c1013cc:	e1a03002 	mov	r3, r2
 c1013d0:	e1a03103 	lsl	r3, r3, #2
 c1013d4:	e0833002 	add	r3, r3, r2
 c1013d8:	e1a03303 	lsl	r3, r3, #6
 c1013dc:	e1a02fa3 	lsr	r2, r3, #31
 c1013e0:	e0823003 	add	r3, r2, r3
 c1013e4:	e1a030c3 	asr	r3, r3, #1
 c1013e8:	e14b31bc 	strh	r3, [fp, #-28]	; 0xffffffe4
        for( x=0; x<LCD_WIDTH/2; x++ )
 c1013ec:	e3a03000 	mov	r3, #0
 c1013f0:	e14b30be 	strh	r3, [fp, #-14]
 c1013f4:	ea00000f 	b	c101438 <lcd_putWallpaper+0x11c>
            lcd_buffer[offsetDst+x] = ~bmp[offsetSrc+x];
 c1013f8:	e15b21ba 	ldrh	r2, [fp, #-26]	; 0xffffffe6
 c1013fc:	e15b30be 	ldrh	r3, [fp, #-14]
 c101400:	e0823003 	add	r3, r2, r3
 c101404:	e15b11bc 	ldrh	r1, [fp, #-28]	; 0xffffffe4
 c101408:	e15b20be 	ldrh	r2, [fp, #-14]
 c10140c:	e0812002 	add	r2, r1, r2
 c101410:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
 c101414:	e0812002 	add	r2, r1, r2
 c101418:	e5d22000 	ldrb	r2, [r2]
 c10141c:	e1e02002 	mvn	r2, r2
 c101420:	e20210ff 	and	r1, r2, #255	; 0xff
 c101424:	e59f2048 	ldr	r2, [pc, #72]	; c101474 <lcd_putWallpaper+0x158>
 c101428:	e7c21003 	strb	r1, [r2, r3]
    
    for( ySrc=0, yDst=LCD_HEIGHT-1; ySrc<LCD_HEIGHT; ySrc++, yDst-- )                                                                       
    {
        offsetDst = yDst*LCD_WIDTH/2;
        offsetSrc = ySrc*LCD_WIDTH/2;
        for( x=0; x<LCD_WIDTH/2; x++ )
 c10142c:	e15b30be 	ldrh	r3, [fp, #-14]
 c101430:	e2833001 	add	r3, r3, #1
 c101434:	e14b30be 	strh	r3, [fp, #-14]
 c101438:	e15b30be 	ldrh	r3, [fp, #-14]
 c10143c:	e353009f 	cmp	r3, #159	; 0x9f
 c101440:	9affffec 	bls	c1013f8 <lcd_putWallpaper+0xdc>

    headerSize = bmp[10] + (bmp[11] << 8) + (bmp[12] << 16) + (bmp[13] << 24);

    bmp = bmp + headerSize;
    
    for( ySrc=0, yDst=LCD_HEIGHT-1; ySrc<LCD_HEIGHT; ySrc++, yDst-- )                                                                       
 c101444:	e15b31b0 	ldrh	r3, [fp, #-16]
 c101448:	e2833001 	add	r3, r3, #1
 c10144c:	e14b31b0 	strh	r3, [fp, #-16]
 c101450:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
 c101454:	e2433001 	sub	r3, r3, #1
 c101458:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
 c10145c:	e15b31b0 	ldrh	r3, [fp, #-16]
 c101460:	e35300ef 	cmp	r3, #239	; 0xef
 c101464:	9affffce 	bls	c1013a4 <lcd_putWallpaper+0x88>
        offsetDst = yDst*LCD_WIDTH/2;
        offsetSrc = ySrc*LCD_WIDTH/2;
        for( x=0; x<LCD_WIDTH/2; x++ )
            lcd_buffer[offsetDst+x] = ~bmp[offsetSrc+x];
    }
}
 c101468:	e24bd00c 	sub	sp, fp, #12
 c10146c:	e89d6800 	ldm	sp, {fp, sp, lr}
 c101470:	e12fff1e 	bx	lr
 c101474:	0c103bd4 	.word	0x0c103bd4

0c101478 <sys_init>:
void isr_TS_dummy(void)__attribute__((interrupt ("IRQ")));
void isr_KEYPAD_dummy(void)__attribute__((interrupt ("IRQ")));
void isr_USB_dummy(void)__attribute__((interrupt ("IRQ")));

void sys_init( void )
{
 c101478:	e1a0c00d 	mov	ip, sp
 c10147c:	e92dd800 	push	{fp, ip, lr, pc}
 c101480:	e24cb004 	sub	fp, ip, #4
    WTCON = 0;	//Watchdog deshabilitado
 c101484:	e59f30ec 	ldr	r3, [pc, #236]	; c101578 <sys_init+0x100>
 c101488:	e3a02000 	mov	r2, #0
 c10148c:	e5832000 	str	r2, [r3]
    INTMSK = ~0; //Enmascara todas las interrupciones
 c101490:	e59f30e4 	ldr	r3, [pc, #228]	; c10157c <sys_init+0x104>
 c101494:	e3e02000 	mvn	r2, #0
 c101498:	e5832000 	str	r2, [r3]

    LOCKTIME = 0xFFF; //Estabilización del PLL: 512 us
 c10149c:	e59f30dc 	ldr	r3, [pc, #220]	; c101580 <sys_init+0x108>
 c1014a0:	e59f20dc 	ldr	r2, [pc, #220]	; c101584 <sys_init+0x10c>
 c1014a4:	e5832000 	str	r2, [r3]
    PLLCON = 0x38021; //Frecuencia del  MCLK_SLOW: 500 KHz
 c1014a8:	e3a03776 	mov	r3, #30932992	; 0x1d80000
 c1014ac:	e59f20d4 	ldr	r2, [pc, #212]	; c101588 <sys_init+0x110>
 c1014b0:	e5832000 	str	r2, [r3]
    CLKSLOW = 0x8; //Frecuencia del MCLK: 64 MHz
 c1014b4:	e59f30d0 	ldr	r3, [pc, #208]	; c10158c <sys_init+0x114>
 c1014b8:	e3a02008 	mov	r2, #8
 c1014bc:	e5832000 	str	r2, [r3]
    CLKCON = 0x7FF8; //Modo de funcionamiento normal y Reloj distribuido a todos lo controladores
 c1014c0:	e59f30c8 	ldr	r3, [pc, #200]	; c101590 <sys_init+0x118>
 c1014c4:	e59f20c8 	ldr	r2, [pc, #200]	; c101594 <sys_init+0x11c>
 c1014c8:	e5832000 	str	r2, [r3]

    SBUSCON = 0x8000001B; //Prioridades de bus del sistema fijas: LCD > ZDMA > BDMA > IRQ (por defecto)
 c1014cc:	e3a03771 	mov	r3, #29622272	; 0x1c40000
 c1014d0:	e3a0216e 	mov	r2, #-2147483621	; 0x8000001b
 c1014d4:	e5832000 	str	r2, [r3]

    SYSCFG = 0x0; //Cache deshabilitada
 c1014d8:	e3a03507 	mov	r3, #29360128	; 0x1c00000
 c1014dc:	e3a02000 	mov	r2, #0
 c1014e0:	e5832000 	str	r2, [r3]
    I_PMST = 0x1F1B; // mGA > mGB > mGC > mGD y EINT0 > EINT1 > EINT2 > EINT3
 c1014e4:	e59f30ac 	ldr	r3, [pc, #172]	; c101598 <sys_init+0x120>
 c1014e8:	e59f20ac 	ldr	r2, [pc, #172]	; c10159c <sys_init+0x124>
 c1014ec:	e5832000 	str	r2, [r3]
    I_PSLV = 0x1B1B1B1B; //URxD0 > URxD1 > IIC > SIO y TIMER0> TIMER1 > TIMER2 > TIMER3 y ZDMA0 > ZDMA1 > BDMA0 > BDMA1
 c1014f0:	e59f30a8 	ldr	r3, [pc, #168]	; c1015a0 <sys_init+0x128>
 c1014f4:	e59f20a8 	ldr	r2, [pc, #168]	; c1015a4 <sys_init+0x12c>
 c1014f8:	e5832000 	str	r2, [r3]
    INTMOD = 0x0; // IRQ habilitado y FIQ deshabilitado
 c1014fc:	e59f30a4 	ldr	r3, [pc, #164]	; c1015a8 <sys_init+0x130>
 c101500:	e3a02000 	mov	r2, #0
 c101504:	e5832000 	str	r2, [r3]
    install_dummy_isr();//Instala RTI por defecto a todas los tipos de interrupción
 c101508:	eb00008c 	bl	c101740 <install_dummy_isr>
    EXTINTPND = ~(0);//Borra todas las interrupciones pendientes
 c10150c:	e59f3098 	ldr	r3, [pc, #152]	; c1015ac <sys_init+0x134>
 c101510:	e3e02000 	mvn	r2, #0
 c101514:	e5832000 	str	r2, [r3]
    I_ISPC = ~(0);//Borra interrupciones externas pendientes por  la línea EINT[7:4]
 c101518:	e59f3090 	ldr	r3, [pc, #144]	; c1015b0 <sys_init+0x138>
 c10151c:	e3e02000 	mvn	r2, #0
 c101520:	e5832000 	str	r2, [r3]
    INTCON = 0x1;
 c101524:	e3a0361e 	mov	r3, #31457280	; 0x1e00000
 c101528:	e3a02001 	mov	r2, #1
 c10152c:	e5832000 	str	r2, [r3]

    SET_OPMODE(SVCMODE);//Pone el procesador en modo SVC
 c101530:	e10f0000 	mrs	r0, CPSR
 c101534:	e3c0001f 	bic	r0, r0, #31
 c101538:	e3800013 	orr	r0, r0, #19
 c10153c:	e121f000 	msr	CPSR_c, r0
    SET_IRQFLAG(0);//Habilita en el procesador las interrupciones IRQ
 c101540:	e10f0000 	mrs	r0, CPSR
 c101544:	e3c00080 	bic	r0, r0, #128	; 0x80
 c101548:	e3800000 	orr	r0, r0, #0
 c10154c:	e121f000 	msr	CPSR_c, r0
    SET_FIQFLAG(1);//Deshabilita en el procesador las interrupciones FIQ
 c101550:	e10f0000 	mrs	r0, CPSR
 c101554:	e3c00040 	bic	r0, r0, #64	; 0x40
 c101558:	e3800040 	orr	r0, r0, #64	; 0x40
 c10155c:	e121f000 	msr	CPSR_c, r0

    port_init();
 c101560:	eb000013 	bl	c1015b4 <port_init>
    uart0_init();
 c101564:	eb000290 	bl	c101fac <uart0_init>

    show_sys_info();
 c101568:	eb00027a 	bl	c101f58 <show_sys_info>

}
 c10156c:	e24bd00c 	sub	sp, fp, #12
 c101570:	e89d6800 	ldm	sp, {fp, sp, lr}
 c101574:	e12fff1e 	bx	lr
 c101578:	01d30000 	.word	0x01d30000
 c10157c:	01e0000c 	.word	0x01e0000c
 c101580:	01d8000c 	.word	0x01d8000c
 c101584:	00000fff 	.word	0x00000fff
 c101588:	00038021 	.word	0x00038021
 c10158c:	01d80008 	.word	0x01d80008
 c101590:	01d80004 	.word	0x01d80004
 c101594:	00007ff8 	.word	0x00007ff8
 c101598:	01e00014 	.word	0x01e00014
 c10159c:	00001f1b 	.word	0x00001f1b
 c1015a0:	01e00010 	.word	0x01e00010
 c1015a4:	1b1b1b1b 	.word	0x1b1b1b1b
 c1015a8:	01e00008 	.word	0x01e00008
 c1015ac:	01d20054 	.word	0x01d20054
 c1015b0:	01e00024 	.word	0x01e00024

0c1015b4 <port_init>:

static void port_init( void )
{
 c1015b4:	e1a0c00d 	mov	ip, sp
 c1015b8:	e92dd800 	push	{fp, ip, lr, pc}
 c1015bc:	e24cb004 	sub	fp, ip, #4
	//Inicializa los 22 registros mapeados en memoria del controlador interno de puertos de E/S
    PDATA = ~0;
 c1015c0:	e59f3100 	ldr	r3, [pc, #256]	; c1016c8 <port_init+0x114>
 c1015c4:	e3e02000 	mvn	r2, #0
 c1015c8:	e5832000 	str	r2, [r3]
    PCONA = 0xFE;
 c1015cc:	e59f30f8 	ldr	r3, [pc, #248]	; c1016cc <port_init+0x118>
 c1015d0:	e3a020fe 	mov	r2, #254	; 0xfe
 c1015d4:	e5832000 	str	r2, [r3]

    PDATB = ~0;
 c1015d8:	e59f30f0 	ldr	r3, [pc, #240]	; c1016d0 <port_init+0x11c>
 c1015dc:	e3e02000 	mvn	r2, #0
 c1015e0:	e5832000 	str	r2, [r3]
    PCONB = 0x14F;
 c1015e4:	e59f30e8 	ldr	r3, [pc, #232]	; c1016d4 <port_init+0x120>
 c1015e8:	e59f20e8 	ldr	r2, [pc, #232]	; c1016d8 <port_init+0x124>
 c1015ec:	e5832000 	str	r2, [r3]

    PDATC = ~0;
 c1015f0:	e59f30e4 	ldr	r3, [pc, #228]	; c1016dc <port_init+0x128>
 c1015f4:	e3e02000 	mvn	r2, #0
 c1015f8:	e5832000 	str	r2, [r3]
    PCONC = 0x5FF555FF;
 c1015fc:	e59f30dc 	ldr	r3, [pc, #220]	; c1016e0 <port_init+0x12c>
 c101600:	e59f20dc 	ldr	r2, [pc, #220]	; c1016e4 <port_init+0x130>
 c101604:	e5832000 	str	r2, [r3]
    PUPC = 0x94FB;
 c101608:	e59f30d8 	ldr	r3, [pc, #216]	; c1016e8 <port_init+0x134>
 c10160c:	e59f20d8 	ldr	r2, [pc, #216]	; c1016ec <port_init+0x138>
 c101610:	e5832000 	str	r2, [r3]

    PDATD = ~0;
 c101614:	e59f30d4 	ldr	r3, [pc, #212]	; c1016f0 <port_init+0x13c>
 c101618:	e3e02000 	mvn	r2, #0
 c10161c:	e5832000 	str	r2, [r3]
    PCOND = 0xAAAA;
 c101620:	e59f30cc 	ldr	r3, [pc, #204]	; c1016f4 <port_init+0x140>
 c101624:	e59f20cc 	ldr	r2, [pc, #204]	; c1016f8 <port_init+0x144>
 c101628:	e5832000 	str	r2, [r3]
    PUPD = 0xFF;
 c10162c:	e59f30c8 	ldr	r3, [pc, #200]	; c1016fc <port_init+0x148>
 c101630:	e3a020ff 	mov	r2, #255	; 0xff
 c101634:	e5832000 	str	r2, [r3]

    PDATE = ~0;
 c101638:	e59f30c0 	ldr	r3, [pc, #192]	; c101700 <port_init+0x14c>
 c10163c:	e3e02000 	mvn	r2, #0
 c101640:	e5832000 	str	r2, [r3]
    PCONE = 0x255A9;
 c101644:	e59f30b8 	ldr	r3, [pc, #184]	; c101704 <port_init+0x150>
 c101648:	e59f20b8 	ldr	r2, [pc, #184]	; c101708 <port_init+0x154>
 c10164c:	e5832000 	str	r2, [r3]
    PUPE = 0x1FB;
 c101650:	e59f30b4 	ldr	r3, [pc, #180]	; c10170c <port_init+0x158>
 c101654:	e59f20b4 	ldr	r2, [pc, #180]	; c101710 <port_init+0x15c>
 c101658:	e5832000 	str	r2, [r3]

    PDATF = ~0;
 c10165c:	e59f30b0 	ldr	r3, [pc, #176]	; c101714 <port_init+0x160>
 c101660:	e3e02000 	mvn	r2, #0
 c101664:	e5832000 	str	r2, [r3]
    PCONF = 0x251A;
 c101668:	e59f30a8 	ldr	r3, [pc, #168]	; c101718 <port_init+0x164>
 c10166c:	e59f20a8 	ldr	r2, [pc, #168]	; c10171c <port_init+0x168>
 c101670:	e5832000 	str	r2, [r3]
    PUPF = 0x74;
 c101674:	e59f30a4 	ldr	r3, [pc, #164]	; c101720 <port_init+0x16c>
 c101678:	e3a02074 	mov	r2, #116	; 0x74
 c10167c:	e5832000 	str	r2, [r3]

    PDATG = ~0;
 c101680:	e59f309c 	ldr	r3, [pc, #156]	; c101724 <port_init+0x170>
 c101684:	e3e02000 	mvn	r2, #0
 c101688:	e5832000 	str	r2, [r3]
    PCONG = 0xF5FF;
 c10168c:	e59f3094 	ldr	r3, [pc, #148]	; c101728 <port_init+0x174>
 c101690:	e59f2094 	ldr	r2, [pc, #148]	; c10172c <port_init+0x178>
 c101694:	e5832000 	str	r2, [r3]
    PUPG = 0x30;
 c101698:	e59f3090 	ldr	r3, [pc, #144]	; c101730 <port_init+0x17c>
 c10169c:	e3a02030 	mov	r2, #48	; 0x30
 c1016a0:	e5832000 	str	r2, [r3]

    SPUCR = 0x7;
 c1016a4:	e59f3088 	ldr	r3, [pc, #136]	; c101734 <port_init+0x180>
 c1016a8:	e3a02007 	mov	r2, #7
 c1016ac:	e5832000 	str	r2, [r3]

    EXTINT = 0x22000220;
 c1016b0:	e59f3080 	ldr	r3, [pc, #128]	; c101738 <port_init+0x184>
 c1016b4:	e59f2080 	ldr	r2, [pc, #128]	; c10173c <port_init+0x188>
 c1016b8:	e5832000 	str	r2, [r3]

}
 c1016bc:	e24bd00c 	sub	sp, fp, #12
 c1016c0:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1016c4:	e12fff1e 	bx	lr
 c1016c8:	01d20004 	.word	0x01d20004
 c1016cc:	01d20000 	.word	0x01d20000
 c1016d0:	01d2000c 	.word	0x01d2000c
 c1016d4:	01d20008 	.word	0x01d20008
 c1016d8:	0000014f 	.word	0x0000014f
 c1016dc:	01d20014 	.word	0x01d20014
 c1016e0:	01d20010 	.word	0x01d20010
 c1016e4:	5ff555ff 	.word	0x5ff555ff
 c1016e8:	01d20018 	.word	0x01d20018
 c1016ec:	000094fb 	.word	0x000094fb
 c1016f0:	01d20020 	.word	0x01d20020
 c1016f4:	01d2001c 	.word	0x01d2001c
 c1016f8:	0000aaaa 	.word	0x0000aaaa
 c1016fc:	01d20024 	.word	0x01d20024
 c101700:	01d2002c 	.word	0x01d2002c
 c101704:	01d20028 	.word	0x01d20028
 c101708:	000255a9 	.word	0x000255a9
 c10170c:	01d20030 	.word	0x01d20030
 c101710:	000001fb 	.word	0x000001fb
 c101714:	01d20038 	.word	0x01d20038
 c101718:	01d20034 	.word	0x01d20034
 c10171c:	0000251a 	.word	0x0000251a
 c101720:	01d2003c 	.word	0x01d2003c
 c101724:	01d20044 	.word	0x01d20044
 c101728:	01d20040 	.word	0x01d20040
 c10172c:	0000f5ff 	.word	0x0000f5ff
 c101730:	01d20048 	.word	0x01d20048
 c101734:	01d2004c 	.word	0x01d2004c
 c101738:	01d20050 	.word	0x01d20050
 c10173c:	22000220 	.word	0x22000220

0c101740 <install_dummy_isr>:

static void install_dummy_isr( void )
{ //Instala cada RTI en su lugar de la tabla virtual de vectores de IRQ (véase s3cev40.h)
 c101740:	e1a0c00d 	mov	ip, sp
 c101744:	e92dd800 	push	{fp, ip, lr, pc}
 c101748:	e24cb004 	sub	fp, ip, #4

    pISR_SWI = (uint32)isr_SWI_dummy;
 c10174c:	e59f3184 	ldr	r3, [pc, #388]	; c1018d8 <install_dummy_isr+0x198>
 c101750:	e59f2184 	ldr	r2, [pc, #388]	; c1018dc <install_dummy_isr+0x19c>
 c101754:	e5832000 	str	r2, [r3]
    pISR_UNDEF = (uint32)isr_UNDEF_dummy;
 c101758:	e59f3180 	ldr	r3, [pc, #384]	; c1018e0 <install_dummy_isr+0x1a0>
 c10175c:	e59f2180 	ldr	r2, [pc, #384]	; c1018e4 <install_dummy_isr+0x1a4>
 c101760:	e5832000 	str	r2, [r3]
    pISR_IRQ = (uint32)isr_IRQ_dummy;
 c101764:	e59f317c 	ldr	r3, [pc, #380]	; c1018e8 <install_dummy_isr+0x1a8>
 c101768:	e59f217c 	ldr	r2, [pc, #380]	; c1018ec <install_dummy_isr+0x1ac>
 c10176c:	e5832000 	str	r2, [r3]
    pISR_FIQ = (uint32)isr_FIQ_dummy;
 c101770:	e59f3178 	ldr	r3, [pc, #376]	; c1018f0 <install_dummy_isr+0x1b0>
 c101774:	e59f2178 	ldr	r2, [pc, #376]	; c1018f4 <install_dummy_isr+0x1b4>
 c101778:	e5832000 	str	r2, [r3]
    pISR_PABORT = (uint32)isr_PABORT_dummy;
 c10177c:	e59f3174 	ldr	r3, [pc, #372]	; c1018f8 <install_dummy_isr+0x1b8>
 c101780:	e59f2174 	ldr	r2, [pc, #372]	; c1018fc <install_dummy_isr+0x1bc>
 c101784:	e5832000 	str	r2, [r3]
    pISR_DABORT = (uint32)isr_DABORT_dummy;
 c101788:	e59f3170 	ldr	r3, [pc, #368]	; c101900 <install_dummy_isr+0x1c0>
 c10178c:	e59f2170 	ldr	r2, [pc, #368]	; c101904 <install_dummy_isr+0x1c4>
 c101790:	e5832000 	str	r2, [r3]
    pISR_ADC = (uint32)isr_ADC_dummy;
 c101794:	e59f316c 	ldr	r3, [pc, #364]	; c101908 <install_dummy_isr+0x1c8>
 c101798:	e59f216c 	ldr	r2, [pc, #364]	; c10190c <install_dummy_isr+0x1cc>
 c10179c:	e5832000 	str	r2, [r3]
    pISR_RTC = (uint32)isr_RTC_dummy;
 c1017a0:	e59f3168 	ldr	r3, [pc, #360]	; c101910 <install_dummy_isr+0x1d0>
 c1017a4:	e59f2168 	ldr	r2, [pc, #360]	; c101914 <install_dummy_isr+0x1d4>
 c1017a8:	e5832000 	str	r2, [r3]
    pISR_UTXD1 = (uint32)isr_UTXD1_dummy;
 c1017ac:	e59f3164 	ldr	r3, [pc, #356]	; c101918 <install_dummy_isr+0x1d8>
 c1017b0:	e59f2164 	ldr	r2, [pc, #356]	; c10191c <install_dummy_isr+0x1dc>
 c1017b4:	e5832000 	str	r2, [r3]
    pISR_UTXD0 = (uint32)isr_UTXD0_dummy;
 c1017b8:	e59f3160 	ldr	r3, [pc, #352]	; c101920 <install_dummy_isr+0x1e0>
 c1017bc:	e59f2160 	ldr	r2, [pc, #352]	; c101924 <install_dummy_isr+0x1e4>
 c1017c0:	e5832000 	str	r2, [r3]
    pISR_SIO = (uint32)isr_SIO_dummy;
 c1017c4:	e59f315c 	ldr	r3, [pc, #348]	; c101928 <install_dummy_isr+0x1e8>
 c1017c8:	e59f215c 	ldr	r2, [pc, #348]	; c10192c <install_dummy_isr+0x1ec>
 c1017cc:	e5832000 	str	r2, [r3]
    pISR_IIC = (uint32)isr_IIC_dummy;
 c1017d0:	e59f3158 	ldr	r3, [pc, #344]	; c101930 <install_dummy_isr+0x1f0>
 c1017d4:	e59f2158 	ldr	r2, [pc, #344]	; c101934 <install_dummy_isr+0x1f4>
 c1017d8:	e5832000 	str	r2, [r3]
    pISR_URXD1 = (uint32)isr_URXD1_dummy;
 c1017dc:	e59f3154 	ldr	r3, [pc, #340]	; c101938 <install_dummy_isr+0x1f8>
 c1017e0:	e59f2154 	ldr	r2, [pc, #340]	; c10193c <install_dummy_isr+0x1fc>
 c1017e4:	e5832000 	str	r2, [r3]
    pISR_URXD0 = (uint32)isr_URXD0_dummy;
 c1017e8:	e59f3150 	ldr	r3, [pc, #336]	; c101940 <install_dummy_isr+0x200>
 c1017ec:	e59f2150 	ldr	r2, [pc, #336]	; c101944 <install_dummy_isr+0x204>
 c1017f0:	e5832000 	str	r2, [r3]
    pISR_TIMER5 = (uint32)isr_TIMER5_dummy;
 c1017f4:	e59f314c 	ldr	r3, [pc, #332]	; c101948 <install_dummy_isr+0x208>
 c1017f8:	e59f214c 	ldr	r2, [pc, #332]	; c10194c <install_dummy_isr+0x20c>
 c1017fc:	e5832000 	str	r2, [r3]
    pISR_TIMER4 = (uint32)isr_TIMER4_dummy;
 c101800:	e59f3148 	ldr	r3, [pc, #328]	; c101950 <install_dummy_isr+0x210>
 c101804:	e59f2148 	ldr	r2, [pc, #328]	; c101954 <install_dummy_isr+0x214>
 c101808:	e5832000 	str	r2, [r3]
    pISR_TIMER3 = (uint32)isr_TIMER3_dummy;
 c10180c:	e59f3144 	ldr	r3, [pc, #324]	; c101958 <install_dummy_isr+0x218>
 c101810:	e59f2144 	ldr	r2, [pc, #324]	; c10195c <install_dummy_isr+0x21c>
 c101814:	e5832000 	str	r2, [r3]
    pISR_TIMER2 = (uint32)isr_TIMER2_dummy;
 c101818:	e59f3140 	ldr	r3, [pc, #320]	; c101960 <install_dummy_isr+0x220>
 c10181c:	e59f2140 	ldr	r2, [pc, #320]	; c101964 <install_dummy_isr+0x224>
 c101820:	e5832000 	str	r2, [r3]
    pISR_TIMER1 = (uint32)isr_TIMER1_dummy;
 c101824:	e59f313c 	ldr	r3, [pc, #316]	; c101968 <install_dummy_isr+0x228>
 c101828:	e59f213c 	ldr	r2, [pc, #316]	; c10196c <install_dummy_isr+0x22c>
 c10182c:	e5832000 	str	r2, [r3]
    pISR_TIMER0 = (uint32)isr_TIMER0_dummy;
 c101830:	e59f3138 	ldr	r3, [pc, #312]	; c101970 <install_dummy_isr+0x230>
 c101834:	e59f2138 	ldr	r2, [pc, #312]	; c101974 <install_dummy_isr+0x234>
 c101838:	e5832000 	str	r2, [r3]
    pISR_UERR01 = (uint32)isr_UERR01_dummy;
 c10183c:	e59f3134 	ldr	r3, [pc, #308]	; c101978 <install_dummy_isr+0x238>
 c101840:	e59f2134 	ldr	r2, [pc, #308]	; c10197c <install_dummy_isr+0x23c>
 c101844:	e5832000 	str	r2, [r3]
    pISR_WDT = (uint32)isr_WDT_dummy;
 c101848:	e59f3130 	ldr	r3, [pc, #304]	; c101980 <install_dummy_isr+0x240>
 c10184c:	e59f2130 	ldr	r2, [pc, #304]	; c101984 <install_dummy_isr+0x244>
 c101850:	e5832000 	str	r2, [r3]
    pISR_BDMA1 = (uint32)isr_BDMA1_dummy;
 c101854:	e59f312c 	ldr	r3, [pc, #300]	; c101988 <install_dummy_isr+0x248>
 c101858:	e59f212c 	ldr	r2, [pc, #300]	; c10198c <install_dummy_isr+0x24c>
 c10185c:	e5832000 	str	r2, [r3]
    pISR_BDMA0 = (uint32)isr_BDMA0_dummy;
 c101860:	e59f3128 	ldr	r3, [pc, #296]	; c101990 <install_dummy_isr+0x250>
 c101864:	e59f2128 	ldr	r2, [pc, #296]	; c101994 <install_dummy_isr+0x254>
 c101868:	e5832000 	str	r2, [r3]
    pISR_ZDMA1 = (uint32)isr_ZDMA1_dummy;
 c10186c:	e59f3124 	ldr	r3, [pc, #292]	; c101998 <install_dummy_isr+0x258>
 c101870:	e59f2124 	ldr	r2, [pc, #292]	; c10199c <install_dummy_isr+0x25c>
 c101874:	e5832000 	str	r2, [r3]
    pISR_ZDMA0 = (uint32)isr_ZDMA0_dummy;
 c101878:	e59f3120 	ldr	r3, [pc, #288]	; c1019a0 <install_dummy_isr+0x260>
 c10187c:	e59f2120 	ldr	r2, [pc, #288]	; c1019a4 <install_dummy_isr+0x264>
 c101880:	e5832000 	str	r2, [r3]
    pISR_TICK = (uint32)isr_TICK_dummy;
 c101884:	e59f311c 	ldr	r3, [pc, #284]	; c1019a8 <install_dummy_isr+0x268>
 c101888:	e59f211c 	ldr	r2, [pc, #284]	; c1019ac <install_dummy_isr+0x26c>
 c10188c:	e5832000 	str	r2, [r3]
    pISR_PB = (uint32)isr_PB_dummy;
 c101890:	e59f3118 	ldr	r3, [pc, #280]	; c1019b0 <install_dummy_isr+0x270>
 c101894:	e59f2118 	ldr	r2, [pc, #280]	; c1019b4 <install_dummy_isr+0x274>
 c101898:	e5832000 	str	r2, [r3]
    pISR_ETHERNET = (uint32)isr_ETHERNET_dummy;
 c10189c:	e59f3114 	ldr	r3, [pc, #276]	; c1019b8 <install_dummy_isr+0x278>
 c1018a0:	e59f2114 	ldr	r2, [pc, #276]	; c1019bc <install_dummy_isr+0x27c>
 c1018a4:	e5832000 	str	r2, [r3]
    pISR_TS = (uint32)isr_TS_dummy;
 c1018a8:	e59f3110 	ldr	r3, [pc, #272]	; c1019c0 <install_dummy_isr+0x280>
 c1018ac:	e59f2110 	ldr	r2, [pc, #272]	; c1019c4 <install_dummy_isr+0x284>
 c1018b0:	e5832000 	str	r2, [r3]
    pISR_KEYPAD = (uint32)isr_KEYPAD_dummy;
 c1018b4:	e59f310c 	ldr	r3, [pc, #268]	; c1019c8 <install_dummy_isr+0x288>
 c1018b8:	e59f210c 	ldr	r2, [pc, #268]	; c1019cc <install_dummy_isr+0x28c>
 c1018bc:	e5832000 	str	r2, [r3]
    pISR_USB = (uint32)isr_USB_dummy;
 c1018c0:	e59f3108 	ldr	r3, [pc, #264]	; c1019d0 <install_dummy_isr+0x290>
 c1018c4:	e59f2108 	ldr	r2, [pc, #264]	; c1019d4 <install_dummy_isr+0x294>
 c1018c8:	e5832000 	str	r2, [r3]

}        
 c1018cc:	e24bd00c 	sub	sp, fp, #12
 c1018d0:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1018d4:	e12fff1e 	bx	lr
 c1018d8:	0c7fff08 	.word	0x0c7fff08
 c1018dc:	0c1019d8 	.word	0x0c1019d8
 c1018e0:	0c7fff04 	.word	0x0c7fff04
 c1018e4:	0c101a04 	.word	0x0c101a04
 c1018e8:	0c7fff18 	.word	0x0c7fff18
 c1018ec:	0c101a30 	.word	0x0c101a30
 c1018f0:	0c7fff1c 	.word	0x0c7fff1c
 c1018f4:	0c101a5c 	.word	0x0c101a5c
 c1018f8:	0c7fff0c 	.word	0x0c7fff0c
 c1018fc:	0c101a88 	.word	0x0c101a88
 c101900:	0c7fff10 	.word	0x0c7fff10
 c101904:	0c101ab4 	.word	0x0c101ab4
 c101908:	0c7fff20 	.word	0x0c7fff20
 c10190c:	0c101ae0 	.word	0x0c101ae0
 c101910:	0c7fff24 	.word	0x0c7fff24
 c101914:	0c101b0c 	.word	0x0c101b0c
 c101918:	0c7fff28 	.word	0x0c7fff28
 c10191c:	0c101b38 	.word	0x0c101b38
 c101920:	0c7fff2c 	.word	0x0c7fff2c
 c101924:	0c101b64 	.word	0x0c101b64
 c101928:	0c7fff30 	.word	0x0c7fff30
 c10192c:	0c101b90 	.word	0x0c101b90
 c101930:	0c7fff34 	.word	0x0c7fff34
 c101934:	0c101bbc 	.word	0x0c101bbc
 c101938:	0c7fff38 	.word	0x0c7fff38
 c10193c:	0c101be8 	.word	0x0c101be8
 c101940:	0c7fff3c 	.word	0x0c7fff3c
 c101944:	0c101c14 	.word	0x0c101c14
 c101948:	0c7fff40 	.word	0x0c7fff40
 c10194c:	0c101c40 	.word	0x0c101c40
 c101950:	0c7fff44 	.word	0x0c7fff44
 c101954:	0c101c6c 	.word	0x0c101c6c
 c101958:	0c7fff48 	.word	0x0c7fff48
 c10195c:	0c101c98 	.word	0x0c101c98
 c101960:	0c7fff4c 	.word	0x0c7fff4c
 c101964:	0c101cc4 	.word	0x0c101cc4
 c101968:	0c7fff50 	.word	0x0c7fff50
 c10196c:	0c101cf0 	.word	0x0c101cf0
 c101970:	0c7fff54 	.word	0x0c7fff54
 c101974:	0c101d1c 	.word	0x0c101d1c
 c101978:	0c7fff58 	.word	0x0c7fff58
 c10197c:	0c101d48 	.word	0x0c101d48
 c101980:	0c7fff5c 	.word	0x0c7fff5c
 c101984:	0c101d74 	.word	0x0c101d74
 c101988:	0c7fff60 	.word	0x0c7fff60
 c10198c:	0c101da0 	.word	0x0c101da0
 c101990:	0c7fff64 	.word	0x0c7fff64
 c101994:	0c101dcc 	.word	0x0c101dcc
 c101998:	0c7fff68 	.word	0x0c7fff68
 c10199c:	0c101df8 	.word	0x0c101df8
 c1019a0:	0c7fff6c 	.word	0x0c7fff6c
 c1019a4:	0c101e24 	.word	0x0c101e24
 c1019a8:	0c7fff70 	.word	0x0c7fff70
 c1019ac:	0c101e50 	.word	0x0c101e50
 c1019b0:	0c7fff74 	.word	0x0c7fff74
 c1019b4:	0c101e7c 	.word	0x0c101e7c
 c1019b8:	0c7fff78 	.word	0x0c7fff78
 c1019bc:	0c101ea8 	.word	0x0c101ea8
 c1019c0:	0c7fff7c 	.word	0x0c7fff7c
 c1019c4:	0c101ed4 	.word	0x0c101ed4
 c1019c8:	0c7fff80 	.word	0x0c7fff80
 c1019cc:	0c101f00 	.word	0x0c101f00
 c1019d0:	0c7fff84 	.word	0x0c7fff84
 c1019d4:	0c101f2c 	.word	0x0c101f2c

0c1019d8 <isr_SWI_dummy>:

void isr_SWI_dummy( void ) //Cada RTI muestra algún mensaje de error y bloquea el sistema
{
 c1019d8:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c1019dc:	e1a0c00d 	mov	ip, sp
 c1019e0:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c1019e4:	e24cb004 	sub	fp, ip, #4
    uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_SWI_dummy");
 c1019e8:	e59f0010 	ldr	r0, [pc, #16]	; c101a00 <isr_SWI_dummy+0x28>
 c1019ec:	eb0001ad 	bl	c1020a8 <uart0_puts>
    SEGS = 0x75;
 c1019f0:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c1019f4:	e3a02075 	mov	r2, #117	; 0x75
 c1019f8:	e5c32000 	strb	r2, [r3]
    while (1);
 c1019fc:	eafffffe 	b	c1019fc <isr_SWI_dummy+0x24>
 c101a00:	0c1025e0 	.word	0x0c1025e0

0c101a04 <isr_UNDEF_dummy>:
}

void isr_UNDEF_dummy( void )
{
 c101a04:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c101a08:	e1a0c00d 	mov	ip, sp
 c101a0c:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c101a10:	e24cb004 	sub	fp, ip, #4
    uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_UNDEF_dummy");
 c101a14:	e59f0010 	ldr	r0, [pc, #16]	; c101a2c <isr_UNDEF_dummy+0x28>
 c101a18:	eb0001a2 	bl	c1020a8 <uart0_puts>
    SEGS = 0x75;
 c101a1c:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c101a20:	e3a02075 	mov	r2, #117	; 0x75
 c101a24:	e5c32000 	strb	r2, [r3]
    while (1);
 c101a28:	eafffffe 	b	c101a28 <isr_UNDEF_dummy+0x24>
 c101a2c:	0c10260c 	.word	0x0c10260c

0c101a30 <isr_IRQ_dummy>:
}

void isr_IRQ_dummy( void )
{
 c101a30:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c101a34:	e1a0c00d 	mov	ip, sp
 c101a38:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c101a3c:	e24cb004 	sub	fp, ip, #4
    uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_IRQ_dummy");
 c101a40:	e59f0010 	ldr	r0, [pc, #16]	; c101a58 <isr_IRQ_dummy+0x28>
 c101a44:	eb000197 	bl	c1020a8 <uart0_puts>
    SEGS = 0x75;
 c101a48:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c101a4c:	e3a02075 	mov	r2, #117	; 0x75
 c101a50:	e5c32000 	strb	r2, [r3]
    while (1);
 c101a54:	eafffffe 	b	c101a54 <isr_IRQ_dummy+0x24>
 c101a58:	0c10263c 	.word	0x0c10263c

0c101a5c <isr_FIQ_dummy>:
}

void isr_FIQ_dummy( void )
{
 c101a5c:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c101a60:	e1a0c00d 	mov	ip, sp
 c101a64:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c101a68:	e24cb004 	sub	fp, ip, #4
    uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_FIQ_dummy");
 c101a6c:	e59f0010 	ldr	r0, [pc, #16]	; c101a84 <isr_FIQ_dummy+0x28>
 c101a70:	eb00018c 	bl	c1020a8 <uart0_puts>
    SEGS = 0x75;
 c101a74:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c101a78:	e3a02075 	mov	r2, #117	; 0x75
 c101a7c:	e5c32000 	strb	r2, [r3]
    while (1);
 c101a80:	eafffffe 	b	c101a80 <isr_FIQ_dummy+0x24>
 c101a84:	0c102668 	.word	0x0c102668

0c101a88 <isr_PABORT_dummy>:
}

void isr_PABORT_dummy( void )
{
 c101a88:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c101a8c:	e1a0c00d 	mov	ip, sp
 c101a90:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c101a94:	e24cb004 	sub	fp, ip, #4
	uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_PABORT_dummy");
 c101a98:	e59f0010 	ldr	r0, [pc, #16]	; c101ab0 <isr_PABORT_dummy+0x28>
 c101a9c:	eb000181 	bl	c1020a8 <uart0_puts>
    SEGS = 0x75;
 c101aa0:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c101aa4:	e3a02075 	mov	r2, #117	; 0x75
 c101aa8:	e5c32000 	strb	r2, [r3]
    while (1);
 c101aac:	eafffffe 	b	c101aac <isr_PABORT_dummy+0x24>
 c101ab0:	0c102694 	.word	0x0c102694

0c101ab4 <isr_DABORT_dummy>:
}

void isr_DABORT_dummy( void )
{
 c101ab4:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c101ab8:	e1a0c00d 	mov	ip, sp
 c101abc:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c101ac0:	e24cb004 	sub	fp, ip, #4
    uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_DABORT_dummy");
 c101ac4:	e59f0010 	ldr	r0, [pc, #16]	; c101adc <isr_DABORT_dummy+0x28>
 c101ac8:	eb000176 	bl	c1020a8 <uart0_puts>
    SEGS = 0x75;
 c101acc:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c101ad0:	e3a02075 	mov	r2, #117	; 0x75
 c101ad4:	e5c32000 	strb	r2, [r3]
    while (1);
 c101ad8:	eafffffe 	b	c101ad8 <isr_DABORT_dummy+0x24>
 c101adc:	0c1026c4 	.word	0x0c1026c4

0c101ae0 <isr_ADC_dummy>:
}

void isr_ADC_dummy( void )
{
 c101ae0:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c101ae4:	e1a0c00d 	mov	ip, sp
 c101ae8:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c101aec:	e24cb004 	sub	fp, ip, #4
    uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_ADC_dummy");
 c101af0:	e59f0010 	ldr	r0, [pc, #16]	; c101b08 <isr_ADC_dummy+0x28>
 c101af4:	eb00016b 	bl	c1020a8 <uart0_puts>
    SEGS = 0x75;
 c101af8:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c101afc:	e3a02075 	mov	r2, #117	; 0x75
 c101b00:	e5c32000 	strb	r2, [r3]
    while (1);
 c101b04:	eafffffe 	b	c101b04 <isr_ADC_dummy+0x24>
 c101b08:	0c1026f4 	.word	0x0c1026f4

0c101b0c <isr_RTC_dummy>:
}

void isr_RTC_dummy( void )
{
 c101b0c:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c101b10:	e1a0c00d 	mov	ip, sp
 c101b14:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c101b18:	e24cb004 	sub	fp, ip, #4
    uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_RTC_dummy");
 c101b1c:	e59f0010 	ldr	r0, [pc, #16]	; c101b34 <isr_RTC_dummy+0x28>
 c101b20:	eb000160 	bl	c1020a8 <uart0_puts>
    SEGS = 0x75;
 c101b24:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c101b28:	e3a02075 	mov	r2, #117	; 0x75
 c101b2c:	e5c32000 	strb	r2, [r3]
    while (1);
 c101b30:	eafffffe 	b	c101b30 <isr_RTC_dummy+0x24>
 c101b34:	0c102720 	.word	0x0c102720

0c101b38 <isr_UTXD1_dummy>:
}

void isr_UTXD1_dummy( void )
{
 c101b38:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c101b3c:	e1a0c00d 	mov	ip, sp
 c101b40:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c101b44:	e24cb004 	sub	fp, ip, #4
    uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_UTXD1_dummy");
 c101b48:	e59f0010 	ldr	r0, [pc, #16]	; c101b60 <isr_UTXD1_dummy+0x28>
 c101b4c:	eb000155 	bl	c1020a8 <uart0_puts>
    SEGS = 0x75;
 c101b50:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c101b54:	e3a02075 	mov	r2, #117	; 0x75
 c101b58:	e5c32000 	strb	r2, [r3]
    while (1);
 c101b5c:	eafffffe 	b	c101b5c <isr_UTXD1_dummy+0x24>
 c101b60:	0c10274c 	.word	0x0c10274c

0c101b64 <isr_UTXD0_dummy>:
}

void isr_UTXD0_dummy( void )
{
 c101b64:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c101b68:	e1a0c00d 	mov	ip, sp
 c101b6c:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c101b70:	e24cb004 	sub	fp, ip, #4
	uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_UTXD0_dummy");
 c101b74:	e59f0010 	ldr	r0, [pc, #16]	; c101b8c <isr_UTXD0_dummy+0x28>
 c101b78:	eb00014a 	bl	c1020a8 <uart0_puts>
    SEGS = 0x75;
 c101b7c:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c101b80:	e3a02075 	mov	r2, #117	; 0x75
 c101b84:	e5c32000 	strb	r2, [r3]
    while (1);
 c101b88:	eafffffe 	b	c101b88 <isr_UTXD0_dummy+0x24>
 c101b8c:	0c10277c 	.word	0x0c10277c

0c101b90 <isr_SIO_dummy>:
}

void isr_SIO_dummy( void )
{
 c101b90:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c101b94:	e1a0c00d 	mov	ip, sp
 c101b98:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c101b9c:	e24cb004 	sub	fp, ip, #4
    uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_SIO_dummy");
 c101ba0:	e59f0010 	ldr	r0, [pc, #16]	; c101bb8 <isr_SIO_dummy+0x28>
 c101ba4:	eb00013f 	bl	c1020a8 <uart0_puts>
    SEGS = 0x75;
 c101ba8:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c101bac:	e3a02075 	mov	r2, #117	; 0x75
 c101bb0:	e5c32000 	strb	r2, [r3]
    while (1);
 c101bb4:	eafffffe 	b	c101bb4 <isr_SIO_dummy+0x24>
 c101bb8:	0c1027ac 	.word	0x0c1027ac

0c101bbc <isr_IIC_dummy>:
}

void isr_IIC_dummy( void )
{
 c101bbc:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c101bc0:	e1a0c00d 	mov	ip, sp
 c101bc4:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c101bc8:	e24cb004 	sub	fp, ip, #4
    uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_IIC_dummy");
 c101bcc:	e59f0010 	ldr	r0, [pc, #16]	; c101be4 <isr_IIC_dummy+0x28>
 c101bd0:	eb000134 	bl	c1020a8 <uart0_puts>
    SEGS = 0x75;
 c101bd4:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c101bd8:	e3a02075 	mov	r2, #117	; 0x75
 c101bdc:	e5c32000 	strb	r2, [r3]
    while (1);
 c101be0:	eafffffe 	b	c101be0 <isr_IIC_dummy+0x24>
 c101be4:	0c1027d8 	.word	0x0c1027d8

0c101be8 <isr_URXD1_dummy>:
}

void isr_URXD1_dummy( void )
{
 c101be8:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c101bec:	e1a0c00d 	mov	ip, sp
 c101bf0:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c101bf4:	e24cb004 	sub	fp, ip, #4
	uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_URXD1_dummy");
 c101bf8:	e59f0010 	ldr	r0, [pc, #16]	; c101c10 <isr_URXD1_dummy+0x28>
 c101bfc:	eb000129 	bl	c1020a8 <uart0_puts>
    SEGS = 0x75;
 c101c00:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c101c04:	e3a02075 	mov	r2, #117	; 0x75
 c101c08:	e5c32000 	strb	r2, [r3]
    while (1);
 c101c0c:	eafffffe 	b	c101c0c <isr_URXD1_dummy+0x24>
 c101c10:	0c102804 	.word	0x0c102804

0c101c14 <isr_URXD0_dummy>:
}

void isr_URXD0_dummy( void )
{
 c101c14:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c101c18:	e1a0c00d 	mov	ip, sp
 c101c1c:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c101c20:	e24cb004 	sub	fp, ip, #4
    uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_URXD0_dummy");
 c101c24:	e59f0010 	ldr	r0, [pc, #16]	; c101c3c <isr_URXD0_dummy+0x28>
 c101c28:	eb00011e 	bl	c1020a8 <uart0_puts>
    SEGS = 0x75;
 c101c2c:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c101c30:	e3a02075 	mov	r2, #117	; 0x75
 c101c34:	e5c32000 	strb	r2, [r3]
    while (1);
 c101c38:	eafffffe 	b	c101c38 <isr_URXD0_dummy+0x24>
 c101c3c:	0c102834 	.word	0x0c102834

0c101c40 <isr_TIMER5_dummy>:
}

void isr_TIMER5_dummy( void )
{
 c101c40:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c101c44:	e1a0c00d 	mov	ip, sp
 c101c48:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c101c4c:	e24cb004 	sub	fp, ip, #4
    uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_TIMER5_dummy");
 c101c50:	e59f0010 	ldr	r0, [pc, #16]	; c101c68 <isr_TIMER5_dummy+0x28>
 c101c54:	eb000113 	bl	c1020a8 <uart0_puts>
    SEGS = 0x75;
 c101c58:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c101c5c:	e3a02075 	mov	r2, #117	; 0x75
 c101c60:	e5c32000 	strb	r2, [r3]
    while (1);
 c101c64:	eafffffe 	b	c101c64 <isr_TIMER5_dummy+0x24>
 c101c68:	0c102864 	.word	0x0c102864

0c101c6c <isr_TIMER4_dummy>:
}

void isr_TIMER4_dummy( void )
{
 c101c6c:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c101c70:	e1a0c00d 	mov	ip, sp
 c101c74:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c101c78:	e24cb004 	sub	fp, ip, #4
    uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_TIMER4_dummy");
 c101c7c:	e59f0010 	ldr	r0, [pc, #16]	; c101c94 <isr_TIMER4_dummy+0x28>
 c101c80:	eb000108 	bl	c1020a8 <uart0_puts>
    SEGS = 0x75;
 c101c84:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c101c88:	e3a02075 	mov	r2, #117	; 0x75
 c101c8c:	e5c32000 	strb	r2, [r3]
    while (1);
 c101c90:	eafffffe 	b	c101c90 <isr_TIMER4_dummy+0x24>
 c101c94:	0c102894 	.word	0x0c102894

0c101c98 <isr_TIMER3_dummy>:
}

void isr_TIMER3_dummy( void )
{
 c101c98:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c101c9c:	e1a0c00d 	mov	ip, sp
 c101ca0:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c101ca4:	e24cb004 	sub	fp, ip, #4
    uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_TIMER3_dummy");
 c101ca8:	e59f0010 	ldr	r0, [pc, #16]	; c101cc0 <isr_TIMER3_dummy+0x28>
 c101cac:	eb0000fd 	bl	c1020a8 <uart0_puts>
    SEGS = 0x75;
 c101cb0:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c101cb4:	e3a02075 	mov	r2, #117	; 0x75
 c101cb8:	e5c32000 	strb	r2, [r3]
    while (1);
 c101cbc:	eafffffe 	b	c101cbc <isr_TIMER3_dummy+0x24>
 c101cc0:	0c1028c4 	.word	0x0c1028c4

0c101cc4 <isr_TIMER2_dummy>:
}

void isr_TIMER2_dummy( void )
{
 c101cc4:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c101cc8:	e1a0c00d 	mov	ip, sp
 c101ccc:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c101cd0:	e24cb004 	sub	fp, ip, #4
    uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_TIMER2_dummy");
 c101cd4:	e59f0010 	ldr	r0, [pc, #16]	; c101cec <isr_TIMER2_dummy+0x28>
 c101cd8:	eb0000f2 	bl	c1020a8 <uart0_puts>
    SEGS = 0x75;
 c101cdc:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c101ce0:	e3a02075 	mov	r2, #117	; 0x75
 c101ce4:	e5c32000 	strb	r2, [r3]
    while (1);
 c101ce8:	eafffffe 	b	c101ce8 <isr_TIMER2_dummy+0x24>
 c101cec:	0c1028f4 	.word	0x0c1028f4

0c101cf0 <isr_TIMER1_dummy>:
}

void isr_TIMER1_dummy( void )
{
 c101cf0:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c101cf4:	e1a0c00d 	mov	ip, sp
 c101cf8:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c101cfc:	e24cb004 	sub	fp, ip, #4
    uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_TIMER1_dummy");
 c101d00:	e59f0010 	ldr	r0, [pc, #16]	; c101d18 <isr_TIMER1_dummy+0x28>
 c101d04:	eb0000e7 	bl	c1020a8 <uart0_puts>
    SEGS = 0x75;
 c101d08:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c101d0c:	e3a02075 	mov	r2, #117	; 0x75
 c101d10:	e5c32000 	strb	r2, [r3]
    while (1);
 c101d14:	eafffffe 	b	c101d14 <isr_TIMER1_dummy+0x24>
 c101d18:	0c102924 	.word	0x0c102924

0c101d1c <isr_TIMER0_dummy>:
}

void isr_TIMER0_dummy( void )
{
 c101d1c:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c101d20:	e1a0c00d 	mov	ip, sp
 c101d24:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c101d28:	e24cb004 	sub	fp, ip, #4
    uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_TIMER0_dummy");
 c101d2c:	e59f0010 	ldr	r0, [pc, #16]	; c101d44 <isr_TIMER0_dummy+0x28>
 c101d30:	eb0000dc 	bl	c1020a8 <uart0_puts>
    SEGS = 0x75;
 c101d34:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c101d38:	e3a02075 	mov	r2, #117	; 0x75
 c101d3c:	e5c32000 	strb	r2, [r3]
    while (1);
 c101d40:	eafffffe 	b	c101d40 <isr_TIMER0_dummy+0x24>
 c101d44:	0c102954 	.word	0x0c102954

0c101d48 <isr_UERR01_dummy>:
}

void isr_UERR01_dummy( void )
{
 c101d48:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c101d4c:	e1a0c00d 	mov	ip, sp
 c101d50:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c101d54:	e24cb004 	sub	fp, ip, #4
    uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_UERR01_dummy");
 c101d58:	e59f0010 	ldr	r0, [pc, #16]	; c101d70 <isr_UERR01_dummy+0x28>
 c101d5c:	eb0000d1 	bl	c1020a8 <uart0_puts>
    SEGS = 0x75;
 c101d60:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c101d64:	e3a02075 	mov	r2, #117	; 0x75
 c101d68:	e5c32000 	strb	r2, [r3]
    while (1);
 c101d6c:	eafffffe 	b	c101d6c <isr_UERR01_dummy+0x24>
 c101d70:	0c102984 	.word	0x0c102984

0c101d74 <isr_WDT_dummy>:
}

void isr_WDT_dummy( void )
{
 c101d74:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c101d78:	e1a0c00d 	mov	ip, sp
 c101d7c:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c101d80:	e24cb004 	sub	fp, ip, #4
    uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_WDT_dummy");
 c101d84:	e59f0010 	ldr	r0, [pc, #16]	; c101d9c <isr_WDT_dummy+0x28>
 c101d88:	eb0000c6 	bl	c1020a8 <uart0_puts>
    SEGS = 0x75;
 c101d8c:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c101d90:	e3a02075 	mov	r2, #117	; 0x75
 c101d94:	e5c32000 	strb	r2, [r3]
    while (1);
 c101d98:	eafffffe 	b	c101d98 <isr_WDT_dummy+0x24>
 c101d9c:	0c1029b4 	.word	0x0c1029b4

0c101da0 <isr_BDMA1_dummy>:
}

void isr_BDMA1_dummy( void )
{
 c101da0:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c101da4:	e1a0c00d 	mov	ip, sp
 c101da8:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c101dac:	e24cb004 	sub	fp, ip, #4
    uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_BDMA1_dummy");
 c101db0:	e59f0010 	ldr	r0, [pc, #16]	; c101dc8 <isr_BDMA1_dummy+0x28>
 c101db4:	eb0000bb 	bl	c1020a8 <uart0_puts>
    SEGS = 0x75;
 c101db8:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c101dbc:	e3a02075 	mov	r2, #117	; 0x75
 c101dc0:	e5c32000 	strb	r2, [r3]
    while (1);
 c101dc4:	eafffffe 	b	c101dc4 <isr_BDMA1_dummy+0x24>
 c101dc8:	0c1029e0 	.word	0x0c1029e0

0c101dcc <isr_BDMA0_dummy>:
}

void isr_BDMA0_dummy( void )
{
 c101dcc:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c101dd0:	e1a0c00d 	mov	ip, sp
 c101dd4:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c101dd8:	e24cb004 	sub	fp, ip, #4
    uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_BDMA0_dummy");
 c101ddc:	e59f0010 	ldr	r0, [pc, #16]	; c101df4 <isr_BDMA0_dummy+0x28>
 c101de0:	eb0000b0 	bl	c1020a8 <uart0_puts>
    SEGS = 0x75;
 c101de4:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c101de8:	e3a02075 	mov	r2, #117	; 0x75
 c101dec:	e5c32000 	strb	r2, [r3]
    while (1);
 c101df0:	eafffffe 	b	c101df0 <isr_BDMA0_dummy+0x24>
 c101df4:	0c102a10 	.word	0x0c102a10

0c101df8 <isr_ZDMA1_dummy>:
}

void isr_ZDMA1_dummy( void )
{
 c101df8:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c101dfc:	e1a0c00d 	mov	ip, sp
 c101e00:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c101e04:	e24cb004 	sub	fp, ip, #4
    uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_ZDMA1_dummy");
 c101e08:	e59f0010 	ldr	r0, [pc, #16]	; c101e20 <isr_ZDMA1_dummy+0x28>
 c101e0c:	eb0000a5 	bl	c1020a8 <uart0_puts>
    SEGS = 0x75;
 c101e10:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c101e14:	e3a02075 	mov	r2, #117	; 0x75
 c101e18:	e5c32000 	strb	r2, [r3]
    while (1);
 c101e1c:	eafffffe 	b	c101e1c <isr_ZDMA1_dummy+0x24>
 c101e20:	0c102a40 	.word	0x0c102a40

0c101e24 <isr_ZDMA0_dummy>:
}

void isr_ZDMA0_dummy( void )
{
 c101e24:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c101e28:	e1a0c00d 	mov	ip, sp
 c101e2c:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c101e30:	e24cb004 	sub	fp, ip, #4
    uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_ZDMA0_dummy");
 c101e34:	e59f0010 	ldr	r0, [pc, #16]	; c101e4c <isr_ZDMA0_dummy+0x28>
 c101e38:	eb00009a 	bl	c1020a8 <uart0_puts>
    SEGS = 0x75;
 c101e3c:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c101e40:	e3a02075 	mov	r2, #117	; 0x75
 c101e44:	e5c32000 	strb	r2, [r3]
    while (1);
 c101e48:	eafffffe 	b	c101e48 <isr_ZDMA0_dummy+0x24>
 c101e4c:	0c102a70 	.word	0x0c102a70

0c101e50 <isr_TICK_dummy>:
}

void isr_TICK_dummy( void )
{
 c101e50:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c101e54:	e1a0c00d 	mov	ip, sp
 c101e58:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c101e5c:	e24cb004 	sub	fp, ip, #4
    uart0_puts( "\n\n*** ERROR FATAL: ejecutando isr_TICK_dummy" );
 c101e60:	e59f0010 	ldr	r0, [pc, #16]	; c101e78 <isr_TICK_dummy+0x28>
 c101e64:	eb00008f 	bl	c1020a8 <uart0_puts>
    SEGS = 0x75;
 c101e68:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c101e6c:	e3a02075 	mov	r2, #117	; 0x75
 c101e70:	e5c32000 	strb	r2, [r3]
    while( 1 );
 c101e74:	eafffffe 	b	c101e74 <isr_TICK_dummy+0x24>
 c101e78:	0c102aa0 	.word	0x0c102aa0

0c101e7c <isr_PB_dummy>:
}

void isr_PB_dummy( void )
{
 c101e7c:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c101e80:	e1a0c00d 	mov	ip, sp
 c101e84:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c101e88:	e24cb004 	sub	fp, ip, #4
    uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_PB_dummy");
 c101e8c:	e59f0010 	ldr	r0, [pc, #16]	; c101ea4 <isr_PB_dummy+0x28>
 c101e90:	eb000084 	bl	c1020a8 <uart0_puts>
    SEGS = 0x75;
 c101e94:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c101e98:	e3a02075 	mov	r2, #117	; 0x75
 c101e9c:	e5c32000 	strb	r2, [r3]
    while (1);
 c101ea0:	eafffffe 	b	c101ea0 <isr_PB_dummy+0x24>
 c101ea4:	0c102ad0 	.word	0x0c102ad0

0c101ea8 <isr_ETHERNET_dummy>:
}

void isr_ETHERNET_dummy( void )
{
 c101ea8:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c101eac:	e1a0c00d 	mov	ip, sp
 c101eb0:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c101eb4:	e24cb004 	sub	fp, ip, #4
    uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_ETHERNET_dummy");
 c101eb8:	e59f0010 	ldr	r0, [pc, #16]	; c101ed0 <isr_ETHERNET_dummy+0x28>
 c101ebc:	eb000079 	bl	c1020a8 <uart0_puts>
    SEGS = 0x75;
 c101ec0:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c101ec4:	e3a02075 	mov	r2, #117	; 0x75
 c101ec8:	e5c32000 	strb	r2, [r3]
    while (1);
 c101ecc:	eafffffe 	b	c101ecc <isr_ETHERNET_dummy+0x24>
 c101ed0:	0c102afc 	.word	0x0c102afc

0c101ed4 <isr_TS_dummy>:
}

void isr_TS_dummy( void )
{
 c101ed4:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c101ed8:	e1a0c00d 	mov	ip, sp
 c101edc:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c101ee0:	e24cb004 	sub	fp, ip, #4
    uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_TS_dummy");
 c101ee4:	e59f0010 	ldr	r0, [pc, #16]	; c101efc <isr_TS_dummy+0x28>
 c101ee8:	eb00006e 	bl	c1020a8 <uart0_puts>
    SEGS = 0x75;
 c101eec:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c101ef0:	e3a02075 	mov	r2, #117	; 0x75
 c101ef4:	e5c32000 	strb	r2, [r3]
    while (1);
 c101ef8:	eafffffe 	b	c101ef8 <isr_TS_dummy+0x24>
 c101efc:	0c102b30 	.word	0x0c102b30

0c101f00 <isr_KEYPAD_dummy>:
}

void isr_KEYPAD_dummy( void )
{
 c101f00:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c101f04:	e1a0c00d 	mov	ip, sp
 c101f08:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c101f0c:	e24cb004 	sub	fp, ip, #4
    uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_KEYPAD_dummy");
 c101f10:	e59f0010 	ldr	r0, [pc, #16]	; c101f28 <isr_KEYPAD_dummy+0x28>
 c101f14:	eb000063 	bl	c1020a8 <uart0_puts>
    SEGS = 0x75;
 c101f18:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c101f1c:	e3a02075 	mov	r2, #117	; 0x75
 c101f20:	e5c32000 	strb	r2, [r3]
    while (1);
 c101f24:	eafffffe 	b	c101f24 <isr_KEYPAD_dummy+0x24>
 c101f28:	0c102b5c 	.word	0x0c102b5c

0c101f2c <isr_USB_dummy>:
}

void isr_USB_dummy( void )
{
 c101f2c:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c101f30:	e1a0c00d 	mov	ip, sp
 c101f34:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c101f38:	e24cb004 	sub	fp, ip, #4
    uart0_puts("\n\n*** ERROR FATAL: ejecutando isr_USB_dummy");
 c101f3c:	e59f0010 	ldr	r0, [pc, #16]	; c101f54 <isr_USB_dummy+0x28>
 c101f40:	eb000058 	bl	c1020a8 <uart0_puts>
    SEGS = 0x75;
 c101f44:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c101f48:	e3a02075 	mov	r2, #117	; 0x75
 c101f4c:	e5c32000 	strb	r2, [r3]
    while (1);
 c101f50:	eafffffe 	b	c101f50 <isr_USB_dummy+0x24>
 c101f54:	0c102b8c 	.word	0x0c102b8c

0c101f58 <show_sys_info>:
}

static void show_sys_info( void )
{
 c101f58:	e1a0c00d 	mov	ip, sp
 c101f5c:	e92dd800 	push	{fp, ip, lr, pc}
 c101f60:	e24cb004 	sub	fp, ip, #4
    uart0_puts("\n\n****Mensaje inicial****");
 c101f64:	e59f000c 	ldr	r0, [pc, #12]	; c101f78 <show_sys_info+0x20>
 c101f68:	eb00004e 	bl	c1020a8 <uart0_puts>
}
 c101f6c:	e24bd00c 	sub	sp, fp, #12
 c101f70:	e89d6800 	ldm	sp, {fp, sp, lr}
 c101f74:	e12fff1e 	bx	lr
 c101f78:	0c102bb8 	.word	0x0c102bb8

0c101f7c <sleep>:

inline void sleep( void )
{
 c101f7c:	e1a0c00d 	mov	ip, sp
 c101f80:	e92dd800 	push	{fp, ip, lr, pc}
 c101f84:	e24cb004 	sub	fp, ip, #4
    CLKCON |= (1 << 2);    // Pone a la CPU en estado IDLE
 c101f88:	e59f3018 	ldr	r3, [pc, #24]	; c101fa8 <sleep+0x2c>
 c101f8c:	e59f2014 	ldr	r2, [pc, #20]	; c101fa8 <sleep+0x2c>
 c101f90:	e5922000 	ldr	r2, [r2]
 c101f94:	e3822004 	orr	r2, r2, #4
 c101f98:	e5832000 	str	r2, [r3]
}
 c101f9c:	e24bd00c 	sub	sp, fp, #12
 c101fa0:	e89d6800 	ldm	sp, {fp, sp, lr}
 c101fa4:	e12fff1e 	bx	lr
 c101fa8:	01d80004 	.word	0x01d80004

0c101fac <uart0_init>:

#include <s3c44b0x.h>
#include <uart.h>

void uart0_init( void )
{
 c101fac:	e1a0c00d 	mov	ip, sp
 c101fb0:	e92dd800 	push	{fp, ip, lr, pc}
 c101fb4:	e24cb004 	sub	fp, ip, #4
	UFCON0 =  0x1;
 c101fb8:	e59f3040 	ldr	r3, [pc, #64]	; c102000 <uart0_init+0x54>
 c101fbc:	e3a02001 	mov	r2, #1
 c101fc0:	e5832000 	str	r2, [r3]
	UMCON0 =  0x0;
 c101fc4:	e59f3038 	ldr	r3, [pc, #56]	; c102004 <uart0_init+0x58>
 c101fc8:	e3a02000 	mov	r2, #0
 c101fcc:	e5832000 	str	r2, [r3]
	ULCON0 =  0x3;
 c101fd0:	e3a0361d 	mov	r3, #30408704	; 0x1d00000
 c101fd4:	e3a02003 	mov	r2, #3
 c101fd8:	e5832000 	str	r2, [r3]
	UBRDIV0 = 0x22;
 c101fdc:	e59f3024 	ldr	r3, [pc, #36]	; c102008 <uart0_init+0x5c>
 c101fe0:	e3a02022 	mov	r2, #34	; 0x22
 c101fe4:	e5832000 	str	r2, [r3]
	UCON0 =  0x5;
 c101fe8:	e59f301c 	ldr	r3, [pc, #28]	; c10200c <uart0_init+0x60>
 c101fec:	e3a02005 	mov	r2, #5
 c101ff0:	e5832000 	str	r2, [r3]
}
 c101ff4:	e24bd00c 	sub	sp, fp, #12
 c101ff8:	e89d6800 	ldm	sp, {fp, sp, lr}
 c101ffc:	e12fff1e 	bx	lr
 c102000:	01d00008 	.word	0x01d00008
 c102004:	01d0000c 	.word	0x01d0000c
 c102008:	01d00028 	.word	0x01d00028
 c10200c:	01d00004 	.word	0x01d00004

0c102010 <uart0_putchar>:

void uart0_putchar( char ch )
{
 c102010:	e1a0c00d 	mov	ip, sp
 c102014:	e92dd800 	push	{fp, ip, lr, pc}
 c102018:	e24cb004 	sub	fp, ip, #4
 c10201c:	e24dd008 	sub	sp, sp, #8
 c102020:	e1a03000 	mov	r3, r0
 c102024:	e54b300d 	strb	r3, [fp, #-13]
    while( UFSTAT0 & (1<<9) ); // mientras este lleno rx no puedo poner el char
 c102028:	e1a00000 	nop			; (mov r0, r0)
 c10202c:	e59f3024 	ldr	r3, [pc, #36]	; c102058 <uart0_putchar+0x48>
 c102030:	e5933000 	ldr	r3, [r3]
 c102034:	e2033c02 	and	r3, r3, #512	; 0x200
 c102038:	e3530000 	cmp	r3, #0
 c10203c:	1afffffa 	bne	c10202c <uart0_putchar+0x1c>
    UTXH0 = ch;
 c102040:	e59f3014 	ldr	r3, [pc, #20]	; c10205c <uart0_putchar+0x4c>
 c102044:	e55b200d 	ldrb	r2, [fp, #-13]
 c102048:	e5832000 	str	r2, [r3]
}        
 c10204c:	e24bd00c 	sub	sp, fp, #12
 c102050:	e89d6800 	ldm	sp, {fp, sp, lr}
 c102054:	e12fff1e 	bx	lr
 c102058:	01d00018 	.word	0x01d00018
 c10205c:	01d00020 	.word	0x01d00020

0c102060 <uart0_getchar>:

char uart0_getchar( void )
{
 c102060:	e1a0c00d 	mov	ip, sp
 c102064:	e92dd800 	push	{fp, ip, lr, pc}
 c102068:	e24cb004 	sub	fp, ip, #4
	while(!(UFSTAT0 & 15)); // mientras no introduzca algo el usuario me quedo en el bucle
 c10206c:	e1a00000 	nop			; (mov r0, r0)
 c102070:	e59f3028 	ldr	r3, [pc, #40]	; c1020a0 <uart0_getchar+0x40>
 c102074:	e5933000 	ldr	r3, [r3]
 c102078:	e203300f 	and	r3, r3, #15
 c10207c:	e3530000 	cmp	r3, #0
 c102080:	0afffffa 	beq	c102070 <uart0_getchar+0x10>
	return URXH0;
 c102084:	e59f3018 	ldr	r3, [pc, #24]	; c1020a4 <uart0_getchar+0x44>
 c102088:	e5933000 	ldr	r3, [r3]
 c10208c:	e20330ff 	and	r3, r3, #255	; 0xff
}
 c102090:	e1a00003 	mov	r0, r3
 c102094:	e24bd00c 	sub	sp, fp, #12
 c102098:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10209c:	e12fff1e 	bx	lr
 c1020a0:	01d00018 	.word	0x01d00018
 c1020a4:	01d00024 	.word	0x01d00024

0c1020a8 <uart0_puts>:

void uart0_puts( char *s )
{
 c1020a8:	e1a0c00d 	mov	ip, sp
 c1020ac:	e92dd800 	push	{fp, ip, lr, pc}
 c1020b0:	e24cb004 	sub	fp, ip, #4
 c1020b4:	e24dd008 	sub	sp, sp, #8
 c1020b8:	e50b0010 	str	r0, [fp, #-16]
	while(*s != '\0'){ // no llego al fin de línea
 c1020bc:	ea000006 	b	c1020dc <uart0_puts+0x34>
		uart0_putchar(*s); // meto el caracter
 c1020c0:	e51b3010 	ldr	r3, [fp, #-16]
 c1020c4:	e5d33000 	ldrb	r3, [r3]
 c1020c8:	e1a00003 	mov	r0, r3
 c1020cc:	ebffffcf 	bl	c102010 <uart0_putchar>
		s++; // aumento el puntero
 c1020d0:	e51b3010 	ldr	r3, [fp, #-16]
 c1020d4:	e2833001 	add	r3, r3, #1
 c1020d8:	e50b3010 	str	r3, [fp, #-16]
	return URXH0;
}

void uart0_puts( char *s )
{
	while(*s != '\0'){ // no llego al fin de línea
 c1020dc:	e51b3010 	ldr	r3, [fp, #-16]
 c1020e0:	e5d33000 	ldrb	r3, [r3]
 c1020e4:	e3530000 	cmp	r3, #0
 c1020e8:	1afffff4 	bne	c1020c0 <uart0_puts+0x18>
		uart0_putchar(*s); // meto el caracter
		s++; // aumento el puntero
	}
}
 c1020ec:	e24bd00c 	sub	sp, fp, #12
 c1020f0:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1020f4:	e12fff1e 	bx	lr

0c1020f8 <uart0_putint>:

void uart0_putint( int32 i )
{
 c1020f8:	e1a0c00d 	mov	ip, sp
 c1020fc:	e92dd800 	push	{fp, ip, lr, pc}
 c102100:	e24cb004 	sub	fp, ip, #4
 c102104:	e24dd018 	sub	sp, sp, #24
 c102108:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
	char buf[8 + 1];
	char *p = buf + 8;
 c10210c:	e24b301c 	sub	r3, fp, #28
 c102110:	e2833008 	add	r3, r3, #8
 c102114:	e50b3010 	str	r3, [fp, #-16]
	uint8 c = 0;
 c102118:	e3a03000 	mov	r3, #0
 c10211c:	e54b3012 	strb	r3, [fp, #-18]	; 0xffffffee
	uint8 neg = 0;
 c102120:	e3a03000 	mov	r3, #0
 c102124:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef

	if(i < 0){
 c102128:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c10212c:	e3530000 	cmp	r3, #0
 c102130:	aa000004 	bge	c102148 <uart0_putint+0x50>
		neg = 1;
 c102134:	e3a03001 	mov	r3, #1
 c102138:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
		i = -i;
 c10213c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c102140:	e2633000 	rsb	r3, r3, #0
 c102144:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
	}

	*p = '\0';
 c102148:	e51b3010 	ldr	r3, [fp, #-16]
 c10214c:	e3a02000 	mov	r2, #0
 c102150:	e5c32000 	strb	r2, [r3]
	do {
		c = i % 10; // cojo el resto
 c102154:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
 c102158:	e59f30a8 	ldr	r3, [pc, #168]	; c102208 <uart0_putint+0x110>
 c10215c:	e0c32391 	smull	r2, r3, r1, r3
 c102160:	e1a02143 	asr	r2, r3, #2
 c102164:	e1a03fc1 	asr	r3, r1, #31
 c102168:	e0632002 	rsb	r2, r3, r2
 c10216c:	e1a03002 	mov	r3, r2
 c102170:	e1a03103 	lsl	r3, r3, #2
 c102174:	e0833002 	add	r3, r3, r2
 c102178:	e1a03083 	lsl	r3, r3, #1
 c10217c:	e0632001 	rsb	r2, r3, r1
 c102180:	e1a03002 	mov	r3, r2
 c102184:	e54b3012 	strb	r3, [fp, #-18]	; 0xffffffee
		*--p = '0' + c; // lo sumo a la posicion que toca el array
 c102188:	e51b3010 	ldr	r3, [fp, #-16]
 c10218c:	e2433001 	sub	r3, r3, #1
 c102190:	e50b3010 	str	r3, [fp, #-16]
 c102194:	e55b3012 	ldrb	r3, [fp, #-18]	; 0xffffffee
 c102198:	e2833030 	add	r3, r3, #48	; 0x30
 c10219c:	e20320ff 	and	r2, r3, #255	; 0xff
 c1021a0:	e51b3010 	ldr	r3, [fp, #-16]
 c1021a4:	e5c32000 	strb	r2, [r3]
		i = i / 10; // divido entre 10
 c1021a8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c1021ac:	e59f2054 	ldr	r2, [pc, #84]	; c102208 <uart0_putint+0x110>
 c1021b0:	e0c21293 	smull	r1, r2, r3, r2
 c1021b4:	e1a02142 	asr	r2, r2, #2
 c1021b8:	e1a03fc3 	asr	r3, r3, #31
 c1021bc:	e0633002 	rsb	r3, r3, r2
 c1021c0:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
	} while (i);
 c1021c4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c1021c8:	e3530000 	cmp	r3, #0
 c1021cc:	1affffe0 	bne	c102154 <uart0_putint+0x5c>

	if(neg == 1){
 c1021d0:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c1021d4:	e3530001 	cmp	r3, #1
 c1021d8:	1a000005 	bne	c1021f4 <uart0_putint+0xfc>
		*--p = '-';
 c1021dc:	e51b3010 	ldr	r3, [fp, #-16]
 c1021e0:	e2433001 	sub	r3, r3, #1
 c1021e4:	e50b3010 	str	r3, [fp, #-16]
 c1021e8:	e51b3010 	ldr	r3, [fp, #-16]
 c1021ec:	e3a0202d 	mov	r2, #45	; 0x2d
 c1021f0:	e5c32000 	strb	r2, [r3]
	}

	uart0_puts(p);
 c1021f4:	e51b0010 	ldr	r0, [fp, #-16]
 c1021f8:	ebffffaa 	bl	c1020a8 <uart0_puts>
}
 c1021fc:	e24bd00c 	sub	sp, fp, #12
 c102200:	e89d6800 	ldm	sp, {fp, sp, lr}
 c102204:	e12fff1e 	bx	lr
 c102208:	66666667 	.word	0x66666667

0c10220c <uart0_puthex>:

void uart0_puthex( uint32 i )
{
 c10220c:	e1a0c00d 	mov	ip, sp
 c102210:	e92dd800 	push	{fp, ip, lr, pc}
 c102214:	e24cb004 	sub	fp, ip, #4
 c102218:	e24dd018 	sub	sp, sp, #24
 c10221c:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
    char buf[8 + 1];
    char *p = buf + 8;
 c102220:	e24b301c 	sub	r3, fp, #28
 c102224:	e2833008 	add	r3, r3, #8
 c102228:	e50b3010 	str	r3, [fp, #-16]
    uint8 c;

    *p = '\0';
 c10222c:	e51b3010 	ldr	r3, [fp, #-16]
 c102230:	e3a02000 	mov	r2, #0
 c102234:	e5c32000 	strb	r2, [r3]

    do {
        c = i & 0xf; // resto de la division
 c102238:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c10223c:	e20330ff 	and	r3, r3, #255	; 0xff
 c102240:	e203300f 	and	r3, r3, #15
 c102244:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
        if( c < 10 )
 c102248:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c10224c:	e3530009 	cmp	r3, #9
 c102250:	8a000008 	bhi	c102278 <uart0_puthex+0x6c>
            *--p = '0' + c; // si esta en letra
 c102254:	e51b3010 	ldr	r3, [fp, #-16]
 c102258:	e2433001 	sub	r3, r3, #1
 c10225c:	e50b3010 	str	r3, [fp, #-16]
 c102260:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c102264:	e2833030 	add	r3, r3, #48	; 0x30
 c102268:	e20320ff 	and	r2, r3, #255	; 0xff
 c10226c:	e51b3010 	ldr	r3, [fp, #-16]
 c102270:	e5c32000 	strb	r2, [r3]
 c102274:	ea000007 	b	c102298 <uart0_puthex+0x8c>
        else
            *--p = 'a' + c - 10; // si esta en numero
 c102278:	e51b3010 	ldr	r3, [fp, #-16]
 c10227c:	e2433001 	sub	r3, r3, #1
 c102280:	e50b3010 	str	r3, [fp, #-16]
 c102284:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c102288:	e2833057 	add	r3, r3, #87	; 0x57
 c10228c:	e20320ff 	and	r2, r3, #255	; 0xff
 c102290:	e51b3010 	ldr	r3, [fp, #-16]
 c102294:	e5c32000 	strb	r2, [r3]
        i = i >> 4; // divido entre 16
 c102298:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c10229c:	e1a03223 	lsr	r3, r3, #4
 c1022a0:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
    } while( i );
 c1022a4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c1022a8:	e3530000 	cmp	r3, #0
 c1022ac:	1affffe1 	bne	c102238 <uart0_puthex+0x2c>

    uart0_puts( p );
 c1022b0:	e51b0010 	ldr	r0, [fp, #-16]
 c1022b4:	ebffff7b 	bl	c1020a8 <uart0_puts>
}
 c1022b8:	e24bd00c 	sub	sp, fp, #12
 c1022bc:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1022c0:	e12fff1e 	bx	lr

0c1022c4 <uart0_gets>:

void uart0_gets( char *s )
{
 c1022c4:	e1a0c00d 	mov	ip, sp
 c1022c8:	e92dd800 	push	{fp, ip, lr, pc}
 c1022cc:	e24cb004 	sub	fp, ip, #4
 c1022d0:	e24dd010 	sub	sp, sp, #16
 c1022d4:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
	char caracter = uart0_getchar();
 c1022d8:	ebffff60 	bl	c102060 <uart0_getchar>
 c1022dc:	e1a03000 	mov	r3, r0
 c1022e0:	e54b300d 	strb	r3, [fp, #-13]

	while(caracter != '\n'){ // mientras no llegue al final
 c1022e4:	ea000008 	b	c10230c <uart0_gets+0x48>
		*s = caracter;
 c1022e8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c1022ec:	e55b200d 	ldrb	r2, [fp, #-13]
 c1022f0:	e5c32000 	strb	r2, [r3]
		s++;
 c1022f4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c1022f8:	e2833001 	add	r3, r3, #1
 c1022fc:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
		caracter = uart0_getchar();
 c102300:	ebffff56 	bl	c102060 <uart0_getchar>
 c102304:	e1a03000 	mov	r3, r0
 c102308:	e54b300d 	strb	r3, [fp, #-13]

void uart0_gets( char *s )
{
	char caracter = uart0_getchar();

	while(caracter != '\n'){ // mientras no llegue al final
 c10230c:	e55b300d 	ldrb	r3, [fp, #-13]
 c102310:	e353000a 	cmp	r3, #10
 c102314:	1afffff3 	bne	c1022e8 <uart0_gets+0x24>
		*s = caracter;
		s++;
		caracter = uart0_getchar();
	}
	*s = '\0';
 c102318:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c10231c:	e3a02000 	mov	r2, #0
 c102320:	e5c32000 	strb	r2, [r3]
}
 c102324:	e24bd00c 	sub	sp, fp, #12
 c102328:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10232c:	e12fff1e 	bx	lr

0c102330 <uart0_getint>:

int32 uart0_getint( void )
{
 c102330:	e1a0c00d 	mov	ip, sp
 c102334:	e92dd800 	push	{fp, ip, lr, pc}
 c102338:	e24cb004 	sub	fp, ip, #4
 c10233c:	e24dd090 	sub	sp, sp, #144	; 0x90
	int32 dev = 0;
 c102340:	e3a03000 	mov	r3, #0
 c102344:	e50b3010 	str	r3, [fp, #-16]
	int8 negativo = 1;
 c102348:	e3a03001 	mov	r3, #1
 c10234c:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
	char n[128], *p;
	uart0_gets(n);
 c102350:	e24b3098 	sub	r3, fp, #152	; 0x98
 c102354:	e1a00003 	mov	r0, r3
 c102358:	ebffffd9 	bl	c1022c4 <uart0_gets>
	p = n;
 c10235c:	e24b3098 	sub	r3, fp, #152	; 0x98
 c102360:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
	if(*p == '-'){
 c102364:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c102368:	e5d33000 	ldrb	r3, [r3]
 c10236c:	e353002d 	cmp	r3, #45	; 0x2d
 c102370:	1a00001a 	bne	c1023e0 <uart0_getint+0xb0>
		negativo = 0;
 c102374:	e3a03000 	mov	r3, #0
 c102378:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
		p++;
 c10237c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c102380:	e2833001 	add	r3, r3, #1
 c102384:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
	}
	while(*p != '\0'){
 c102388:	ea000015 	b	c1023e4 <uart0_getint+0xb4>
		dev = dev + *p - '0';
 c10238c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c102390:	e5d33000 	ldrb	r3, [r3]
 c102394:	e1a02003 	mov	r2, r3
 c102398:	e51b3010 	ldr	r3, [fp, #-16]
 c10239c:	e0823003 	add	r3, r2, r3
 c1023a0:	e2433030 	sub	r3, r3, #48	; 0x30
 c1023a4:	e50b3010 	str	r3, [fp, #-16]
		if(*p != '\0'){ // no llego a final de linea
 c1023a8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c1023ac:	e5d33000 	ldrb	r3, [r3]
 c1023b0:	e3530000 	cmp	r3, #0
 c1023b4:	0a000005 	beq	c1023d0 <uart0_getint+0xa0>
			dev *= 10;
 c1023b8:	e51b2010 	ldr	r2, [fp, #-16]
 c1023bc:	e1a03002 	mov	r3, r2
 c1023c0:	e1a03103 	lsl	r3, r3, #2
 c1023c4:	e0833002 	add	r3, r3, r2
 c1023c8:	e1a03083 	lsl	r3, r3, #1
 c1023cc:	e50b3010 	str	r3, [fp, #-16]
		}
		++p;
 c1023d0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c1023d4:	e2833001 	add	r3, r3, #1
 c1023d8:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
 c1023dc:	ea000000 	b	c1023e4 <uart0_getint+0xb4>
	p = n;
	if(*p == '-'){
		negativo = 0;
		p++;
	}
	while(*p != '\0'){
 c1023e0:	e1a00000 	nop			; (mov r0, r0)
 c1023e4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c1023e8:	e5d33000 	ldrb	r3, [r3]
 c1023ec:	e3530000 	cmp	r3, #0
 c1023f0:	1affffe5 	bne	c10238c <uart0_getint+0x5c>
		if(*p != '\0'){ // no llego a final de linea
			dev *= 10;
		}
		++p;
	}
	if(negativo == 0){
 c1023f4:	e15b31d1 	ldrsb	r3, [fp, #-17]	; 0xffffffef
 c1023f8:	e3530000 	cmp	r3, #0
 c1023fc:	1a000002 	bne	c10240c <uart0_getint+0xdc>
		dev *= -1;
 c102400:	e51b3010 	ldr	r3, [fp, #-16]
 c102404:	e2633000 	rsb	r3, r3, #0
 c102408:	e50b3010 	str	r3, [fp, #-16]
	}
	return dev;
 c10240c:	e51b3010 	ldr	r3, [fp, #-16]
}
 c102410:	e1a00003 	mov	r0, r3
 c102414:	e24bd00c 	sub	sp, fp, #12
 c102418:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10241c:	e12fff1e 	bx	lr

0c102420 <uart0_gethex>:

uint32 uart0_gethex( void )
{
 c102420:	e1a0c00d 	mov	ip, sp
 c102424:	e92dd800 	push	{fp, ip, lr, pc}
 c102428:	e24cb004 	sub	fp, ip, #4
 c10242c:	e24dd090 	sub	sp, sp, #144	; 0x90
	char buf[128];
	char *p = buf;
 c102430:	e24b3098 	sub	r3, fp, #152	; 0x98
 c102434:	e50b3010 	str	r3, [fp, #-16]
	uint32 c;
	uint32 aux = 0;
 c102438:	e3a03000 	mov	r3, #0
 c10243c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8

	uart0_gets(p);
 c102440:	e51b0010 	ldr	r0, [fp, #-16]
 c102444:	ebffff9e 	bl	c1022c4 <uart0_gets>
	do {
		if (*p <= '9')
 c102448:	e51b3010 	ldr	r3, [fp, #-16]
 c10244c:	e5d33000 	ldrb	r3, [r3]
 c102450:	e3530039 	cmp	r3, #57	; 0x39
 c102454:	8a000004 	bhi	c10246c <uart0_gethex+0x4c>
			c = *p - '0';
 c102458:	e51b3010 	ldr	r3, [fp, #-16]
 c10245c:	e5d33000 	ldrb	r3, [r3]
 c102460:	e2433030 	sub	r3, r3, #48	; 0x30
 c102464:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
 c102468:	ea000020 	b	c1024f0 <uart0_gethex+0xd0>
		else if((*p == 'A' || *p == 'B' || *p == 'C' || *p == 'D' || *p == 'E' || *p == 'F'))
 c10246c:	e51b3010 	ldr	r3, [fp, #-16]
 c102470:	e5d33000 	ldrb	r3, [r3]
 c102474:	e3530041 	cmp	r3, #65	; 0x41
 c102478:	0a000013 	beq	c1024cc <uart0_gethex+0xac>
 c10247c:	e51b3010 	ldr	r3, [fp, #-16]
 c102480:	e5d33000 	ldrb	r3, [r3]
 c102484:	e3530042 	cmp	r3, #66	; 0x42
 c102488:	0a00000f 	beq	c1024cc <uart0_gethex+0xac>
 c10248c:	e51b3010 	ldr	r3, [fp, #-16]
 c102490:	e5d33000 	ldrb	r3, [r3]
 c102494:	e3530043 	cmp	r3, #67	; 0x43
 c102498:	0a00000b 	beq	c1024cc <uart0_gethex+0xac>
 c10249c:	e51b3010 	ldr	r3, [fp, #-16]
 c1024a0:	e5d33000 	ldrb	r3, [r3]
 c1024a4:	e3530044 	cmp	r3, #68	; 0x44
 c1024a8:	0a000007 	beq	c1024cc <uart0_gethex+0xac>
 c1024ac:	e51b3010 	ldr	r3, [fp, #-16]
 c1024b0:	e5d33000 	ldrb	r3, [r3]
 c1024b4:	e3530045 	cmp	r3, #69	; 0x45
 c1024b8:	0a000003 	beq	c1024cc <uart0_gethex+0xac>
 c1024bc:	e51b3010 	ldr	r3, [fp, #-16]
 c1024c0:	e5d33000 	ldrb	r3, [r3]
 c1024c4:	e3530046 	cmp	r3, #70	; 0x46
 c1024c8:	1a000004 	bne	c1024e0 <uart0_gethex+0xc0>
			c = *p - 'A' + 10;
 c1024cc:	e51b3010 	ldr	r3, [fp, #-16]
 c1024d0:	e5d33000 	ldrb	r3, [r3]
 c1024d4:	e2433037 	sub	r3, r3, #55	; 0x37
 c1024d8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
 c1024dc:	ea000003 	b	c1024f0 <uart0_gethex+0xd0>
		else
			c = *p - 'a' + 10;
 c1024e0:	e51b3010 	ldr	r3, [fp, #-16]
 c1024e4:	e5d33000 	ldrb	r3, [r3]
 c1024e8:	e2433057 	sub	r3, r3, #87	; 0x57
 c1024ec:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

		aux += c;
 c1024f0:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
 c1024f4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c1024f8:	e0823003 	add	r3, r2, r3
 c1024fc:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
		++p;
 c102500:	e51b3010 	ldr	r3, [fp, #-16]
 c102504:	e2833001 	add	r3, r3, #1
 c102508:	e50b3010 	str	r3, [fp, #-16]
		if (*p != '\0') {
 c10250c:	e51b3010 	ldr	r3, [fp, #-16]
 c102510:	e5d33000 	ldrb	r3, [r3]
 c102514:	e3530000 	cmp	r3, #0
 c102518:	0a000002 	beq	c102528 <uart0_gethex+0x108>
			aux = aux << 4;
 c10251c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c102520:	e1a03203 	lsl	r3, r3, #4
 c102524:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
		}
	} while (*p != '\0');
 c102528:	e51b3010 	ldr	r3, [fp, #-16]
 c10252c:	e5d33000 	ldrb	r3, [r3]
 c102530:	e3530000 	cmp	r3, #0
 c102534:	1affffc3 	bne	c102448 <uart0_gethex+0x28>
	return aux;
 c102538:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
}
 c10253c:	e1a00003 	mov	r0, r3
 c102540:	e24bd00c 	sub	sp, fp, #12
 c102544:	e89d6800 	ldm	sp, {fp, sp, lr}
 c102548:	e12fff1e 	bx	lr
